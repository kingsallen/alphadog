/**
 * This class is generated by jOOQ
 */
package com.moseeker.common.cache.db.configdb.tables;


import com.moseeker.common.cache.db.configdb.Configdb;
import com.moseeker.common.cache.db.configdb.Keys;
import com.moseeker.common.cache.db.configdb.tables.records.AdminnotificationEventsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 管理员通知事件列表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminnotificationEvents extends TableImpl<AdminnotificationEventsRecord> {

	private static final long serialVersionUID = -532717515;

	/**
	 * The reference instance of <code>configDB.adminnotification_events</code>
	 */
	public static final AdminnotificationEvents ADMINNOTIFICATION_EVENTS = new AdminnotificationEvents();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AdminnotificationEventsRecord> getRecordType() {
		return AdminnotificationEventsRecord.class;
	}

	/**
	 * The column <code>configDB.adminnotification_events.id</code>.
	 */
	public final TableField<AdminnotificationEventsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>configDB.adminnotification_events.project_appid</code>. 项目appid
	 */
	public final TableField<AdminnotificationEventsRecord, String> PROJECT_APPID = createField("project_appid", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "项目appid");

	/**
	 * The column <code>configDB.adminnotification_events.event_key</code>. 事件标识符，大写英文
	 */
	public final TableField<AdminnotificationEventsRecord, String> EVENT_KEY = createField("event_key", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "事件标识符，大写英文");

	/**
	 * The column <code>configDB.adminnotification_events.event_name</code>. 事件名称
	 */
	public final TableField<AdminnotificationEventsRecord, String> EVENT_NAME = createField("event_name", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "事件名称");

	/**
	 * The column <code>configDB.adminnotification_events.event_desc</code>. 事件描述
	 */
	public final TableField<AdminnotificationEventsRecord, String> EVENT_DESC = createField("event_desc", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false), this, "事件描述");

	/**
	 * The column <code>configDB.adminnotification_events.threshold_value</code>. 触发几次后通知
	 */
	public final TableField<AdminnotificationEventsRecord, Integer> THRESHOLD_VALUE = createField("threshold_value", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "触发几次后通知");

	/**
	 * The column <code>configDB.adminnotification_events.threshold_interval</code>. 单位秒，0表示不限制，  thresholdinterval和thresholdvalue搭配使用，表达 每分钟超过5次 报警。
	 */
	public final TableField<AdminnotificationEventsRecord, Integer> THRESHOLD_INTERVAL = createField("threshold_interval", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "单位秒，0表示不限制，  thresholdinterval和thresholdvalue搭配使用，表达 每分钟超过5次 报警。");

	/**
	 * The column <code>configDB.adminnotification_events.enable_notifyby_email</code>. 是否email通知， 1是 0否
	 */
	public final TableField<AdminnotificationEventsRecord, Byte> ENABLE_NOTIFYBY_EMAIL = createField("enable_notifyby_email", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "是否email通知， 1是 0否");

	/**
	 * The column <code>configDB.adminnotification_events.enable_notifyby_sms</code>. 是否短信通知， 1是 0否
	 */
	public final TableField<AdminnotificationEventsRecord, Byte> ENABLE_NOTIFYBY_SMS = createField("enable_notifyby_sms", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "是否短信通知， 1是 0否");

	/**
	 * The column <code>configDB.adminnotification_events.enable_notifyby_wechattemplatemessage</code>. 是否微信模板消息通知， 1是 0否
	 */
	public final TableField<AdminnotificationEventsRecord, Byte> ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE = createField("enable_notifyby_wechattemplatemessage", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "是否微信模板消息通知， 1是 0否");

	/**
	 * The column <code>configDB.adminnotification_events.groupid</code>. 发送给哪个组
	 */
	public final TableField<AdminnotificationEventsRecord, Integer> GROUPID = createField("groupid", org.jooq.impl.SQLDataType.INTEGER, this, "发送给哪个组");

	/**
	 * The column <code>configDB.adminnotification_events.create_time</code>.
	 */
	public final TableField<AdminnotificationEventsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>configDB.adminnotification_events</code> table reference
	 */
	public AdminnotificationEvents() {
		this("adminnotification_events", null);
	}

	/**
	 * Create an aliased <code>configDB.adminnotification_events</code> table reference
	 */
	public AdminnotificationEvents(String alias) {
		this(alias, ADMINNOTIFICATION_EVENTS);
	}

	private AdminnotificationEvents(String alias, Table<AdminnotificationEventsRecord> aliased) {
		this(alias, aliased, null);
	}

	private AdminnotificationEvents(String alias, Table<AdminnotificationEventsRecord> aliased, Field<?>[] parameters) {
		super(alias, Configdb.CONFIGDB, aliased, parameters, "管理员通知事件列表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AdminnotificationEventsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ADMINNOTIFICATION_EVENTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AdminnotificationEventsRecord> getPrimaryKey() {
		return Keys.KEY_ADMINNOTIFICATION_EVENTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AdminnotificationEventsRecord>> getKeys() {
		return Arrays.<UniqueKey<AdminnotificationEventsRecord>>asList(Keys.KEY_ADMINNOTIFICATION_EVENTS_PRIMARY, Keys.KEY_ADMINNOTIFICATION_EVENTS_EVENT_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AdminnotificationEvents as(String alias) {
		return new AdminnotificationEvents(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AdminnotificationEvents rename(String name) {
		return new AdminnotificationEvents(name, null);
	}
}
