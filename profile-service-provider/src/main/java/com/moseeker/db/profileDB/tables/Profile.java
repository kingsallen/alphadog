/**
 * This class is generated by jOOQ
 */
package com.moseeker.db.profileDB.tables;


import com.moseeker.db.profileDB.Keys;
import com.moseeker.db.profileDB.Profiledb;
import com.moseeker.db.profileDB.tables.records.ProfileRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 用户profile表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profile extends TableImpl<ProfileRecord> {

	private static final long serialVersionUID = -656440063;

	/**
	 * The reference instance of <code>profileDB.profile</code>
	 */
	public static final Profile PROFILE = new Profile();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProfileRecord> getRecordType() {
		return ProfileRecord.class;
	}

	/**
	 * The column <code>profileDB.profile.id</code>. 主key
	 */
	public final TableField<ProfileRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "主key");

	/**
	 * The column <code>profileDB.profile.uuid</code>. profile的uuid标识
	 */
	public final TableField<ProfileRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false).defaulted(true), this, "profile的uuid标识");

	/**
	 * The column <code>profileDB.profile.lang</code>. profile语言 1:chinese 2:english
	 */
	public final TableField<ProfileRecord, Byte> LANG = createField("lang", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "profile语言 1:chinese 2:english");

	/**
	 * The column <code>profileDB.profile.source</code>. Profile的创建来源, 1:Moseeker手机 2:PC Profile 3:Email 4:导入
	 */
	public final TableField<ProfileRecord, Byte> SOURCE = createField("source", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "Profile的创建来源, 1:Moseeker手机 2:PC Profile 3:Email 4:导入");

	/**
	 * The column <code>profileDB.profile.completeness</code>. Profile完整度
	 */
	public final TableField<ProfileRecord, Byte> COMPLETENESS = createField("completeness", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "Profile完整度");

	/**
	 * The column <code>profileDB.profile.user_id</code>. 用户ID
	 */
	public final TableField<ProfileRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "用户ID");

	/**
	 * The column <code>profileDB.profile.create_time</code>. 创建时间
	 */
	public final TableField<ProfileRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "创建时间");

	/**
	 * The column <code>profileDB.profile.update_time</code>. 更新时间
	 */
	public final TableField<ProfileRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "更新时间");

	/**
	 * Create a <code>profileDB.profile</code> table reference
	 */
	public Profile() {
		this("profile", null);
	}

	/**
	 * Create an aliased <code>profileDB.profile</code> table reference
	 */
	public Profile(String alias) {
		this(alias, PROFILE);
	}

	private Profile(String alias, Table<ProfileRecord> aliased) {
		this(alias, aliased, null);
	}

	private Profile(String alias, Table<ProfileRecord> aliased, Field<?>[] parameters) {
		super(alias, Profiledb.PROFILEDB, aliased, parameters, "用户profile表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ProfileRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_PROFILE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProfileRecord> getPrimaryKey() {
		return Keys.KEY_PROFILE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProfileRecord>> getKeys() {
		return Arrays.<UniqueKey<ProfileRecord>>asList(Keys.KEY_PROFILE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Profile as(String alias) {
		return new Profile(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Profile rename(String name) {
		return new Profile(name, null);
	}
}
