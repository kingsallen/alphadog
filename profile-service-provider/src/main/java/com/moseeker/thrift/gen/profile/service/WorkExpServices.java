/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-29")
public class WorkExpServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.WorkExpPagination getWorkExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException;

    public int postWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException;

    public int putWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException;

    public int delWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException;

    public int postWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException;

    public int putWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException;

    public int delWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWorkExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorkExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      send_getWorkExps(query, workExp);
      return recv_getWorkExps();
    }

    public void send_getWorkExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      getWorkExps_args args = new getWorkExps_args();
      args.setQuery(query);
      args.setWorkExp(workExp);
      sendBase("getWorkExps", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> recv_getWorkExps() throws org.apache.thrift.TException
    {
      getWorkExps_result result = new getWorkExps_result();
      receiveBase(result, "getWorkExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkExps failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExpPagination getWorkExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      send_getWorkExpPagination(query, workExp);
      return recv_getWorkExpPagination();
    }

    public void send_getWorkExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      getWorkExpPagination_args args = new getWorkExpPagination_args();
      args.setQuery(query);
      args.setWorkExp(workExp);
      sendBase("getWorkExpPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExpPagination recv_getWorkExpPagination() throws org.apache.thrift.TException
    {
      getWorkExpPagination_result result = new getWorkExpPagination_result();
      receiveBase(result, "getWorkExpPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkExpPagination failed: unknown result");
    }

    public int postWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      send_postWorkExps(workExps);
      return recv_postWorkExps();
    }

    public void send_postWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      postWorkExps_args args = new postWorkExps_args();
      args.setWorkExps(workExps);
      sendBase("postWorkExps", args);
    }

    public int recv_postWorkExps() throws org.apache.thrift.TException
    {
      postWorkExps_result result = new postWorkExps_result();
      receiveBase(result, "postWorkExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postWorkExps failed: unknown result");
    }

    public int putWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      send_putWorkExps(workExps);
      return recv_putWorkExps();
    }

    public void send_putWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      putWorkExps_args args = new putWorkExps_args();
      args.setWorkExps(workExps);
      sendBase("putWorkExps", args);
    }

    public int recv_putWorkExps() throws org.apache.thrift.TException
    {
      putWorkExps_result result = new putWorkExps_result();
      receiveBase(result, "putWorkExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putWorkExps failed: unknown result");
    }

    public int delWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      send_delWorkExps(workExps);
      return recv_delWorkExps();
    }

    public void send_delWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) throws org.apache.thrift.TException
    {
      delWorkExps_args args = new delWorkExps_args();
      args.setWorkExps(workExps);
      sendBase("delWorkExps", args);
    }

    public int recv_delWorkExps() throws org.apache.thrift.TException
    {
      delWorkExps_result result = new delWorkExps_result();
      receiveBase(result, "delWorkExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delWorkExps failed: unknown result");
    }

    public int postWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      send_postWorkExp(workExp);
      return recv_postWorkExp();
    }

    public void send_postWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      postWorkExp_args args = new postWorkExp_args();
      args.setWorkExp(workExp);
      sendBase("postWorkExp", args);
    }

    public int recv_postWorkExp() throws org.apache.thrift.TException
    {
      postWorkExp_result result = new postWorkExp_result();
      receiveBase(result, "postWorkExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postWorkExp failed: unknown result");
    }

    public int putWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      send_putWorkExp(workExp);
      return recv_putWorkExp();
    }

    public void send_putWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      putWorkExp_args args = new putWorkExp_args();
      args.setWorkExp(workExp);
      sendBase("putWorkExp", args);
    }

    public int recv_putWorkExp() throws org.apache.thrift.TException
    {
      putWorkExp_result result = new putWorkExp_result();
      receiveBase(result, "putWorkExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putWorkExp failed: unknown result");
    }

    public int delWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      send_delWorkExp(workExp);
      return recv_delWorkExp();
    }

    public void send_delWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) throws org.apache.thrift.TException
    {
      delWorkExp_args args = new delWorkExp_args();
      args.setWorkExp(workExp);
      sendBase("delWorkExp", args);
    }

    public int recv_delWorkExp() throws org.apache.thrift.TException
    {
      delWorkExp_result result = new delWorkExp_result();
      receiveBase(result, "delWorkExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delWorkExp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWorkExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkExps_call method_call = new getWorkExps_call(query, workExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.WorkExp workExp;
      public getWorkExps_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.workExp = workExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkExps_args args = new getWorkExps_args();
        args.setQuery(query);
        args.setWorkExp(workExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkExps();
      }
    }

    public void getWorkExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkExpPagination_call method_call = new getWorkExpPagination_call(query, workExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkExpPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.WorkExp workExp;
      public getWorkExpPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.workExp = workExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkExpPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkExpPagination_args args = new getWorkExpPagination_args();
        args.setQuery(query);
        args.setWorkExp(workExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.WorkExpPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkExpPagination();
      }
    }

    public void postWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postWorkExps_call method_call = new postWorkExps_call(workExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postWorkExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps;
      public postWorkExps_call(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExps = workExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postWorkExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postWorkExps_args args = new postWorkExps_args();
        args.setWorkExps(workExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postWorkExps();
      }
    }

    public void putWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putWorkExps_call method_call = new putWorkExps_call(workExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putWorkExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps;
      public putWorkExps_call(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExps = workExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putWorkExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putWorkExps_args args = new putWorkExps_args();
        args.setWorkExps(workExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putWorkExps();
      }
    }

    public void delWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delWorkExps_call method_call = new delWorkExps_call(workExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delWorkExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps;
      public delWorkExps_call(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExps = workExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delWorkExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delWorkExps_args args = new delWorkExps_args();
        args.setWorkExps(workExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delWorkExps();
      }
    }

    public void postWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postWorkExp_call method_call = new postWorkExp_call(workExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postWorkExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.WorkExp workExp;
      public postWorkExp_call(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExp = workExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postWorkExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postWorkExp_args args = new postWorkExp_args();
        args.setWorkExp(workExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postWorkExp();
      }
    }

    public void putWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putWorkExp_call method_call = new putWorkExp_call(workExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putWorkExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.WorkExp workExp;
      public putWorkExp_call(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExp = workExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putWorkExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putWorkExp_args args = new putWorkExp_args();
        args.setWorkExp(workExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putWorkExp();
      }
    }

    public void delWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delWorkExp_call method_call = new delWorkExp_call(workExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delWorkExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.WorkExp workExp;
      public delWorkExp_call(com.moseeker.thrift.gen.profile.struct.WorkExp workExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workExp = workExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delWorkExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delWorkExp_args args = new delWorkExp_args();
        args.setWorkExp(workExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delWorkExp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWorkExps", new getWorkExps());
      processMap.put("getWorkExpPagination", new getWorkExpPagination());
      processMap.put("postWorkExps", new postWorkExps());
      processMap.put("putWorkExps", new putWorkExps());
      processMap.put("delWorkExps", new delWorkExps());
      processMap.put("postWorkExp", new postWorkExp());
      processMap.put("putWorkExp", new putWorkExp());
      processMap.put("delWorkExp", new delWorkExp());
      return processMap;
    }

    public static class getWorkExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkExps_args> {
      public getWorkExps() {
        super("getWorkExps");
      }

      public getWorkExps_args getEmptyArgsInstance() {
        return new getWorkExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkExps_result getResult(I iface, getWorkExps_args args) throws org.apache.thrift.TException {
        getWorkExps_result result = new getWorkExps_result();
        result.success = iface.getWorkExps(args.query, args.workExp);
        return result;
      }
    }

    public static class getWorkExpPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkExpPagination_args> {
      public getWorkExpPagination() {
        super("getWorkExpPagination");
      }

      public getWorkExpPagination_args getEmptyArgsInstance() {
        return new getWorkExpPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkExpPagination_result getResult(I iface, getWorkExpPagination_args args) throws org.apache.thrift.TException {
        getWorkExpPagination_result result = new getWorkExpPagination_result();
        result.success = iface.getWorkExpPagination(args.query, args.workExp);
        return result;
      }
    }

    public static class postWorkExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postWorkExps_args> {
      public postWorkExps() {
        super("postWorkExps");
      }

      public postWorkExps_args getEmptyArgsInstance() {
        return new postWorkExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postWorkExps_result getResult(I iface, postWorkExps_args args) throws org.apache.thrift.TException {
        postWorkExps_result result = new postWorkExps_result();
        result.success = iface.postWorkExps(args.workExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putWorkExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putWorkExps_args> {
      public putWorkExps() {
        super("putWorkExps");
      }

      public putWorkExps_args getEmptyArgsInstance() {
        return new putWorkExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putWorkExps_result getResult(I iface, putWorkExps_args args) throws org.apache.thrift.TException {
        putWorkExps_result result = new putWorkExps_result();
        result.success = iface.putWorkExps(args.workExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delWorkExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delWorkExps_args> {
      public delWorkExps() {
        super("delWorkExps");
      }

      public delWorkExps_args getEmptyArgsInstance() {
        return new delWorkExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delWorkExps_result getResult(I iface, delWorkExps_args args) throws org.apache.thrift.TException {
        delWorkExps_result result = new delWorkExps_result();
        result.success = iface.delWorkExps(args.workExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postWorkExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postWorkExp_args> {
      public postWorkExp() {
        super("postWorkExp");
      }

      public postWorkExp_args getEmptyArgsInstance() {
        return new postWorkExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postWorkExp_result getResult(I iface, postWorkExp_args args) throws org.apache.thrift.TException {
        postWorkExp_result result = new postWorkExp_result();
        result.success = iface.postWorkExp(args.workExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putWorkExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putWorkExp_args> {
      public putWorkExp() {
        super("putWorkExp");
      }

      public putWorkExp_args getEmptyArgsInstance() {
        return new putWorkExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putWorkExp_result getResult(I iface, putWorkExp_args args) throws org.apache.thrift.TException {
        putWorkExp_result result = new putWorkExp_result();
        result.success = iface.putWorkExp(args.workExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delWorkExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delWorkExp_args> {
      public delWorkExp() {
        super("delWorkExp");
      }

      public delWorkExp_args getEmptyArgsInstance() {
        return new delWorkExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delWorkExp_result getResult(I iface, delWorkExp_args args) throws org.apache.thrift.TException {
        delWorkExp_result result = new delWorkExp_result();
        result.success = iface.delWorkExp(args.workExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWorkExps", new getWorkExps());
      processMap.put("getWorkExpPagination", new getWorkExpPagination());
      processMap.put("postWorkExps", new postWorkExps());
      processMap.put("putWorkExps", new putWorkExps());
      processMap.put("delWorkExps", new delWorkExps());
      processMap.put("postWorkExp", new postWorkExp());
      processMap.put("putWorkExp", new putWorkExp());
      processMap.put("delWorkExp", new delWorkExp());
      return processMap;
    }

    public static class getWorkExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkExps_args, List<com.moseeker.thrift.gen.profile.struct.WorkExp>> {
      public getWorkExps() {
        super("getWorkExps");
      }

      public getWorkExps_args getEmptyArgsInstance() {
        return new getWorkExps_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.WorkExp>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.WorkExp>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.WorkExp> o) {
            getWorkExps_result result = new getWorkExps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkExps_result result = new getWorkExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkExps_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.WorkExp>> resultHandler) throws TException {
        iface.getWorkExps(args.query, args.workExp,resultHandler);
      }
    }

    public static class getWorkExpPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkExpPagination_args, com.moseeker.thrift.gen.profile.struct.WorkExpPagination> {
      public getWorkExpPagination() {
        super("getWorkExpPagination");
      }

      public getWorkExpPagination_args getEmptyArgsInstance() {
        return new getWorkExpPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.WorkExpPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.WorkExpPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.WorkExpPagination o) {
            getWorkExpPagination_result result = new getWorkExpPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkExpPagination_result result = new getWorkExpPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkExpPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.WorkExpPagination> resultHandler) throws TException {
        iface.getWorkExpPagination(args.query, args.workExp,resultHandler);
      }
    }

    public static class postWorkExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postWorkExps_args, Integer> {
      public postWorkExps() {
        super("postWorkExps");
      }

      public postWorkExps_args getEmptyArgsInstance() {
        return new postWorkExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postWorkExps_result result = new postWorkExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postWorkExps_result result = new postWorkExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postWorkExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postWorkExps(args.workExps,resultHandler);
      }
    }

    public static class putWorkExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putWorkExps_args, Integer> {
      public putWorkExps() {
        super("putWorkExps");
      }

      public putWorkExps_args getEmptyArgsInstance() {
        return new putWorkExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putWorkExps_result result = new putWorkExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putWorkExps_result result = new putWorkExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putWorkExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putWorkExps(args.workExps,resultHandler);
      }
    }

    public static class delWorkExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delWorkExps_args, Integer> {
      public delWorkExps() {
        super("delWorkExps");
      }

      public delWorkExps_args getEmptyArgsInstance() {
        return new delWorkExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delWorkExps_result result = new delWorkExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delWorkExps_result result = new delWorkExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delWorkExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delWorkExps(args.workExps,resultHandler);
      }
    }

    public static class postWorkExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postWorkExp_args, Integer> {
      public postWorkExp() {
        super("postWorkExp");
      }

      public postWorkExp_args getEmptyArgsInstance() {
        return new postWorkExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postWorkExp_result result = new postWorkExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postWorkExp_result result = new postWorkExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postWorkExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postWorkExp(args.workExp,resultHandler);
      }
    }

    public static class putWorkExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putWorkExp_args, Integer> {
      public putWorkExp() {
        super("putWorkExp");
      }

      public putWorkExp_args getEmptyArgsInstance() {
        return new putWorkExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putWorkExp_result result = new putWorkExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putWorkExp_result result = new putWorkExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putWorkExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putWorkExp(args.workExp,resultHandler);
      }
    }

    public static class delWorkExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delWorkExp_args, Integer> {
      public delWorkExp() {
        super("delWorkExp");
      }

      public delWorkExp_args getEmptyArgsInstance() {
        return new delWorkExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delWorkExp_result result = new delWorkExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delWorkExp_result result = new delWorkExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delWorkExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delWorkExp(args.workExp,resultHandler);
      }
    }

  }

  public static class getWorkExps_args implements org.apache.thrift.TBase<getWorkExps_args, getWorkExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkExps_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WORK_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("workExp", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkExps_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.WorkExp workExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      WORK_EXP((short)2, "workExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // WORK_EXP
            return WORK_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.WORK_EXP, new org.apache.thrift.meta_data.FieldMetaData("workExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkExps_args.class, metaDataMap);
    }

    public getWorkExps_args() {
    }

    public getWorkExps_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.WorkExp workExp)
    {
      this();
      this.query = query;
      this.workExp = workExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkExps_args(getWorkExps_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetWorkExp()) {
        this.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp(other.workExp);
      }
    }

    public getWorkExps_args deepCopy() {
      return new getWorkExps_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.workExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getWorkExps_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp getWorkExp() {
      return this.workExp;
    }

    public getWorkExps_args setWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) {
      this.workExp = workExp;
      return this;
    }

    public void unsetWorkExp() {
      this.workExp = null;
    }

    /** Returns true if field workExp is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExp() {
      return this.workExp != null;
    }

    public void setWorkExpIsSet(boolean value) {
      if (!value) {
        this.workExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case WORK_EXP:
        if (value == null) {
          unsetWorkExp();
        } else {
          setWorkExp((com.moseeker.thrift.gen.profile.struct.WorkExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case WORK_EXP:
        return getWorkExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case WORK_EXP:
        return isSetWorkExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkExps_args)
        return this.equals((getWorkExps_args)that);
      return false;
    }

    public boolean equals(getWorkExps_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_workExp = true && this.isSetWorkExp();
      boolean that_present_workExp = true && that.isSetWorkExp();
      if (this_present_workExp || that_present_workExp) {
        if (!(this_present_workExp && that_present_workExp))
          return false;
        if (!this.workExp.equals(that.workExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_workExp = true && (isSetWorkExp());
      list.add(present_workExp);
      if (present_workExp)
        list.add(workExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkExp()).compareTo(other.isSetWorkExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExp, other.workExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkExps_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("workExp:");
      if (this.workExp == null) {
        sb.append("null");
      } else {
        sb.append(this.workExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (workExp != null) {
        workExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkExps_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkExps_argsStandardScheme getScheme() {
        return new getWorkExps_argsStandardScheme();
      }
    }

    private static class getWorkExps_argsStandardScheme extends StandardScheme<getWorkExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORK_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                struct.workExp.read(iprot);
                struct.setWorkExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.workExp != null) {
          oprot.writeFieldBegin(WORK_EXP_FIELD_DESC);
          struct.workExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkExps_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkExps_argsTupleScheme getScheme() {
        return new getWorkExps_argsTupleScheme();
      }
    }

    private static class getWorkExps_argsTupleScheme extends TupleScheme<getWorkExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetWorkExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetWorkExp()) {
          struct.workExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
          struct.workExp.read(iprot);
          struct.setWorkExpIsSet(true);
        }
      }
    }

  }

  public static class getWorkExps_result implements org.apache.thrift.TBase<getWorkExps_result, getWorkExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkExps_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkExps_result.class, metaDataMap);
    }

    public getWorkExps_result() {
    }

    public getWorkExps_result(
      List<com.moseeker.thrift.gen.profile.struct.WorkExp> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkExps_result(getWorkExps_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.WorkExp> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.WorkExp other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.WorkExp(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWorkExps_result deepCopy() {
      return new getWorkExps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.WorkExp> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.WorkExp elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getSuccess() {
      return this.success;
    }

    public getWorkExps_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.WorkExp> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.WorkExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkExps_result)
        return this.equals((getWorkExps_result)that);
      return false;
    }

    public boolean equals(getWorkExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkExps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkExps_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkExps_resultStandardScheme getScheme() {
        return new getWorkExps_resultStandardScheme();
      }
    }

    private static class getWorkExps_resultStandardScheme extends StandardScheme<getWorkExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list480 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list480.size);
                  com.moseeker.thrift.gen.profile.struct.WorkExp _elem481;
                  for (int _i482 = 0; _i482 < _list480.size; ++_i482)
                  {
                    _elem481 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                    _elem481.read(iprot);
                    struct.success.add(_elem481);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter483 : struct.success)
            {
              _iter483.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkExps_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkExps_resultTupleScheme getScheme() {
        return new getWorkExps_resultTupleScheme();
      }
    }

    private static class getWorkExps_resultTupleScheme extends TupleScheme<getWorkExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter484 : struct.success)
            {
              _iter484.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list485 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list485.size);
            com.moseeker.thrift.gen.profile.struct.WorkExp _elem486;
            for (int _i487 = 0; _i487 < _list485.size; ++_i487)
            {
              _elem486 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
              _elem486.read(iprot);
              struct.success.add(_elem486);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWorkExpPagination_args implements org.apache.thrift.TBase<getWorkExpPagination_args, getWorkExpPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkExpPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkExpPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WORK_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("workExp", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkExpPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkExpPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.WorkExp workExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      WORK_EXP((short)2, "workExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // WORK_EXP
            return WORK_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.WORK_EXP, new org.apache.thrift.meta_data.FieldMetaData("workExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkExpPagination_args.class, metaDataMap);
    }

    public getWorkExpPagination_args() {
    }

    public getWorkExpPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.WorkExp workExp)
    {
      this();
      this.query = query;
      this.workExp = workExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkExpPagination_args(getWorkExpPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetWorkExp()) {
        this.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp(other.workExp);
      }
    }

    public getWorkExpPagination_args deepCopy() {
      return new getWorkExpPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.workExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getWorkExpPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp getWorkExp() {
      return this.workExp;
    }

    public getWorkExpPagination_args setWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) {
      this.workExp = workExp;
      return this;
    }

    public void unsetWorkExp() {
      this.workExp = null;
    }

    /** Returns true if field workExp is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExp() {
      return this.workExp != null;
    }

    public void setWorkExpIsSet(boolean value) {
      if (!value) {
        this.workExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case WORK_EXP:
        if (value == null) {
          unsetWorkExp();
        } else {
          setWorkExp((com.moseeker.thrift.gen.profile.struct.WorkExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case WORK_EXP:
        return getWorkExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case WORK_EXP:
        return isSetWorkExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkExpPagination_args)
        return this.equals((getWorkExpPagination_args)that);
      return false;
    }

    public boolean equals(getWorkExpPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_workExp = true && this.isSetWorkExp();
      boolean that_present_workExp = true && that.isSetWorkExp();
      if (this_present_workExp || that_present_workExp) {
        if (!(this_present_workExp && that_present_workExp))
          return false;
        if (!this.workExp.equals(that.workExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_workExp = true && (isSetWorkExp());
      list.add(present_workExp);
      if (present_workExp)
        list.add(workExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkExpPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkExp()).compareTo(other.isSetWorkExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExp, other.workExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkExpPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("workExp:");
      if (this.workExp == null) {
        sb.append("null");
      } else {
        sb.append(this.workExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (workExp != null) {
        workExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkExpPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkExpPagination_argsStandardScheme getScheme() {
        return new getWorkExpPagination_argsStandardScheme();
      }
    }

    private static class getWorkExpPagination_argsStandardScheme extends StandardScheme<getWorkExpPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkExpPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORK_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                struct.workExp.read(iprot);
                struct.setWorkExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkExpPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.workExp != null) {
          oprot.writeFieldBegin(WORK_EXP_FIELD_DESC);
          struct.workExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkExpPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkExpPagination_argsTupleScheme getScheme() {
        return new getWorkExpPagination_argsTupleScheme();
      }
    }

    private static class getWorkExpPagination_argsTupleScheme extends TupleScheme<getWorkExpPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkExpPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetWorkExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetWorkExp()) {
          struct.workExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkExpPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
          struct.workExp.read(iprot);
          struct.setWorkExpIsSet(true);
        }
      }
    }

  }

  public static class getWorkExpPagination_result implements org.apache.thrift.TBase<getWorkExpPagination_result, getWorkExpPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkExpPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkExpPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkExpPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkExpPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExpPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExpPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkExpPagination_result.class, metaDataMap);
    }

    public getWorkExpPagination_result() {
    }

    public getWorkExpPagination_result(
      com.moseeker.thrift.gen.profile.struct.WorkExpPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkExpPagination_result(getWorkExpPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.WorkExpPagination(other.success);
      }
    }

    public getWorkExpPagination_result deepCopy() {
      return new getWorkExpPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExpPagination getSuccess() {
      return this.success;
    }

    public getWorkExpPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.WorkExpPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.WorkExpPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkExpPagination_result)
        return this.equals((getWorkExpPagination_result)that);
      return false;
    }

    public boolean equals(getWorkExpPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkExpPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkExpPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkExpPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkExpPagination_resultStandardScheme getScheme() {
        return new getWorkExpPagination_resultStandardScheme();
      }
    }

    private static class getWorkExpPagination_resultStandardScheme extends StandardScheme<getWorkExpPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkExpPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.WorkExpPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkExpPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkExpPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkExpPagination_resultTupleScheme getScheme() {
        return new getWorkExpPagination_resultTupleScheme();
      }
    }

    private static class getWorkExpPagination_resultTupleScheme extends TupleScheme<getWorkExpPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkExpPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkExpPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.WorkExpPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postWorkExps_args implements org.apache.thrift.TBase<postWorkExps_args, postWorkExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<postWorkExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postWorkExps_args");

    private static final org.apache.thrift.protocol.TField WORK_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("workExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postWorkExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postWorkExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXPS((short)1, "workExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXPS
            return WORK_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXPS, new org.apache.thrift.meta_data.FieldMetaData("workExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postWorkExps_args.class, metaDataMap);
    }

    public postWorkExps_args() {
    }

    public postWorkExps_args(
      List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps)
    {
      this();
      this.workExps = workExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postWorkExps_args(postWorkExps_args other) {
      if (other.isSetWorkExps()) {
        List<com.moseeker.thrift.gen.profile.struct.WorkExp> __this__workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(other.workExps.size());
        for (com.moseeker.thrift.gen.profile.struct.WorkExp other_element : other.workExps) {
          __this__workExps.add(new com.moseeker.thrift.gen.profile.struct.WorkExp(other_element));
        }
        this.workExps = __this__workExps;
      }
    }

    public postWorkExps_args deepCopy() {
      return new postWorkExps_args(this);
    }

    @Override
    public void clear() {
      this.workExps = null;
    }

    public int getWorkExpsSize() {
      return (this.workExps == null) ? 0 : this.workExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExpsIterator() {
      return (this.workExps == null) ? null : this.workExps.iterator();
    }

    public void addToWorkExps(com.moseeker.thrift.gen.profile.struct.WorkExp elem) {
      if (this.workExps == null) {
        this.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>();
      }
      this.workExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExps() {
      return this.workExps;
    }

    public postWorkExps_args setWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) {
      this.workExps = workExps;
      return this;
    }

    public void unsetWorkExps() {
      this.workExps = null;
    }

    /** Returns true if field workExps is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExps() {
      return this.workExps != null;
    }

    public void setWorkExpsIsSet(boolean value) {
      if (!value) {
        this.workExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXPS:
        if (value == null) {
          unsetWorkExps();
        } else {
          setWorkExps((List<com.moseeker.thrift.gen.profile.struct.WorkExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXPS:
        return getWorkExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXPS:
        return isSetWorkExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postWorkExps_args)
        return this.equals((postWorkExps_args)that);
      return false;
    }

    public boolean equals(postWorkExps_args that) {
      if (that == null)
        return false;

      boolean this_present_workExps = true && this.isSetWorkExps();
      boolean that_present_workExps = true && that.isSetWorkExps();
      if (this_present_workExps || that_present_workExps) {
        if (!(this_present_workExps && that_present_workExps))
          return false;
        if (!this.workExps.equals(that.workExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExps = true && (isSetWorkExps());
      list.add(present_workExps);
      if (present_workExps)
        list.add(workExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(postWorkExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExps()).compareTo(other.isSetWorkExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExps, other.workExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postWorkExps_args(");
      boolean first = true;

      sb.append("workExps:");
      if (this.workExps == null) {
        sb.append("null");
      } else {
        sb.append(this.workExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postWorkExps_argsStandardSchemeFactory implements SchemeFactory {
      public postWorkExps_argsStandardScheme getScheme() {
        return new postWorkExps_argsStandardScheme();
      }
    }

    private static class postWorkExps_argsStandardScheme extends StandardScheme<postWorkExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postWorkExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list488 = iprot.readListBegin();
                  struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list488.size);
                  com.moseeker.thrift.gen.profile.struct.WorkExp _elem489;
                  for (int _i490 = 0; _i490 < _list488.size; ++_i490)
                  {
                    _elem489 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                    _elem489.read(iprot);
                    struct.workExps.add(_elem489);
                  }
                  iprot.readListEnd();
                }
                struct.setWorkExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postWorkExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExps != null) {
          oprot.writeFieldBegin(WORK_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.workExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter491 : struct.workExps)
            {
              _iter491.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postWorkExps_argsTupleSchemeFactory implements SchemeFactory {
      public postWorkExps_argsTupleScheme getScheme() {
        return new postWorkExps_argsTupleScheme();
      }
    }

    private static class postWorkExps_argsTupleScheme extends TupleScheme<postWorkExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExps()) {
          {
            oprot.writeI32(struct.workExps.size());
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter492 : struct.workExps)
            {
              _iter492.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list493 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list493.size);
            com.moseeker.thrift.gen.profile.struct.WorkExp _elem494;
            for (int _i495 = 0; _i495 < _list493.size; ++_i495)
            {
              _elem494 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
              _elem494.read(iprot);
              struct.workExps.add(_elem494);
            }
          }
          struct.setWorkExpsIsSet(true);
        }
      }
    }

  }

  public static class postWorkExps_result implements org.apache.thrift.TBase<postWorkExps_result, postWorkExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<postWorkExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postWorkExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postWorkExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postWorkExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postWorkExps_result.class, metaDataMap);
    }

    public postWorkExps_result() {
    }

    public postWorkExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postWorkExps_result(postWorkExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postWorkExps_result deepCopy() {
      return new postWorkExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postWorkExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postWorkExps_result)
        return this.equals((postWorkExps_result)that);
      return false;
    }

    public boolean equals(postWorkExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postWorkExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postWorkExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postWorkExps_resultStandardSchemeFactory implements SchemeFactory {
      public postWorkExps_resultStandardScheme getScheme() {
        return new postWorkExps_resultStandardScheme();
      }
    }

    private static class postWorkExps_resultStandardScheme extends StandardScheme<postWorkExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postWorkExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postWorkExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postWorkExps_resultTupleSchemeFactory implements SchemeFactory {
      public postWorkExps_resultTupleScheme getScheme() {
        return new postWorkExps_resultTupleScheme();
      }
    }

    private static class postWorkExps_resultTupleScheme extends TupleScheme<postWorkExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putWorkExps_args implements org.apache.thrift.TBase<putWorkExps_args, putWorkExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<putWorkExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putWorkExps_args");

    private static final org.apache.thrift.protocol.TField WORK_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("workExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putWorkExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putWorkExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXPS((short)1, "workExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXPS
            return WORK_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXPS, new org.apache.thrift.meta_data.FieldMetaData("workExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putWorkExps_args.class, metaDataMap);
    }

    public putWorkExps_args() {
    }

    public putWorkExps_args(
      List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps)
    {
      this();
      this.workExps = workExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putWorkExps_args(putWorkExps_args other) {
      if (other.isSetWorkExps()) {
        List<com.moseeker.thrift.gen.profile.struct.WorkExp> __this__workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(other.workExps.size());
        for (com.moseeker.thrift.gen.profile.struct.WorkExp other_element : other.workExps) {
          __this__workExps.add(new com.moseeker.thrift.gen.profile.struct.WorkExp(other_element));
        }
        this.workExps = __this__workExps;
      }
    }

    public putWorkExps_args deepCopy() {
      return new putWorkExps_args(this);
    }

    @Override
    public void clear() {
      this.workExps = null;
    }

    public int getWorkExpsSize() {
      return (this.workExps == null) ? 0 : this.workExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExpsIterator() {
      return (this.workExps == null) ? null : this.workExps.iterator();
    }

    public void addToWorkExps(com.moseeker.thrift.gen.profile.struct.WorkExp elem) {
      if (this.workExps == null) {
        this.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>();
      }
      this.workExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExps() {
      return this.workExps;
    }

    public putWorkExps_args setWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) {
      this.workExps = workExps;
      return this;
    }

    public void unsetWorkExps() {
      this.workExps = null;
    }

    /** Returns true if field workExps is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExps() {
      return this.workExps != null;
    }

    public void setWorkExpsIsSet(boolean value) {
      if (!value) {
        this.workExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXPS:
        if (value == null) {
          unsetWorkExps();
        } else {
          setWorkExps((List<com.moseeker.thrift.gen.profile.struct.WorkExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXPS:
        return getWorkExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXPS:
        return isSetWorkExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putWorkExps_args)
        return this.equals((putWorkExps_args)that);
      return false;
    }

    public boolean equals(putWorkExps_args that) {
      if (that == null)
        return false;

      boolean this_present_workExps = true && this.isSetWorkExps();
      boolean that_present_workExps = true && that.isSetWorkExps();
      if (this_present_workExps || that_present_workExps) {
        if (!(this_present_workExps && that_present_workExps))
          return false;
        if (!this.workExps.equals(that.workExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExps = true && (isSetWorkExps());
      list.add(present_workExps);
      if (present_workExps)
        list.add(workExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(putWorkExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExps()).compareTo(other.isSetWorkExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExps, other.workExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putWorkExps_args(");
      boolean first = true;

      sb.append("workExps:");
      if (this.workExps == null) {
        sb.append("null");
      } else {
        sb.append(this.workExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putWorkExps_argsStandardSchemeFactory implements SchemeFactory {
      public putWorkExps_argsStandardScheme getScheme() {
        return new putWorkExps_argsStandardScheme();
      }
    }

    private static class putWorkExps_argsStandardScheme extends StandardScheme<putWorkExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putWorkExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list496 = iprot.readListBegin();
                  struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list496.size);
                  com.moseeker.thrift.gen.profile.struct.WorkExp _elem497;
                  for (int _i498 = 0; _i498 < _list496.size; ++_i498)
                  {
                    _elem497 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                    _elem497.read(iprot);
                    struct.workExps.add(_elem497);
                  }
                  iprot.readListEnd();
                }
                struct.setWorkExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putWorkExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExps != null) {
          oprot.writeFieldBegin(WORK_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.workExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter499 : struct.workExps)
            {
              _iter499.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putWorkExps_argsTupleSchemeFactory implements SchemeFactory {
      public putWorkExps_argsTupleScheme getScheme() {
        return new putWorkExps_argsTupleScheme();
      }
    }

    private static class putWorkExps_argsTupleScheme extends TupleScheme<putWorkExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExps()) {
          {
            oprot.writeI32(struct.workExps.size());
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter500 : struct.workExps)
            {
              _iter500.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list501 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list501.size);
            com.moseeker.thrift.gen.profile.struct.WorkExp _elem502;
            for (int _i503 = 0; _i503 < _list501.size; ++_i503)
            {
              _elem502 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
              _elem502.read(iprot);
              struct.workExps.add(_elem502);
            }
          }
          struct.setWorkExpsIsSet(true);
        }
      }
    }

  }

  public static class putWorkExps_result implements org.apache.thrift.TBase<putWorkExps_result, putWorkExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<putWorkExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putWorkExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putWorkExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putWorkExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putWorkExps_result.class, metaDataMap);
    }

    public putWorkExps_result() {
    }

    public putWorkExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putWorkExps_result(putWorkExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putWorkExps_result deepCopy() {
      return new putWorkExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putWorkExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putWorkExps_result)
        return this.equals((putWorkExps_result)that);
      return false;
    }

    public boolean equals(putWorkExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putWorkExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putWorkExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putWorkExps_resultStandardSchemeFactory implements SchemeFactory {
      public putWorkExps_resultStandardScheme getScheme() {
        return new putWorkExps_resultStandardScheme();
      }
    }

    private static class putWorkExps_resultStandardScheme extends StandardScheme<putWorkExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putWorkExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putWorkExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putWorkExps_resultTupleSchemeFactory implements SchemeFactory {
      public putWorkExps_resultTupleScheme getScheme() {
        return new putWorkExps_resultTupleScheme();
      }
    }

    private static class putWorkExps_resultTupleScheme extends TupleScheme<putWorkExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delWorkExps_args implements org.apache.thrift.TBase<delWorkExps_args, delWorkExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<delWorkExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delWorkExps_args");

    private static final org.apache.thrift.protocol.TField WORK_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("workExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delWorkExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delWorkExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXPS((short)1, "workExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXPS
            return WORK_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXPS, new org.apache.thrift.meta_data.FieldMetaData("workExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delWorkExps_args.class, metaDataMap);
    }

    public delWorkExps_args() {
    }

    public delWorkExps_args(
      List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps)
    {
      this();
      this.workExps = workExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delWorkExps_args(delWorkExps_args other) {
      if (other.isSetWorkExps()) {
        List<com.moseeker.thrift.gen.profile.struct.WorkExp> __this__workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(other.workExps.size());
        for (com.moseeker.thrift.gen.profile.struct.WorkExp other_element : other.workExps) {
          __this__workExps.add(new com.moseeker.thrift.gen.profile.struct.WorkExp(other_element));
        }
        this.workExps = __this__workExps;
      }
    }

    public delWorkExps_args deepCopy() {
      return new delWorkExps_args(this);
    }

    @Override
    public void clear() {
      this.workExps = null;
    }

    public int getWorkExpsSize() {
      return (this.workExps == null) ? 0 : this.workExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExpsIterator() {
      return (this.workExps == null) ? null : this.workExps.iterator();
    }

    public void addToWorkExps(com.moseeker.thrift.gen.profile.struct.WorkExp elem) {
      if (this.workExps == null) {
        this.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>();
      }
      this.workExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.WorkExp> getWorkExps() {
      return this.workExps;
    }

    public delWorkExps_args setWorkExps(List<com.moseeker.thrift.gen.profile.struct.WorkExp> workExps) {
      this.workExps = workExps;
      return this;
    }

    public void unsetWorkExps() {
      this.workExps = null;
    }

    /** Returns true if field workExps is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExps() {
      return this.workExps != null;
    }

    public void setWorkExpsIsSet(boolean value) {
      if (!value) {
        this.workExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXPS:
        if (value == null) {
          unsetWorkExps();
        } else {
          setWorkExps((List<com.moseeker.thrift.gen.profile.struct.WorkExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXPS:
        return getWorkExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXPS:
        return isSetWorkExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delWorkExps_args)
        return this.equals((delWorkExps_args)that);
      return false;
    }

    public boolean equals(delWorkExps_args that) {
      if (that == null)
        return false;

      boolean this_present_workExps = true && this.isSetWorkExps();
      boolean that_present_workExps = true && that.isSetWorkExps();
      if (this_present_workExps || that_present_workExps) {
        if (!(this_present_workExps && that_present_workExps))
          return false;
        if (!this.workExps.equals(that.workExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExps = true && (isSetWorkExps());
      list.add(present_workExps);
      if (present_workExps)
        list.add(workExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(delWorkExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExps()).compareTo(other.isSetWorkExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExps, other.workExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delWorkExps_args(");
      boolean first = true;

      sb.append("workExps:");
      if (this.workExps == null) {
        sb.append("null");
      } else {
        sb.append(this.workExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delWorkExps_argsStandardSchemeFactory implements SchemeFactory {
      public delWorkExps_argsStandardScheme getScheme() {
        return new delWorkExps_argsStandardScheme();
      }
    }

    private static class delWorkExps_argsStandardScheme extends StandardScheme<delWorkExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delWorkExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list504 = iprot.readListBegin();
                  struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list504.size);
                  com.moseeker.thrift.gen.profile.struct.WorkExp _elem505;
                  for (int _i506 = 0; _i506 < _list504.size; ++_i506)
                  {
                    _elem505 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                    _elem505.read(iprot);
                    struct.workExps.add(_elem505);
                  }
                  iprot.readListEnd();
                }
                struct.setWorkExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delWorkExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExps != null) {
          oprot.writeFieldBegin(WORK_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.workExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter507 : struct.workExps)
            {
              _iter507.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delWorkExps_argsTupleSchemeFactory implements SchemeFactory {
      public delWorkExps_argsTupleScheme getScheme() {
        return new delWorkExps_argsTupleScheme();
      }
    }

    private static class delWorkExps_argsTupleScheme extends TupleScheme<delWorkExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExps()) {
          {
            oprot.writeI32(struct.workExps.size());
            for (com.moseeker.thrift.gen.profile.struct.WorkExp _iter508 : struct.workExps)
            {
              _iter508.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delWorkExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list509 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.workExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.WorkExp>(_list509.size);
            com.moseeker.thrift.gen.profile.struct.WorkExp _elem510;
            for (int _i511 = 0; _i511 < _list509.size; ++_i511)
            {
              _elem510 = new com.moseeker.thrift.gen.profile.struct.WorkExp();
              _elem510.read(iprot);
              struct.workExps.add(_elem510);
            }
          }
          struct.setWorkExpsIsSet(true);
        }
      }
    }

  }

  public static class delWorkExps_result implements org.apache.thrift.TBase<delWorkExps_result, delWorkExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<delWorkExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delWorkExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delWorkExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delWorkExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delWorkExps_result.class, metaDataMap);
    }

    public delWorkExps_result() {
    }

    public delWorkExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delWorkExps_result(delWorkExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delWorkExps_result deepCopy() {
      return new delWorkExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delWorkExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delWorkExps_result)
        return this.equals((delWorkExps_result)that);
      return false;
    }

    public boolean equals(delWorkExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delWorkExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delWorkExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delWorkExps_resultStandardSchemeFactory implements SchemeFactory {
      public delWorkExps_resultStandardScheme getScheme() {
        return new delWorkExps_resultStandardScheme();
      }
    }

    private static class delWorkExps_resultStandardScheme extends StandardScheme<delWorkExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delWorkExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delWorkExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delWorkExps_resultTupleSchemeFactory implements SchemeFactory {
      public delWorkExps_resultTupleScheme getScheme() {
        return new delWorkExps_resultTupleScheme();
      }
    }

    private static class delWorkExps_resultTupleScheme extends TupleScheme<delWorkExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delWorkExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postWorkExp_args implements org.apache.thrift.TBase<postWorkExp_args, postWorkExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<postWorkExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postWorkExp_args");

    private static final org.apache.thrift.protocol.TField WORK_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("workExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postWorkExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postWorkExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp workExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXP((short)1, "workExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXP
            return WORK_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXP, new org.apache.thrift.meta_data.FieldMetaData("workExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postWorkExp_args.class, metaDataMap);
    }

    public postWorkExp_args() {
    }

    public postWorkExp_args(
      com.moseeker.thrift.gen.profile.struct.WorkExp workExp)
    {
      this();
      this.workExp = workExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postWorkExp_args(postWorkExp_args other) {
      if (other.isSetWorkExp()) {
        this.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp(other.workExp);
      }
    }

    public postWorkExp_args deepCopy() {
      return new postWorkExp_args(this);
    }

    @Override
    public void clear() {
      this.workExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp getWorkExp() {
      return this.workExp;
    }

    public postWorkExp_args setWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) {
      this.workExp = workExp;
      return this;
    }

    public void unsetWorkExp() {
      this.workExp = null;
    }

    /** Returns true if field workExp is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExp() {
      return this.workExp != null;
    }

    public void setWorkExpIsSet(boolean value) {
      if (!value) {
        this.workExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXP:
        if (value == null) {
          unsetWorkExp();
        } else {
          setWorkExp((com.moseeker.thrift.gen.profile.struct.WorkExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXP:
        return getWorkExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXP:
        return isSetWorkExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postWorkExp_args)
        return this.equals((postWorkExp_args)that);
      return false;
    }

    public boolean equals(postWorkExp_args that) {
      if (that == null)
        return false;

      boolean this_present_workExp = true && this.isSetWorkExp();
      boolean that_present_workExp = true && that.isSetWorkExp();
      if (this_present_workExp || that_present_workExp) {
        if (!(this_present_workExp && that_present_workExp))
          return false;
        if (!this.workExp.equals(that.workExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExp = true && (isSetWorkExp());
      list.add(present_workExp);
      if (present_workExp)
        list.add(workExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(postWorkExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExp()).compareTo(other.isSetWorkExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExp, other.workExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postWorkExp_args(");
      boolean first = true;

      sb.append("workExp:");
      if (this.workExp == null) {
        sb.append("null");
      } else {
        sb.append(this.workExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workExp != null) {
        workExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postWorkExp_argsStandardSchemeFactory implements SchemeFactory {
      public postWorkExp_argsStandardScheme getScheme() {
        return new postWorkExp_argsStandardScheme();
      }
    }

    private static class postWorkExp_argsStandardScheme extends StandardScheme<postWorkExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postWorkExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                struct.workExp.read(iprot);
                struct.setWorkExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postWorkExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExp != null) {
          oprot.writeFieldBegin(WORK_EXP_FIELD_DESC);
          struct.workExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postWorkExp_argsTupleSchemeFactory implements SchemeFactory {
      public postWorkExp_argsTupleScheme getScheme() {
        return new postWorkExp_argsTupleScheme();
      }
    }

    private static class postWorkExp_argsTupleScheme extends TupleScheme<postWorkExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExp()) {
          struct.workExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
          struct.workExp.read(iprot);
          struct.setWorkExpIsSet(true);
        }
      }
    }

  }

  public static class postWorkExp_result implements org.apache.thrift.TBase<postWorkExp_result, postWorkExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<postWorkExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postWorkExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postWorkExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postWorkExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postWorkExp_result.class, metaDataMap);
    }

    public postWorkExp_result() {
    }

    public postWorkExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postWorkExp_result(postWorkExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postWorkExp_result deepCopy() {
      return new postWorkExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postWorkExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postWorkExp_result)
        return this.equals((postWorkExp_result)that);
      return false;
    }

    public boolean equals(postWorkExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postWorkExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postWorkExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postWorkExp_resultStandardSchemeFactory implements SchemeFactory {
      public postWorkExp_resultStandardScheme getScheme() {
        return new postWorkExp_resultStandardScheme();
      }
    }

    private static class postWorkExp_resultStandardScheme extends StandardScheme<postWorkExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postWorkExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postWorkExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postWorkExp_resultTupleSchemeFactory implements SchemeFactory {
      public postWorkExp_resultTupleScheme getScheme() {
        return new postWorkExp_resultTupleScheme();
      }
    }

    private static class postWorkExp_resultTupleScheme extends TupleScheme<postWorkExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putWorkExp_args implements org.apache.thrift.TBase<putWorkExp_args, putWorkExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<putWorkExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putWorkExp_args");

    private static final org.apache.thrift.protocol.TField WORK_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("workExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putWorkExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putWorkExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp workExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXP((short)1, "workExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXP
            return WORK_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXP, new org.apache.thrift.meta_data.FieldMetaData("workExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putWorkExp_args.class, metaDataMap);
    }

    public putWorkExp_args() {
    }

    public putWorkExp_args(
      com.moseeker.thrift.gen.profile.struct.WorkExp workExp)
    {
      this();
      this.workExp = workExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putWorkExp_args(putWorkExp_args other) {
      if (other.isSetWorkExp()) {
        this.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp(other.workExp);
      }
    }

    public putWorkExp_args deepCopy() {
      return new putWorkExp_args(this);
    }

    @Override
    public void clear() {
      this.workExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp getWorkExp() {
      return this.workExp;
    }

    public putWorkExp_args setWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) {
      this.workExp = workExp;
      return this;
    }

    public void unsetWorkExp() {
      this.workExp = null;
    }

    /** Returns true if field workExp is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExp() {
      return this.workExp != null;
    }

    public void setWorkExpIsSet(boolean value) {
      if (!value) {
        this.workExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXP:
        if (value == null) {
          unsetWorkExp();
        } else {
          setWorkExp((com.moseeker.thrift.gen.profile.struct.WorkExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXP:
        return getWorkExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXP:
        return isSetWorkExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putWorkExp_args)
        return this.equals((putWorkExp_args)that);
      return false;
    }

    public boolean equals(putWorkExp_args that) {
      if (that == null)
        return false;

      boolean this_present_workExp = true && this.isSetWorkExp();
      boolean that_present_workExp = true && that.isSetWorkExp();
      if (this_present_workExp || that_present_workExp) {
        if (!(this_present_workExp && that_present_workExp))
          return false;
        if (!this.workExp.equals(that.workExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExp = true && (isSetWorkExp());
      list.add(present_workExp);
      if (present_workExp)
        list.add(workExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(putWorkExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExp()).compareTo(other.isSetWorkExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExp, other.workExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putWorkExp_args(");
      boolean first = true;

      sb.append("workExp:");
      if (this.workExp == null) {
        sb.append("null");
      } else {
        sb.append(this.workExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workExp != null) {
        workExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putWorkExp_argsStandardSchemeFactory implements SchemeFactory {
      public putWorkExp_argsStandardScheme getScheme() {
        return new putWorkExp_argsStandardScheme();
      }
    }

    private static class putWorkExp_argsStandardScheme extends StandardScheme<putWorkExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putWorkExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                struct.workExp.read(iprot);
                struct.setWorkExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putWorkExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExp != null) {
          oprot.writeFieldBegin(WORK_EXP_FIELD_DESC);
          struct.workExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putWorkExp_argsTupleSchemeFactory implements SchemeFactory {
      public putWorkExp_argsTupleScheme getScheme() {
        return new putWorkExp_argsTupleScheme();
      }
    }

    private static class putWorkExp_argsTupleScheme extends TupleScheme<putWorkExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExp()) {
          struct.workExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
          struct.workExp.read(iprot);
          struct.setWorkExpIsSet(true);
        }
      }
    }

  }

  public static class putWorkExp_result implements org.apache.thrift.TBase<putWorkExp_result, putWorkExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<putWorkExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putWorkExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putWorkExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putWorkExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putWorkExp_result.class, metaDataMap);
    }

    public putWorkExp_result() {
    }

    public putWorkExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putWorkExp_result(putWorkExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putWorkExp_result deepCopy() {
      return new putWorkExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putWorkExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putWorkExp_result)
        return this.equals((putWorkExp_result)that);
      return false;
    }

    public boolean equals(putWorkExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putWorkExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putWorkExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putWorkExp_resultStandardSchemeFactory implements SchemeFactory {
      public putWorkExp_resultStandardScheme getScheme() {
        return new putWorkExp_resultStandardScheme();
      }
    }

    private static class putWorkExp_resultStandardScheme extends StandardScheme<putWorkExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putWorkExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putWorkExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putWorkExp_resultTupleSchemeFactory implements SchemeFactory {
      public putWorkExp_resultTupleScheme getScheme() {
        return new putWorkExp_resultTupleScheme();
      }
    }

    private static class putWorkExp_resultTupleScheme extends TupleScheme<putWorkExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delWorkExp_args implements org.apache.thrift.TBase<delWorkExp_args, delWorkExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<delWorkExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delWorkExp_args");

    private static final org.apache.thrift.protocol.TField WORK_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("workExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delWorkExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delWorkExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp workExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_EXP((short)1, "workExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_EXP
            return WORK_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_EXP, new org.apache.thrift.meta_data.FieldMetaData("workExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.WorkExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delWorkExp_args.class, metaDataMap);
    }

    public delWorkExp_args() {
    }

    public delWorkExp_args(
      com.moseeker.thrift.gen.profile.struct.WorkExp workExp)
    {
      this();
      this.workExp = workExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delWorkExp_args(delWorkExp_args other) {
      if (other.isSetWorkExp()) {
        this.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp(other.workExp);
      }
    }

    public delWorkExp_args deepCopy() {
      return new delWorkExp_args(this);
    }

    @Override
    public void clear() {
      this.workExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.WorkExp getWorkExp() {
      return this.workExp;
    }

    public delWorkExp_args setWorkExp(com.moseeker.thrift.gen.profile.struct.WorkExp workExp) {
      this.workExp = workExp;
      return this;
    }

    public void unsetWorkExp() {
      this.workExp = null;
    }

    /** Returns true if field workExp is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkExp() {
      return this.workExp != null;
    }

    public void setWorkExpIsSet(boolean value) {
      if (!value) {
        this.workExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_EXP:
        if (value == null) {
          unsetWorkExp();
        } else {
          setWorkExp((com.moseeker.thrift.gen.profile.struct.WorkExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_EXP:
        return getWorkExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_EXP:
        return isSetWorkExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delWorkExp_args)
        return this.equals((delWorkExp_args)that);
      return false;
    }

    public boolean equals(delWorkExp_args that) {
      if (that == null)
        return false;

      boolean this_present_workExp = true && this.isSetWorkExp();
      boolean that_present_workExp = true && that.isSetWorkExp();
      if (this_present_workExp || that_present_workExp) {
        if (!(this_present_workExp && that_present_workExp))
          return false;
        if (!this.workExp.equals(that.workExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workExp = true && (isSetWorkExp());
      list.add(present_workExp);
      if (present_workExp)
        list.add(workExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(delWorkExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkExp()).compareTo(other.isSetWorkExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workExp, other.workExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delWorkExp_args(");
      boolean first = true;

      sb.append("workExp:");
      if (this.workExp == null) {
        sb.append("null");
      } else {
        sb.append(this.workExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workExp != null) {
        workExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delWorkExp_argsStandardSchemeFactory implements SchemeFactory {
      public delWorkExp_argsStandardScheme getScheme() {
        return new delWorkExp_argsStandardScheme();
      }
    }

    private static class delWorkExp_argsStandardScheme extends StandardScheme<delWorkExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delWorkExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
                struct.workExp.read(iprot);
                struct.setWorkExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delWorkExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workExp != null) {
          oprot.writeFieldBegin(WORK_EXP_FIELD_DESC);
          struct.workExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delWorkExp_argsTupleSchemeFactory implements SchemeFactory {
      public delWorkExp_argsTupleScheme getScheme() {
        return new delWorkExp_argsTupleScheme();
      }
    }

    private static class delWorkExp_argsTupleScheme extends TupleScheme<delWorkExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkExp()) {
          struct.workExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delWorkExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.workExp = new com.moseeker.thrift.gen.profile.struct.WorkExp();
          struct.workExp.read(iprot);
          struct.setWorkExpIsSet(true);
        }
      }
    }

  }

  public static class delWorkExp_result implements org.apache.thrift.TBase<delWorkExp_result, delWorkExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<delWorkExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delWorkExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delWorkExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delWorkExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delWorkExp_result.class, metaDataMap);
    }

    public delWorkExp_result() {
    }

    public delWorkExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delWorkExp_result(delWorkExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delWorkExp_result deepCopy() {
      return new delWorkExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delWorkExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delWorkExp_result)
        return this.equals((delWorkExp_result)that);
      return false;
    }

    public boolean equals(delWorkExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delWorkExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delWorkExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delWorkExp_resultStandardSchemeFactory implements SchemeFactory {
      public delWorkExp_resultStandardScheme getScheme() {
        return new delWorkExp_resultStandardScheme();
      }
    }

    private static class delWorkExp_resultStandardScheme extends StandardScheme<delWorkExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delWorkExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delWorkExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delWorkExp_resultTupleSchemeFactory implements SchemeFactory {
      public delWorkExp_resultTupleScheme getScheme() {
        return new delWorkExp_resultTupleScheme();
      }
    }

    private static class delWorkExp_resultTupleScheme extends TupleScheme<delWorkExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delWorkExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
