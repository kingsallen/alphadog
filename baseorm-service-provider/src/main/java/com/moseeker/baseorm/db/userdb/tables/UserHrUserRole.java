/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.UserHrUserRoleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 用户的角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserHrUserRole extends TableImpl<UserHrUserRoleRecord> {

    private static final long serialVersionUID = -1399345515;

    /**
     * The reference instance of <code>userdb.user_hr_user_role</code>
     */
    public static final UserHrUserRole USER_HR_USER_ROLE = new UserHrUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHrUserRoleRecord> getRecordType() {
        return UserHrUserRoleRecord.class;
    }

    /**
     * The column <code>userdb.user_hr_user_role.id</code>.
     */
    public final TableField<UserHrUserRoleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>userdb.user_hr_user_role.user_id</code>. hr用户的id
     */
    public final TableField<UserHrUserRoleRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "hr用户的id");

    /**
     * The column <code>userdb.user_hr_user_role.role_id</code>. 角色id
     */
    public final TableField<UserHrUserRoleRecord, Integer> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "角色id");

    /**
     * The column <code>userdb.user_hr_user_role.create_time</code>. 创建时间
     */
    public final TableField<UserHrUserRoleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>userdb.user_hr_user_role.creator</code>. 创建人
     */
    public final TableField<UserHrUserRoleRecord, String> CREATOR = createField("creator", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "创建人");

    /**
     * The column <code>userdb.user_hr_user_role.update_time</code>. 修改时间
     */
    public final TableField<UserHrUserRoleRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * The column <code>userdb.user_hr_user_role.updator</code>. 修改人
     */
    public final TableField<UserHrUserRoleRecord, String> UPDATOR = createField("updator", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "修改人");

    /**
     * Create a <code>userdb.user_hr_user_role</code> table reference
     */
    public UserHrUserRole() {
        this("user_hr_user_role", null);
    }

    /**
     * Create an aliased <code>userdb.user_hr_user_role</code> table reference
     */
    public UserHrUserRole(String alias) {
        this(alias, USER_HR_USER_ROLE);
    }

    private UserHrUserRole(String alias, Table<UserHrUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserHrUserRole(String alias, Table<UserHrUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "用户的角色");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserHrUserRoleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_HR_USER_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserHrUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_USER_HR_USER_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserHrUserRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<UserHrUserRoleRecord>>asList(Keys.KEY_USER_HR_USER_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserHrUserRole as(String alias) {
        return new UserHrUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHrUserRole rename(String name) {
        return new UserHrUserRole(name, null);
    }
}
