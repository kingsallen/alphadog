/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.UserEmployeeUpvoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 员工点赞记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEmployeeUpvote extends TableImpl<UserEmployeeUpvoteRecord> {

    private static final long serialVersionUID = -94874579;

    /**
     * The reference instance of <code>userdb.user_employee_upvote</code>
     */
    public static final UserEmployeeUpvote USER_EMPLOYEE_UPVOTE = new UserEmployeeUpvote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEmployeeUpvoteRecord> getRecordType() {
        return UserEmployeeUpvoteRecord.class;
    }

    /**
     * The column <code>userdb.user_employee_upvote.id</code>. 主键
     */
    public final TableField<UserEmployeeUpvoteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "主键");

    /**
     * The column <code>userdb.user_employee_upvote.sender</code>. 点赞的人的仟寻员工编号
     */
    public final TableField<UserEmployeeUpvoteRecord, Integer> SENDER = createField("sender", org.jooq.impl.SQLDataType.INTEGER, this, "点赞的人的仟寻员工编号");

    /**
     * The column <code>userdb.user_employee_upvote.receiver</code>. 被点赞的人的仟寻员工编号
     */
    public final TableField<UserEmployeeUpvoteRecord, Integer> RECEIVER = createField("receiver", org.jooq.impl.SQLDataType.INTEGER, this, "被点赞的人的仟寻员工编号");

    /**
     * The column <code>userdb.user_employee_upvote.company_id</code>. 公司编号，用于标识哪家员工的点赞
     */
    public final TableField<UserEmployeeUpvoteRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER, this, "公司编号，用于标识哪家员工的点赞");

    /**
     * The column <code>userdb.user_employee_upvote.upvote_time</code>. 点赞时间
     */
    public final TableField<UserEmployeeUpvoteRecord, Timestamp> UPVOTE_TIME = createField("upvote_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "点赞时间");

    /**
     * The column <code>userdb.user_employee_upvote.cancel</code>. 是否可用, 0 表示 点赞，1表示取消点赞
     */
    public final TableField<UserEmployeeUpvoteRecord, Byte> CANCEL = createField("cancel", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否可用, 0 表示 点赞，1表示取消点赞");

    /**
     * The column <code>userdb.user_employee_upvote.cancel_time</code>. 取消时间
     */
    public final TableField<UserEmployeeUpvoteRecord, Timestamp> CANCEL_TIME = createField("cancel_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "取消时间");

    /**
     * The column <code>userdb.user_employee_upvote.create_time</code>. 创建时间
     */
    public final TableField<UserEmployeeUpvoteRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>userdb.user_employee_upvote.update_time</code>. 修改时间
     */
    public final TableField<UserEmployeeUpvoteRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>userdb.user_employee_upvote</code> table reference
     */
    public UserEmployeeUpvote() {
        this("user_employee_upvote", null);
    }

    /**
     * Create an aliased <code>userdb.user_employee_upvote</code> table reference
     */
    public UserEmployeeUpvote(String alias) {
        this(alias, USER_EMPLOYEE_UPVOTE);
    }

    private UserEmployeeUpvote(String alias, Table<UserEmployeeUpvoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEmployeeUpvote(String alias, Table<UserEmployeeUpvoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "员工点赞记录");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserEmployeeUpvoteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_EMPLOYEE_UPVOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserEmployeeUpvoteRecord> getPrimaryKey() {
        return Keys.KEY_USER_EMPLOYEE_UPVOTE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserEmployeeUpvoteRecord>> getKeys() {
        return Arrays.<UniqueKey<UserEmployeeUpvoteRecord>>asList(Keys.KEY_USER_EMPLOYEE_UPVOTE_PRIMARY, Keys.KEY_USER_EMPLOYEE_UPVOTE_USER_EMPLOYEE_UPVOTE_SENDER_RECEIVER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserEmployeeUpvote as(String alias) {
        return new UserEmployeeUpvote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEmployeeUpvote rename(String name) {
        return new UserEmployeeUpvote(name, null);
    }
}
