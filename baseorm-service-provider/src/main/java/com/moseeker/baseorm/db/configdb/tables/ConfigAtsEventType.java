/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.configdb.tables;


import com.moseeker.baseorm.db.configdb.Configdb;
import com.moseeker.baseorm.db.configdb.Keys;
import com.moseeker.baseorm.db.configdb.tables.records.ConfigAtsEventTypeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 事件状态管理表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigAtsEventType extends TableImpl<ConfigAtsEventTypeRecord> {

    private static final long serialVersionUID = -1632314102;

    /**
     * The reference instance of <code>configdb.config_ats_event_type</code>
     */
    public static final ConfigAtsEventType CONFIG_ATS_EVENT_TYPE = new ConfigAtsEventType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigAtsEventTypeRecord> getRecordType() {
        return ConfigAtsEventTypeRecord.class;
    }

    /**
     * The column <code>configdb.config_ats_event_type.id</code>.
     */
    public final TableField<ConfigAtsEventTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>configdb.config_ats_event_type.event_type</code>. 事件类型
     */
    public final TableField<ConfigAtsEventTypeRecord, Byte> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "事件类型");

    /**
     * The column <code>configdb.config_ats_event_type.event_name</code>. 事件名称
     */
    public final TableField<ConfigAtsEventTypeRecord, String> EVENT_NAME = createField("event_name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "事件名称");

    /**
     * The column <code>configdb.config_ats_event_type.status_code</code>. 状态code
     */
    public final TableField<ConfigAtsEventTypeRecord, Byte> STATUS_CODE = createField("status_code", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态code");

    /**
     * The column <code>configdb.config_ats_event_type.status_filter_text</code>. 状态显示文案（筛选）
     */
    public final TableField<ConfigAtsEventTypeRecord, String> STATUS_FILTER_TEXT = createField("status_filter_text", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "状态显示文案（筛选）");

    /**
     * The column <code>configdb.config_ats_event_type.status_list_text</code>. 状态显示文案（列表）
     */
    public final TableField<ConfigAtsEventTypeRecord, String> STATUS_LIST_TEXT = createField("status_list_text", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "状态显示文案（列表）");

    /**
     * The column <code>configdb.config_ats_event_type.create_time</code>. 创建时间
     */
    public final TableField<ConfigAtsEventTypeRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>configdb.config_ats_event_type.update_time</code>. 更新时间
     */
    public final TableField<ConfigAtsEventTypeRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>configdb.config_ats_event_type</code> table reference
     */
    public ConfigAtsEventType() {
        this("config_ats_event_type", null);
    }

    /**
     * Create an aliased <code>configdb.config_ats_event_type</code> table reference
     */
    public ConfigAtsEventType(String alias) {
        this(alias, CONFIG_ATS_EVENT_TYPE);
    }

    private ConfigAtsEventType(String alias, Table<ConfigAtsEventTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConfigAtsEventType(String alias, Table<ConfigAtsEventTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "事件状态管理表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Configdb.CONFIGDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConfigAtsEventTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONFIG_ATS_EVENT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConfigAtsEventTypeRecord> getPrimaryKey() {
        return Keys.KEY_CONFIG_ATS_EVENT_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConfigAtsEventTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigAtsEventTypeRecord>>asList(Keys.KEY_CONFIG_ATS_EVENT_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigAtsEventType as(String alias) {
        return new ConfigAtsEventType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigAtsEventType rename(String name) {
        return new ConfigAtsEventType(name, null);
    }
}
