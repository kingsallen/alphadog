/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.jobdb.tables;


import com.moseeker.baseorm.db.jobdb.Jobdb;
import com.moseeker.baseorm.db.jobdb.Keys;
import com.moseeker.baseorm.db.jobdb.tables.records.JobPositionLiepinMappingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 职位发布到猎聘时，由于不同地区、职位名称在猎聘需用不同的id，而在仟寻只有一个id，所以此表用来生成向猎聘发布职位时需要的id
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobPositionLiepinMapping extends TableImpl<JobPositionLiepinMappingRecord> {

    private static final long serialVersionUID = 629302719;

    /**
     * The reference instance of <code>jobdb.job_position_liepin_mapping</code>
     */
    public static final JobPositionLiepinMapping JOB_POSITION_LIEPIN_MAPPING = new JobPositionLiepinMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobPositionLiepinMappingRecord> getRecordType() {
        return JobPositionLiepinMappingRecord.class;
    }

    /**
     * The column <code>jobdb.job_position_liepin_mapping.id</code>. 仟寻向猎聘发请求用的主键id
     */
    public final TableField<JobPositionLiepinMappingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "仟寻向猎聘发请求用的主键id");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.position_id</code>. job_position.id
     */
    public final TableField<JobPositionLiepinMappingRecord, Integer> POSITION_ID = createField("position_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "job_position.id");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.liepin_job_id</code>. 猎聘返回的第三方职位id
     */
    public final TableField<JobPositionLiepinMappingRecord, Integer> LIEPIN_JOB_ID = createField("liepin_job_id", org.jooq.impl.SQLDataType.INTEGER, this, "猎聘返回的第三方职位id");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.city_code</code>. dict_city.code
     */
    public final TableField<JobPositionLiepinMappingRecord, Integer> CITY_CODE = createField("city_code", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "dict_city.code");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.job_title</code>. 职位名称，猎聘职位title长度为143
     */
    public final TableField<JobPositionLiepinMappingRecord, String> JOB_TITLE = createField("job_title", org.jooq.impl.SQLDataType.VARCHAR.length(999).nullable(false), this, "职位名称，猎聘职位title长度为143");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.err_msg</code>. 如果同步失败，记录失败信息
     */
    public final TableField<JobPositionLiepinMappingRecord, String> ERR_MSG = createField("err_msg", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "如果同步失败，记录失败信息");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.state</code>. 猎聘职位状态 0 下架 1 正常 2审核中
     */
    public final TableField<JobPositionLiepinMappingRecord, Byte> STATE = createField("state", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "猎聘职位状态 0 下架 1 正常 2审核中");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.liepin_user_id</code>. hr在猎聘的userid
     */
    public final TableField<JobPositionLiepinMappingRecord, Integer> LIEPIN_USER_ID = createField("liepin_user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "hr在猎聘的userid");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.create_time</code>.
     */
    public final TableField<JobPositionLiepinMappingRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jobdb.job_position_liepin_mapping.update_time</code>.
     */
    public final TableField<JobPositionLiepinMappingRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jobdb.job_position_liepin_mapping</code> table reference
     */
    public JobPositionLiepinMapping() {
        this("job_position_liepin_mapping", null);
    }

    /**
     * Create an aliased <code>jobdb.job_position_liepin_mapping</code> table reference
     */
    public JobPositionLiepinMapping(String alias) {
        this(alias, JOB_POSITION_LIEPIN_MAPPING);
    }

    private JobPositionLiepinMapping(String alias, Table<JobPositionLiepinMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobPositionLiepinMapping(String alias, Table<JobPositionLiepinMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "职位发布到猎聘时，由于不同地区、职位名称在猎聘需用不同的id，而在仟寻只有一个id，所以此表用来生成向猎聘发布职位时需要的id");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobdb.JOBDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobPositionLiepinMappingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB_POSITION_LIEPIN_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobPositionLiepinMappingRecord> getPrimaryKey() {
        return Keys.KEY_JOB_POSITION_LIEPIN_MAPPING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobPositionLiepinMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<JobPositionLiepinMappingRecord>>asList(Keys.KEY_JOB_POSITION_LIEPIN_MAPPING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobPositionLiepinMapping as(String alias) {
        return new JobPositionLiepinMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobPositionLiepinMapping rename(String name) {
        return new JobPositionLiepinMapping(name, null);
    }
}
