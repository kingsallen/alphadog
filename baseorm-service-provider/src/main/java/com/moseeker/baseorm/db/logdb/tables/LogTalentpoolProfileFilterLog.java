/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.logdb.tables;


import com.moseeker.baseorm.db.logdb.Keys;
import com.moseeker.baseorm.db.logdb.Logdb;
import com.moseeker.baseorm.db.logdb.tables.records.LogTalentpoolProfileFilterLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 人才库简历过滤日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogTalentpoolProfileFilterLog extends TableImpl<LogTalentpoolProfileFilterLogRecord> {

    private static final long serialVersionUID = -289492012;

    /**
     * The reference instance of <code>logdb.log_talentpool_profile_filter_log</code>
     */
    public static final LogTalentpoolProfileFilterLog LOG_TALENTPOOL_PROFILE_FILTER_LOG = new LogTalentpoolProfileFilterLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogTalentpoolProfileFilterLogRecord> getRecordType() {
        return LogTalentpoolProfileFilterLogRecord.class;
    }

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.id</code>.
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.company_id</code>. 公司id
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "公司id");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.hr_id</code>. hr_id
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> HR_ID = createField("hr_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "hr_id");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.user_id</code>. 被过滤的user_id
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "被过滤的user_id");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.filter_id</code>. 过滤id
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> FILTER_ID = createField("filter_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "过滤id");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.result</code>. 筛选结果 0 未通过 1 通过
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Integer> RESULT = createField("result", org.jooq.impl.SQLDataType.INTEGER, this, "筛选结果 0 未通过 1 通过");

    /**
     * The column <code>logdb.log_talentpool_profile_filter_log.create_time</code>. 创建时间
     */
    public final TableField<LogTalentpoolProfileFilterLogRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * Create a <code>logdb.log_talentpool_profile_filter_log</code> table reference
     */
    public LogTalentpoolProfileFilterLog() {
        this("log_talentpool_profile_filter_log", null);
    }

    /**
     * Create an aliased <code>logdb.log_talentpool_profile_filter_log</code> table reference
     */
    public LogTalentpoolProfileFilterLog(String alias) {
        this(alias, LOG_TALENTPOOL_PROFILE_FILTER_LOG);
    }

    private LogTalentpoolProfileFilterLog(String alias, Table<LogTalentpoolProfileFilterLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogTalentpoolProfileFilterLog(String alias, Table<LogTalentpoolProfileFilterLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "人才库简历过滤日志");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Logdb.LOGDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogTalentpoolProfileFilterLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOG_TALENTPOOL_PROFILE_FILTER_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogTalentpoolProfileFilterLogRecord> getPrimaryKey() {
        return Keys.KEY_LOG_TALENTPOOL_PROFILE_FILTER_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogTalentpoolProfileFilterLogRecord>> getKeys() {
        return Arrays.<UniqueKey<LogTalentpoolProfileFilterLogRecord>>asList(Keys.KEY_LOG_TALENTPOOL_PROFILE_FILTER_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogTalentpoolProfileFilterLog as(String alias) {
        return new LogTalentpoolProfileFilterLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogTalentpoolProfileFilterLog rename(String name) {
        return new LogTalentpoolProfileFilterLog(name, null);
    }
}
