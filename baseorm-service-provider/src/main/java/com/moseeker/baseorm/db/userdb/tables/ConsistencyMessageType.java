/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.ConsistencyMessageTypeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 消息类型表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConsistencyMessageType extends TableImpl<ConsistencyMessageTypeRecord> {

    private static final long serialVersionUID = 1938110048;

    /**
     * The reference instance of <code>userdb.consistency_message_type</code>
     */
    public static final ConsistencyMessageType CONSISTENCY_MESSAGE_TYPE = new ConsistencyMessageType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConsistencyMessageTypeRecord> getRecordType() {
        return ConsistencyMessageTypeRecord.class;
    }

    /**
     * The column <code>userdb.consistency_message_type.name</code>. 业务名称，不允许重复
     */
    public final TableField<ConsistencyMessageTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "业务名称，不允许重复");

    /**
     * The column <code>userdb.consistency_message_type.create_time</code>. 创建时间
     */
    public final TableField<ConsistencyMessageTypeRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>userdb.consistency_message_type.update_time</code>. 更新时间
     */
    public final TableField<ConsistencyMessageTypeRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>userdb.consistency_message_type.class_name</code>. 记录消息的类对象名称
     */
    public final TableField<ConsistencyMessageTypeRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "记录消息的类对象名称");

    /**
     * The column <code>userdb.consistency_message_type.method</code>. 记录消息的类方法名称
     */
    public final TableField<ConsistencyMessageTypeRecord, String> METHOD = createField("method", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "记录消息的类方法名称");

    /**
     * The column <code>userdb.consistency_message_type.period</code>. 任务调度时间间隔  单位是秒
     */
    public final TableField<ConsistencyMessageTypeRecord, Integer> PERIOD = createField("period", org.jooq.impl.SQLDataType.INTEGER, this, "任务调度时间间隔  单位是秒");

    /**
     * Create a <code>userdb.consistency_message_type</code> table reference
     */
    public ConsistencyMessageType() {
        this("consistency_message_type", null);
    }

    /**
     * Create an aliased <code>userdb.consistency_message_type</code> table reference
     */
    public ConsistencyMessageType(String alias) {
        this(alias, CONSISTENCY_MESSAGE_TYPE);
    }

    private ConsistencyMessageType(String alias, Table<ConsistencyMessageTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConsistencyMessageType(String alias, Table<ConsistencyMessageTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "消息类型表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConsistencyMessageTypeRecord> getPrimaryKey() {
        return Keys.KEY_CONSISTENCY_MESSAGE_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConsistencyMessageTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ConsistencyMessageTypeRecord>>asList(Keys.KEY_CONSISTENCY_MESSAGE_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConsistencyMessageType as(String alias) {
        return new ConsistencyMessageType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsistencyMessageType rename(String name) {
        return new ConsistencyMessageType(name, null);
    }
}
