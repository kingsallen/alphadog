/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.jobdb.tables;


import com.moseeker.baseorm.db.jobdb.Jobdb;
import com.moseeker.baseorm.db.jobdb.Keys;
import com.moseeker.baseorm.db.jobdb.tables.records.FeatureNotFoundRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeatureNotFound extends TableImpl<FeatureNotFoundRecord> {

    private static final long serialVersionUID = 1624599838;

    /**
     * The reference instance of <code>jobdb.feature_not_found</code>
     */
    public static final FeatureNotFound FEATURE_NOT_FOUND = new FeatureNotFound();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeatureNotFoundRecord> getRecordType() {
        return FeatureNotFoundRecord.class;
    }

    /**
     * The column <code>jobdb.feature_not_found.id</code>.
     */
    public final TableField<FeatureNotFoundRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobdb.feature_not_found.feature</code>.
     */
    public final TableField<FeatureNotFoundRecord, String> FEATURE = createField("feature", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>jobdb.feature_not_found.company_id</code>.
     */
    public final TableField<FeatureNotFoundRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>jobdb.feature_not_found</code> table reference
     */
    public FeatureNotFound() {
        this("feature_not_found", null);
    }

    /**
     * Create an aliased <code>jobdb.feature_not_found</code> table reference
     */
    public FeatureNotFound(String alias) {
        this(alias, FEATURE_NOT_FOUND);
    }

    private FeatureNotFound(String alias, Table<FeatureNotFoundRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeatureNotFound(String alias, Table<FeatureNotFoundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobdb.JOBDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeatureNotFoundRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FEATURE_NOT_FOUND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeatureNotFoundRecord> getPrimaryKey() {
        return Keys.KEY_FEATURE_NOT_FOUND_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeatureNotFoundRecord>> getKeys() {
        return Arrays.<UniqueKey<FeatureNotFoundRecord>>asList(Keys.KEY_FEATURE_NOT_FOUND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeatureNotFound as(String alias) {
        return new FeatureNotFound(alias, this);
    }

    /**
     * Rename this table
     */
    public FeatureNotFound rename(String name) {
        return new FeatureNotFound(name, null);
    }
}
