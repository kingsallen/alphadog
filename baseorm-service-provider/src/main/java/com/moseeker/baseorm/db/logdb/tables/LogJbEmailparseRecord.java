/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.logdb.tables;


import com.moseeker.baseorm.db.logdb.Keys;
import com.moseeker.baseorm.db.logdb.Logdb;
import com.moseeker.baseorm.db.logdb.tables.records.LogJbEmailparseRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 第三方简历回流email解析日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogJbEmailparseRecord extends TableImpl<LogJbEmailparseRecordRecord> {

    private static final long serialVersionUID = 953762786;

    /**
     * The reference instance of <code>logdb.log_jb_emailparse_record</code>
     */
    public static final LogJbEmailparseRecord LOG_JB_EMAILPARSE_RECORD = new LogJbEmailparseRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogJbEmailparseRecordRecord> getRecordType() {
        return LogJbEmailparseRecordRecord.class;
    }

    /**
     * The column <code>logdb.log_jb_emailparse_record.id</code>.
     */
    public final TableField<LogJbEmailparseRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>logdb.log_jb_emailparse_record.from_email</code>.
     */
    public final TableField<LogJbEmailparseRecordRecord, String> FROM_EMAIL = createField("from_email", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>logdb.log_jb_emailparse_record.channel</code>. 1：51job, 2liepin, 3zhaopin,6veryest,7yilan 0未知 
     */
    public final TableField<LogJbEmailparseRecordRecord, Byte> CHANNEL = createField("channel", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "1：51job, 2liepin, 3zhaopin,6veryest,7yilan 0未知 ");

    /**
     * The column <code>logdb.log_jb_emailparse_record.to_email</code>.
     */
    public final TableField<LogJbEmailparseRecordRecord, String> TO_EMAIL = createField("to_email", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>logdb.log_jb_emailparse_record.subject</code>. 邮件主题
     */
    public final TableField<LogJbEmailparseRecordRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "邮件主题");

    /**
     * The column <code>logdb.log_jb_emailparse_record.pid</code>. 职位id
     */
    public final TableField<LogJbEmailparseRecordRecord, Integer> PID = createField("pid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "职位id");

    /**
     * The column <code>logdb.log_jb_emailparse_record.status</code>. 0成功 1垃圾邮件 2 解析失败 3 入库失败
     */
    public final TableField<LogJbEmailparseRecordRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0成功 1垃圾邮件 2 解析失败 3 入库失败");

    /**
     * The column <code>logdb.log_jb_emailparse_record.create_time</code>.
     */
    public final TableField<LogJbEmailparseRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>logdb.log_jb_emailparse_record.update_time</code>.
     */
    public final TableField<LogJbEmailparseRecordRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>logdb.log_jb_emailparse_record</code> table reference
     */
    public LogJbEmailparseRecord() {
        this("log_jb_emailparse_record", null);
    }

    /**
     * Create an aliased <code>logdb.log_jb_emailparse_record</code> table reference
     */
    public LogJbEmailparseRecord(String alias) {
        this(alias, LOG_JB_EMAILPARSE_RECORD);
    }

    private LogJbEmailparseRecord(String alias, Table<LogJbEmailparseRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogJbEmailparseRecord(String alias, Table<LogJbEmailparseRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "第三方简历回流email解析日志");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Logdb.LOGDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogJbEmailparseRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOG_JB_EMAILPARSE_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogJbEmailparseRecordRecord> getPrimaryKey() {
        return Keys.KEY_LOG_JB_EMAILPARSE_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogJbEmailparseRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<LogJbEmailparseRecordRecord>>asList(Keys.KEY_LOG_JB_EMAILPARSE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogJbEmailparseRecord as(String alias) {
        return new LogJbEmailparseRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogJbEmailparseRecord rename(String name) {
        return new LogJbEmailparseRecord(name, null);
    }
}
