/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.UserChatTemplateMsgRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 员工和候选人聊天的通知配置
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserChatTemplateMsg extends TableImpl<UserChatTemplateMsgRecord> {

    private static final long serialVersionUID = -82781884;

    /**
     * The reference instance of <code>userdb.user_chat_template_msg</code>
     */
    public static final UserChatTemplateMsg USER_CHAT_TEMPLATE_MSG = new UserChatTemplateMsg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserChatTemplateMsgRecord> getRecordType() {
        return UserChatTemplateMsgRecord.class;
    }

    /**
     * The column <code>userdb.user_chat_template_msg.id</code>. ID
     */
    public final TableField<UserChatTemplateMsgRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "ID");

    /**
     * The column <code>userdb.user_chat_template_msg.company_id</code>. hr_company.id
     */
    public final TableField<UserChatTemplateMsgRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "hr_company.id");

    /**
     * The column <code>userdb.user_chat_template_msg.user_id</code>. user_user.id
     */
    public final TableField<UserChatTemplateMsgRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "user_user.id");

    /**
     * The column <code>userdb.user_chat_template_msg.employee_id</code>. user_employee.id
     */
    public final TableField<UserChatTemplateMsgRecord, Integer> EMPLOYEE_ID = createField("employee_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "user_employee.id");

    /**
     * The column <code>userdb.user_chat_template_msg.recv_switch</code>. 是否接受消息模板推送
     */
    public final TableField<UserChatTemplateMsgRecord, Byte> RECV_SWITCH = createField("recv_switch", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "是否接受消息模板推送");

    /**
     * The column <code>userdb.user_chat_template_msg.sent_date</code>. 最近一次模板消息发送日期
     */
    public final TableField<UserChatTemplateMsgRecord, Date> SENT_DATE = createField("sent_date", org.jooq.impl.SQLDataType.DATE, this, "最近一次模板消息发送日期");

    /**
     * The column <code>userdb.user_chat_template_msg.create_time</code>. 创建时间
     */
    public final TableField<UserChatTemplateMsgRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>userdb.user_chat_template_msg.update_time</code>. 修改时间
     */
    public final TableField<UserChatTemplateMsgRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>userdb.user_chat_template_msg</code> table reference
     */
    public UserChatTemplateMsg() {
        this("user_chat_template_msg", null);
    }

    /**
     * Create an aliased <code>userdb.user_chat_template_msg</code> table reference
     */
    public UserChatTemplateMsg(String alias) {
        this(alias, USER_CHAT_TEMPLATE_MSG);
    }

    private UserChatTemplateMsg(String alias, Table<UserChatTemplateMsgRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserChatTemplateMsg(String alias, Table<UserChatTemplateMsgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "员工和候选人聊天的通知配置");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserChatTemplateMsgRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_CHAT_TEMPLATE_MSG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserChatTemplateMsgRecord> getPrimaryKey() {
        return Keys.KEY_USER_CHAT_TEMPLATE_MSG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserChatTemplateMsgRecord>> getKeys() {
        return Arrays.<UniqueKey<UserChatTemplateMsgRecord>>asList(Keys.KEY_USER_CHAT_TEMPLATE_MSG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserChatTemplateMsg as(String alias) {
        return new UserChatTemplateMsg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChatTemplateMsg rename(String name) {
        return new UserChatTemplateMsg(name, null);
    }
}
