/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.logdb.tables;


import com.moseeker.baseorm.db.logdb.Keys;
import com.moseeker.baseorm.db.logdb.Logdb;
import com.moseeker.baseorm.db.logdb.tables.records.LogEmployeeOperationLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogEmployeeOperationLog extends TableImpl<LogEmployeeOperationLogRecord> {

    private static final long serialVersionUID = 690977932;

    /**
     * The reference instance of <code>logdb.log_employee_operation_log</code>
     */
    public static final LogEmployeeOperationLog LOG_EMPLOYEE_OPERATION_LOG = new LogEmployeeOperationLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogEmployeeOperationLogRecord> getRecordType() {
        return LogEmployeeOperationLogRecord.class;
    }

    /**
     * The column <code>logdb.log_employee_operation_log.id</code>. primaryKey
     */
    public final TableField<LogEmployeeOperationLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "primaryKey");

    /**
     * The column <code>logdb.log_employee_operation_log.user_id</code>. employee id
     */
    public final TableField<LogEmployeeOperationLogRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "employee id");

    /**
     * The column <code>logdb.log_employee_operation_log.type</code>. 入口类型  102：我是员工
     */
    public final TableField<LogEmployeeOperationLogRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "入口类型  102：我是员工");

    /**
     * The column <code>logdb.log_employee_operation_log.operation_type</code>. 操作类型  0：员工认证， 1：推荐简历
     */
    public final TableField<LogEmployeeOperationLogRecord, Byte> OPERATION_TYPE = createField("operation_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "操作类型  0：员工认证， 1：推荐简历");

    /**
     * The column <code>logdb.log_employee_operation_log.is_success</code>. 是否成功 1：成功，0：失败
     */
    public final TableField<LogEmployeeOperationLogRecord, Byte> IS_SUCCESS = createField("is_success", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否成功 1：成功，0：失败");

    /**
     * The column <code>logdb.log_employee_operation_log.company_id</code>. hr_company id
     */
    public final TableField<LogEmployeeOperationLogRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "hr_company id");

    /**
     * The column <code>logdb.log_employee_operation_log.profile_id</code>. profile_profile id 建立成功的简历id
     */
    public final TableField<LogEmployeeOperationLogRecord, Integer> PROFILE_ID = createField("profile_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "profile_profile id 建立成功的简历id");

    /**
     * The column <code>logdb.log_employee_operation_log.create_time</code>. 创建时间
     */
    public final TableField<LogEmployeeOperationLogRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * Create a <code>logdb.log_employee_operation_log</code> table reference
     */
    public LogEmployeeOperationLog() {
        this("log_employee_operation_log", null);
    }

    /**
     * Create an aliased <code>logdb.log_employee_operation_log</code> table reference
     */
    public LogEmployeeOperationLog(String alias) {
        this(alias, LOG_EMPLOYEE_OPERATION_LOG);
    }

    private LogEmployeeOperationLog(String alias, Table<LogEmployeeOperationLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogEmployeeOperationLog(String alias, Table<LogEmployeeOperationLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Logdb.LOGDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogEmployeeOperationLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOG_EMPLOYEE_OPERATION_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogEmployeeOperationLogRecord> getPrimaryKey() {
        return Keys.KEY_LOG_EMPLOYEE_OPERATION_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogEmployeeOperationLogRecord>> getKeys() {
        return Arrays.<UniqueKey<LogEmployeeOperationLogRecord>>asList(Keys.KEY_LOG_EMPLOYEE_OPERATION_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogEmployeeOperationLog as(String alias) {
        return new LogEmployeeOperationLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogEmployeeOperationLog rename(String name) {
        return new LogEmployeeOperationLog(name, null);
    }
}
