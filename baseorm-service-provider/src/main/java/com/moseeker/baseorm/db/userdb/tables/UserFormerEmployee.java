/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.UserFormerEmployeeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFormerEmployee extends TableImpl<UserFormerEmployeeRecord> {

    private static final long serialVersionUID = -1147714455;

    /**
     * The reference instance of <code>userdb.user_former_employee</code>
     */
    public static final UserFormerEmployee USER_FORMER_EMPLOYEE = new UserFormerEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFormerEmployeeRecord> getRecordType() {
        return UserFormerEmployeeRecord.class;
    }

    /**
     * The column <code>userdb.user_former_employee.id</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>userdb.user_former_employee.name</code>.
     */
    public final TableField<UserFormerEmployeeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>userdb.user_former_employee.company_id</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>userdb.user_former_employee.email</code>.
     */
    public final TableField<UserFormerEmployeeRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(254), this, "");

    /**
     * The column <code>userdb.user_former_employee.mobile</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Long> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>userdb.user_former_employee.user_id</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>userdb.user_former_employee.last_tmplmsg_sent_time</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Timestamp> LAST_TMPLMSG_SENT_TIME = createField("last_tmplmsg_sent_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>userdb.user_former_employee.last_sms_sent_time</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Timestamp> LAST_SMS_SENT_TIME = createField("last_sms_sent_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>userdb.user_former_employee.last_mail_sent_time</code>.
     */
    public final TableField<UserFormerEmployeeRecord, Timestamp> LAST_MAIL_SENT_TIME = createField("last_mail_sent_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>userdb.user_former_employee</code> table reference
     */
    public UserFormerEmployee() {
        this("user_former_employee", null);
    }

    /**
     * Create an aliased <code>userdb.user_former_employee</code> table reference
     */
    public UserFormerEmployee(String alias) {
        this(alias, USER_FORMER_EMPLOYEE);
    }

    private UserFormerEmployee(String alias, Table<UserFormerEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFormerEmployee(String alias, Table<UserFormerEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserFormerEmployeeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_FORMER_EMPLOYEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserFormerEmployeeRecord> getPrimaryKey() {
        return Keys.KEY_USER_FORMER_EMPLOYEE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserFormerEmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<UserFormerEmployeeRecord>>asList(Keys.KEY_USER_FORMER_EMPLOYEE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserFormerEmployee as(String alias) {
        return new UserFormerEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFormerEmployee rename(String name) {
        return new UserFormerEmployee(name, null);
    }
}
