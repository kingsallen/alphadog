/*
 * This file is generated by jOOQ.
*/
package com.moseeker.baseorm.db.userdb.tables;


import com.moseeker.baseorm.db.userdb.Keys;
import com.moseeker.baseorm.db.userdb.Userdb;
import com.moseeker.baseorm.db.userdb.tables.records.UserChatMsgRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 员工和候选人的聊天消息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserChatMsg extends TableImpl<UserChatMsgRecord> {

    private static final long serialVersionUID = 738231534;

    /**
     * The reference instance of <code>userdb.user_chat_msg</code>
     */
    public static final UserChatMsg USER_CHAT_MSG = new UserChatMsg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserChatMsgRecord> getRecordType() {
        return UserChatMsgRecord.class;
    }

    /**
     * The column <code>userdb.user_chat_msg.id</code>. ID
     */
    public final TableField<UserChatMsgRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "ID");

    /**
     * The column <code>userdb.user_chat_msg.room_id</code>. user_chat_room.id
     */
    public final TableField<UserChatMsgRecord, Integer> ROOM_ID = createField("room_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "user_chat_room.id");

    /**
     * The column <code>userdb.user_chat_msg.msg_type</code>. 消息类型
     */
    public final TableField<UserChatMsgRecord, String> MSG_TYPE = createField("msg_type", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "消息类型");

    /**
     * The column <code>userdb.user_chat_msg.content</code>. 聊天内容,job类型：职位ID
     */
    public final TableField<UserChatMsgRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(500), this, "聊天内容,job类型：职位ID");

    /**
     * The column <code>userdb.user_chat_msg.compound_content</code>. 聊天内容，表单、button等复合字段,保存为json格式
     */
    public final TableField<UserChatMsgRecord, String> COMPOUND_CONTENT = createField("compound_content", org.jooq.impl.SQLDataType.CLOB, this, "聊天内容，表单、button等复合字段,保存为json格式");

    /**
     * The column <code>userdb.user_chat_msg.to_speaker</code>. 接受消息者 0：候选人 1：员工 
     */
    public final TableField<UserChatMsgRecord, Byte> TO_SPEAKER = createField("to_speaker", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("3", org.jooq.impl.SQLDataType.TINYINT)), this, "接受消息者 0：候选人 1：员工 ");

    /**
     * The column <code>userdb.user_chat_msg.speaker</code>. 发消息者 0：候选人 1：员工  2:系统 
     */
    public final TableField<UserChatMsgRecord, Byte> SPEAKER = createField("speaker", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "发消息者 0：候选人 1：员工  2:系统 ");

    /**
     * The column <code>userdb.user_chat_msg.create_time</code>. 创建时间
     */
    public final TableField<UserChatMsgRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>userdb.user_chat_msg.update_time</code>. 修改时间
     */
    public final TableField<UserChatMsgRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>userdb.user_chat_msg</code> table reference
     */
    public UserChatMsg() {
        this("user_chat_msg", null);
    }

    /**
     * Create an aliased <code>userdb.user_chat_msg</code> table reference
     */
    public UserChatMsg(String alias) {
        this(alias, USER_CHAT_MSG);
    }

    private UserChatMsg(String alias, Table<UserChatMsgRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserChatMsg(String alias, Table<UserChatMsgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "员工和候选人的聊天消息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Userdb.USERDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserChatMsgRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_CHAT_MSG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserChatMsgRecord> getPrimaryKey() {
        return Keys.KEY_USER_CHAT_MSG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserChatMsgRecord>> getKeys() {
        return Arrays.<UniqueKey<UserChatMsgRecord>>asList(Keys.KEY_USER_CHAT_MSG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserChatMsg as(String alias) {
        return new UserChatMsg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserChatMsg rename(String name) {
        return new UserChatMsg(name, null);
    }
}
