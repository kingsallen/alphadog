/**
 * This class is generated by jOOQ
 */
package com.moseeker.baseorm.db.logdb.tables;


import com.moseeker.baseorm.db.logdb.Keys;
import com.moseeker.baseorm.db.logdb.Logdb;
import com.moseeker.baseorm.db.logdb.tables.records.LogDeadLetterRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 死信队列日志记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogDeadLetter extends TableImpl<LogDeadLetterRecord> {

    private static final long serialVersionUID = 336991189;

    /**
     * The reference instance of <code>logdb.log_dead_letter</code>
     */
    public static final LogDeadLetter LOG_DEAD_LETTER = new LogDeadLetter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogDeadLetterRecord> getRecordType() {
        return LogDeadLetterRecord.class;
    }

    /**
     * The column <code>logdb.log_dead_letter.id</code>.
     */
    public final TableField<LogDeadLetterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>logdb.log_dead_letter.appid</code>. appid
     */
    public final TableField<LogDeadLetterRecord, Integer> APPID = createField("appid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "appid");

    /**
     * The column <code>logdb.log_dead_letter.queue_name</code>. 队列名称
     */
    public final TableField<LogDeadLetterRecord, String> QUEUE_NAME = createField("queue_name", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "队列名称");

    /**
     * The column <code>logdb.log_dead_letter.exchange_name</code>. 交换机名称
     */
    public final TableField<LogDeadLetterRecord, String> EXCHANGE_NAME = createField("exchange_name", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "交换机名称");

    /**
     * The column <code>logdb.log_dead_letter.routing_key</code>. 路由键
     */
    public final TableField<LogDeadLetterRecord, String> ROUTING_KEY = createField("routing_key", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "路由键");

    /**
     * The column <code>logdb.log_dead_letter.msg</code>. 消息体
     */
    public final TableField<LogDeadLetterRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.CLOB, this, "消息体");

    /**
     * The column <code>logdb.log_dead_letter.error_log</code>. 失败日志
     */
    public final TableField<LogDeadLetterRecord, String> ERROR_LOG = createField("error_log", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "失败日志");

    /**
     * The column <code>logdb.log_dead_letter.create_time</code>. 创建时间
     */
    public final TableField<LogDeadLetterRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>logdb.log_dead_letter.update_time</code>. 更新时间
     */
    public final TableField<LogDeadLetterRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>logdb.log_dead_letter</code> table reference
     */
    public LogDeadLetter() {
        this("log_dead_letter", null);
    }

    /**
     * Create an aliased <code>logdb.log_dead_letter</code> table reference
     */
    public LogDeadLetter(String alias) {
        this(alias, LOG_DEAD_LETTER);
    }

    private LogDeadLetter(String alias, Table<LogDeadLetterRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogDeadLetter(String alias, Table<LogDeadLetterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "死信队列日志记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Logdb.LOGDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogDeadLetterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOG_DEAD_LETTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogDeadLetterRecord> getPrimaryKey() {
        return Keys.KEY_LOG_DEAD_LETTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogDeadLetterRecord>> getKeys() {
        return Arrays.<UniqueKey<LogDeadLetterRecord>>asList(Keys.KEY_LOG_DEAD_LETTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogDeadLetter as(String alias) {
        return new LogDeadLetter(alias, this);
    }

    /**
     * Rename this table
     */
    public LogDeadLetter rename(String name) {
        return new LogDeadLetter(name, null);
    }
}
