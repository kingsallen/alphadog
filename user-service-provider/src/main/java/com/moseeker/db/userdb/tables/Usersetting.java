/**
 * This class is generated by jOOQ
 */
package com.moseeker.db.userdb.tables;


import com.moseeker.db.userdb.Keys;
import com.moseeker.db.userdb.Userdb;
import com.moseeker.db.userdb.tables.records.UsersettingRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 用户设置表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usersetting extends TableImpl<UsersettingRecord> {

	private static final long serialVersionUID = 1104010642;

	/**
	 * The reference instance of <code>userDB.usersetting</code>
	 */
	public static final Usersetting USERSETTING = new Usersetting();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UsersettingRecord> getRecordType() {
		return UsersettingRecord.class;
	}

	/**
	 * The column <code>userDB.usersetting.id</code>.
	 */
	public final TableField<UsersettingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>userDB.usersetting.userid</code>. 用户id
	 */
	public final TableField<UsersettingRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户id");

	/**
	 * The column <code>userDB.usersetting.profile_privacy_level</code>. profile隐私设置, -1 不公开，0 全部公开， 1 仅限一度好友， 2,仅限二度好友
	 */
	public final TableField<UsersettingRecord, Byte> PROFILE_PRIVACY_LEVEL = createField("profile_privacy_level", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "profile隐私设置, -1 不公开，0 全部公开， 1 仅限一度好友， 2,仅限二度好友");

	/**
	 * Create a <code>userDB.usersetting</code> table reference
	 */
	public Usersetting() {
		this("usersetting", null);
	}

	/**
	 * Create an aliased <code>userDB.usersetting</code> table reference
	 */
	public Usersetting(String alias) {
		this(alias, USERSETTING);
	}

	private Usersetting(String alias, Table<UsersettingRecord> aliased) {
		this(alias, aliased, null);
	}

	private Usersetting(String alias, Table<UsersettingRecord> aliased, Field<?>[] parameters) {
		super(alias, Userdb.USERDB, aliased, parameters, "用户设置表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<UsersettingRecord, Integer> getIdentity() {
		return Keys.IDENTITY_USERSETTING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UsersettingRecord> getPrimaryKey() {
		return Keys.KEY_USERSETTING_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UsersettingRecord>> getKeys() {
		return Arrays.<UniqueKey<UsersettingRecord>>asList(Keys.KEY_USERSETTING_PRIMARY, Keys.KEY_USERSETTING_UID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Usersetting as(String alias) {
		return new Usersetting(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Usersetting rename(String name) {
		return new Usersetting(name, null);
	}
}
