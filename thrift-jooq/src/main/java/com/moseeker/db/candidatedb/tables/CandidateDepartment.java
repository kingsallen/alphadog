/**
 * This class is generated by jOOQ
 */
package com.moseeker.db.candidatedb.tables;


import com.moseeker.db.candidatedb.Candidatedb;
import com.moseeker.db.candidatedb.Keys;
import com.moseeker.db.candidatedb.tables.records.CandidateDepartmentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 候选人表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CandidateDepartment extends TableImpl<CandidateDepartmentRecord> {

	private static final long serialVersionUID = 1031530529;

	/**
	 * The reference instance of <code>candidateDB.candidate_department</code>
	 */
	public static final CandidateDepartment CANDIDATE_DEPARTMENT = new CandidateDepartment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CandidateDepartmentRecord> getRecordType() {
		return CandidateDepartmentRecord.class;
	}

	/**
	 * The column <code>candidateDB.candidate_department.id</code>.
	 */
	public final TableField<CandidateDepartmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>candidateDB.candidate_department.department_id</code>. hr_position.id
	 */
	public final TableField<CandidateDepartmentRecord, Integer> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "hr_position.id");

	/**
	 * The column <code>candidateDB.candidate_department.update_time</code>. 修改时间
	 */
	public final TableField<CandidateDepartmentRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "修改时间");

	/**
	 * The column <code>candidateDB.candidate_department.wxuser_id</code>. wx_group_user.id
	 */
	public final TableField<CandidateDepartmentRecord, Integer> WXUSER_ID = createField("wxuser_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "wx_group_user.id");

	/**
	 * The column <code>candidateDB.candidate_department.status</code>. 候选人状态，0：删除，1：正常状态
	 */
	public final TableField<CandidateDepartmentRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "候选人状态，0：删除，1：正常状态");

	/**
	 * The column <code>candidateDB.candidate_department.is_recommend</code>. 是否推荐 false:未推荐，true:推荐
	 */
	public final TableField<CandidateDepartmentRecord, Byte> IS_RECOMMEND = createField("is_recommend", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "是否推荐 false:未推荐，true:推荐");

	/**
	 * The column <code>candidateDB.candidate_department.name</code>. sys_user.name 姓名或微信昵称
	 */
	public final TableField<CandidateDepartmentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "sys_user.name 姓名或微信昵称");

	/**
	 * The column <code>candidateDB.candidate_department.email</code>. sys_user.email 邮箱
	 */
	public final TableField<CandidateDepartmentRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaulted(true), this, "sys_user.email 邮箱");

	/**
	 * The column <code>candidateDB.candidate_department.mobile</code>. sys_user.mobile 电话
	 */
	public final TableField<CandidateDepartmentRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaulted(true), this, "sys_user.mobile 电话");

	/**
	 * The column <code>candidateDB.candidate_department.nickname</code>. wx_group_user.nickname 用户昵称
	 */
	public final TableField<CandidateDepartmentRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "wx_group_user.nickname 用户昵称");

	/**
	 * The column <code>candidateDB.candidate_department.headimgurl</code>. wx_group_user.headimgurl 用户头像
	 */
	public final TableField<CandidateDepartmentRecord, String> HEADIMGURL = createField("headimgurl", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false).defaulted(true), this, "wx_group_user.headimgurl 用户头像");

	/**
	 * The column <code>candidateDB.candidate_department.sys_user_id</code>. sys_user.id
	 */
	public final TableField<CandidateDepartmentRecord, Integer> SYS_USER_ID = createField("sys_user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "sys_user.id");

	/**
	 * The column <code>candidateDB.candidate_department.click_from</code>. 来自, 0:未知, 朋友圈(timeline ) 1, 微信群(groupmessage) 2, 个人消息(singlemessage)
	 */
	public final TableField<CandidateDepartmentRecord, Integer> CLICK_FROM = createField("click_from", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "来自, 0:未知, 朋友圈(timeline ) 1, 微信群(groupmessage) 2, 个人消息(singlemessage)");

	/**
	 * Create a <code>candidateDB.candidate_department</code> table reference
	 */
	public CandidateDepartment() {
		this("candidate_department", null);
	}

	/**
	 * Create an aliased <code>candidateDB.candidate_department</code> table reference
	 */
	public CandidateDepartment(String alias) {
		this(alias, CANDIDATE_DEPARTMENT);
	}

	private CandidateDepartment(String alias, Table<CandidateDepartmentRecord> aliased) {
		this(alias, aliased, null);
	}

	private CandidateDepartment(String alias, Table<CandidateDepartmentRecord> aliased, Field<?>[] parameters) {
		super(alias, Candidatedb.CANDIDATEDB, aliased, parameters, "候选人表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CandidateDepartmentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CANDIDATE_DEPARTMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CandidateDepartmentRecord> getPrimaryKey() {
		return Keys.KEY_CANDIDATE_DEPARTMENT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CandidateDepartmentRecord>> getKeys() {
		return Arrays.<UniqueKey<CandidateDepartmentRecord>>asList(Keys.KEY_CANDIDATE_DEPARTMENT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CandidateDepartment as(String alias) {
		return new CandidateDepartment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public CandidateDepartment rename(String name) {
		return new CandidateDepartment(name, null);
	}
}
