/**
 * This class is generated by jOOQ
 */
package com.moseeker.db.dictdb.tables;


import com.moseeker.db.dictdb.Dictdb;
import com.moseeker.db.dictdb.Keys;
import com.moseeker.db.dictdb.tables.records.DictConstantRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictConstant extends TableImpl<DictConstantRecord> {

    private static final long serialVersionUID = -1544862483;

    /**
     * The reference instance of <code>dictdb.dict_constant</code>
     */
    public static final DictConstant DICT_CONSTANT = new DictConstant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictConstantRecord> getRecordType() {
        return DictConstantRecord.class;
    }

    /**
     * The column <code>dictdb.dict_constant.id</code>. 主key
     */
    public final TableField<DictConstantRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "主key");

    /**
     * The column <code>dictdb.dict_constant.code</code>. 字典code
     */
    public final TableField<DictConstantRecord, Integer> CODE = createField("code", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "字典code");

    /**
     * The column <code>dictdb.dict_constant.name</code>. 字典name
     */
    public final TableField<DictConstantRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "字典name");

    /**
     * The column <code>dictdb.dict_constant.priority</code>. 优先级
     */
    public final TableField<DictConstantRecord, Byte> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "优先级");

    /**
     * The column <code>dictdb.dict_constant.parent_code</code>. 父级字典code
     */
    public final TableField<DictConstantRecord, Integer> PARENT_CODE = createField("parent_code", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "父级字典code");

    /**
     * The column <code>dictdb.dict_constant.create_time</code>.
     */
    public final TableField<DictConstantRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>dictdb.dict_constant.update_time</code>.
     */
    public final TableField<DictConstantRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>dictdb.dict_constant</code> table reference
     */
    public DictConstant() {
        this("dict_constant", null);
    }

    /**
     * Create an aliased <code>dictdb.dict_constant</code> table reference
     */
    public DictConstant(String alias) {
        this(alias, DICT_CONSTANT);
    }

    private DictConstant(String alias, Table<DictConstantRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictConstant(String alias, Table<DictConstantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dictdb.DICTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictConstantRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_DICT_CONSTANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictConstantRecord> getPrimaryKey() {
        return Keys.KEY_DICT_CONSTANT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictConstantRecord>> getKeys() {
        return Arrays.<UniqueKey<DictConstantRecord>>asList(Keys.KEY_DICT_CONSTANT_PRIMARY, Keys.KEY_DICT_CONSTANT_DICT_CONSTANT_TYPE_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictConstant as(String alias) {
        return new DictConstant(alias, this);
    }

    /**
     * Rename this table
     */
    public DictConstant rename(String name) {
        return new DictConstant(name, null);
    }
}
