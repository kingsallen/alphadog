/**
 * This class is generated by jOOQ
 */
package com.moseeker.db.dqv4.tables;


import com.moseeker.db.dqv4.Dqv4;
import com.moseeker.db.dqv4.Keys;
import com.moseeker.db.dqv4.tables.records.ProfileBasicRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 用户profile基础个人信息表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfileBasic extends TableImpl<ProfileBasicRecord> {

	private static final long serialVersionUID = 1725526158;

	/**
	 * The reference instance of <code>dqv4.profile_basic</code>
	 */
	public static final ProfileBasic PROFILE_BASIC = new ProfileBasic();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProfileBasicRecord> getRecordType() {
		return ProfileBasicRecord.class;
	}

	/**
	 * The column <code>dqv4.profile_basic.profile_id</code>. profile.id
	 */
	public final TableField<ProfileBasicRecord, UInteger> PROFILE_ID = createField("profile_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaulted(true), this, "profile.id");

	/**
	 * The column <code>dqv4.profile_basic.birth</code>. 出生年月 yyyy-mm-dd
	 */
	public final TableField<ProfileBasicRecord, Date> BIRTH = createField("birth", org.jooq.impl.SQLDataType.DATE.nullable(false).defaulted(true), this, "出生年月 yyyy-mm-dd");

	/**
	 * The column <code>dqv4.profile_basic.gender</code>. 性别 0:没选择 1:男, 2: 女
	 */
	public final TableField<ProfileBasicRecord, Byte> GENDER = createField("gender", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "性别 0:没选择 1:男, 2: 女");

	/**
	 * The column <code>dqv4.profile_basic.idnumber</code>. 身份证
	 */
	public final TableField<ProfileBasicRecord, String> IDNUMBER = createField("idnumber", org.jooq.impl.SQLDataType.CHAR.length(18).nullable(false).defaulted(true), this, "身份证");

	/**
	 * The column <code>dqv4.profile_basic.location</code>. 居住地址（现居住地址）
	 */
	public final TableField<ProfileBasicRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false).defaulted(true), this, "居住地址（现居住地址）");

	/**
	 * The column <code>dqv4.profile_basic.nationality</code>. 国籍
	 */
	public final TableField<ProfileBasicRecord, String> NATIONALITY = createField("nationality", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "国籍");

	/**
	 * The column <code>dqv4.profile_basic.marriage</code>. 婚姻状况 0:未选择 1:未婚, 2:已婚
	 */
	public final TableField<ProfileBasicRecord, Byte> MARRIAGE = createField("marriage", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "婚姻状况 0:未选择 1:未婚, 2:已婚");

	/**
	 * The column <code>dqv4.profile_basic.residence</code>. 户口所在城市字典编码,字典里提供一个其他
	 */
	public final TableField<ProfileBasicRecord, Byte> RESIDENCE = createField("residence", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "户口所在城市字典编码,字典里提供一个其他");

	/**
	 * The column <code>dqv4.profile_basic.address</code>. 户口所在住址
	 */
	public final TableField<ProfileBasicRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false).defaulted(true), this, "户口所在住址");

	/**
	 * The column <code>dqv4.profile_basic.residencetype</code>. 户口类型 0: 没选择 1:农业户口 2:非农业户口
	 */
	public final TableField<ProfileBasicRecord, Byte> RESIDENCETYPE = createField("residencetype", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "户口类型 0: 没选择 1:农业户口 2:非农业户口");

	/**
	 * The column <code>dqv4.profile_basic.height</code>. 身高
	 */
	public final TableField<ProfileBasicRecord, BigDecimal> HEIGHT = createField("height", org.jooq.impl.SQLDataType.DECIMAL.precision(3, 1).nullable(false).defaulted(true), this, "身高");

	/**
	 * The column <code>dqv4.profile_basic.weight</code>. 体重
	 */
	public final TableField<ProfileBasicRecord, BigDecimal> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.DECIMAL.precision(3, 1).nullable(false).defaulted(true), this, "体重");

	/**
	 * The column <code>dqv4.profile_basic.weixin</code>. 微信号
	 */
	public final TableField<ProfileBasicRecord, String> WEIXIN = createField("weixin", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false).defaulted(true), this, "微信号");

	/**
	 * The column <code>dqv4.profile_basic.qq</code>. QQ号
	 */
	public final TableField<ProfileBasicRecord, String> QQ = createField("qq", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false).defaulted(true), this, "QQ号");

	/**
	 * The column <code>dqv4.profile_basic.create_time</code>. 创建时间
	 */
	public final TableField<ProfileBasicRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "创建时间");

	/**
	 * The column <code>dqv4.profile_basic.update_time</code>. 更新时间
	 */
	public final TableField<ProfileBasicRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "更新时间");

	/**
	 * Create a <code>dqv4.profile_basic</code> table reference
	 */
	public ProfileBasic() {
		this("profile_basic", null);
	}

	/**
	 * Create an aliased <code>dqv4.profile_basic</code> table reference
	 */
	public ProfileBasic(String alias) {
		this(alias, PROFILE_BASIC);
	}

	private ProfileBasic(String alias, Table<ProfileBasicRecord> aliased) {
		this(alias, aliased, null);
	}

	private ProfileBasic(String alias, Table<ProfileBasicRecord> aliased, Field<?>[] parameters) {
		super(alias, Dqv4.DQV4, aliased, parameters, "用户profile基础个人信息表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProfileBasicRecord> getPrimaryKey() {
		return Keys.KEY_PROFILE_BASIC_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProfileBasicRecord>> getKeys() {
		return Arrays.<UniqueKey<ProfileBasicRecord>>asList(Keys.KEY_PROFILE_BASIC_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProfileBasic as(String alias) {
		return new ProfileBasic(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ProfileBasic rename(String name) {
		return new ProfileBasic(name, null);
	}
}
