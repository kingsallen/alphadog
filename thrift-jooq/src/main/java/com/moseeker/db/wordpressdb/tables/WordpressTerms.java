/*
 * This file is generated by jOOQ.
*/
package com.moseeker.db.wordpressdb.tables;


import com.moseeker.db.wordpressdb.Keys;
import com.moseeker.db.wordpressdb.Wordpressdb;
import com.moseeker.db.wordpressdb.tables.records.WordpressTermsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordpressTerms extends TableImpl<WordpressTermsRecord> {

    private static final long serialVersionUID = -365436257;

    /**
     * The reference instance of <code>wordpressdb.wordpress_terms</code>
     */
    public static final WordpressTerms WORDPRESS_TERMS = new WordpressTerms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordpressTermsRecord> getRecordType() {
        return WordpressTermsRecord.class;
    }

    /**
     * The column <code>wordpressdb.wordpress_terms.term_id</code>.
     */
    public final TableField<WordpressTermsRecord, Long> TERM_ID = createField("term_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>wordpressdb.wordpress_terms.name</code>.
     */
    public final TableField<WordpressTermsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpressdb.wordpress_terms.slug</code>.
     */
    public final TableField<WordpressTermsRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpressdb.wordpress_terms.term_group</code>.
     */
    public final TableField<WordpressTermsRecord, Long> TERM_GROUP = createField("term_group", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>wordpressdb.wordpress_terms</code> table reference
     */
    public WordpressTerms() {
        this("wordpress_terms", null);
    }

    /**
     * Create an aliased <code>wordpressdb.wordpress_terms</code> table reference
     */
    public WordpressTerms(String alias) {
        this(alias, WORDPRESS_TERMS);
    }

    private WordpressTerms(String alias, Table<WordpressTermsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordpressTerms(String alias, Table<WordpressTermsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Wordpressdb.WORDPRESSDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WordpressTermsRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORDPRESS_TERMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WordpressTermsRecord> getPrimaryKey() {
        return Keys.KEY_WORDPRESS_TERMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WordpressTermsRecord>> getKeys() {
        return Arrays.<UniqueKey<WordpressTermsRecord>>asList(Keys.KEY_WORDPRESS_TERMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WordpressTerms as(String alias) {
        return new WordpressTerms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordpressTerms rename(String name) {
        return new WordpressTerms(name, null);
    }
}
