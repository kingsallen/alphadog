/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.wordpressdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class WordpressPostsDO implements org.apache.thrift.TBase<WordpressPostsDO, WordpressPostsDO._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressPostsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressPostsDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("postAuthor", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("postDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POST_DATE_GMT_FIELD_DESC = new org.apache.thrift.protocol.TField("postDateGmt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POST_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("postContent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POST_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("postTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POST_EXCERPT_FIELD_DESC = new org.apache.thrift.protocol.TField("postExcerpt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatus", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("commentStatus", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("pingStatus", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("postPassword", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField POST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("postName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TO_PING_FIELD_DESC = new org.apache.thrift.protocol.TField("toPing", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PINGED_FIELD_DESC = new org.apache.thrift.protocol.TField("pinged", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField POST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("postModified", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField POST_MODIFIED_GMT_FIELD_DESC = new org.apache.thrift.protocol.TField("postModifiedGmt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField POST_CONTENT_FILTERED_FIELD_DESC = new org.apache.thrift.protocol.TField("postContentFiltered", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField POST_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("postParent", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField MENU_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("menuOrder", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField POST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("postType", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField POST_MIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("postMimeType", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCount", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WordpressPostsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WordpressPostsDOTupleSchemeFactory();

  public long id; // optional
  public long postAuthor; // optional
  public String postDate; // optional
  public String postDateGmt; // optional
  public String postContent; // optional
  public String postTitle; // optional
  public String postExcerpt; // optional
  public String postStatus; // optional
  public String commentStatus; // optional
  public String pingStatus; // optional
  public String postPassword; // optional
  public String postName; // optional
  public String toPing; // optional
  public String pinged; // optional
  public String postModified; // optional
  public String postModifiedGmt; // optional
  public String postContentFiltered; // optional
  public long postParent; // optional
  public String guid; // optional
  public int menuOrder; // optional
  public String postType; // optional
  public String postMimeType; // optional
  public long commentCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POST_AUTHOR((short)2, "postAuthor"),
    POST_DATE((short)3, "postDate"),
    POST_DATE_GMT((short)4, "postDateGmt"),
    POST_CONTENT((short)5, "postContent"),
    POST_TITLE((short)6, "postTitle"),
    POST_EXCERPT((short)7, "postExcerpt"),
    POST_STATUS((short)8, "postStatus"),
    COMMENT_STATUS((short)9, "commentStatus"),
    PING_STATUS((short)10, "pingStatus"),
    POST_PASSWORD((short)11, "postPassword"),
    POST_NAME((short)12, "postName"),
    TO_PING((short)13, "toPing"),
    PINGED((short)14, "pinged"),
    POST_MODIFIED((short)15, "postModified"),
    POST_MODIFIED_GMT((short)16, "postModifiedGmt"),
    POST_CONTENT_FILTERED((short)17, "postContentFiltered"),
    POST_PARENT((short)18, "postParent"),
    GUID((short)19, "guid"),
    MENU_ORDER((short)20, "menuOrder"),
    POST_TYPE((short)21, "postType"),
    POST_MIME_TYPE((short)22, "postMimeType"),
    COMMENT_COUNT((short)23, "commentCount");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POST_AUTHOR
          return POST_AUTHOR;
        case 3: // POST_DATE
          return POST_DATE;
        case 4: // POST_DATE_GMT
          return POST_DATE_GMT;
        case 5: // POST_CONTENT
          return POST_CONTENT;
        case 6: // POST_TITLE
          return POST_TITLE;
        case 7: // POST_EXCERPT
          return POST_EXCERPT;
        case 8: // POST_STATUS
          return POST_STATUS;
        case 9: // COMMENT_STATUS
          return COMMENT_STATUS;
        case 10: // PING_STATUS
          return PING_STATUS;
        case 11: // POST_PASSWORD
          return POST_PASSWORD;
        case 12: // POST_NAME
          return POST_NAME;
        case 13: // TO_PING
          return TO_PING;
        case 14: // PINGED
          return PINGED;
        case 15: // POST_MODIFIED
          return POST_MODIFIED;
        case 16: // POST_MODIFIED_GMT
          return POST_MODIFIED_GMT;
        case 17: // POST_CONTENT_FILTERED
          return POST_CONTENT_FILTERED;
        case 18: // POST_PARENT
          return POST_PARENT;
        case 19: // GUID
          return GUID;
        case 20: // MENU_ORDER
          return MENU_ORDER;
        case 21: // POST_TYPE
          return POST_TYPE;
        case 22: // POST_MIME_TYPE
          return POST_MIME_TYPE;
        case 23: // COMMENT_COUNT
          return COMMENT_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POSTAUTHOR_ISSET_ID = 1;
  private static final int __POSTPARENT_ISSET_ID = 2;
  private static final int __MENUORDER_ISSET_ID = 3;
  private static final int __COMMENTCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.POST_AUTHOR,_Fields.POST_DATE,_Fields.POST_DATE_GMT,_Fields.POST_CONTENT,_Fields.POST_TITLE,_Fields.POST_EXCERPT,_Fields.POST_STATUS,_Fields.COMMENT_STATUS,_Fields.PING_STATUS,_Fields.POST_PASSWORD,_Fields.POST_NAME,_Fields.TO_PING,_Fields.PINGED,_Fields.POST_MODIFIED,_Fields.POST_MODIFIED_GMT,_Fields.POST_CONTENT_FILTERED,_Fields.POST_PARENT,_Fields.GUID,_Fields.MENU_ORDER,_Fields.POST_TYPE,_Fields.POST_MIME_TYPE,_Fields.COMMENT_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("postAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POST_DATE, new org.apache.thrift.meta_data.FieldMetaData("postDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_DATE_GMT, new org.apache.thrift.meta_data.FieldMetaData("postDateGmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("postContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_TITLE, new org.apache.thrift.meta_data.FieldMetaData("postTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_EXCERPT, new org.apache.thrift.meta_data.FieldMetaData("postExcerpt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("postStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("commentStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("pingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("postPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_NAME, new org.apache.thrift.meta_data.FieldMetaData("postName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_PING, new org.apache.thrift.meta_data.FieldMetaData("toPing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PINGED, new org.apache.thrift.meta_data.FieldMetaData("pinged", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("postModified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_MODIFIED_GMT, new org.apache.thrift.meta_data.FieldMetaData("postModifiedGmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_CONTENT_FILTERED, new org.apache.thrift.meta_data.FieldMetaData("postContentFiltered", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_PARENT, new org.apache.thrift.meta_data.FieldMetaData("postParent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_ORDER, new org.apache.thrift.meta_data.FieldMetaData("menuOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("postType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_MIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("postMimeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressPostsDO.class, metaDataMap);
  }

  public WordpressPostsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressPostsDO(WordpressPostsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.postAuthor = other.postAuthor;
    if (other.isSetPostDate()) {
      this.postDate = other.postDate;
    }
    if (other.isSetPostDateGmt()) {
      this.postDateGmt = other.postDateGmt;
    }
    if (other.isSetPostContent()) {
      this.postContent = other.postContent;
    }
    if (other.isSetPostTitle()) {
      this.postTitle = other.postTitle;
    }
    if (other.isSetPostExcerpt()) {
      this.postExcerpt = other.postExcerpt;
    }
    if (other.isSetPostStatus()) {
      this.postStatus = other.postStatus;
    }
    if (other.isSetCommentStatus()) {
      this.commentStatus = other.commentStatus;
    }
    if (other.isSetPingStatus()) {
      this.pingStatus = other.pingStatus;
    }
    if (other.isSetPostPassword()) {
      this.postPassword = other.postPassword;
    }
    if (other.isSetPostName()) {
      this.postName = other.postName;
    }
    if (other.isSetToPing()) {
      this.toPing = other.toPing;
    }
    if (other.isSetPinged()) {
      this.pinged = other.pinged;
    }
    if (other.isSetPostModified()) {
      this.postModified = other.postModified;
    }
    if (other.isSetPostModifiedGmt()) {
      this.postModifiedGmt = other.postModifiedGmt;
    }
    if (other.isSetPostContentFiltered()) {
      this.postContentFiltered = other.postContentFiltered;
    }
    this.postParent = other.postParent;
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    this.menuOrder = other.menuOrder;
    if (other.isSetPostType()) {
      this.postType = other.postType;
    }
    if (other.isSetPostMimeType()) {
      this.postMimeType = other.postMimeType;
    }
    this.commentCount = other.commentCount;
  }

  public WordpressPostsDO deepCopy() {
    return new WordpressPostsDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPostAuthorIsSet(false);
    this.postAuthor = 0;
    this.postDate = null;
    this.postDateGmt = null;
    this.postContent = null;
    this.postTitle = null;
    this.postExcerpt = null;
    this.postStatus = null;
    this.commentStatus = null;
    this.pingStatus = null;
    this.postPassword = null;
    this.postName = null;
    this.toPing = null;
    this.pinged = null;
    this.postModified = null;
    this.postModifiedGmt = null;
    this.postContentFiltered = null;
    setPostParentIsSet(false);
    this.postParent = 0;
    this.guid = null;
    setMenuOrderIsSet(false);
    this.menuOrder = 0;
    this.postType = null;
    this.postMimeType = null;
    setCommentCountIsSet(false);
    this.commentCount = 0;
  }

  public long getId() {
    return this.id;
  }

  public WordpressPostsDO setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getPostAuthor() {
    return this.postAuthor;
  }

  public WordpressPostsDO setPostAuthor(long postAuthor) {
    this.postAuthor = postAuthor;
    setPostAuthorIsSet(true);
    return this;
  }

  public void unsetPostAuthor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID);
  }

  /** Returns true if field postAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetPostAuthor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID);
  }

  public void setPostAuthorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID, value);
  }

  public String getPostDate() {
    return this.postDate;
  }

  public WordpressPostsDO setPostDate(String postDate) {
    this.postDate = postDate;
    return this;
  }

  public void unsetPostDate() {
    this.postDate = null;
  }

  /** Returns true if field postDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPostDate() {
    return this.postDate != null;
  }

  public void setPostDateIsSet(boolean value) {
    if (!value) {
      this.postDate = null;
    }
  }

  public String getPostDateGmt() {
    return this.postDateGmt;
  }

  public WordpressPostsDO setPostDateGmt(String postDateGmt) {
    this.postDateGmt = postDateGmt;
    return this;
  }

  public void unsetPostDateGmt() {
    this.postDateGmt = null;
  }

  /** Returns true if field postDateGmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPostDateGmt() {
    return this.postDateGmt != null;
  }

  public void setPostDateGmtIsSet(boolean value) {
    if (!value) {
      this.postDateGmt = null;
    }
  }

  public String getPostContent() {
    return this.postContent;
  }

  public WordpressPostsDO setPostContent(String postContent) {
    this.postContent = postContent;
    return this;
  }

  public void unsetPostContent() {
    this.postContent = null;
  }

  /** Returns true if field postContent is set (has been assigned a value) and false otherwise */
  public boolean isSetPostContent() {
    return this.postContent != null;
  }

  public void setPostContentIsSet(boolean value) {
    if (!value) {
      this.postContent = null;
    }
  }

  public String getPostTitle() {
    return this.postTitle;
  }

  public WordpressPostsDO setPostTitle(String postTitle) {
    this.postTitle = postTitle;
    return this;
  }

  public void unsetPostTitle() {
    this.postTitle = null;
  }

  /** Returns true if field postTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPostTitle() {
    return this.postTitle != null;
  }

  public void setPostTitleIsSet(boolean value) {
    if (!value) {
      this.postTitle = null;
    }
  }

  public String getPostExcerpt() {
    return this.postExcerpt;
  }

  public WordpressPostsDO setPostExcerpt(String postExcerpt) {
    this.postExcerpt = postExcerpt;
    return this;
  }

  public void unsetPostExcerpt() {
    this.postExcerpt = null;
  }

  /** Returns true if field postExcerpt is set (has been assigned a value) and false otherwise */
  public boolean isSetPostExcerpt() {
    return this.postExcerpt != null;
  }

  public void setPostExcerptIsSet(boolean value) {
    if (!value) {
      this.postExcerpt = null;
    }
  }

  public String getPostStatus() {
    return this.postStatus;
  }

  public WordpressPostsDO setPostStatus(String postStatus) {
    this.postStatus = postStatus;
    return this;
  }

  public void unsetPostStatus() {
    this.postStatus = null;
  }

  /** Returns true if field postStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatus() {
    return this.postStatus != null;
  }

  public void setPostStatusIsSet(boolean value) {
    if (!value) {
      this.postStatus = null;
    }
  }

  public String getCommentStatus() {
    return this.commentStatus;
  }

  public WordpressPostsDO setCommentStatus(String commentStatus) {
    this.commentStatus = commentStatus;
    return this;
  }

  public void unsetCommentStatus() {
    this.commentStatus = null;
  }

  /** Returns true if field commentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentStatus() {
    return this.commentStatus != null;
  }

  public void setCommentStatusIsSet(boolean value) {
    if (!value) {
      this.commentStatus = null;
    }
  }

  public String getPingStatus() {
    return this.pingStatus;
  }

  public WordpressPostsDO setPingStatus(String pingStatus) {
    this.pingStatus = pingStatus;
    return this;
  }

  public void unsetPingStatus() {
    this.pingStatus = null;
  }

  /** Returns true if field pingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPingStatus() {
    return this.pingStatus != null;
  }

  public void setPingStatusIsSet(boolean value) {
    if (!value) {
      this.pingStatus = null;
    }
  }

  public String getPostPassword() {
    return this.postPassword;
  }

  public WordpressPostsDO setPostPassword(String postPassword) {
    this.postPassword = postPassword;
    return this;
  }

  public void unsetPostPassword() {
    this.postPassword = null;
  }

  /** Returns true if field postPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetPostPassword() {
    return this.postPassword != null;
  }

  public void setPostPasswordIsSet(boolean value) {
    if (!value) {
      this.postPassword = null;
    }
  }

  public String getPostName() {
    return this.postName;
  }

  public WordpressPostsDO setPostName(String postName) {
    this.postName = postName;
    return this;
  }

  public void unsetPostName() {
    this.postName = null;
  }

  /** Returns true if field postName is set (has been assigned a value) and false otherwise */
  public boolean isSetPostName() {
    return this.postName != null;
  }

  public void setPostNameIsSet(boolean value) {
    if (!value) {
      this.postName = null;
    }
  }

  public String getToPing() {
    return this.toPing;
  }

  public WordpressPostsDO setToPing(String toPing) {
    this.toPing = toPing;
    return this;
  }

  public void unsetToPing() {
    this.toPing = null;
  }

  /** Returns true if field toPing is set (has been assigned a value) and false otherwise */
  public boolean isSetToPing() {
    return this.toPing != null;
  }

  public void setToPingIsSet(boolean value) {
    if (!value) {
      this.toPing = null;
    }
  }

  public String getPinged() {
    return this.pinged;
  }

  public WordpressPostsDO setPinged(String pinged) {
    this.pinged = pinged;
    return this;
  }

  public void unsetPinged() {
    this.pinged = null;
  }

  /** Returns true if field pinged is set (has been assigned a value) and false otherwise */
  public boolean isSetPinged() {
    return this.pinged != null;
  }

  public void setPingedIsSet(boolean value) {
    if (!value) {
      this.pinged = null;
    }
  }

  public String getPostModified() {
    return this.postModified;
  }

  public WordpressPostsDO setPostModified(String postModified) {
    this.postModified = postModified;
    return this;
  }

  public void unsetPostModified() {
    this.postModified = null;
  }

  /** Returns true if field postModified is set (has been assigned a value) and false otherwise */
  public boolean isSetPostModified() {
    return this.postModified != null;
  }

  public void setPostModifiedIsSet(boolean value) {
    if (!value) {
      this.postModified = null;
    }
  }

  public String getPostModifiedGmt() {
    return this.postModifiedGmt;
  }

  public WordpressPostsDO setPostModifiedGmt(String postModifiedGmt) {
    this.postModifiedGmt = postModifiedGmt;
    return this;
  }

  public void unsetPostModifiedGmt() {
    this.postModifiedGmt = null;
  }

  /** Returns true if field postModifiedGmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPostModifiedGmt() {
    return this.postModifiedGmt != null;
  }

  public void setPostModifiedGmtIsSet(boolean value) {
    if (!value) {
      this.postModifiedGmt = null;
    }
  }

  public String getPostContentFiltered() {
    return this.postContentFiltered;
  }

  public WordpressPostsDO setPostContentFiltered(String postContentFiltered) {
    this.postContentFiltered = postContentFiltered;
    return this;
  }

  public void unsetPostContentFiltered() {
    this.postContentFiltered = null;
  }

  /** Returns true if field postContentFiltered is set (has been assigned a value) and false otherwise */
  public boolean isSetPostContentFiltered() {
    return this.postContentFiltered != null;
  }

  public void setPostContentFilteredIsSet(boolean value) {
    if (!value) {
      this.postContentFiltered = null;
    }
  }

  public long getPostParent() {
    return this.postParent;
  }

  public WordpressPostsDO setPostParent(long postParent) {
    this.postParent = postParent;
    setPostParentIsSet(true);
    return this;
  }

  public void unsetPostParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTPARENT_ISSET_ID);
  }

  /** Returns true if field postParent is set (has been assigned a value) and false otherwise */
  public boolean isSetPostParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTPARENT_ISSET_ID);
  }

  public void setPostParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTPARENT_ISSET_ID, value);
  }

  public String getGuid() {
    return this.guid;
  }

  public WordpressPostsDO setGuid(String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public int getMenuOrder() {
    return this.menuOrder;
  }

  public WordpressPostsDO setMenuOrder(int menuOrder) {
    this.menuOrder = menuOrder;
    setMenuOrderIsSet(true);
    return this;
  }

  public void unsetMenuOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MENUORDER_ISSET_ID);
  }

  /** Returns true if field menuOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MENUORDER_ISSET_ID);
  }

  public void setMenuOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MENUORDER_ISSET_ID, value);
  }

  public String getPostType() {
    return this.postType;
  }

  public WordpressPostsDO setPostType(String postType) {
    this.postType = postType;
    return this;
  }

  public void unsetPostType() {
    this.postType = null;
  }

  /** Returns true if field postType is set (has been assigned a value) and false otherwise */
  public boolean isSetPostType() {
    return this.postType != null;
  }

  public void setPostTypeIsSet(boolean value) {
    if (!value) {
      this.postType = null;
    }
  }

  public String getPostMimeType() {
    return this.postMimeType;
  }

  public WordpressPostsDO setPostMimeType(String postMimeType) {
    this.postMimeType = postMimeType;
    return this;
  }

  public void unsetPostMimeType() {
    this.postMimeType = null;
  }

  /** Returns true if field postMimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetPostMimeType() {
    return this.postMimeType != null;
  }

  public void setPostMimeTypeIsSet(boolean value) {
    if (!value) {
      this.postMimeType = null;
    }
  }

  public long getCommentCount() {
    return this.commentCount;
  }

  public WordpressPostsDO setCommentCount(long commentCount) {
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
    return this;
  }

  public void unsetCommentCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  /** Returns true if field commentCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  public void setCommentCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case POST_AUTHOR:
      if (value == null) {
        unsetPostAuthor();
      } else {
        setPostAuthor((Long)value);
      }
      break;

    case POST_DATE:
      if (value == null) {
        unsetPostDate();
      } else {
        setPostDate((String)value);
      }
      break;

    case POST_DATE_GMT:
      if (value == null) {
        unsetPostDateGmt();
      } else {
        setPostDateGmt((String)value);
      }
      break;

    case POST_CONTENT:
      if (value == null) {
        unsetPostContent();
      } else {
        setPostContent((String)value);
      }
      break;

    case POST_TITLE:
      if (value == null) {
        unsetPostTitle();
      } else {
        setPostTitle((String)value);
      }
      break;

    case POST_EXCERPT:
      if (value == null) {
        unsetPostExcerpt();
      } else {
        setPostExcerpt((String)value);
      }
      break;

    case POST_STATUS:
      if (value == null) {
        unsetPostStatus();
      } else {
        setPostStatus((String)value);
      }
      break;

    case COMMENT_STATUS:
      if (value == null) {
        unsetCommentStatus();
      } else {
        setCommentStatus((String)value);
      }
      break;

    case PING_STATUS:
      if (value == null) {
        unsetPingStatus();
      } else {
        setPingStatus((String)value);
      }
      break;

    case POST_PASSWORD:
      if (value == null) {
        unsetPostPassword();
      } else {
        setPostPassword((String)value);
      }
      break;

    case POST_NAME:
      if (value == null) {
        unsetPostName();
      } else {
        setPostName((String)value);
      }
      break;

    case TO_PING:
      if (value == null) {
        unsetToPing();
      } else {
        setToPing((String)value);
      }
      break;

    case PINGED:
      if (value == null) {
        unsetPinged();
      } else {
        setPinged((String)value);
      }
      break;

    case POST_MODIFIED:
      if (value == null) {
        unsetPostModified();
      } else {
        setPostModified((String)value);
      }
      break;

    case POST_MODIFIED_GMT:
      if (value == null) {
        unsetPostModifiedGmt();
      } else {
        setPostModifiedGmt((String)value);
      }
      break;

    case POST_CONTENT_FILTERED:
      if (value == null) {
        unsetPostContentFiltered();
      } else {
        setPostContentFiltered((String)value);
      }
      break;

    case POST_PARENT:
      if (value == null) {
        unsetPostParent();
      } else {
        setPostParent((Long)value);
      }
      break;

    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((String)value);
      }
      break;

    case MENU_ORDER:
      if (value == null) {
        unsetMenuOrder();
      } else {
        setMenuOrder((Integer)value);
      }
      break;

    case POST_TYPE:
      if (value == null) {
        unsetPostType();
      } else {
        setPostType((String)value);
      }
      break;

    case POST_MIME_TYPE:
      if (value == null) {
        unsetPostMimeType();
      } else {
        setPostMimeType((String)value);
      }
      break;

    case COMMENT_COUNT:
      if (value == null) {
        unsetCommentCount();
      } else {
        setCommentCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case POST_AUTHOR:
      return getPostAuthor();

    case POST_DATE:
      return getPostDate();

    case POST_DATE_GMT:
      return getPostDateGmt();

    case POST_CONTENT:
      return getPostContent();

    case POST_TITLE:
      return getPostTitle();

    case POST_EXCERPT:
      return getPostExcerpt();

    case POST_STATUS:
      return getPostStatus();

    case COMMENT_STATUS:
      return getCommentStatus();

    case PING_STATUS:
      return getPingStatus();

    case POST_PASSWORD:
      return getPostPassword();

    case POST_NAME:
      return getPostName();

    case TO_PING:
      return getToPing();

    case PINGED:
      return getPinged();

    case POST_MODIFIED:
      return getPostModified();

    case POST_MODIFIED_GMT:
      return getPostModifiedGmt();

    case POST_CONTENT_FILTERED:
      return getPostContentFiltered();

    case POST_PARENT:
      return getPostParent();

    case GUID:
      return getGuid();

    case MENU_ORDER:
      return getMenuOrder();

    case POST_TYPE:
      return getPostType();

    case POST_MIME_TYPE:
      return getPostMimeType();

    case COMMENT_COUNT:
      return getCommentCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POST_AUTHOR:
      return isSetPostAuthor();
    case POST_DATE:
      return isSetPostDate();
    case POST_DATE_GMT:
      return isSetPostDateGmt();
    case POST_CONTENT:
      return isSetPostContent();
    case POST_TITLE:
      return isSetPostTitle();
    case POST_EXCERPT:
      return isSetPostExcerpt();
    case POST_STATUS:
      return isSetPostStatus();
    case COMMENT_STATUS:
      return isSetCommentStatus();
    case PING_STATUS:
      return isSetPingStatus();
    case POST_PASSWORD:
      return isSetPostPassword();
    case POST_NAME:
      return isSetPostName();
    case TO_PING:
      return isSetToPing();
    case PINGED:
      return isSetPinged();
    case POST_MODIFIED:
      return isSetPostModified();
    case POST_MODIFIED_GMT:
      return isSetPostModifiedGmt();
    case POST_CONTENT_FILTERED:
      return isSetPostContentFiltered();
    case POST_PARENT:
      return isSetPostParent();
    case GUID:
      return isSetGuid();
    case MENU_ORDER:
      return isSetMenuOrder();
    case POST_TYPE:
      return isSetPostType();
    case POST_MIME_TYPE:
      return isSetPostMimeType();
    case COMMENT_COUNT:
      return isSetCommentCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressPostsDO)
      return this.equals((WordpressPostsDO)that);
    return false;
  }

  public boolean equals(WordpressPostsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_postAuthor = true && this.isSetPostAuthor();
    boolean that_present_postAuthor = true && that.isSetPostAuthor();
    if (this_present_postAuthor || that_present_postAuthor) {
      if (!(this_present_postAuthor && that_present_postAuthor))
        return false;
      if (this.postAuthor != that.postAuthor)
        return false;
    }

    boolean this_present_postDate = true && this.isSetPostDate();
    boolean that_present_postDate = true && that.isSetPostDate();
    if (this_present_postDate || that_present_postDate) {
      if (!(this_present_postDate && that_present_postDate))
        return false;
      if (!this.postDate.equals(that.postDate))
        return false;
    }

    boolean this_present_postDateGmt = true && this.isSetPostDateGmt();
    boolean that_present_postDateGmt = true && that.isSetPostDateGmt();
    if (this_present_postDateGmt || that_present_postDateGmt) {
      if (!(this_present_postDateGmt && that_present_postDateGmt))
        return false;
      if (!this.postDateGmt.equals(that.postDateGmt))
        return false;
    }

    boolean this_present_postContent = true && this.isSetPostContent();
    boolean that_present_postContent = true && that.isSetPostContent();
    if (this_present_postContent || that_present_postContent) {
      if (!(this_present_postContent && that_present_postContent))
        return false;
      if (!this.postContent.equals(that.postContent))
        return false;
    }

    boolean this_present_postTitle = true && this.isSetPostTitle();
    boolean that_present_postTitle = true && that.isSetPostTitle();
    if (this_present_postTitle || that_present_postTitle) {
      if (!(this_present_postTitle && that_present_postTitle))
        return false;
      if (!this.postTitle.equals(that.postTitle))
        return false;
    }

    boolean this_present_postExcerpt = true && this.isSetPostExcerpt();
    boolean that_present_postExcerpt = true && that.isSetPostExcerpt();
    if (this_present_postExcerpt || that_present_postExcerpt) {
      if (!(this_present_postExcerpt && that_present_postExcerpt))
        return false;
      if (!this.postExcerpt.equals(that.postExcerpt))
        return false;
    }

    boolean this_present_postStatus = true && this.isSetPostStatus();
    boolean that_present_postStatus = true && that.isSetPostStatus();
    if (this_present_postStatus || that_present_postStatus) {
      if (!(this_present_postStatus && that_present_postStatus))
        return false;
      if (!this.postStatus.equals(that.postStatus))
        return false;
    }

    boolean this_present_commentStatus = true && this.isSetCommentStatus();
    boolean that_present_commentStatus = true && that.isSetCommentStatus();
    if (this_present_commentStatus || that_present_commentStatus) {
      if (!(this_present_commentStatus && that_present_commentStatus))
        return false;
      if (!this.commentStatus.equals(that.commentStatus))
        return false;
    }

    boolean this_present_pingStatus = true && this.isSetPingStatus();
    boolean that_present_pingStatus = true && that.isSetPingStatus();
    if (this_present_pingStatus || that_present_pingStatus) {
      if (!(this_present_pingStatus && that_present_pingStatus))
        return false;
      if (!this.pingStatus.equals(that.pingStatus))
        return false;
    }

    boolean this_present_postPassword = true && this.isSetPostPassword();
    boolean that_present_postPassword = true && that.isSetPostPassword();
    if (this_present_postPassword || that_present_postPassword) {
      if (!(this_present_postPassword && that_present_postPassword))
        return false;
      if (!this.postPassword.equals(that.postPassword))
        return false;
    }

    boolean this_present_postName = true && this.isSetPostName();
    boolean that_present_postName = true && that.isSetPostName();
    if (this_present_postName || that_present_postName) {
      if (!(this_present_postName && that_present_postName))
        return false;
      if (!this.postName.equals(that.postName))
        return false;
    }

    boolean this_present_toPing = true && this.isSetToPing();
    boolean that_present_toPing = true && that.isSetToPing();
    if (this_present_toPing || that_present_toPing) {
      if (!(this_present_toPing && that_present_toPing))
        return false;
      if (!this.toPing.equals(that.toPing))
        return false;
    }

    boolean this_present_pinged = true && this.isSetPinged();
    boolean that_present_pinged = true && that.isSetPinged();
    if (this_present_pinged || that_present_pinged) {
      if (!(this_present_pinged && that_present_pinged))
        return false;
      if (!this.pinged.equals(that.pinged))
        return false;
    }

    boolean this_present_postModified = true && this.isSetPostModified();
    boolean that_present_postModified = true && that.isSetPostModified();
    if (this_present_postModified || that_present_postModified) {
      if (!(this_present_postModified && that_present_postModified))
        return false;
      if (!this.postModified.equals(that.postModified))
        return false;
    }

    boolean this_present_postModifiedGmt = true && this.isSetPostModifiedGmt();
    boolean that_present_postModifiedGmt = true && that.isSetPostModifiedGmt();
    if (this_present_postModifiedGmt || that_present_postModifiedGmt) {
      if (!(this_present_postModifiedGmt && that_present_postModifiedGmt))
        return false;
      if (!this.postModifiedGmt.equals(that.postModifiedGmt))
        return false;
    }

    boolean this_present_postContentFiltered = true && this.isSetPostContentFiltered();
    boolean that_present_postContentFiltered = true && that.isSetPostContentFiltered();
    if (this_present_postContentFiltered || that_present_postContentFiltered) {
      if (!(this_present_postContentFiltered && that_present_postContentFiltered))
        return false;
      if (!this.postContentFiltered.equals(that.postContentFiltered))
        return false;
    }

    boolean this_present_postParent = true && this.isSetPostParent();
    boolean that_present_postParent = true && that.isSetPostParent();
    if (this_present_postParent || that_present_postParent) {
      if (!(this_present_postParent && that_present_postParent))
        return false;
      if (this.postParent != that.postParent)
        return false;
    }

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_menuOrder = true && this.isSetMenuOrder();
    boolean that_present_menuOrder = true && that.isSetMenuOrder();
    if (this_present_menuOrder || that_present_menuOrder) {
      if (!(this_present_menuOrder && that_present_menuOrder))
        return false;
      if (this.menuOrder != that.menuOrder)
        return false;
    }

    boolean this_present_postType = true && this.isSetPostType();
    boolean that_present_postType = true && that.isSetPostType();
    if (this_present_postType || that_present_postType) {
      if (!(this_present_postType && that_present_postType))
        return false;
      if (!this.postType.equals(that.postType))
        return false;
    }

    boolean this_present_postMimeType = true && this.isSetPostMimeType();
    boolean that_present_postMimeType = true && that.isSetPostMimeType();
    if (this_present_postMimeType || that_present_postMimeType) {
      if (!(this_present_postMimeType && that_present_postMimeType))
        return false;
      if (!this.postMimeType.equals(that.postMimeType))
        return false;
    }

    boolean this_present_commentCount = true && this.isSetCommentCount();
    boolean that_present_commentCount = true && that.isSetCommentCount();
    if (this_present_commentCount || that_present_commentCount) {
      if (!(this_present_commentCount && that_present_commentCount))
        return false;
      if (this.commentCount != that.commentCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetPostAuthor()) ? 131071 : 524287);
    if (isSetPostAuthor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(postAuthor);

    hashCode = hashCode * 8191 + ((isSetPostDate()) ? 131071 : 524287);
    if (isSetPostDate())
      hashCode = hashCode * 8191 + postDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostDateGmt()) ? 131071 : 524287);
    if (isSetPostDateGmt())
      hashCode = hashCode * 8191 + postDateGmt.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostContent()) ? 131071 : 524287);
    if (isSetPostContent())
      hashCode = hashCode * 8191 + postContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostTitle()) ? 131071 : 524287);
    if (isSetPostTitle())
      hashCode = hashCode * 8191 + postTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostExcerpt()) ? 131071 : 524287);
    if (isSetPostExcerpt())
      hashCode = hashCode * 8191 + postExcerpt.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostStatus()) ? 131071 : 524287);
    if (isSetPostStatus())
      hashCode = hashCode * 8191 + postStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentStatus()) ? 131071 : 524287);
    if (isSetCommentStatus())
      hashCode = hashCode * 8191 + commentStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetPingStatus()) ? 131071 : 524287);
    if (isSetPingStatus())
      hashCode = hashCode * 8191 + pingStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostPassword()) ? 131071 : 524287);
    if (isSetPostPassword())
      hashCode = hashCode * 8191 + postPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostName()) ? 131071 : 524287);
    if (isSetPostName())
      hashCode = hashCode * 8191 + postName.hashCode();

    hashCode = hashCode * 8191 + ((isSetToPing()) ? 131071 : 524287);
    if (isSetToPing())
      hashCode = hashCode * 8191 + toPing.hashCode();

    hashCode = hashCode * 8191 + ((isSetPinged()) ? 131071 : 524287);
    if (isSetPinged())
      hashCode = hashCode * 8191 + pinged.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostModified()) ? 131071 : 524287);
    if (isSetPostModified())
      hashCode = hashCode * 8191 + postModified.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostModifiedGmt()) ? 131071 : 524287);
    if (isSetPostModifiedGmt())
      hashCode = hashCode * 8191 + postModifiedGmt.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostContentFiltered()) ? 131071 : 524287);
    if (isSetPostContentFiltered())
      hashCode = hashCode * 8191 + postContentFiltered.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostParent()) ? 131071 : 524287);
    if (isSetPostParent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(postParent);

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMenuOrder()) ? 131071 : 524287);
    if (isSetMenuOrder())
      hashCode = hashCode * 8191 + menuOrder;

    hashCode = hashCode * 8191 + ((isSetPostType()) ? 131071 : 524287);
    if (isSetPostType())
      hashCode = hashCode * 8191 + postType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostMimeType()) ? 131071 : 524287);
    if (isSetPostMimeType())
      hashCode = hashCode * 8191 + postMimeType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentCount()) ? 131071 : 524287);
    if (isSetCommentCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commentCount);

    return hashCode;
  }

  @Override
  public int compareTo(WordpressPostsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostAuthor()).compareTo(other.isSetPostAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postAuthor, other.postAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostDate()).compareTo(other.isSetPostDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postDate, other.postDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostDateGmt()).compareTo(other.isSetPostDateGmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostDateGmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postDateGmt, other.postDateGmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostContent()).compareTo(other.isSetPostContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postContent, other.postContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostTitle()).compareTo(other.isSetPostTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postTitle, other.postTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostExcerpt()).compareTo(other.isSetPostExcerpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostExcerpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postExcerpt, other.postExcerpt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatus()).compareTo(other.isSetPostStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatus, other.postStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentStatus()).compareTo(other.isSetCommentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentStatus, other.commentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPingStatus()).compareTo(other.isSetPingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pingStatus, other.pingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostPassword()).compareTo(other.isSetPostPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postPassword, other.postPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostName()).compareTo(other.isSetPostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postName, other.postName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToPing()).compareTo(other.isSetToPing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToPing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toPing, other.toPing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPinged()).compareTo(other.isSetPinged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinged, other.pinged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostModified()).compareTo(other.isSetPostModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postModified, other.postModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostModifiedGmt()).compareTo(other.isSetPostModifiedGmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostModifiedGmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postModifiedGmt, other.postModifiedGmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostContentFiltered()).compareTo(other.isSetPostContentFiltered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostContentFiltered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postContentFiltered, other.postContentFiltered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostParent()).compareTo(other.isSetPostParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postParent, other.postParent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuOrder()).compareTo(other.isSetMenuOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuOrder, other.menuOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostType()).compareTo(other.isSetPostType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postType, other.postType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostMimeType()).compareTo(other.isSetPostMimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostMimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postMimeType, other.postMimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentCount()).compareTo(other.isSetCommentCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCount, other.commentCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WordpressPostsDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPostAuthor()) {
      if (!first) sb.append(", ");
      sb.append("postAuthor:");
      sb.append(this.postAuthor);
      first = false;
    }
    if (isSetPostDate()) {
      if (!first) sb.append(", ");
      sb.append("postDate:");
      if (this.postDate == null) {
        sb.append("null");
      } else {
        sb.append(this.postDate);
      }
      first = false;
    }
    if (isSetPostDateGmt()) {
      if (!first) sb.append(", ");
      sb.append("postDateGmt:");
      if (this.postDateGmt == null) {
        sb.append("null");
      } else {
        sb.append(this.postDateGmt);
      }
      first = false;
    }
    if (isSetPostContent()) {
      if (!first) sb.append(", ");
      sb.append("postContent:");
      if (this.postContent == null) {
        sb.append("null");
      } else {
        sb.append(this.postContent);
      }
      first = false;
    }
    if (isSetPostTitle()) {
      if (!first) sb.append(", ");
      sb.append("postTitle:");
      if (this.postTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.postTitle);
      }
      first = false;
    }
    if (isSetPostExcerpt()) {
      if (!first) sb.append(", ");
      sb.append("postExcerpt:");
      if (this.postExcerpt == null) {
        sb.append("null");
      } else {
        sb.append(this.postExcerpt);
      }
      first = false;
    }
    if (isSetPostStatus()) {
      if (!first) sb.append(", ");
      sb.append("postStatus:");
      if (this.postStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.postStatus);
      }
      first = false;
    }
    if (isSetCommentStatus()) {
      if (!first) sb.append(", ");
      sb.append("commentStatus:");
      if (this.commentStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.commentStatus);
      }
      first = false;
    }
    if (isSetPingStatus()) {
      if (!first) sb.append(", ");
      sb.append("pingStatus:");
      if (this.pingStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.pingStatus);
      }
      first = false;
    }
    if (isSetPostPassword()) {
      if (!first) sb.append(", ");
      sb.append("postPassword:");
      if (this.postPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.postPassword);
      }
      first = false;
    }
    if (isSetPostName()) {
      if (!first) sb.append(", ");
      sb.append("postName:");
      if (this.postName == null) {
        sb.append("null");
      } else {
        sb.append(this.postName);
      }
      first = false;
    }
    if (isSetToPing()) {
      if (!first) sb.append(", ");
      sb.append("toPing:");
      if (this.toPing == null) {
        sb.append("null");
      } else {
        sb.append(this.toPing);
      }
      first = false;
    }
    if (isSetPinged()) {
      if (!first) sb.append(", ");
      sb.append("pinged:");
      if (this.pinged == null) {
        sb.append("null");
      } else {
        sb.append(this.pinged);
      }
      first = false;
    }
    if (isSetPostModified()) {
      if (!first) sb.append(", ");
      sb.append("postModified:");
      if (this.postModified == null) {
        sb.append("null");
      } else {
        sb.append(this.postModified);
      }
      first = false;
    }
    if (isSetPostModifiedGmt()) {
      if (!first) sb.append(", ");
      sb.append("postModifiedGmt:");
      if (this.postModifiedGmt == null) {
        sb.append("null");
      } else {
        sb.append(this.postModifiedGmt);
      }
      first = false;
    }
    if (isSetPostContentFiltered()) {
      if (!first) sb.append(", ");
      sb.append("postContentFiltered:");
      if (this.postContentFiltered == null) {
        sb.append("null");
      } else {
        sb.append(this.postContentFiltered);
      }
      first = false;
    }
    if (isSetPostParent()) {
      if (!first) sb.append(", ");
      sb.append("postParent:");
      sb.append(this.postParent);
      first = false;
    }
    if (isSetGuid()) {
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
    }
    if (isSetMenuOrder()) {
      if (!first) sb.append(", ");
      sb.append("menuOrder:");
      sb.append(this.menuOrder);
      first = false;
    }
    if (isSetPostType()) {
      if (!first) sb.append(", ");
      sb.append("postType:");
      if (this.postType == null) {
        sb.append("null");
      } else {
        sb.append(this.postType);
      }
      first = false;
    }
    if (isSetPostMimeType()) {
      if (!first) sb.append(", ");
      sb.append("postMimeType:");
      if (this.postMimeType == null) {
        sb.append("null");
      } else {
        sb.append(this.postMimeType);
      }
      first = false;
    }
    if (isSetCommentCount()) {
      if (!first) sb.append(", ");
      sb.append("commentCount:");
      sb.append(this.commentCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressPostsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressPostsDOStandardScheme getScheme() {
      return new WordpressPostsDOStandardScheme();
    }
  }

  private static class WordpressPostsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WordpressPostsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressPostsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.postAuthor = iprot.readI64();
              struct.setPostAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postDate = iprot.readString();
              struct.setPostDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POST_DATE_GMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postDateGmt = iprot.readString();
              struct.setPostDateGmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POST_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postContent = iprot.readString();
              struct.setPostContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POST_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postTitle = iprot.readString();
              struct.setPostTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POST_EXCERPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postExcerpt = iprot.readString();
              struct.setPostExcerptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postStatus = iprot.readString();
              struct.setPostStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentStatus = iprot.readString();
              struct.setCommentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pingStatus = iprot.readString();
              struct.setPingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POST_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postPassword = iprot.readString();
              struct.setPostPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postName = iprot.readString();
              struct.setPostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TO_PING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toPing = iprot.readString();
              struct.setToPingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PINGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pinged = iprot.readString();
              struct.setPingedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // POST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postModified = iprot.readString();
              struct.setPostModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POST_MODIFIED_GMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postModifiedGmt = iprot.readString();
              struct.setPostModifiedGmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POST_CONTENT_FILTERED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postContentFiltered = iprot.readString();
              struct.setPostContentFilteredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // POST_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.postParent = iprot.readI64();
              struct.setPostParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MENU_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuOrder = iprot.readI32();
              struct.setMenuOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // POST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postType = iprot.readString();
              struct.setPostTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POST_MIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postMimeType = iprot.readString();
              struct.setPostMimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COMMENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentCount = iprot.readI64();
              struct.setCommentCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressPostsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPostAuthor()) {
        oprot.writeFieldBegin(POST_AUTHOR_FIELD_DESC);
        oprot.writeI64(struct.postAuthor);
        oprot.writeFieldEnd();
      }
      if (struct.postDate != null) {
        if (struct.isSetPostDate()) {
          oprot.writeFieldBegin(POST_DATE_FIELD_DESC);
          oprot.writeString(struct.postDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postDateGmt != null) {
        if (struct.isSetPostDateGmt()) {
          oprot.writeFieldBegin(POST_DATE_GMT_FIELD_DESC);
          oprot.writeString(struct.postDateGmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postContent != null) {
        if (struct.isSetPostContent()) {
          oprot.writeFieldBegin(POST_CONTENT_FIELD_DESC);
          oprot.writeString(struct.postContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postTitle != null) {
        if (struct.isSetPostTitle()) {
          oprot.writeFieldBegin(POST_TITLE_FIELD_DESC);
          oprot.writeString(struct.postTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postExcerpt != null) {
        if (struct.isSetPostExcerpt()) {
          oprot.writeFieldBegin(POST_EXCERPT_FIELD_DESC);
          oprot.writeString(struct.postExcerpt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postStatus != null) {
        if (struct.isSetPostStatus()) {
          oprot.writeFieldBegin(POST_STATUS_FIELD_DESC);
          oprot.writeString(struct.postStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentStatus != null) {
        if (struct.isSetCommentStatus()) {
          oprot.writeFieldBegin(COMMENT_STATUS_FIELD_DESC);
          oprot.writeString(struct.commentStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pingStatus != null) {
        if (struct.isSetPingStatus()) {
          oprot.writeFieldBegin(PING_STATUS_FIELD_DESC);
          oprot.writeString(struct.pingStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postPassword != null) {
        if (struct.isSetPostPassword()) {
          oprot.writeFieldBegin(POST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.postPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postName != null) {
        if (struct.isSetPostName()) {
          oprot.writeFieldBegin(POST_NAME_FIELD_DESC);
          oprot.writeString(struct.postName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toPing != null) {
        if (struct.isSetToPing()) {
          oprot.writeFieldBegin(TO_PING_FIELD_DESC);
          oprot.writeString(struct.toPing);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pinged != null) {
        if (struct.isSetPinged()) {
          oprot.writeFieldBegin(PINGED_FIELD_DESC);
          oprot.writeString(struct.pinged);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postModified != null) {
        if (struct.isSetPostModified()) {
          oprot.writeFieldBegin(POST_MODIFIED_FIELD_DESC);
          oprot.writeString(struct.postModified);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postModifiedGmt != null) {
        if (struct.isSetPostModifiedGmt()) {
          oprot.writeFieldBegin(POST_MODIFIED_GMT_FIELD_DESC);
          oprot.writeString(struct.postModifiedGmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postContentFiltered != null) {
        if (struct.isSetPostContentFiltered()) {
          oprot.writeFieldBegin(POST_CONTENT_FILTERED_FIELD_DESC);
          oprot.writeString(struct.postContentFiltered);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPostParent()) {
        oprot.writeFieldBegin(POST_PARENT_FIELD_DESC);
        oprot.writeI64(struct.postParent);
        oprot.writeFieldEnd();
      }
      if (struct.guid != null) {
        if (struct.isSetGuid()) {
          oprot.writeFieldBegin(GUID_FIELD_DESC);
          oprot.writeString(struct.guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMenuOrder()) {
        oprot.writeFieldBegin(MENU_ORDER_FIELD_DESC);
        oprot.writeI32(struct.menuOrder);
        oprot.writeFieldEnd();
      }
      if (struct.postType != null) {
        if (struct.isSetPostType()) {
          oprot.writeFieldBegin(POST_TYPE_FIELD_DESC);
          oprot.writeString(struct.postType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postMimeType != null) {
        if (struct.isSetPostMimeType()) {
          oprot.writeFieldBegin(POST_MIME_TYPE_FIELD_DESC);
          oprot.writeString(struct.postMimeType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentCount()) {
        oprot.writeFieldBegin(COMMENT_COUNT_FIELD_DESC);
        oprot.writeI64(struct.commentCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressPostsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressPostsDOTupleScheme getScheme() {
      return new WordpressPostsDOTupleScheme();
    }
  }

  private static class WordpressPostsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WordpressPostsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressPostsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPostAuthor()) {
        optionals.set(1);
      }
      if (struct.isSetPostDate()) {
        optionals.set(2);
      }
      if (struct.isSetPostDateGmt()) {
        optionals.set(3);
      }
      if (struct.isSetPostContent()) {
        optionals.set(4);
      }
      if (struct.isSetPostTitle()) {
        optionals.set(5);
      }
      if (struct.isSetPostExcerpt()) {
        optionals.set(6);
      }
      if (struct.isSetPostStatus()) {
        optionals.set(7);
      }
      if (struct.isSetCommentStatus()) {
        optionals.set(8);
      }
      if (struct.isSetPingStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPostPassword()) {
        optionals.set(10);
      }
      if (struct.isSetPostName()) {
        optionals.set(11);
      }
      if (struct.isSetToPing()) {
        optionals.set(12);
      }
      if (struct.isSetPinged()) {
        optionals.set(13);
      }
      if (struct.isSetPostModified()) {
        optionals.set(14);
      }
      if (struct.isSetPostModifiedGmt()) {
        optionals.set(15);
      }
      if (struct.isSetPostContentFiltered()) {
        optionals.set(16);
      }
      if (struct.isSetPostParent()) {
        optionals.set(17);
      }
      if (struct.isSetGuid()) {
        optionals.set(18);
      }
      if (struct.isSetMenuOrder()) {
        optionals.set(19);
      }
      if (struct.isSetPostType()) {
        optionals.set(20);
      }
      if (struct.isSetPostMimeType()) {
        optionals.set(21);
      }
      if (struct.isSetCommentCount()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetPostAuthor()) {
        oprot.writeI64(struct.postAuthor);
      }
      if (struct.isSetPostDate()) {
        oprot.writeString(struct.postDate);
      }
      if (struct.isSetPostDateGmt()) {
        oprot.writeString(struct.postDateGmt);
      }
      if (struct.isSetPostContent()) {
        oprot.writeString(struct.postContent);
      }
      if (struct.isSetPostTitle()) {
        oprot.writeString(struct.postTitle);
      }
      if (struct.isSetPostExcerpt()) {
        oprot.writeString(struct.postExcerpt);
      }
      if (struct.isSetPostStatus()) {
        oprot.writeString(struct.postStatus);
      }
      if (struct.isSetCommentStatus()) {
        oprot.writeString(struct.commentStatus);
      }
      if (struct.isSetPingStatus()) {
        oprot.writeString(struct.pingStatus);
      }
      if (struct.isSetPostPassword()) {
        oprot.writeString(struct.postPassword);
      }
      if (struct.isSetPostName()) {
        oprot.writeString(struct.postName);
      }
      if (struct.isSetToPing()) {
        oprot.writeString(struct.toPing);
      }
      if (struct.isSetPinged()) {
        oprot.writeString(struct.pinged);
      }
      if (struct.isSetPostModified()) {
        oprot.writeString(struct.postModified);
      }
      if (struct.isSetPostModifiedGmt()) {
        oprot.writeString(struct.postModifiedGmt);
      }
      if (struct.isSetPostContentFiltered()) {
        oprot.writeString(struct.postContentFiltered);
      }
      if (struct.isSetPostParent()) {
        oprot.writeI64(struct.postParent);
      }
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetMenuOrder()) {
        oprot.writeI32(struct.menuOrder);
      }
      if (struct.isSetPostType()) {
        oprot.writeString(struct.postType);
      }
      if (struct.isSetPostMimeType()) {
        oprot.writeString(struct.postMimeType);
      }
      if (struct.isSetCommentCount()) {
        oprot.writeI64(struct.commentCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressPostsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.postAuthor = iprot.readI64();
        struct.setPostAuthorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.postDate = iprot.readString();
        struct.setPostDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.postDateGmt = iprot.readString();
        struct.setPostDateGmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.postContent = iprot.readString();
        struct.setPostContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.postTitle = iprot.readString();
        struct.setPostTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.postExcerpt = iprot.readString();
        struct.setPostExcerptIsSet(true);
      }
      if (incoming.get(7)) {
        struct.postStatus = iprot.readString();
        struct.setPostStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.commentStatus = iprot.readString();
        struct.setCommentStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pingStatus = iprot.readString();
        struct.setPingStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.postPassword = iprot.readString();
        struct.setPostPasswordIsSet(true);
      }
      if (incoming.get(11)) {
        struct.postName = iprot.readString();
        struct.setPostNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.toPing = iprot.readString();
        struct.setToPingIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pinged = iprot.readString();
        struct.setPingedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.postModified = iprot.readString();
        struct.setPostModifiedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.postModifiedGmt = iprot.readString();
        struct.setPostModifiedGmtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.postContentFiltered = iprot.readString();
        struct.setPostContentFilteredIsSet(true);
      }
      if (incoming.get(17)) {
        struct.postParent = iprot.readI64();
        struct.setPostParentIsSet(true);
      }
      if (incoming.get(18)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(19)) {
        struct.menuOrder = iprot.readI32();
        struct.setMenuOrderIsSet(true);
      }
      if (incoming.get(20)) {
        struct.postType = iprot.readString();
        struct.setPostTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.postMimeType = iprot.readString();
        struct.setPostMimeTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.commentCount = iprot.readI64();
        struct.setCommentCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

