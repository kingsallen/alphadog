/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-06")
public class ImportUserEmployeeStatistic implements org.apache.thrift.TBase<ImportUserEmployeeStatistic, ImportUserEmployeeStatistic._Fields>, java.io.Serializable, Cloneable, Comparable<ImportUserEmployeeStatistic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportUserEmployeeStatistic");

  private static final org.apache.thrift.protocol.TField REPETITION_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("repetitionCounts", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCounts", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_EMPLOYEE_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmployeeDO", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCounts", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INSERT_ACCEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("insertAccept", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImportUserEmployeeStatisticStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImportUserEmployeeStatisticTupleSchemeFactory();

  public int repetitionCounts; // optional
  public int errorCounts; // optional
  public java.lang.String message; // optional
  public java.util.List<ImportErrorUserEmployee> userEmployeeDO; // optional
  public int totalCounts; // optional
  public boolean insertAccept; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPETITION_COUNTS((short)1, "repetitionCounts"),
    ERROR_COUNTS((short)2, "errorCounts"),
    MESSAGE((short)3, "message"),
    USER_EMPLOYEE_DO((short)4, "userEmployeeDO"),
    TOTAL_COUNTS((short)5, "totalCounts"),
    INSERT_ACCEPT((short)6, "insertAccept");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPETITION_COUNTS
          return REPETITION_COUNTS;
        case 2: // ERROR_COUNTS
          return ERROR_COUNTS;
        case 3: // MESSAGE
          return MESSAGE;
        case 4: // USER_EMPLOYEE_DO
          return USER_EMPLOYEE_DO;
        case 5: // TOTAL_COUNTS
          return TOTAL_COUNTS;
        case 6: // INSERT_ACCEPT
          return INSERT_ACCEPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPETITIONCOUNTS_ISSET_ID = 0;
  private static final int __ERRORCOUNTS_ISSET_ID = 1;
  private static final int __TOTALCOUNTS_ISSET_ID = 2;
  private static final int __INSERTACCEPT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPETITION_COUNTS,_Fields.ERROR_COUNTS,_Fields.MESSAGE,_Fields.USER_EMPLOYEE_DO,_Fields.TOTAL_COUNTS,_Fields.INSERT_ACCEPT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPETITION_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("repetitionCounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("errorCounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_EMPLOYEE_DO, new org.apache.thrift.meta_data.FieldMetaData("userEmployeeDO", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImportErrorUserEmployee.class))));
    tmpMap.put(_Fields.TOTAL_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("totalCounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSERT_ACCEPT, new org.apache.thrift.meta_data.FieldMetaData("insertAccept", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportUserEmployeeStatistic.class, metaDataMap);
  }

  public ImportUserEmployeeStatistic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImportUserEmployeeStatistic(ImportUserEmployeeStatistic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.repetitionCounts = other.repetitionCounts;
    this.errorCounts = other.errorCounts;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetUserEmployeeDO()) {
      java.util.List<ImportErrorUserEmployee> __this__userEmployeeDO = new java.util.ArrayList<ImportErrorUserEmployee>(other.userEmployeeDO.size());
      for (ImportErrorUserEmployee other_element : other.userEmployeeDO) {
        __this__userEmployeeDO.add(new ImportErrorUserEmployee(other_element));
      }
      this.userEmployeeDO = __this__userEmployeeDO;
    }
    this.totalCounts = other.totalCounts;
    this.insertAccept = other.insertAccept;
  }

  public ImportUserEmployeeStatistic deepCopy() {
    return new ImportUserEmployeeStatistic(this);
  }

  @Override
  public void clear() {
    setRepetitionCountsIsSet(false);
    this.repetitionCounts = 0;
    setErrorCountsIsSet(false);
    this.errorCounts = 0;
    this.message = null;
    this.userEmployeeDO = null;
    setTotalCountsIsSet(false);
    this.totalCounts = 0;
    setInsertAcceptIsSet(false);
    this.insertAccept = false;
  }

  public int getRepetitionCounts() {
    return this.repetitionCounts;
  }

  public ImportUserEmployeeStatistic setRepetitionCounts(int repetitionCounts) {
    this.repetitionCounts = repetitionCounts;
    setRepetitionCountsIsSet(true);
    return this;
  }

  public void unsetRepetitionCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPETITIONCOUNTS_ISSET_ID);
  }

  /** Returns true if field repetitionCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetRepetitionCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPETITIONCOUNTS_ISSET_ID);
  }

  public void setRepetitionCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPETITIONCOUNTS_ISSET_ID, value);
  }

  public int getErrorCounts() {
    return this.errorCounts;
  }

  public ImportUserEmployeeStatistic setErrorCounts(int errorCounts) {
    this.errorCounts = errorCounts;
    setErrorCountsIsSet(true);
    return this;
  }

  public void unsetErrorCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCOUNTS_ISSET_ID);
  }

  /** Returns true if field errorCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCOUNTS_ISSET_ID);
  }

  public void setErrorCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCOUNTS_ISSET_ID, value);
  }

  public java.lang.String getMessage() {
    return this.message;
  }

  public ImportUserEmployeeStatistic setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getUserEmployeeDOSize() {
    return (this.userEmployeeDO == null) ? 0 : this.userEmployeeDO.size();
  }

  public java.util.Iterator<ImportErrorUserEmployee> getUserEmployeeDOIterator() {
    return (this.userEmployeeDO == null) ? null : this.userEmployeeDO.iterator();
  }

  public void addToUserEmployeeDO(ImportErrorUserEmployee elem) {
    if (this.userEmployeeDO == null) {
      this.userEmployeeDO = new java.util.ArrayList<ImportErrorUserEmployee>();
    }
    this.userEmployeeDO.add(elem);
  }

  public java.util.List<ImportErrorUserEmployee> getUserEmployeeDO() {
    return this.userEmployeeDO;
  }

  public ImportUserEmployeeStatistic setUserEmployeeDO(java.util.List<ImportErrorUserEmployee> userEmployeeDO) {
    this.userEmployeeDO = userEmployeeDO;
    return this;
  }

  public void unsetUserEmployeeDO() {
    this.userEmployeeDO = null;
  }

  /** Returns true if field userEmployeeDO is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEmployeeDO() {
    return this.userEmployeeDO != null;
  }

  public void setUserEmployeeDOIsSet(boolean value) {
    if (!value) {
      this.userEmployeeDO = null;
    }
  }

  public int getTotalCounts() {
    return this.totalCounts;
  }

  public ImportUserEmployeeStatistic setTotalCounts(int totalCounts) {
    this.totalCounts = totalCounts;
    setTotalCountsIsSet(true);
    return this;
  }

  public void unsetTotalCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNTS_ISSET_ID);
  }

  /** Returns true if field totalCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNTS_ISSET_ID);
  }

  public void setTotalCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNTS_ISSET_ID, value);
  }

  public boolean isInsertAccept() {
    return this.insertAccept;
  }

  public ImportUserEmployeeStatistic setInsertAccept(boolean insertAccept) {
    this.insertAccept = insertAccept;
    setInsertAcceptIsSet(true);
    return this;
  }

  public void unsetInsertAccept() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERTACCEPT_ISSET_ID);
  }

  /** Returns true if field insertAccept is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertAccept() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERTACCEPT_ISSET_ID);
  }

  public void setInsertAcceptIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERTACCEPT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case REPETITION_COUNTS:
      if (value == null) {
        unsetRepetitionCounts();
      } else {
        setRepetitionCounts((java.lang.Integer)value);
      }
      break;

    case ERROR_COUNTS:
      if (value == null) {
        unsetErrorCounts();
      } else {
        setErrorCounts((java.lang.Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case USER_EMPLOYEE_DO:
      if (value == null) {
        unsetUserEmployeeDO();
      } else {
        setUserEmployeeDO((java.util.List<ImportErrorUserEmployee>)value);
      }
      break;

    case TOTAL_COUNTS:
      if (value == null) {
        unsetTotalCounts();
      } else {
        setTotalCounts((java.lang.Integer)value);
      }
      break;

    case INSERT_ACCEPT:
      if (value == null) {
        unsetInsertAccept();
      } else {
        setInsertAccept((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPETITION_COUNTS:
      return getRepetitionCounts();

    case ERROR_COUNTS:
      return getErrorCounts();

    case MESSAGE:
      return getMessage();

    case USER_EMPLOYEE_DO:
      return getUserEmployeeDO();

    case TOTAL_COUNTS:
      return getTotalCounts();

    case INSERT_ACCEPT:
      return isInsertAccept();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPETITION_COUNTS:
      return isSetRepetitionCounts();
    case ERROR_COUNTS:
      return isSetErrorCounts();
    case MESSAGE:
      return isSetMessage();
    case USER_EMPLOYEE_DO:
      return isSetUserEmployeeDO();
    case TOTAL_COUNTS:
      return isSetTotalCounts();
    case INSERT_ACCEPT:
      return isSetInsertAccept();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImportUserEmployeeStatistic)
      return this.equals((ImportUserEmployeeStatistic)that);
    return false;
  }

  public boolean equals(ImportUserEmployeeStatistic that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_repetitionCounts = true && this.isSetRepetitionCounts();
    boolean that_present_repetitionCounts = true && that.isSetRepetitionCounts();
    if (this_present_repetitionCounts || that_present_repetitionCounts) {
      if (!(this_present_repetitionCounts && that_present_repetitionCounts))
        return false;
      if (this.repetitionCounts != that.repetitionCounts)
        return false;
    }

    boolean this_present_errorCounts = true && this.isSetErrorCounts();
    boolean that_present_errorCounts = true && that.isSetErrorCounts();
    if (this_present_errorCounts || that_present_errorCounts) {
      if (!(this_present_errorCounts && that_present_errorCounts))
        return false;
      if (this.errorCounts != that.errorCounts)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_userEmployeeDO = true && this.isSetUserEmployeeDO();
    boolean that_present_userEmployeeDO = true && that.isSetUserEmployeeDO();
    if (this_present_userEmployeeDO || that_present_userEmployeeDO) {
      if (!(this_present_userEmployeeDO && that_present_userEmployeeDO))
        return false;
      if (!this.userEmployeeDO.equals(that.userEmployeeDO))
        return false;
    }

    boolean this_present_totalCounts = true && this.isSetTotalCounts();
    boolean that_present_totalCounts = true && that.isSetTotalCounts();
    if (this_present_totalCounts || that_present_totalCounts) {
      if (!(this_present_totalCounts && that_present_totalCounts))
        return false;
      if (this.totalCounts != that.totalCounts)
        return false;
    }

    boolean this_present_insertAccept = true && this.isSetInsertAccept();
    boolean that_present_insertAccept = true && that.isSetInsertAccept();
    if (this_present_insertAccept || that_present_insertAccept) {
      if (!(this_present_insertAccept && that_present_insertAccept))
        return false;
      if (this.insertAccept != that.insertAccept)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRepetitionCounts()) ? 131071 : 524287);
    if (isSetRepetitionCounts())
      hashCode = hashCode * 8191 + repetitionCounts;

    hashCode = hashCode * 8191 + ((isSetErrorCounts()) ? 131071 : 524287);
    if (isSetErrorCounts())
      hashCode = hashCode * 8191 + errorCounts;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserEmployeeDO()) ? 131071 : 524287);
    if (isSetUserEmployeeDO())
      hashCode = hashCode * 8191 + userEmployeeDO.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalCounts()) ? 131071 : 524287);
    if (isSetTotalCounts())
      hashCode = hashCode * 8191 + totalCounts;

    hashCode = hashCode * 8191 + ((isSetInsertAccept()) ? 131071 : 524287);
    if (isSetInsertAccept())
      hashCode = hashCode * 8191 + ((insertAccept) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ImportUserEmployeeStatistic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRepetitionCounts()).compareTo(other.isSetRepetitionCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepetitionCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repetitionCounts, other.repetitionCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorCounts()).compareTo(other.isSetErrorCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCounts, other.errorCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserEmployeeDO()).compareTo(other.isSetUserEmployeeDO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmployeeDO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmployeeDO, other.userEmployeeDO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalCounts()).compareTo(other.isSetTotalCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCounts, other.totalCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInsertAccept()).compareTo(other.isSetInsertAccept());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertAccept()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertAccept, other.insertAccept);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImportUserEmployeeStatistic(");
    boolean first = true;

    if (isSetRepetitionCounts()) {
      sb.append("repetitionCounts:");
      sb.append(this.repetitionCounts);
      first = false;
    }
    if (isSetErrorCounts()) {
      if (!first) sb.append(", ");
      sb.append("errorCounts:");
      sb.append(this.errorCounts);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetUserEmployeeDO()) {
      if (!first) sb.append(", ");
      sb.append("userEmployeeDO:");
      if (this.userEmployeeDO == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmployeeDO);
      }
      first = false;
    }
    if (isSetTotalCounts()) {
      if (!first) sb.append(", ");
      sb.append("totalCounts:");
      sb.append(this.totalCounts);
      first = false;
    }
    if (isSetInsertAccept()) {
      if (!first) sb.append(", ");
      sb.append("insertAccept:");
      sb.append(this.insertAccept);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImportUserEmployeeStatisticStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImportUserEmployeeStatisticStandardScheme getScheme() {
      return new ImportUserEmployeeStatisticStandardScheme();
    }
  }

  private static class ImportUserEmployeeStatisticStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImportUserEmployeeStatistic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImportUserEmployeeStatistic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPETITION_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repetitionCounts = iprot.readI32();
              struct.setRepetitionCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCounts = iprot.readI32();
              struct.setErrorCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_EMPLOYEE_DO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.userEmployeeDO = new java.util.ArrayList<ImportErrorUserEmployee>(_list32.size);
                ImportErrorUserEmployee _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new ImportErrorUserEmployee();
                  _elem33.read(iprot);
                  struct.userEmployeeDO.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setUserEmployeeDOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCounts = iprot.readI32();
              struct.setTotalCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSERT_ACCEPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.insertAccept = iprot.readBool();
              struct.setInsertAcceptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImportUserEmployeeStatistic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRepetitionCounts()) {
        oprot.writeFieldBegin(REPETITION_COUNTS_FIELD_DESC);
        oprot.writeI32(struct.repetitionCounts);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErrorCounts()) {
        oprot.writeFieldBegin(ERROR_COUNTS_FIELD_DESC);
        oprot.writeI32(struct.errorCounts);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userEmployeeDO != null) {
        if (struct.isSetUserEmployeeDO()) {
          oprot.writeFieldBegin(USER_EMPLOYEE_DO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userEmployeeDO.size()));
            for (ImportErrorUserEmployee _iter35 : struct.userEmployeeDO)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalCounts()) {
        oprot.writeFieldBegin(TOTAL_COUNTS_FIELD_DESC);
        oprot.writeI32(struct.totalCounts);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInsertAccept()) {
        oprot.writeFieldBegin(INSERT_ACCEPT_FIELD_DESC);
        oprot.writeBool(struct.insertAccept);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImportUserEmployeeStatisticTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImportUserEmployeeStatisticTupleScheme getScheme() {
      return new ImportUserEmployeeStatisticTupleScheme();
    }
  }

  private static class ImportUserEmployeeStatisticTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImportUserEmployeeStatistic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImportUserEmployeeStatistic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRepetitionCounts()) {
        optionals.set(0);
      }
      if (struct.isSetErrorCounts()) {
        optionals.set(1);
      }
      if (struct.isSetMessage()) {
        optionals.set(2);
      }
      if (struct.isSetUserEmployeeDO()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCounts()) {
        optionals.set(4);
      }
      if (struct.isSetInsertAccept()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRepetitionCounts()) {
        oprot.writeI32(struct.repetitionCounts);
      }
      if (struct.isSetErrorCounts()) {
        oprot.writeI32(struct.errorCounts);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetUserEmployeeDO()) {
        {
          oprot.writeI32(struct.userEmployeeDO.size());
          for (ImportErrorUserEmployee _iter36 : struct.userEmployeeDO)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetTotalCounts()) {
        oprot.writeI32(struct.totalCounts);
      }
      if (struct.isSetInsertAccept()) {
        oprot.writeBool(struct.insertAccept);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImportUserEmployeeStatistic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.repetitionCounts = iprot.readI32();
        struct.setRepetitionCountsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorCounts = iprot.readI32();
        struct.setErrorCountsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userEmployeeDO = new java.util.ArrayList<ImportErrorUserEmployee>(_list37.size);
          ImportErrorUserEmployee _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new ImportErrorUserEmployee();
            _elem38.read(iprot);
            struct.userEmployeeDO.add(_elem38);
          }
        }
        struct.setUserEmployeeDOIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCounts = iprot.readI32();
        struct.setTotalCountsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.insertAccept = iprot.readBool();
        struct.setInsertAcceptIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

