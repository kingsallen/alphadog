/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.chat.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-13")
public class ChatService {

  public interface Iface {

    public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO listHRChatRoom(int hrId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO listUserChatRoom(int userId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.chat.struct.ChatsVO listChatLogs(int roomId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public void saveChat(int roomId, java.lang.String content, int positionId, byte speaker) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO enterRoom(int userId, int hrId, int positionId, int roomId) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.chat.struct.ChatVO getChat(int roomId, byte speaker) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public void leaveChatRoom(int roomId, byte speaker) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void listHRChatRoom(int hrId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> resultHandler) throws org.apache.thrift.TException;

    public void listUserChatRoom(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> resultHandler) throws org.apache.thrift.TException;

    public void listChatLogs(int roomId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO> resultHandler) throws org.apache.thrift.TException;

    public void saveChat(int roomId, java.lang.String content, int positionId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void enterRoom(int userId, int hrId, int positionId, int roomId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> resultHandler) throws org.apache.thrift.TException;

    public void getChat(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO> resultHandler) throws org.apache.thrift.TException;

    public void leaveChatRoom(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO listHRChatRoom(int hrId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_listHRChatRoom(hrId, pageNo, pageSize);
      return recv_listHRChatRoom();
    }

    public void send_listHRChatRoom(int hrId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listHRChatRoom_args args = new listHRChatRoom_args();
      args.setHrId(hrId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listHRChatRoom", args);
    }

    public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO recv_listHRChatRoom() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      listHRChatRoom_result result = new listHRChatRoom_result();
      receiveBase(result, "listHRChatRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listHRChatRoom failed: unknown result");
    }

    public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO listUserChatRoom(int userId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_listUserChatRoom(userId, pageNo, pageSize);
      return recv_listUserChatRoom();
    }

    public void send_listUserChatRoom(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listUserChatRoom_args args = new listUserChatRoom_args();
      args.setUserId(userId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listUserChatRoom", args);
    }

    public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO recv_listUserChatRoom() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      listUserChatRoom_result result = new listUserChatRoom_result();
      receiveBase(result, "listUserChatRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserChatRoom failed: unknown result");
    }

    public com.moseeker.thrift.gen.chat.struct.ChatsVO listChatLogs(int roomId, int pageNo, int pageSize) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_listChatLogs(roomId, pageNo, pageSize);
      return recv_listChatLogs();
    }

    public void send_listChatLogs(int roomId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listChatLogs_args args = new listChatLogs_args();
      args.setRoomId(roomId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listChatLogs", args);
    }

    public com.moseeker.thrift.gen.chat.struct.ChatsVO recv_listChatLogs() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      listChatLogs_result result = new listChatLogs_result();
      receiveBase(result, "listChatLogs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listChatLogs failed: unknown result");
    }

    public void saveChat(int roomId, java.lang.String content, int positionId, byte speaker) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_saveChat(roomId, content, positionId, speaker);
      recv_saveChat();
    }

    public void send_saveChat(int roomId, java.lang.String content, int positionId, byte speaker) throws org.apache.thrift.TException
    {
      saveChat_args args = new saveChat_args();
      args.setRoomId(roomId);
      args.setContent(content);
      args.setPositionId(positionId);
      args.setSpeaker(speaker);
      sendBase("saveChat", args);
    }

    public void recv_saveChat() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      saveChat_result result = new saveChat_result();
      receiveBase(result, "saveChat");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO enterRoom(int userId, int hrId, int positionId, int roomId) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_enterRoom(userId, hrId, positionId, roomId);
      return recv_enterRoom();
    }

    public void send_enterRoom(int userId, int hrId, int positionId, int roomId) throws org.apache.thrift.TException
    {
      enterRoom_args args = new enterRoom_args();
      args.setUserId(userId);
      args.setHrId(hrId);
      args.setPositionId(positionId);
      args.setRoomId(roomId);
      sendBase("enterRoom", args);
    }

    public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO recv_enterRoom() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      enterRoom_result result = new enterRoom_result();
      receiveBase(result, "enterRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enterRoom failed: unknown result");
    }

    public com.moseeker.thrift.gen.chat.struct.ChatVO getChat(int roomId, byte speaker) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_getChat(roomId, speaker);
      return recv_getChat();
    }

    public void send_getChat(int roomId, byte speaker) throws org.apache.thrift.TException
    {
      getChat_args args = new getChat_args();
      args.setRoomId(roomId);
      args.setSpeaker(speaker);
      sendBase("getChat", args);
    }

    public com.moseeker.thrift.gen.chat.struct.ChatVO recv_getChat() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      getChat_result result = new getChat_result();
      receiveBase(result, "getChat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChat failed: unknown result");
    }

    public void leaveChatRoom(int roomId, byte speaker) throws org.apache.thrift.TException
    {
      send_leaveChatRoom(roomId, speaker);
      recv_leaveChatRoom();
    }

    public void send_leaveChatRoom(int roomId, byte speaker) throws org.apache.thrift.TException
    {
      leaveChatRoom_args args = new leaveChatRoom_args();
      args.setRoomId(roomId);
      args.setSpeaker(speaker);
      sendBase("leaveChatRoom", args);
    }

    public void recv_leaveChatRoom() throws org.apache.thrift.TException
    {
      leaveChatRoom_result result = new leaveChatRoom_result();
      receiveBase(result, "leaveChatRoom");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void listHRChatRoom(int hrId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listHRChatRoom_call method_call = new listHRChatRoom_call(hrId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listHRChatRoom_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> {
      private int hrId;
      private int pageNo;
      private int pageSize;
      public listHRChatRoom_call(int hrId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hrId = hrId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHRChatRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listHRChatRoom_args args = new listHRChatRoom_args();
        args.setHrId(hrId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listHRChatRoom();
      }
    }

    public void listUserChatRoom(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserChatRoom_call method_call = new listUserChatRoom_call(userId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserChatRoom_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> {
      private int userId;
      private int pageNo;
      private int pageSize;
      public listUserChatRoom_call(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserChatRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserChatRoom_args args = new listUserChatRoom_args();
        args.setUserId(userId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserChatRoom();
      }
    }

    public void listChatLogs(int roomId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listChatLogs_call method_call = new listChatLogs_call(roomId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listChatLogs_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.chat.struct.ChatsVO> {
      private int roomId;
      private int pageNo;
      private int pageSize;
      public listChatLogs_call(int roomId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listChatLogs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listChatLogs_args args = new listChatLogs_args();
        args.setRoomId(roomId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.chat.struct.ChatsVO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listChatLogs();
      }
    }

    public void saveChat(int roomId, java.lang.String content, int positionId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveChat_call method_call = new saveChat_call(roomId, content, positionId, speaker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveChat_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int roomId;
      private java.lang.String content;
      private int positionId;
      private byte speaker;
      public saveChat_call(int roomId, java.lang.String content, int positionId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
        this.content = content;
        this.positionId = positionId;
        this.speaker = speaker;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveChat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveChat_args args = new saveChat_args();
        args.setRoomId(roomId);
        args.setContent(content);
        args.setPositionId(positionId);
        args.setSpeaker(speaker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void enterRoom(int userId, int hrId, int positionId, int roomId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enterRoom_call method_call = new enterRoom_call(userId, hrId, positionId, roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enterRoom_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> {
      private int userId;
      private int hrId;
      private int positionId;
      private int roomId;
      public enterRoom_call(int userId, int hrId, int positionId, int roomId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.hrId = hrId;
        this.positionId = positionId;
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enterRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enterRoom_args args = new enterRoom_args();
        args.setUserId(userId);
        args.setHrId(hrId);
        args.setPositionId(positionId);
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enterRoom();
      }
    }

    public void getChat(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChat_call method_call = new getChat_call(roomId, speaker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChat_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.chat.struct.ChatVO> {
      private int roomId;
      private byte speaker;
      public getChat_call(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
        this.speaker = speaker;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChat_args args = new getChat_args();
        args.setRoomId(roomId);
        args.setSpeaker(speaker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.chat.struct.ChatVO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChat();
      }
    }

    public void leaveChatRoom(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      leaveChatRoom_call method_call = new leaveChatRoom_call(roomId, speaker, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class leaveChatRoom_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int roomId;
      private byte speaker;
      public leaveChatRoom_call(int roomId, byte speaker, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
        this.speaker = speaker;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("leaveChatRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        leaveChatRoom_args args = new leaveChatRoom_args();
        args.setRoomId(roomId);
        args.setSpeaker(speaker);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("listHRChatRoom", new listHRChatRoom());
      processMap.put("listUserChatRoom", new listUserChatRoom());
      processMap.put("listChatLogs", new listChatLogs());
      processMap.put("saveChat", new saveChat());
      processMap.put("enterRoom", new enterRoom());
      processMap.put("getChat", new getChat());
      processMap.put("leaveChatRoom", new leaveChatRoom());
      return processMap;
    }

    public static class listHRChatRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listHRChatRoom_args> {
      public listHRChatRoom() {
        super("listHRChatRoom");
      }

      public listHRChatRoom_args getEmptyArgsInstance() {
        return new listHRChatRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listHRChatRoom_result getResult(I iface, listHRChatRoom_args args) throws org.apache.thrift.TException {
        listHRChatRoom_result result = new listHRChatRoom_result();
        try {
          result.success = iface.listHRChatRoom(args.hrId, args.pageNo, args.pageSize);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listUserChatRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserChatRoom_args> {
      public listUserChatRoom() {
        super("listUserChatRoom");
      }

      public listUserChatRoom_args getEmptyArgsInstance() {
        return new listUserChatRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserChatRoom_result getResult(I iface, listUserChatRoom_args args) throws org.apache.thrift.TException {
        listUserChatRoom_result result = new listUserChatRoom_result();
        try {
          result.success = iface.listUserChatRoom(args.userId, args.pageNo, args.pageSize);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listChatLogs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listChatLogs_args> {
      public listChatLogs() {
        super("listChatLogs");
      }

      public listChatLogs_args getEmptyArgsInstance() {
        return new listChatLogs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listChatLogs_result getResult(I iface, listChatLogs_args args) throws org.apache.thrift.TException {
        listChatLogs_result result = new listChatLogs_result();
        try {
          result.success = iface.listChatLogs(args.roomId, args.pageNo, args.pageSize);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveChat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveChat_args> {
      public saveChat() {
        super("saveChat");
      }

      public saveChat_args getEmptyArgsInstance() {
        return new saveChat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveChat_result getResult(I iface, saveChat_args args) throws org.apache.thrift.TException {
        saveChat_result result = new saveChat_result();
        try {
          iface.saveChat(args.roomId, args.content, args.positionId, args.speaker);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class enterRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enterRoom_args> {
      public enterRoom() {
        super("enterRoom");
      }

      public enterRoom_args getEmptyArgsInstance() {
        return new enterRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enterRoom_result getResult(I iface, enterRoom_args args) throws org.apache.thrift.TException {
        enterRoom_result result = new enterRoom_result();
        try {
          result.success = iface.enterRoom(args.userId, args.hrId, args.positionId, args.roomId);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getChat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChat_args> {
      public getChat() {
        super("getChat");
      }

      public getChat_args getEmptyArgsInstance() {
        return new getChat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChat_result getResult(I iface, getChat_args args) throws org.apache.thrift.TException {
        getChat_result result = new getChat_result();
        try {
          result.success = iface.getChat(args.roomId, args.speaker);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class leaveChatRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, leaveChatRoom_args> {
      public leaveChatRoom() {
        super("leaveChatRoom");
      }

      public leaveChatRoom_args getEmptyArgsInstance() {
        return new leaveChatRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public leaveChatRoom_result getResult(I iface, leaveChatRoom_args args) throws org.apache.thrift.TException {
        leaveChatRoom_result result = new leaveChatRoom_result();
        iface.leaveChatRoom(args.roomId, args.speaker);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("listHRChatRoom", new listHRChatRoom());
      processMap.put("listUserChatRoom", new listUserChatRoom());
      processMap.put("listChatLogs", new listChatLogs());
      processMap.put("saveChat", new saveChat());
      processMap.put("enterRoom", new enterRoom());
      processMap.put("getChat", new getChat());
      processMap.put("leaveChatRoom", new leaveChatRoom());
      return processMap;
    }

    public static class listHRChatRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listHRChatRoom_args, com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> {
      public listHRChatRoom() {
        super("listHRChatRoom");
      }

      public listHRChatRoom_args getEmptyArgsInstance() {
        return new listHRChatRoom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO>() { 
          public void onComplete(com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO o) {
            listHRChatRoom_result result = new listHRChatRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listHRChatRoom_result result = new listHRChatRoom_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listHRChatRoom_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO> resultHandler) throws org.apache.thrift.TException {
        iface.listHRChatRoom(args.hrId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class listUserChatRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserChatRoom_args, com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> {
      public listUserChatRoom() {
        super("listUserChatRoom");
      }

      public listUserChatRoom_args getEmptyArgsInstance() {
        return new listUserChatRoom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO>() { 
          public void onComplete(com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO o) {
            listUserChatRoom_result result = new listUserChatRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listUserChatRoom_result result = new listUserChatRoom_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserChatRoom_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO> resultHandler) throws org.apache.thrift.TException {
        iface.listUserChatRoom(args.userId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class listChatLogs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listChatLogs_args, com.moseeker.thrift.gen.chat.struct.ChatsVO> {
      public listChatLogs() {
        super("listChatLogs");
      }

      public listChatLogs_args getEmptyArgsInstance() {
        return new listChatLogs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO>() { 
          public void onComplete(com.moseeker.thrift.gen.chat.struct.ChatsVO o) {
            listChatLogs_result result = new listChatLogs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listChatLogs_result result = new listChatLogs_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listChatLogs_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatsVO> resultHandler) throws org.apache.thrift.TException {
        iface.listChatLogs(args.roomId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class saveChat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveChat_args, Void> {
      public saveChat() {
        super("saveChat");
      }

      public saveChat_args getEmptyArgsInstance() {
        return new saveChat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveChat_result result = new saveChat_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveChat_result result = new saveChat_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveChat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.saveChat(args.roomId, args.content, args.positionId, args.speaker,resultHandler);
      }
    }

    public static class enterRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enterRoom_args, com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> {
      public enterRoom() {
        super("enterRoom");
      }

      public enterRoom_args getEmptyArgsInstance() {
        return new enterRoom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO>() { 
          public void onComplete(com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO o) {
            enterRoom_result result = new enterRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            enterRoom_result result = new enterRoom_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enterRoom_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO> resultHandler) throws org.apache.thrift.TException {
        iface.enterRoom(args.userId, args.hrId, args.positionId, args.roomId,resultHandler);
      }
    }

    public static class getChat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChat_args, com.moseeker.thrift.gen.chat.struct.ChatVO> {
      public getChat() {
        super("getChat");
      }

      public getChat_args getEmptyArgsInstance() {
        return new getChat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO>() { 
          public void onComplete(com.moseeker.thrift.gen.chat.struct.ChatVO o) {
            getChat_result result = new getChat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getChat_result result = new getChat_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChat_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.chat.struct.ChatVO> resultHandler) throws org.apache.thrift.TException {
        iface.getChat(args.roomId, args.speaker,resultHandler);
      }
    }

    public static class leaveChatRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, leaveChatRoom_args, Void> {
      public leaveChatRoom() {
        super("leaveChatRoom");
      }

      public leaveChatRoom_args getEmptyArgsInstance() {
        return new leaveChatRoom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            leaveChatRoom_result result = new leaveChatRoom_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            leaveChatRoom_result result = new leaveChatRoom_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, leaveChatRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.leaveChatRoom(args.roomId, args.speaker,resultHandler);
      }
    }

  }

  public static class listHRChatRoom_args implements org.apache.thrift.TBase<listHRChatRoom_args, listHRChatRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<listHRChatRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHRChatRoom_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHRChatRoom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHRChatRoom_argsTupleSchemeFactory();

    public int hrId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hrId"),
      PAGE_NO((short)2, "pageNo"),
      PAGE_SIZE((short)3, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHRChatRoom_args.class, metaDataMap);
    }

    public listHRChatRoom_args() {
    }

    public listHRChatRoom_args(
      int hrId,
      int pageNo,
      int pageSize)
    {
      this();
      this.hrId = hrId;
      setHrIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHRChatRoom_args(listHRChatRoom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hrId = other.hrId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listHRChatRoom_args deepCopy() {
      return new listHRChatRoom_args(this);
    }

    @Override
    public void clear() {
      setHrIdIsSet(false);
      this.hrId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getHrId() {
      return this.hrId;
    }

    public listHRChatRoom_args setHrId(int hrId) {
      this.hrId = hrId;
      setHrIdIsSet(true);
      return this;
    }

    public void unsetHrId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
    }

    /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
    }

    public void setHrIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listHRChatRoom_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listHRChatRoom_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HR_ID:
        if (value == null) {
          unsetHrId();
        } else {
          setHrId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HR_ID:
        return getHrId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HR_ID:
        return isSetHrId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHRChatRoom_args)
        return this.equals((listHRChatRoom_args)that);
      return false;
    }

    public boolean equals(listHRChatRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hrId = true;
      boolean that_present_hrId = true;
      if (this_present_hrId || that_present_hrId) {
        if (!(this_present_hrId && that_present_hrId))
          return false;
        if (this.hrId != that.hrId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hrId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listHRChatRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHRChatRoom_args(");
      boolean first = true;

      sb.append("hrId:");
      sb.append(this.hrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHRChatRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHRChatRoom_argsStandardScheme getScheme() {
        return new listHRChatRoom_argsStandardScheme();
      }
    }

    private static class listHRChatRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHRChatRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHRChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrId = iprot.readI32();
                struct.setHrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHRChatRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hrId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHRChatRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHRChatRoom_argsTupleScheme getScheme() {
        return new listHRChatRoom_argsTupleScheme();
      }
    }

    private static class listHRChatRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHRChatRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHRChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHrId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNo()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHrId()) {
          oprot.writeI32(struct.hrId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHRChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hrId = iprot.readI32();
          struct.setHrIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listHRChatRoom_result implements org.apache.thrift.TBase<listHRChatRoom_result, listHRChatRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<listHRChatRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHRChatRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listHRChatRoom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listHRChatRoom_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHRChatRoom_result.class, metaDataMap);
    }

    public listHRChatRoom_result() {
    }

    public listHRChatRoom_result(
      com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHRChatRoom_result(listHRChatRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public listHRChatRoom_result deepCopy() {
      return new listHRChatRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO getSuccess() {
      return this.success;
    }

    public listHRChatRoom_result setSuccess(com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public listHRChatRoom_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listHRChatRoom_result)
        return this.equals((listHRChatRoom_result)that);
      return false;
    }

    public boolean equals(listHRChatRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listHRChatRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listHRChatRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHRChatRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHRChatRoom_resultStandardScheme getScheme() {
        return new listHRChatRoom_resultStandardScheme();
      }
    }

    private static class listHRChatRoom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listHRChatRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHRChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHRChatRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHRChatRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listHRChatRoom_resultTupleScheme getScheme() {
        return new listHRChatRoom_resultTupleScheme();
      }
    }

    private static class listHRChatRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listHRChatRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHRChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHRChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.chat.struct.HRChatRoomsVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listUserChatRoom_args implements org.apache.thrift.TBase<listUserChatRoom_args, listUserChatRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserChatRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserChatRoom_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listUserChatRoom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listUserChatRoom_argsTupleSchemeFactory();

    public int userId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NO((short)2, "pageNo"),
      PAGE_SIZE((short)3, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserChatRoom_args.class, metaDataMap);
    }

    public listUserChatRoom_args() {
    }

    public listUserChatRoom_args(
      int userId,
      int pageNo,
      int pageSize)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserChatRoom_args(listUserChatRoom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listUserChatRoom_args deepCopy() {
      return new listUserChatRoom_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public listUserChatRoom_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listUserChatRoom_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listUserChatRoom_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserChatRoom_args)
        return this.equals((listUserChatRoom_args)that);
      return false;
    }

    public boolean equals(listUserChatRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listUserChatRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listUserChatRoom_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserChatRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserChatRoom_argsStandardScheme getScheme() {
        return new listUserChatRoom_argsStandardScheme();
      }
    }

    private static class listUserChatRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listUserChatRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserChatRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserChatRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserChatRoom_argsTupleScheme getScheme() {
        return new listUserChatRoom_argsTupleScheme();
      }
    }

    private static class listUserChatRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listUserChatRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNo()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listUserChatRoom_result implements org.apache.thrift.TBase<listUserChatRoom_result, listUserChatRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserChatRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserChatRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listUserChatRoom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listUserChatRoom_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserChatRoom_result.class, metaDataMap);
    }

    public listUserChatRoom_result() {
    }

    public listUserChatRoom_result(
      com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserChatRoom_result(listUserChatRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public listUserChatRoom_result deepCopy() {
      return new listUserChatRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO getSuccess() {
      return this.success;
    }

    public listUserChatRoom_result setSuccess(com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public listUserChatRoom_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserChatRoom_result)
        return this.equals((listUserChatRoom_result)that);
      return false;
    }

    public boolean equals(listUserChatRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listUserChatRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listUserChatRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserChatRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserChatRoom_resultStandardScheme getScheme() {
        return new listUserChatRoom_resultStandardScheme();
      }
    }

    private static class listUserChatRoom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listUserChatRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserChatRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserChatRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listUserChatRoom_resultTupleScheme getScheme() {
        return new listUserChatRoom_resultTupleScheme();
      }
    }

    private static class listUserChatRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listUserChatRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.chat.struct.UserChatRoomsVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listChatLogs_args implements org.apache.thrift.TBase<listChatLogs_args, listChatLogs_args._Fields>, java.io.Serializable, Cloneable, Comparable<listChatLogs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listChatLogs_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listChatLogs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listChatLogs_argsTupleSchemeFactory();

    public int roomId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId"),
      PAGE_NO((short)2, "pageNo"),
      PAGE_SIZE((short)3, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listChatLogs_args.class, metaDataMap);
    }

    public listChatLogs_args() {
    }

    public listChatLogs_args(
      int roomId,
      int pageNo,
      int pageSize)
    {
      this();
      this.roomId = roomId;
      setRoomIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listChatLogs_args(listChatLogs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomId = other.roomId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listChatLogs_args deepCopy() {
      return new listChatLogs_args(this);
    }

    @Override
    public void clear() {
      setRoomIdIsSet(false);
      this.roomId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getRoomId() {
      return this.roomId;
    }

    public listChatLogs_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listChatLogs_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listChatLogs_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listChatLogs_args)
        return this.equals((listChatLogs_args)that);
      return false;
    }

    public boolean equals(listChatLogs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + roomId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listChatLogs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listChatLogs_args(");
      boolean first = true;

      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listChatLogs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listChatLogs_argsStandardScheme getScheme() {
        return new listChatLogs_argsStandardScheme();
      }
    }

    private static class listChatLogs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listChatLogs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listChatLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listChatLogs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listChatLogs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listChatLogs_argsTupleScheme getScheme() {
        return new listChatLogs_argsTupleScheme();
      }
    }

    private static class listChatLogs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listChatLogs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listChatLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNo()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listChatLogs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listChatLogs_result implements org.apache.thrift.TBase<listChatLogs_result, listChatLogs_result._Fields>, java.io.Serializable, Cloneable, Comparable<listChatLogs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listChatLogs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listChatLogs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listChatLogs_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.chat.struct.ChatsVO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.chat.struct.ChatsVO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listChatLogs_result.class, metaDataMap);
    }

    public listChatLogs_result() {
    }

    public listChatLogs_result(
      com.moseeker.thrift.gen.chat.struct.ChatsVO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listChatLogs_result(listChatLogs_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.chat.struct.ChatsVO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public listChatLogs_result deepCopy() {
      return new listChatLogs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.chat.struct.ChatsVO getSuccess() {
      return this.success;
    }

    public listChatLogs_result setSuccess(com.moseeker.thrift.gen.chat.struct.ChatsVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public listChatLogs_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.chat.struct.ChatsVO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listChatLogs_result)
        return this.equals((listChatLogs_result)that);
      return false;
    }

    public boolean equals(listChatLogs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listChatLogs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listChatLogs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listChatLogs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listChatLogs_resultStandardScheme getScheme() {
        return new listChatLogs_resultStandardScheme();
      }
    }

    private static class listChatLogs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listChatLogs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listChatLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.chat.struct.ChatsVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listChatLogs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listChatLogs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listChatLogs_resultTupleScheme getScheme() {
        return new listChatLogs_resultTupleScheme();
      }
    }

    private static class listChatLogs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listChatLogs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listChatLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listChatLogs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.chat.struct.ChatsVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveChat_args implements org.apache.thrift.TBase<saveChat_args, saveChat_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveChat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveChat_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveChat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveChat_argsTupleSchemeFactory();

    public int roomId; // required
    public java.lang.String content; // required
    public int positionId; // required
    public byte speaker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId"),
      CONTENT((short)2, "content"),
      POSITION_ID((short)3, "positionId"),
      SPEAKER((short)4, "speaker");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          case 2: // CONTENT
            return CONTENT;
          case 3: // POSITION_ID
            return POSITION_ID;
          case 4: // SPEAKER
            return SPEAKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private static final int __POSITIONID_ISSET_ID = 1;
    private static final int __SPEAKER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveChat_args.class, metaDataMap);
    }

    public saveChat_args() {
    }

    public saveChat_args(
      int roomId,
      java.lang.String content,
      int positionId,
      byte speaker)
    {
      this();
      this.roomId = roomId;
      setRoomIdIsSet(true);
      this.content = content;
      this.positionId = positionId;
      setPositionIdIsSet(true);
      this.speaker = speaker;
      setSpeakerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveChat_args(saveChat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomId = other.roomId;
      if (other.isSetContent()) {
        this.content = other.content;
      }
      this.positionId = other.positionId;
      this.speaker = other.speaker;
    }

    public saveChat_args deepCopy() {
      return new saveChat_args(this);
    }

    @Override
    public void clear() {
      setRoomIdIsSet(false);
      this.roomId = 0;
      this.content = null;
      setPositionIdIsSet(false);
      this.positionId = 0;
      setSpeakerIsSet(false);
      this.speaker = 0;
    }

    public int getRoomId() {
      return this.roomId;
    }

    public saveChat_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public java.lang.String getContent() {
      return this.content;
    }

    public saveChat_args setContent(java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getPositionId() {
      return this.positionId;
    }

    public saveChat_args setPositionId(int positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public byte getSpeaker() {
      return this.speaker;
    }

    public saveChat_args setSpeaker(byte speaker) {
      this.speaker = speaker;
      setSpeakerIsSet(true);
      return this;
    }

    public void unsetSpeaker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeaker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    public void setSpeakerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEAKER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((java.lang.Integer)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((java.lang.String)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((java.lang.Integer)value);
        }
        break;

      case SPEAKER:
        if (value == null) {
          unsetSpeaker();
        } else {
          setSpeaker((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      case CONTENT:
        return getContent();

      case POSITION_ID:
        return getPositionId();

      case SPEAKER:
        return getSpeaker();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      case CONTENT:
        return isSetContent();
      case POSITION_ID:
        return isSetPositionId();
      case SPEAKER:
        return isSetSpeaker();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveChat_args)
        return this.equals((saveChat_args)that);
      return false;
    }

    public boolean equals(saveChat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      boolean this_present_speaker = true;
      boolean that_present_speaker = true;
      if (this_present_speaker || that_present_speaker) {
        if (!(this_present_speaker && that_present_speaker))
          return false;
        if (this.speaker != that.speaker)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + roomId;

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + positionId;

      hashCode = hashCode * 8191 + (int) (speaker);

      return hashCode;
    }

    @Override
    public int compareTo(saveChat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpeaker()).compareTo(other.isSetSpeaker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeaker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, other.speaker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveChat_args(");
      boolean first = true;

      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("speaker:");
      sb.append(this.speaker);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveChat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveChat_argsStandardScheme getScheme() {
        return new saveChat_argsStandardScheme();
      }
    }

    private static class saveChat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveChat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SPEAKER
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.speaker = iprot.readByte();
                struct.setSpeakerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveChat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
        oprot.writeByte(struct.speaker);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveChat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveChat_argsTupleScheme getScheme() {
        return new saveChat_argsTupleScheme();
      }
    }

    private static class saveChat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveChat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetPositionId()) {
          optionals.set(2);
        }
        if (struct.isSetSpeaker()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetPositionId()) {
          oprot.writeI32(struct.positionId);
        }
        if (struct.isSetSpeaker()) {
          oprot.writeByte(struct.speaker);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.positionId = iprot.readI32();
          struct.setPositionIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.speaker = iprot.readByte();
          struct.setSpeakerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveChat_result implements org.apache.thrift.TBase<saveChat_result, saveChat_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveChat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveChat_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveChat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveChat_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveChat_result.class, metaDataMap);
    }

    public saveChat_result() {
    }

    public saveChat_result(
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveChat_result(saveChat_result other) {
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public saveChat_result deepCopy() {
      return new saveChat_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public saveChat_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveChat_result)
        return this.equals((saveChat_result)that);
      return false;
    }

    public boolean equals(saveChat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveChat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveChat_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveChat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveChat_resultStandardScheme getScheme() {
        return new saveChat_resultStandardScheme();
      }
    }

    private static class saveChat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveChat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveChat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveChat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveChat_resultTupleScheme getScheme() {
        return new saveChat_resultTupleScheme();
      }
    }

    private static class saveChat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveChat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enterRoom_args implements org.apache.thrift.TBase<enterRoom_args, enterRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<enterRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterRoom_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterRoom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterRoom_argsTupleSchemeFactory();

    public int userId; // required
    public int hrId; // required
    public int positionId; // required
    public int roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      HR_ID((short)2, "hrId"),
      POSITION_ID((short)3, "positionId"),
      ROOM_ID((short)4, "roomId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // HR_ID
            return HR_ID;
          case 3: // POSITION_ID
            return POSITION_ID;
          case 4: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __HRID_ISSET_ID = 1;
    private static final int __POSITIONID_ISSET_ID = 2;
    private static final int __ROOMID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterRoom_args.class, metaDataMap);
    }

    public enterRoom_args() {
    }

    public enterRoom_args(
      int userId,
      int hrId,
      int positionId,
      int roomId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.hrId = hrId;
      setHrIdIsSet(true);
      this.positionId = positionId;
      setPositionIdIsSet(true);
      this.roomId = roomId;
      setRoomIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterRoom_args(enterRoom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.hrId = other.hrId;
      this.positionId = other.positionId;
      this.roomId = other.roomId;
    }

    public enterRoom_args deepCopy() {
      return new enterRoom_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setHrIdIsSet(false);
      this.hrId = 0;
      setPositionIdIsSet(false);
      this.positionId = 0;
      setRoomIdIsSet(false);
      this.roomId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public enterRoom_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getHrId() {
      return this.hrId;
    }

    public enterRoom_args setHrId(int hrId) {
      this.hrId = hrId;
      setHrIdIsSet(true);
      return this;
    }

    public void unsetHrId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
    }

    /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
    }

    public void setHrIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
    }

    public int getPositionId() {
      return this.positionId;
    }

    public enterRoom_args setPositionId(int positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public int getRoomId() {
      return this.roomId;
    }

    public enterRoom_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case HR_ID:
        if (value == null) {
          unsetHrId();
        } else {
          setHrId((java.lang.Integer)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((java.lang.Integer)value);
        }
        break;

      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case HR_ID:
        return getHrId();

      case POSITION_ID:
        return getPositionId();

      case ROOM_ID:
        return getRoomId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case HR_ID:
        return isSetHrId();
      case POSITION_ID:
        return isSetPositionId();
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enterRoom_args)
        return this.equals((enterRoom_args)that);
      return false;
    }

    public boolean equals(enterRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_hrId = true;
      boolean that_present_hrId = true;
      if (this_present_hrId || that_present_hrId) {
        if (!(this_present_hrId && that_present_hrId))
          return false;
        if (this.hrId != that.hrId)
          return false;
      }

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + hrId;

      hashCode = hashCode * 8191 + positionId;

      hashCode = hashCode * 8191 + roomId;

      return hashCode;
    }

    @Override
    public int compareTo(enterRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enterRoom_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hrId:");
      sb.append(this.hrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterRoom_argsStandardScheme getScheme() {
        return new enterRoom_argsStandardScheme();
      }
    }

    private static class enterRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<enterRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrId = iprot.readI32();
                struct.setHrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hrId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterRoom_argsTupleScheme getScheme() {
        return new enterRoom_argsTupleScheme();
      }
    }

    private static class enterRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<enterRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetHrId()) {
          optionals.set(1);
        }
        if (struct.isSetPositionId()) {
          optionals.set(2);
        }
        if (struct.isSetRoomId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetHrId()) {
          oprot.writeI32(struct.hrId);
        }
        if (struct.isSetPositionId()) {
          oprot.writeI32(struct.positionId);
        }
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hrId = iprot.readI32();
          struct.setHrIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.positionId = iprot.readI32();
          struct.setPositionIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class enterRoom_result implements org.apache.thrift.TBase<enterRoom_result, enterRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<enterRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enterRoom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enterRoom_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterRoom_result.class, metaDataMap);
    }

    public enterRoom_result() {
    }

    public enterRoom_result(
      com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterRoom_result(enterRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public enterRoom_result deepCopy() {
      return new enterRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO getSuccess() {
      return this.success;
    }

    public enterRoom_result setSuccess(com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public enterRoom_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof enterRoom_result)
        return this.equals((enterRoom_result)that);
      return false;
    }

    public boolean equals(enterRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enterRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enterRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterRoom_resultStandardScheme getScheme() {
        return new enterRoom_resultStandardScheme();
      }
    }

    private static class enterRoom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<enterRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public enterRoom_resultTupleScheme getScheme() {
        return new enterRoom_resultTupleScheme();
      }
    }

    private static class enterRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<enterRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.chat.struct.ResultOfSaveRoomVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChat_args implements org.apache.thrift.TBase<getChat_args, getChat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChat_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChat_argsTupleSchemeFactory();

    public int roomId; // required
    public byte speaker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId"),
      SPEAKER((short)2, "speaker");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          case 2: // SPEAKER
            return SPEAKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private static final int __SPEAKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChat_args.class, metaDataMap);
    }

    public getChat_args() {
    }

    public getChat_args(
      int roomId,
      byte speaker)
    {
      this();
      this.roomId = roomId;
      setRoomIdIsSet(true);
      this.speaker = speaker;
      setSpeakerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChat_args(getChat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomId = other.roomId;
      this.speaker = other.speaker;
    }

    public getChat_args deepCopy() {
      return new getChat_args(this);
    }

    @Override
    public void clear() {
      setRoomIdIsSet(false);
      this.roomId = 0;
      setSpeakerIsSet(false);
      this.speaker = 0;
    }

    public int getRoomId() {
      return this.roomId;
    }

    public getChat_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public byte getSpeaker() {
      return this.speaker;
    }

    public getChat_args setSpeaker(byte speaker) {
      this.speaker = speaker;
      setSpeakerIsSet(true);
      return this;
    }

    public void unsetSpeaker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeaker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    public void setSpeakerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEAKER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((java.lang.Integer)value);
        }
        break;

      case SPEAKER:
        if (value == null) {
          unsetSpeaker();
        } else {
          setSpeaker((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      case SPEAKER:
        return getSpeaker();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      case SPEAKER:
        return isSetSpeaker();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChat_args)
        return this.equals((getChat_args)that);
      return false;
    }

    public boolean equals(getChat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      boolean this_present_speaker = true;
      boolean that_present_speaker = true;
      if (this_present_speaker || that_present_speaker) {
        if (!(this_present_speaker && that_present_speaker))
          return false;
        if (this.speaker != that.speaker)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + roomId;

      hashCode = hashCode * 8191 + (int) (speaker);

      return hashCode;
    }

    @Override
    public int compareTo(getChat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpeaker()).compareTo(other.isSetSpeaker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeaker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, other.speaker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChat_args(");
      boolean first = true;

      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("speaker:");
      sb.append(this.speaker);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChat_argsStandardScheme getScheme() {
        return new getChat_argsStandardScheme();
      }
    }

    private static class getChat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEAKER
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.speaker = iprot.readByte();
                struct.setSpeakerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
        oprot.writeByte(struct.speaker);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChat_argsTupleScheme getScheme() {
        return new getChat_argsTupleScheme();
      }
    }

    private static class getChat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        if (struct.isSetSpeaker()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
        if (struct.isSetSpeaker()) {
          oprot.writeByte(struct.speaker);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.speaker = iprot.readByte();
          struct.setSpeakerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChat_result implements org.apache.thrift.TBase<getChat_result, getChat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChat_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.chat.struct.ChatVO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.chat.struct.ChatVO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChat_result.class, metaDataMap);
    }

    public getChat_result() {
    }

    public getChat_result(
      com.moseeker.thrift.gen.chat.struct.ChatVO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChat_result(getChat_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.chat.struct.ChatVO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public getChat_result deepCopy() {
      return new getChat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.chat.struct.ChatVO getSuccess() {
      return this.success;
    }

    public getChat_result setSuccess(com.moseeker.thrift.gen.chat.struct.ChatVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public getChat_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.chat.struct.ChatVO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChat_result)
        return this.equals((getChat_result)that);
      return false;
    }

    public boolean equals(getChat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getChat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChat_resultStandardScheme getScheme() {
        return new getChat_resultStandardScheme();
      }
    }

    private static class getChat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.chat.struct.ChatVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChat_resultTupleScheme getScheme() {
        return new getChat_resultTupleScheme();
      }
    }

    private static class getChat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.chat.struct.ChatVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class leaveChatRoom_args implements org.apache.thrift.TBase<leaveChatRoom_args, leaveChatRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<leaveChatRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("leaveChatRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new leaveChatRoom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new leaveChatRoom_argsTupleSchemeFactory();

    public int roomId; // required
    public byte speaker; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId"),
      SPEAKER((short)2, "speaker");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          case 2: // SPEAKER
            return SPEAKER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private static final int __SPEAKER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(leaveChatRoom_args.class, metaDataMap);
    }

    public leaveChatRoom_args() {
    }

    public leaveChatRoom_args(
      int roomId,
      byte speaker)
    {
      this();
      this.roomId = roomId;
      setRoomIdIsSet(true);
      this.speaker = speaker;
      setSpeakerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveChatRoom_args(leaveChatRoom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roomId = other.roomId;
      this.speaker = other.speaker;
    }

    public leaveChatRoom_args deepCopy() {
      return new leaveChatRoom_args(this);
    }

    @Override
    public void clear() {
      setRoomIdIsSet(false);
      this.roomId = 0;
      setSpeakerIsSet(false);
      this.speaker = 0;
    }

    public int getRoomId() {
      return this.roomId;
    }

    public leaveChatRoom_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    public byte getSpeaker() {
      return this.speaker;
    }

    public leaveChatRoom_args setSpeaker(byte speaker) {
      this.speaker = speaker;
      setSpeakerIsSet(true);
      return this;
    }

    public void unsetSpeaker() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeaker() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEAKER_ISSET_ID);
    }

    public void setSpeakerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEAKER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((java.lang.Integer)value);
        }
        break;

      case SPEAKER:
        if (value == null) {
          unsetSpeaker();
        } else {
          setSpeaker((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      case SPEAKER:
        return getSpeaker();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      case SPEAKER:
        return isSetSpeaker();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveChatRoom_args)
        return this.equals((leaveChatRoom_args)that);
      return false;
    }

    public boolean equals(leaveChatRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      boolean this_present_speaker = true;
      boolean that_present_speaker = true;
      if (this_present_speaker || that_present_speaker) {
        if (!(this_present_speaker && that_present_speaker))
          return false;
        if (this.speaker != that.speaker)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + roomId;

      hashCode = hashCode * 8191 + (int) (speaker);

      return hashCode;
    }

    @Override
    public int compareTo(leaveChatRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpeaker()).compareTo(other.isSetSpeaker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeaker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, other.speaker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("leaveChatRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("speaker:");
      sb.append(this.speaker);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class leaveChatRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public leaveChatRoom_argsStandardScheme getScheme() {
        return new leaveChatRoom_argsStandardScheme();
      }
    }

    private static class leaveChatRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<leaveChatRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, leaveChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEAKER
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.speaker = iprot.readByte();
                struct.setSpeakerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, leaveChatRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
        oprot.writeByte(struct.speaker);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class leaveChatRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public leaveChatRoom_argsTupleScheme getScheme() {
        return new leaveChatRoom_argsTupleScheme();
      }
    }

    private static class leaveChatRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<leaveChatRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, leaveChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        if (struct.isSetSpeaker()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
        if (struct.isSetSpeaker()) {
          oprot.writeByte(struct.speaker);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, leaveChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.speaker = iprot.readByte();
          struct.setSpeakerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class leaveChatRoom_result implements org.apache.thrift.TBase<leaveChatRoom_result, leaveChatRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<leaveChatRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("leaveChatRoom_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new leaveChatRoom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new leaveChatRoom_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(leaveChatRoom_result.class, metaDataMap);
    }

    public leaveChatRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveChatRoom_result(leaveChatRoom_result other) {
    }

    public leaveChatRoom_result deepCopy() {
      return new leaveChatRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveChatRoom_result)
        return this.equals((leaveChatRoom_result)that);
      return false;
    }

    public boolean equals(leaveChatRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(leaveChatRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("leaveChatRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class leaveChatRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public leaveChatRoom_resultStandardScheme getScheme() {
        return new leaveChatRoom_resultStandardScheme();
      }
    }

    private static class leaveChatRoom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<leaveChatRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, leaveChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, leaveChatRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class leaveChatRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public leaveChatRoom_resultTupleScheme getScheme() {
        return new leaveChatRoom_resultTupleScheme();
      }
    }

    private static class leaveChatRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<leaveChatRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, leaveChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, leaveChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
