/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-6")
public class Intention implements org.apache.thrift.TBase<Intention, Intention._Fields>, java.io.Serializable, Cloneable, Comparable<Intention> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Intention");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WORKSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("workstate", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SALARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_type", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_code", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("consider_venture_company_opportunities", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField WORKTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("worktype", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField SALARY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_str", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INDUSTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("industries", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cities", org.apache.thrift.protocol.TType.MAP, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntentionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntentionTupleSchemeFactory());
  }

  public int id; // optional
  public int profile_id; // optional
  public int workstate; // optional
  public short salary_type; // optional
  public int salary_code; // optional
  public String tag; // optional
  public short consider_venture_company_opportunities; // optional
  public String create_time; // optional
  public String update_time; // optional
  public short worktype; // optional
  public String salary_str; // optional
  public Map<String,Integer> industries; // optional
  public Map<String,Integer> positions; // optional
  public Map<String,Integer> cities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profile_id"),
    WORKSTATE((short)3, "workstate"),
    SALARY_TYPE((short)4, "salary_type"),
    SALARY_CODE((short)5, "salary_code"),
    TAG((short)6, "tag"),
    CONSIDER_VENTURE_COMPANY_OPPORTUNITIES((short)7, "consider_venture_company_opportunities"),
    CREATE_TIME((short)8, "create_time"),
    UPDATE_TIME((short)9, "update_time"),
    WORKTYPE((short)10, "worktype"),
    SALARY_STR((short)11, "salary_str"),
    INDUSTRIES((short)12, "industries"),
    POSITIONS((short)13, "positions"),
    CITIES((short)14, "cities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // WORKSTATE
          return WORKSTATE;
        case 4: // SALARY_TYPE
          return SALARY_TYPE;
        case 5: // SALARY_CODE
          return SALARY_CODE;
        case 6: // TAG
          return TAG;
        case 7: // CONSIDER_VENTURE_COMPANY_OPPORTUNITIES
          return CONSIDER_VENTURE_COMPANY_OPPORTUNITIES;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // WORKTYPE
          return WORKTYPE;
        case 11: // SALARY_STR
          return SALARY_STR;
        case 12: // INDUSTRIES
          return INDUSTRIES;
        case 13: // POSITIONS
          return POSITIONS;
        case 14: // CITIES
          return CITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILE_ID_ISSET_ID = 1;
  private static final int __WORKSTATE_ISSET_ID = 2;
  private static final int __SALARY_TYPE_ISSET_ID = 3;
  private static final int __SALARY_CODE_ISSET_ID = 4;
  private static final int __CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_ISSET_ID = 5;
  private static final int __WORKTYPE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_ID,_Fields.WORKSTATE,_Fields.SALARY_TYPE,_Fields.SALARY_CODE,_Fields.TAG,_Fields.CONSIDER_VENTURE_COMPANY_OPPORTUNITIES,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.WORKTYPE,_Fields.SALARY_STR,_Fields.INDUSTRIES,_Fields.POSITIONS,_Fields.CITIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKSTATE, new org.apache.thrift.meta_data.FieldMetaData("workstate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("salary_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_CODE, new org.apache.thrift.meta_data.FieldMetaData("salary_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSIDER_VENTURE_COMPANY_OPPORTUNITIES, new org.apache.thrift.meta_data.FieldMetaData("consider_venture_company_opportunities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.WORKTYPE, new org.apache.thrift.meta_data.FieldMetaData("worktype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_STR, new org.apache.thrift.meta_data.FieldMetaData("salary_str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDUSTRIES, new org.apache.thrift.meta_data.FieldMetaData("industries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CITIES, new org.apache.thrift.meta_data.FieldMetaData("cities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Intention.class, metaDataMap);
  }

  public Intention() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Intention(Intention other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profile_id = other.profile_id;
    this.workstate = other.workstate;
    this.salary_type = other.salary_type;
    this.salary_code = other.salary_code;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.consider_venture_company_opportunities = other.consider_venture_company_opportunities;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    this.worktype = other.worktype;
    if (other.isSetSalary_str()) {
      this.salary_str = other.salary_str;
    }
    if (other.isSetIndustries()) {
      Map<String,Integer> __this__industries = new HashMap<String,Integer>(other.industries);
      this.industries = __this__industries;
    }
    if (other.isSetPositions()) {
      Map<String,Integer> __this__positions = new HashMap<String,Integer>(other.positions);
      this.positions = __this__positions;
    }
    if (other.isSetCities()) {
      Map<String,Integer> __this__cities = new HashMap<String,Integer>(other.cities);
      this.cities = __this__cities;
    }
  }

  public Intention deepCopy() {
    return new Intention(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfile_idIsSet(false);
    this.profile_id = 0;
    setWorkstateIsSet(false);
    this.workstate = 0;
    setSalary_typeIsSet(false);
    this.salary_type = 0;
    setSalary_codeIsSet(false);
    this.salary_code = 0;
    this.tag = null;
    setConsider_venture_company_opportunitiesIsSet(false);
    this.consider_venture_company_opportunities = 0;
    this.create_time = null;
    this.update_time = null;
    setWorktypeIsSet(false);
    this.worktype = 0;
    this.salary_str = null;
    this.industries = null;
    this.positions = null;
    this.cities = null;
  }

  public int getId() {
    return this.id;
  }

  public Intention setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfile_id() {
    return this.profile_id;
  }

  public Intention setProfile_id(int profile_id) {
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    return this;
  }

  public void unsetProfile_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  /** Returns true if field profile_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  public void setProfile_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILE_ID_ISSET_ID, value);
  }

  public int getWorkstate() {
    return this.workstate;
  }

  public Intention setWorkstate(int workstate) {
    this.workstate = workstate;
    setWorkstateIsSet(true);
    return this;
  }

  public void unsetWorkstate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  /** Returns true if field workstate is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkstate() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  public void setWorkstateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKSTATE_ISSET_ID, value);
  }

  public short getSalary_type() {
    return this.salary_type;
  }

  public Intention setSalary_type(short salary_type) {
    this.salary_type = salary_type;
    setSalary_typeIsSet(true);
    return this;
  }

  public void unsetSalary_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  /** Returns true if field salary_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  public void setSalary_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID, value);
  }

  public int getSalary_code() {
    return this.salary_code;
  }

  public Intention setSalary_code(int salary_code) {
    this.salary_code = salary_code;
    setSalary_codeIsSet(true);
    return this;
  }

  public void unsetSalary_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  /** Returns true if field salary_code is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_code() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  public void setSalary_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_CODE_ISSET_ID, value);
  }

  public String getTag() {
    return this.tag;
  }

  public Intention setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public short getConsider_venture_company_opportunities() {
    return this.consider_venture_company_opportunities;
  }

  public Intention setConsider_venture_company_opportunities(short consider_venture_company_opportunities) {
    this.consider_venture_company_opportunities = consider_venture_company_opportunities;
    setConsider_venture_company_opportunitiesIsSet(true);
    return this;
  }

  public void unsetConsider_venture_company_opportunities() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_ISSET_ID);
  }

  /** Returns true if field consider_venture_company_opportunities is set (has been assigned a value) and false otherwise */
  public boolean isSetConsider_venture_company_opportunities() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_ISSET_ID);
  }

  public void setConsider_venture_company_opportunitiesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public Intention setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public Intention setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public short getWorktype() {
    return this.worktype;
  }

  public Intention setWorktype(short worktype) {
    this.worktype = worktype;
    setWorktypeIsSet(true);
    return this;
  }

  public void unsetWorktype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  /** Returns true if field worktype is set (has been assigned a value) and false otherwise */
  public boolean isSetWorktype() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  public void setWorktypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKTYPE_ISSET_ID, value);
  }

  public String getSalary_str() {
    return this.salary_str;
  }

  public Intention setSalary_str(String salary_str) {
    this.salary_str = salary_str;
    return this;
  }

  public void unsetSalary_str() {
    this.salary_str = null;
  }

  /** Returns true if field salary_str is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_str() {
    return this.salary_str != null;
  }

  public void setSalary_strIsSet(boolean value) {
    if (!value) {
      this.salary_str = null;
    }
  }

  public int getIndustriesSize() {
    return (this.industries == null) ? 0 : this.industries.size();
  }

  public void putToIndustries(String key, int val) {
    if (this.industries == null) {
      this.industries = new HashMap<String,Integer>();
    }
    this.industries.put(key, val);
  }

  public Map<String,Integer> getIndustries() {
    return this.industries;
  }

  public Intention setIndustries(Map<String,Integer> industries) {
    this.industries = industries;
    return this;
  }

  public void unsetIndustries() {
    this.industries = null;
  }

  /** Returns true if field industries is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustries() {
    return this.industries != null;
  }

  public void setIndustriesIsSet(boolean value) {
    if (!value) {
      this.industries = null;
    }
  }

  public int getPositionsSize() {
    return (this.positions == null) ? 0 : this.positions.size();
  }

  public void putToPositions(String key, int val) {
    if (this.positions == null) {
      this.positions = new HashMap<String,Integer>();
    }
    this.positions.put(key, val);
  }

  public Map<String,Integer> getPositions() {
    return this.positions;
  }

  public Intention setPositions(Map<String,Integer> positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  public int getCitiesSize() {
    return (this.cities == null) ? 0 : this.cities.size();
  }

  public void putToCities(String key, int val) {
    if (this.cities == null) {
      this.cities = new HashMap<String,Integer>();
    }
    this.cities.put(key, val);
  }

  public Map<String,Integer> getCities() {
    return this.cities;
  }

  public Intention setCities(Map<String,Integer> cities) {
    this.cities = cities;
    return this;
  }

  public void unsetCities() {
    this.cities = null;
  }

  /** Returns true if field cities is set (has been assigned a value) and false otherwise */
  public boolean isSetCities() {
    return this.cities != null;
  }

  public void setCitiesIsSet(boolean value) {
    if (!value) {
      this.cities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfile_id();
      } else {
        setProfile_id((Integer)value);
      }
      break;

    case WORKSTATE:
      if (value == null) {
        unsetWorkstate();
      } else {
        setWorkstate((Integer)value);
      }
      break;

    case SALARY_TYPE:
      if (value == null) {
        unsetSalary_type();
      } else {
        setSalary_type((Short)value);
      }
      break;

    case SALARY_CODE:
      if (value == null) {
        unsetSalary_code();
      } else {
        setSalary_code((Integer)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      if (value == null) {
        unsetConsider_venture_company_opportunities();
      } else {
        setConsider_venture_company_opportunities((Short)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    case WORKTYPE:
      if (value == null) {
        unsetWorktype();
      } else {
        setWorktype((Short)value);
      }
      break;

    case SALARY_STR:
      if (value == null) {
        unsetSalary_str();
      } else {
        setSalary_str((String)value);
      }
      break;

    case INDUSTRIES:
      if (value == null) {
        unsetIndustries();
      } else {
        setIndustries((Map<String,Integer>)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((Map<String,Integer>)value);
      }
      break;

    case CITIES:
      if (value == null) {
        unsetCities();
      } else {
        setCities((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PROFILE_ID:
      return Integer.valueOf(getProfile_id());

    case WORKSTATE:
      return Integer.valueOf(getWorkstate());

    case SALARY_TYPE:
      return Short.valueOf(getSalary_type());

    case SALARY_CODE:
      return Integer.valueOf(getSalary_code());

    case TAG:
      return getTag();

    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      return Short.valueOf(getConsider_venture_company_opportunities());

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case WORKTYPE:
      return Short.valueOf(getWorktype());

    case SALARY_STR:
      return getSalary_str();

    case INDUSTRIES:
      return getIndustries();

    case POSITIONS:
      return getPositions();

    case CITIES:
      return getCities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfile_id();
    case WORKSTATE:
      return isSetWorkstate();
    case SALARY_TYPE:
      return isSetSalary_type();
    case SALARY_CODE:
      return isSetSalary_code();
    case TAG:
      return isSetTag();
    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      return isSetConsider_venture_company_opportunities();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case WORKTYPE:
      return isSetWorktype();
    case SALARY_STR:
      return isSetSalary_str();
    case INDUSTRIES:
      return isSetIndustries();
    case POSITIONS:
      return isSetPositions();
    case CITIES:
      return isSetCities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Intention)
      return this.equals((Intention)that);
    return false;
  }

  public boolean equals(Intention that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profile_id = true && this.isSetProfile_id();
    boolean that_present_profile_id = true && that.isSetProfile_id();
    if (this_present_profile_id || that_present_profile_id) {
      if (!(this_present_profile_id && that_present_profile_id))
        return false;
      if (this.profile_id != that.profile_id)
        return false;
    }

    boolean this_present_workstate = true && this.isSetWorkstate();
    boolean that_present_workstate = true && that.isSetWorkstate();
    if (this_present_workstate || that_present_workstate) {
      if (!(this_present_workstate && that_present_workstate))
        return false;
      if (this.workstate != that.workstate)
        return false;
    }

    boolean this_present_salary_type = true && this.isSetSalary_type();
    boolean that_present_salary_type = true && that.isSetSalary_type();
    if (this_present_salary_type || that_present_salary_type) {
      if (!(this_present_salary_type && that_present_salary_type))
        return false;
      if (this.salary_type != that.salary_type)
        return false;
    }

    boolean this_present_salary_code = true && this.isSetSalary_code();
    boolean that_present_salary_code = true && that.isSetSalary_code();
    if (this_present_salary_code || that_present_salary_code) {
      if (!(this_present_salary_code && that_present_salary_code))
        return false;
      if (this.salary_code != that.salary_code)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_consider_venture_company_opportunities = true && this.isSetConsider_venture_company_opportunities();
    boolean that_present_consider_venture_company_opportunities = true && that.isSetConsider_venture_company_opportunities();
    if (this_present_consider_venture_company_opportunities || that_present_consider_venture_company_opportunities) {
      if (!(this_present_consider_venture_company_opportunities && that_present_consider_venture_company_opportunities))
        return false;
      if (this.consider_venture_company_opportunities != that.consider_venture_company_opportunities)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_worktype = true && this.isSetWorktype();
    boolean that_present_worktype = true && that.isSetWorktype();
    if (this_present_worktype || that_present_worktype) {
      if (!(this_present_worktype && that_present_worktype))
        return false;
      if (this.worktype != that.worktype)
        return false;
    }

    boolean this_present_salary_str = true && this.isSetSalary_str();
    boolean that_present_salary_str = true && that.isSetSalary_str();
    if (this_present_salary_str || that_present_salary_str) {
      if (!(this_present_salary_str && that_present_salary_str))
        return false;
      if (!this.salary_str.equals(that.salary_str))
        return false;
    }

    boolean this_present_industries = true && this.isSetIndustries();
    boolean that_present_industries = true && that.isSetIndustries();
    if (this_present_industries || that_present_industries) {
      if (!(this_present_industries && that_present_industries))
        return false;
      if (!this.industries.equals(that.industries))
        return false;
    }

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_cities = true && this.isSetCities();
    boolean that_present_cities = true && that.isSetCities();
    if (this_present_cities || that_present_cities) {
      if (!(this_present_cities && that_present_cities))
        return false;
      if (!this.cities.equals(that.cities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_profile_id = true && (isSetProfile_id());
    list.add(present_profile_id);
    if (present_profile_id)
      list.add(profile_id);

    boolean present_workstate = true && (isSetWorkstate());
    list.add(present_workstate);
    if (present_workstate)
      list.add(workstate);

    boolean present_salary_type = true && (isSetSalary_type());
    list.add(present_salary_type);
    if (present_salary_type)
      list.add(salary_type);

    boolean present_salary_code = true && (isSetSalary_code());
    list.add(present_salary_code);
    if (present_salary_code)
      list.add(salary_code);

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_consider_venture_company_opportunities = true && (isSetConsider_venture_company_opportunities());
    list.add(present_consider_venture_company_opportunities);
    if (present_consider_venture_company_opportunities)
      list.add(consider_venture_company_opportunities);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    boolean present_worktype = true && (isSetWorktype());
    list.add(present_worktype);
    if (present_worktype)
      list.add(worktype);

    boolean present_salary_str = true && (isSetSalary_str());
    list.add(present_salary_str);
    if (present_salary_str)
      list.add(salary_str);

    boolean present_industries = true && (isSetIndustries());
    list.add(present_industries);
    if (present_industries)
      list.add(industries);

    boolean present_positions = true && (isSetPositions());
    list.add(present_positions);
    if (present_positions)
      list.add(positions);

    boolean present_cities = true && (isSetCities());
    list.add(present_cities);
    if (present_cities)
      list.add(cities);

    return list.hashCode();
  }

  @Override
  public int compareTo(Intention other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_id()).compareTo(other.isSetProfile_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_id, other.profile_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkstate()).compareTo(other.isSetWorkstate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkstate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workstate, other.workstate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_type()).compareTo(other.isSetSalary_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_type, other.salary_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_code()).compareTo(other.isSetSalary_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_code, other.salary_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsider_venture_company_opportunities()).compareTo(other.isSetConsider_venture_company_opportunities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsider_venture_company_opportunities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consider_venture_company_opportunities, other.consider_venture_company_opportunities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorktype()).compareTo(other.isSetWorktype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorktype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worktype, other.worktype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_str()).compareTo(other.isSetSalary_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_str, other.salary_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustries()).compareTo(other.isSetIndustries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industries, other.industries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCities()).compareTo(other.isSetCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cities, other.cities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Intention(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfile_id()) {
      if (!first) sb.append(", ");
      sb.append("profile_id:");
      sb.append(this.profile_id);
      first = false;
    }
    if (isSetWorkstate()) {
      if (!first) sb.append(", ");
      sb.append("workstate:");
      sb.append(this.workstate);
      first = false;
    }
    if (isSetSalary_type()) {
      if (!first) sb.append(", ");
      sb.append("salary_type:");
      sb.append(this.salary_type);
      first = false;
    }
    if (isSetSalary_code()) {
      if (!first) sb.append(", ");
      sb.append("salary_code:");
      sb.append(this.salary_code);
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetConsider_venture_company_opportunities()) {
      if (!first) sb.append(", ");
      sb.append("consider_venture_company_opportunities:");
      sb.append(this.consider_venture_company_opportunities);
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    if (isSetWorktype()) {
      if (!first) sb.append(", ");
      sb.append("worktype:");
      sb.append(this.worktype);
      first = false;
    }
    if (isSetSalary_str()) {
      if (!first) sb.append(", ");
      sb.append("salary_str:");
      if (this.salary_str == null) {
        sb.append("null");
      } else {
        sb.append(this.salary_str);
      }
      first = false;
    }
    if (isSetIndustries()) {
      if (!first) sb.append(", ");
      sb.append("industries:");
      if (this.industries == null) {
        sb.append("null");
      } else {
        sb.append(this.industries);
      }
      first = false;
    }
    if (isSetPositions()) {
      if (!first) sb.append(", ");
      sb.append("positions:");
      if (this.positions == null) {
        sb.append("null");
      } else {
        sb.append(this.positions);
      }
      first = false;
    }
    if (isSetCities()) {
      if (!first) sb.append(", ");
      sb.append("cities:");
      if (this.cities == null) {
        sb.append("null");
      } else {
        sb.append(this.cities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntentionStandardSchemeFactory implements SchemeFactory {
    public IntentionStandardScheme getScheme() {
      return new IntentionStandardScheme();
    }
  }

  private static class IntentionStandardScheme extends StandardScheme<Intention> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Intention struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profile_id = iprot.readI32();
              struct.setProfile_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKSTATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workstate = iprot.readI32();
              struct.setWorkstateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.salary_type = iprot.readI16();
              struct.setSalary_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_code = iprot.readI32();
              struct.setSalary_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONSIDER_VENTURE_COMPANY_OPPORTUNITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.consider_venture_company_opportunities = iprot.readI16();
              struct.setConsider_venture_company_opportunitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WORKTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.worktype = iprot.readI16();
              struct.setWorktypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SALARY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salary_str = iprot.readString();
              struct.setSalary_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INDUSTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.industries = new HashMap<String,Integer>(2*_map0.size);
                String _key1;
                int _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readI32();
                  struct.industries.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setIndustriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.positions = new HashMap<String,Integer>(2*_map4.size);
                String _key5;
                int _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readI32();
                  struct.positions.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.cities = new HashMap<String,Integer>(2*_map8.size);
                String _key9;
                int _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readI32();
                  struct.cities.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Intention struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfile_id()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profile_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkstate()) {
        oprot.writeFieldBegin(WORKSTATE_FIELD_DESC);
        oprot.writeI32(struct.workstate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_type()) {
        oprot.writeFieldBegin(SALARY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.salary_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_code()) {
        oprot.writeFieldBegin(SALARY_CODE_FIELD_DESC);
        oprot.writeI32(struct.salary_code);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConsider_venture_company_opportunities()) {
        oprot.writeFieldBegin(CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_FIELD_DESC);
        oprot.writeI16(struct.consider_venture_company_opportunities);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWorktype()) {
        oprot.writeFieldBegin(WORKTYPE_FIELD_DESC);
        oprot.writeI16(struct.worktype);
        oprot.writeFieldEnd();
      }
      if (struct.salary_str != null) {
        if (struct.isSetSalary_str()) {
          oprot.writeFieldBegin(SALARY_STR_FIELD_DESC);
          oprot.writeString(struct.salary_str);
          oprot.writeFieldEnd();
        }
      }
      if (struct.industries != null) {
        if (struct.isSetIndustries()) {
          oprot.writeFieldBegin(INDUSTRIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.industries.size()));
            for (Map.Entry<String, Integer> _iter12 : struct.industries.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.positions != null) {
        if (struct.isSetPositions()) {
          oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.positions.size()));
            for (Map.Entry<String, Integer> _iter13 : struct.positions.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeI32(_iter13.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cities != null) {
        if (struct.isSetCities()) {
          oprot.writeFieldBegin(CITIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.cities.size()));
            for (Map.Entry<String, Integer> _iter14 : struct.cities.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeI32(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntentionTupleSchemeFactory implements SchemeFactory {
    public IntentionTupleScheme getScheme() {
      return new IntentionTupleScheme();
    }
  }

  private static class IntentionTupleScheme extends TupleScheme<Intention> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Intention struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfile_id()) {
        optionals.set(1);
      }
      if (struct.isSetWorkstate()) {
        optionals.set(2);
      }
      if (struct.isSetSalary_type()) {
        optionals.set(3);
      }
      if (struct.isSetSalary_code()) {
        optionals.set(4);
      }
      if (struct.isSetTag()) {
        optionals.set(5);
      }
      if (struct.isSetConsider_venture_company_opportunities()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(7);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(8);
      }
      if (struct.isSetWorktype()) {
        optionals.set(9);
      }
      if (struct.isSetSalary_str()) {
        optionals.set(10);
      }
      if (struct.isSetIndustries()) {
        optionals.set(11);
      }
      if (struct.isSetPositions()) {
        optionals.set(12);
      }
      if (struct.isSetCities()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfile_id()) {
        oprot.writeI32(struct.profile_id);
      }
      if (struct.isSetWorkstate()) {
        oprot.writeI32(struct.workstate);
      }
      if (struct.isSetSalary_type()) {
        oprot.writeI16(struct.salary_type);
      }
      if (struct.isSetSalary_code()) {
        oprot.writeI32(struct.salary_code);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetConsider_venture_company_opportunities()) {
        oprot.writeI16(struct.consider_venture_company_opportunities);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetWorktype()) {
        oprot.writeI16(struct.worktype);
      }
      if (struct.isSetSalary_str()) {
        oprot.writeString(struct.salary_str);
      }
      if (struct.isSetIndustries()) {
        {
          oprot.writeI32(struct.industries.size());
          for (Map.Entry<String, Integer> _iter15 : struct.industries.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeI32(_iter15.getValue());
          }
        }
      }
      if (struct.isSetPositions()) {
        {
          oprot.writeI32(struct.positions.size());
          for (Map.Entry<String, Integer> _iter16 : struct.positions.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeI32(_iter16.getValue());
          }
        }
      }
      if (struct.isSetCities()) {
        {
          oprot.writeI32(struct.cities.size());
          for (Map.Entry<String, Integer> _iter17 : struct.cities.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeI32(_iter17.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Intention struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profile_id = iprot.readI32();
        struct.setProfile_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.workstate = iprot.readI32();
        struct.setWorkstateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.salary_type = iprot.readI16();
        struct.setSalary_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salary_code = iprot.readI32();
        struct.setSalary_codeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.consider_venture_company_opportunities = iprot.readI16();
        struct.setConsider_venture_company_opportunitiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.worktype = iprot.readI16();
        struct.setWorktypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.salary_str = iprot.readString();
        struct.setSalary_strIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.industries = new HashMap<String,Integer>(2*_map18.size);
          String _key19;
          int _val20;
          for (int _i21 = 0; _i21 < _map18.size; ++_i21)
          {
            _key19 = iprot.readString();
            _val20 = iprot.readI32();
            struct.industries.put(_key19, _val20);
          }
        }
        struct.setIndustriesIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.positions = new HashMap<String,Integer>(2*_map22.size);
          String _key23;
          int _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readI32();
            struct.positions.put(_key23, _val24);
          }
        }
        struct.setPositionsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.cities = new HashMap<String,Integer>(2*_map26.size);
          String _key27;
          int _val28;
          for (int _i29 = 0; _i29 < _map26.size; ++_i29)
          {
            _key27 = iprot.readString();
            _val28 = iprot.readI32();
            struct.cities.put(_key27, _val28);
          }
        }
        struct.setCitiesIsSet(true);
      }
    }
  }

}

