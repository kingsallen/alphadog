/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-16")
public class ProfileIntentionCityDO implements org.apache.thrift.TBase<ProfileIntentionCityDO, ProfileIntentionCityDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileIntentionCityDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileIntentionCityDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_INTENTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIntentionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileIntentionCityDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileIntentionCityDOTupleSchemeFactory();

  public int id; // optional
  public int profileIntentionId; // optional
  public int cityCode; // optional
  public String cityName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_INTENTION_ID((short)2, "profileIntentionId"),
    CITY_CODE((short)3, "cityCode"),
    CITY_NAME((short)4, "cityName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_INTENTION_ID
          return PROFILE_INTENTION_ID;
        case 3: // CITY_CODE
          return CITY_CODE;
        case 4: // CITY_NAME
          return CITY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILEINTENTIONID_ISSET_ID = 1;
  private static final int __CITYCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_INTENTION_ID,_Fields.CITY_CODE,_Fields.CITY_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_INTENTION_ID, new org.apache.thrift.meta_data.FieldMetaData("profileIntentionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileIntentionCityDO.class, metaDataMap);
  }

  public ProfileIntentionCityDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileIntentionCityDO(ProfileIntentionCityDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profileIntentionId = other.profileIntentionId;
    this.cityCode = other.cityCode;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
  }

  public ProfileIntentionCityDO deepCopy() {
    return new ProfileIntentionCityDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfileIntentionIdIsSet(false);
    this.profileIntentionId = 0;
    setCityCodeIsSet(false);
    this.cityCode = 0;
    this.cityName = null;
  }

  public int getId() {
    return this.id;
  }

  public ProfileIntentionCityDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfileIntentionId() {
    return this.profileIntentionId;
  }

  public ProfileIntentionCityDO setProfileIntentionId(int profileIntentionId) {
    this.profileIntentionId = profileIntentionId;
    setProfileIntentionIdIsSet(true);
    return this;
  }

  public void unsetProfileIntentionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEINTENTIONID_ISSET_ID);
  }

  /** Returns true if field profileIntentionId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileIntentionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEINTENTIONID_ISSET_ID);
  }

  public void setProfileIntentionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEINTENTIONID_ISSET_ID, value);
  }

  public int getCityCode() {
    return this.cityCode;
  }

  public ProfileIntentionCityDO setCityCode(int cityCode) {
    this.cityCode = cityCode;
    setCityCodeIsSet(true);
    return this;
  }

  public void unsetCityCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  public void setCityCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITYCODE_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public ProfileIntentionCityDO setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_INTENTION_ID:
      if (value == null) {
        unsetProfileIntentionId();
      } else {
        setProfileIntentionId((Integer)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((Integer)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_INTENTION_ID:
      return getProfileIntentionId();

    case CITY_CODE:
      return getCityCode();

    case CITY_NAME:
      return getCityName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_INTENTION_ID:
      return isSetProfileIntentionId();
    case CITY_CODE:
      return isSetCityCode();
    case CITY_NAME:
      return isSetCityName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileIntentionCityDO)
      return this.equals((ProfileIntentionCityDO)that);
    return false;
  }

  public boolean equals(ProfileIntentionCityDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profileIntentionId = true && this.isSetProfileIntentionId();
    boolean that_present_profileIntentionId = true && that.isSetProfileIntentionId();
    if (this_present_profileIntentionId || that_present_profileIntentionId) {
      if (!(this_present_profileIntentionId && that_present_profileIntentionId))
        return false;
      if (this.profileIntentionId != that.profileIntentionId)
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (this.cityCode != that.cityCode)
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProfileIntentionId()) ? 131071 : 524287);
    if (isSetProfileIntentionId())
      hashCode = hashCode * 8191 + profileIntentionId;

    hashCode = hashCode * 8191 + ((isSetCityCode()) ? 131071 : 524287);
    if (isSetCityCode())
      hashCode = hashCode * 8191 + cityCode;

    hashCode = hashCode * 8191 + ((isSetCityName()) ? 131071 : 524287);
    if (isSetCityName())
      hashCode = hashCode * 8191 + cityName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileIntentionCityDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileIntentionId()).compareTo(other.isSetProfileIntentionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileIntentionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIntentionId, other.profileIntentionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileIntentionCityDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfileIntentionId()) {
      if (!first) sb.append(", ");
      sb.append("profileIntentionId:");
      sb.append(this.profileIntentionId);
      first = false;
    }
    if (isSetCityCode()) {
      if (!first) sb.append(", ");
      sb.append("cityCode:");
      sb.append(this.cityCode);
      first = false;
    }
    if (isSetCityName()) {
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileIntentionCityDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileIntentionCityDOStandardScheme getScheme() {
      return new ProfileIntentionCityDOStandardScheme();
    }
  }

  private static class ProfileIntentionCityDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileIntentionCityDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileIntentionCityDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_INTENTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileIntentionId = iprot.readI32();
              struct.setProfileIntentionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityCode = iprot.readI32();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileIntentionCityDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfileIntentionId()) {
        oprot.writeFieldBegin(PROFILE_INTENTION_ID_FIELD_DESC);
        oprot.writeI32(struct.profileIntentionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCityCode()) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeI32(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        if (struct.isSetCityName()) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileIntentionCityDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileIntentionCityDOTupleScheme getScheme() {
      return new ProfileIntentionCityDOTupleScheme();
    }
  }

  private static class ProfileIntentionCityDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileIntentionCityDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileIntentionCityDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfileIntentionId()) {
        optionals.set(1);
      }
      if (struct.isSetCityCode()) {
        optionals.set(2);
      }
      if (struct.isSetCityName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfileIntentionId()) {
        oprot.writeI32(struct.profileIntentionId);
      }
      if (struct.isSetCityCode()) {
        oprot.writeI32(struct.cityCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileIntentionCityDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileIntentionId = iprot.readI32();
        struct.setProfileIntentionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cityCode = iprot.readI32();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

