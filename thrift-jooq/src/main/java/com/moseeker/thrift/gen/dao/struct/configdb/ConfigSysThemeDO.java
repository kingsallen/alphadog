/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class ConfigSysThemeDO implements org.apache.thrift.TBase<ConfigSysThemeDO, ConfigSysThemeDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysThemeDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysThemeDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BACKGROUND_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("backgroundColor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("titleColor", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUTTON_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("buttonColor", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OTHER_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("otherColor", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("free", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PRORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("prority", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysThemeDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysThemeDOTupleSchemeFactory();

  public int id; // optional
  public String backgroundColor; // optional
  public String titleColor; // optional
  public String buttonColor; // optional
  public String otherColor; // optional
  public double free; // optional
  public double prority; // optional
  public double disable; // optional
  public String createTime; // optional
  public String updateTime; // optional
  public int companyId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BACKGROUND_COLOR((short)2, "backgroundColor"),
    TITLE_COLOR((short)3, "titleColor"),
    BUTTON_COLOR((short)4, "buttonColor"),
    OTHER_COLOR((short)5, "otherColor"),
    FREE((short)6, "free"),
    PRORITY((short)7, "prority"),
    DISABLE((short)8, "disable"),
    CREATE_TIME((short)9, "createTime"),
    UPDATE_TIME((short)10, "updateTime"),
    COMPANY_ID((short)11, "companyId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BACKGROUND_COLOR
          return BACKGROUND_COLOR;
        case 3: // TITLE_COLOR
          return TITLE_COLOR;
        case 4: // BUTTON_COLOR
          return BUTTON_COLOR;
        case 5: // OTHER_COLOR
          return OTHER_COLOR;
        case 6: // FREE
          return FREE;
        case 7: // PRORITY
          return PRORITY;
        case 8: // DISABLE
          return DISABLE;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // UPDATE_TIME
          return UPDATE_TIME;
        case 11: // COMPANY_ID
          return COMPANY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FREE_ISSET_ID = 1;
  private static final int __PRORITY_ISSET_ID = 2;
  private static final int __DISABLE_ISSET_ID = 3;
  private static final int __COMPANYID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.BACKGROUND_COLOR,_Fields.TITLE_COLOR,_Fields.BUTTON_COLOR,_Fields.OTHER_COLOR,_Fields.FREE,_Fields.PRORITY,_Fields.DISABLE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.COMPANY_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BACKGROUND_COLOR, new org.apache.thrift.meta_data.FieldMetaData("backgroundColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("titleColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUTTON_COLOR, new org.apache.thrift.meta_data.FieldMetaData("buttonColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_COLOR, new org.apache.thrift.meta_data.FieldMetaData("otherColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREE, new org.apache.thrift.meta_data.FieldMetaData("free", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRORITY, new org.apache.thrift.meta_data.FieldMetaData("prority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysThemeDO.class, metaDataMap);
  }

  public ConfigSysThemeDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysThemeDO(ConfigSysThemeDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetBackgroundColor()) {
      this.backgroundColor = other.backgroundColor;
    }
    if (other.isSetTitleColor()) {
      this.titleColor = other.titleColor;
    }
    if (other.isSetButtonColor()) {
      this.buttonColor = other.buttonColor;
    }
    if (other.isSetOtherColor()) {
      this.otherColor = other.otherColor;
    }
    this.free = other.free;
    this.prority = other.prority;
    this.disable = other.disable;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.companyId = other.companyId;
  }

  public ConfigSysThemeDO deepCopy() {
    return new ConfigSysThemeDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.backgroundColor = null;
    this.titleColor = null;
    this.buttonColor = null;
    this.otherColor = null;
    setFreeIsSet(false);
    this.free = 0.0;
    setProrityIsSet(false);
    this.prority = 0.0;
    setDisableIsSet(false);
    this.disable = 0.0;
    this.createTime = null;
    this.updateTime = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysThemeDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getBackgroundColor() {
    return this.backgroundColor;
  }

  public ConfigSysThemeDO setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  public void unsetBackgroundColor() {
    this.backgroundColor = null;
  }

  /** Returns true if field backgroundColor is set (has been assigned a value) and false otherwise */
  public boolean isSetBackgroundColor() {
    return this.backgroundColor != null;
  }

  public void setBackgroundColorIsSet(boolean value) {
    if (!value) {
      this.backgroundColor = null;
    }
  }

  public String getTitleColor() {
    return this.titleColor;
  }

  public ConfigSysThemeDO setTitleColor(String titleColor) {
    this.titleColor = titleColor;
    return this;
  }

  public void unsetTitleColor() {
    this.titleColor = null;
  }

  /** Returns true if field titleColor is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleColor() {
    return this.titleColor != null;
  }

  public void setTitleColorIsSet(boolean value) {
    if (!value) {
      this.titleColor = null;
    }
  }

  public String getButtonColor() {
    return this.buttonColor;
  }

  public ConfigSysThemeDO setButtonColor(String buttonColor) {
    this.buttonColor = buttonColor;
    return this;
  }

  public void unsetButtonColor() {
    this.buttonColor = null;
  }

  /** Returns true if field buttonColor is set (has been assigned a value) and false otherwise */
  public boolean isSetButtonColor() {
    return this.buttonColor != null;
  }

  public void setButtonColorIsSet(boolean value) {
    if (!value) {
      this.buttonColor = null;
    }
  }

  public String getOtherColor() {
    return this.otherColor;
  }

  public ConfigSysThemeDO setOtherColor(String otherColor) {
    this.otherColor = otherColor;
    return this;
  }

  public void unsetOtherColor() {
    this.otherColor = null;
  }

  /** Returns true if field otherColor is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherColor() {
    return this.otherColor != null;
  }

  public void setOtherColorIsSet(boolean value) {
    if (!value) {
      this.otherColor = null;
    }
  }

  public double getFree() {
    return this.free;
  }

  public ConfigSysThemeDO setFree(double free) {
    this.free = free;
    setFreeIsSet(true);
    return this;
  }

  public void unsetFree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  /** Returns true if field free is set (has been assigned a value) and false otherwise */
  public boolean isSetFree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREE_ISSET_ID);
  }

  public void setFreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREE_ISSET_ID, value);
  }

  public double getPrority() {
    return this.prority;
  }

  public ConfigSysThemeDO setPrority(double prority) {
    this.prority = prority;
    setProrityIsSet(true);
    return this;
  }

  public void unsetPrority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRORITY_ISSET_ID);
  }

  /** Returns true if field prority is set (has been assigned a value) and false otherwise */
  public boolean isSetPrority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRORITY_ISSET_ID);
  }

  public void setProrityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRORITY_ISSET_ID, value);
  }

  public double getDisable() {
    return this.disable;
  }

  public ConfigSysThemeDO setDisable(double disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ConfigSysThemeDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ConfigSysThemeDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ConfigSysThemeDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case BACKGROUND_COLOR:
      if (value == null) {
        unsetBackgroundColor();
      } else {
        setBackgroundColor((String)value);
      }
      break;

    case TITLE_COLOR:
      if (value == null) {
        unsetTitleColor();
      } else {
        setTitleColor((String)value);
      }
      break;

    case BUTTON_COLOR:
      if (value == null) {
        unsetButtonColor();
      } else {
        setButtonColor((String)value);
      }
      break;

    case OTHER_COLOR:
      if (value == null) {
        unsetOtherColor();
      } else {
        setOtherColor((String)value);
      }
      break;

    case FREE:
      if (value == null) {
        unsetFree();
      } else {
        setFree((Double)value);
      }
      break;

    case PRORITY:
      if (value == null) {
        unsetPrority();
      } else {
        setPrority((Double)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case BACKGROUND_COLOR:
      return getBackgroundColor();

    case TITLE_COLOR:
      return getTitleColor();

    case BUTTON_COLOR:
      return getButtonColor();

    case OTHER_COLOR:
      return getOtherColor();

    case FREE:
      return getFree();

    case PRORITY:
      return getPrority();

    case DISABLE:
      return getDisable();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case COMPANY_ID:
      return getCompanyId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BACKGROUND_COLOR:
      return isSetBackgroundColor();
    case TITLE_COLOR:
      return isSetTitleColor();
    case BUTTON_COLOR:
      return isSetButtonColor();
    case OTHER_COLOR:
      return isSetOtherColor();
    case FREE:
      return isSetFree();
    case PRORITY:
      return isSetPrority();
    case DISABLE:
      return isSetDisable();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case COMPANY_ID:
      return isSetCompanyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysThemeDO)
      return this.equals((ConfigSysThemeDO)that);
    return false;
  }

  public boolean equals(ConfigSysThemeDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_backgroundColor = true && this.isSetBackgroundColor();
    boolean that_present_backgroundColor = true && that.isSetBackgroundColor();
    if (this_present_backgroundColor || that_present_backgroundColor) {
      if (!(this_present_backgroundColor && that_present_backgroundColor))
        return false;
      if (!this.backgroundColor.equals(that.backgroundColor))
        return false;
    }

    boolean this_present_titleColor = true && this.isSetTitleColor();
    boolean that_present_titleColor = true && that.isSetTitleColor();
    if (this_present_titleColor || that_present_titleColor) {
      if (!(this_present_titleColor && that_present_titleColor))
        return false;
      if (!this.titleColor.equals(that.titleColor))
        return false;
    }

    boolean this_present_buttonColor = true && this.isSetButtonColor();
    boolean that_present_buttonColor = true && that.isSetButtonColor();
    if (this_present_buttonColor || that_present_buttonColor) {
      if (!(this_present_buttonColor && that_present_buttonColor))
        return false;
      if (!this.buttonColor.equals(that.buttonColor))
        return false;
    }

    boolean this_present_otherColor = true && this.isSetOtherColor();
    boolean that_present_otherColor = true && that.isSetOtherColor();
    if (this_present_otherColor || that_present_otherColor) {
      if (!(this_present_otherColor && that_present_otherColor))
        return false;
      if (!this.otherColor.equals(that.otherColor))
        return false;
    }

    boolean this_present_free = true && this.isSetFree();
    boolean that_present_free = true && that.isSetFree();
    if (this_present_free || that_present_free) {
      if (!(this_present_free && that_present_free))
        return false;
      if (this.free != that.free)
        return false;
    }

    boolean this_present_prority = true && this.isSetPrority();
    boolean that_present_prority = true && that.isSetPrority();
    if (this_present_prority || that_present_prority) {
      if (!(this_present_prority && that_present_prority))
        return false;
      if (this.prority != that.prority)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetBackgroundColor()) ? 131071 : 524287);
    if (isSetBackgroundColor())
      hashCode = hashCode * 8191 + backgroundColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitleColor()) ? 131071 : 524287);
    if (isSetTitleColor())
      hashCode = hashCode * 8191 + titleColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetButtonColor()) ? 131071 : 524287);
    if (isSetButtonColor())
      hashCode = hashCode * 8191 + buttonColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetOtherColor()) ? 131071 : 524287);
    if (isSetOtherColor())
      hashCode = hashCode * 8191 + otherColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetFree()) ? 131071 : 524287);
    if (isSetFree())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(free);

    hashCode = hashCode * 8191 + ((isSetPrority()) ? 131071 : 524287);
    if (isSetPrority())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prority);

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disable);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysThemeDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackgroundColor()).compareTo(other.isSetBackgroundColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackgroundColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backgroundColor, other.backgroundColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleColor()).compareTo(other.isSetTitleColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleColor, other.titleColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetButtonColor()).compareTo(other.isSetButtonColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButtonColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonColor, other.buttonColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherColor()).compareTo(other.isSetOtherColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherColor, other.otherColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree()).compareTo(other.isSetFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free, other.free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrority()).compareTo(other.isSetPrority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prority, other.prority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysThemeDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetBackgroundColor()) {
      if (!first) sb.append(", ");
      sb.append("backgroundColor:");
      if (this.backgroundColor == null) {
        sb.append("null");
      } else {
        sb.append(this.backgroundColor);
      }
      first = false;
    }
    if (isSetTitleColor()) {
      if (!first) sb.append(", ");
      sb.append("titleColor:");
      if (this.titleColor == null) {
        sb.append("null");
      } else {
        sb.append(this.titleColor);
      }
      first = false;
    }
    if (isSetButtonColor()) {
      if (!first) sb.append(", ");
      sb.append("buttonColor:");
      if (this.buttonColor == null) {
        sb.append("null");
      } else {
        sb.append(this.buttonColor);
      }
      first = false;
    }
    if (isSetOtherColor()) {
      if (!first) sb.append(", ");
      sb.append("otherColor:");
      if (this.otherColor == null) {
        sb.append("null");
      } else {
        sb.append(this.otherColor);
      }
      first = false;
    }
    if (isSetFree()) {
      if (!first) sb.append(", ");
      sb.append("free:");
      sb.append(this.free);
      first = false;
    }
    if (isSetPrority()) {
      if (!first) sb.append(", ");
      sb.append("prority:");
      sb.append(this.prority);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysThemeDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysThemeDOStandardScheme getScheme() {
      return new ConfigSysThemeDOStandardScheme();
    }
  }

  private static class ConfigSysThemeDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysThemeDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysThemeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACKGROUND_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backgroundColor = iprot.readString();
              struct.setBackgroundColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleColor = iprot.readString();
              struct.setTitleColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUTTON_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buttonColor = iprot.readString();
              struct.setButtonColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OTHER_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherColor = iprot.readString();
              struct.setOtherColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.free = iprot.readDouble();
              struct.setFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prority = iprot.readDouble();
              struct.setProrityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disable = iprot.readDouble();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysThemeDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.backgroundColor != null) {
        if (struct.isSetBackgroundColor()) {
          oprot.writeFieldBegin(BACKGROUND_COLOR_FIELD_DESC);
          oprot.writeString(struct.backgroundColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.titleColor != null) {
        if (struct.isSetTitleColor()) {
          oprot.writeFieldBegin(TITLE_COLOR_FIELD_DESC);
          oprot.writeString(struct.titleColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buttonColor != null) {
        if (struct.isSetButtonColor()) {
          oprot.writeFieldBegin(BUTTON_COLOR_FIELD_DESC);
          oprot.writeString(struct.buttonColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.otherColor != null) {
        if (struct.isSetOtherColor()) {
          oprot.writeFieldBegin(OTHER_COLOR_FIELD_DESC);
          oprot.writeString(struct.otherColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFree()) {
        oprot.writeFieldBegin(FREE_FIELD_DESC);
        oprot.writeDouble(struct.free);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrority()) {
        oprot.writeFieldBegin(PRORITY_FIELD_DESC);
        oprot.writeDouble(struct.prority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeDouble(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysThemeDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysThemeDOTupleScheme getScheme() {
      return new ConfigSysThemeDOTupleScheme();
    }
  }

  private static class ConfigSysThemeDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysThemeDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysThemeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBackgroundColor()) {
        optionals.set(1);
      }
      if (struct.isSetTitleColor()) {
        optionals.set(2);
      }
      if (struct.isSetButtonColor()) {
        optionals.set(3);
      }
      if (struct.isSetOtherColor()) {
        optionals.set(4);
      }
      if (struct.isSetFree()) {
        optionals.set(5);
      }
      if (struct.isSetPrority()) {
        optionals.set(6);
      }
      if (struct.isSetDisable()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(9);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetBackgroundColor()) {
        oprot.writeString(struct.backgroundColor);
      }
      if (struct.isSetTitleColor()) {
        oprot.writeString(struct.titleColor);
      }
      if (struct.isSetButtonColor()) {
        oprot.writeString(struct.buttonColor);
      }
      if (struct.isSetOtherColor()) {
        oprot.writeString(struct.otherColor);
      }
      if (struct.isSetFree()) {
        oprot.writeDouble(struct.free);
      }
      if (struct.isSetPrority()) {
        oprot.writeDouble(struct.prority);
      }
      if (struct.isSetDisable()) {
        oprot.writeDouble(struct.disable);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysThemeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backgroundColor = iprot.readString();
        struct.setBackgroundColorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.titleColor = iprot.readString();
        struct.setTitleColorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buttonColor = iprot.readString();
        struct.setButtonColorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.otherColor = iprot.readString();
        struct.setOtherColorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.free = iprot.readDouble();
        struct.setFreeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.prority = iprot.readDouble();
        struct.setProrityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.disable = iprot.readDouble();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

