/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.jobdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class JobPositionDO implements org.apache.thrift.TBase<JobPositionDO, JobPositionDO._Fields>, java.io.Serializable, Cloneable, Comparable<JobPositionDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobPositionDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOBNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("jobnumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField L_JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("lJobid", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publishDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STOP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACCOUNTABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accountabilities", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("requirement", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("salary", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField JOB_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobGrade", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField VISITNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("visitnum", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField LASTVISIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastvisit", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BUSINESS_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("businessGroup", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField EMPLOYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("employmentType", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField HR_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("hrEmail", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BENEFITS_FIELD_DESC = new org.apache.thrift.protocol.TField("benefits", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField EMAIL_NOTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("emailNotice", org.apache.thrift.protocol.TType.BYTE, (short)28);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateSource", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField IS_RECOM_FIELD_DESC = new org.apache.thrift.protocol.TField("isRecom", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("industry", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField HONGBAO_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hongbaoConfigId", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField HONGBAO_CONFIG_RECOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hongbaoConfigRecomId", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField HONGBAO_CONFIG_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hongbaoConfigAppId", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField EMAIL_RESUME_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("emailResumeConf", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField L_POSTINGTARGETID_FIELD_DESC = new org.apache.thrift.protocol.TField("lPostingtargetid", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField SHARE_TPL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTplId", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField DISTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("district", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryTop", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryBottom", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("experienceAbove", org.apache.thrift.protocol.TType.BYTE, (short)44);
  private static final org.apache.thrift.protocol.TField DEGREE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("degreeAbove", org.apache.thrift.protocol.TType.BYTE, (short)45);
  private static final org.apache.thrift.protocol.TField MANAGEMENT_EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("managementExperience", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.DOUBLE, (short)47);
  private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField APP_CV_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appCvConfigId", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.DOUBLE, (short)50);
  private static final org.apache.thrift.protocol.TField HB_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("hbStatus", org.apache.thrift.protocol.TType.BYTE, (short)51);
  private static final org.apache.thrift.protocol.TField CHILD_COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("childCompanyId", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.BYTE, (short)53);
  private static final org.apache.thrift.protocol.TField MAJOR_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("majorRequired", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField WORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("workAddress", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField REPORTING_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("reportingTo", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField IS_HIRING_FIELD_DESC = new org.apache.thrift.protocol.TField("isHiring", org.apache.thrift.protocol.TType.BYTE, (short)58);
  private static final org.apache.thrift.protocol.TField UNDERLINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("underlings", org.apache.thrift.protocol.TType.BYTE, (short)59);
  private static final org.apache.thrift.protocol.TField LANGUAGE_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("languageRequired", org.apache.thrift.protocol.TType.BYTE, (short)60);
  private static final org.apache.thrift.protocol.TField TARGET_INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("targetIndustry", org.apache.thrift.protocol.TType.BYTE, (short)61);
  private static final org.apache.thrift.protocol.TField CURRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("currentStatus", org.apache.thrift.protocol.TType.BYTE, (short)62);
  private static final org.apache.thrift.protocol.TField POSITION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCode", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.I32, (short)64);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobPositionDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobPositionDOTupleSchemeFactory();

  public int id; // optional
  public String jobnumber; // optional
  public int companyId; // optional
  public String title; // optional
  public String province; // optional
  public String city; // optional
  public String department; // optional
  public int lJobid; // optional
  public String publishDate; // optional
  public String stopDate; // optional
  public String accountabilities; // optional
  public String experience; // optional
  public String requirement; // optional
  public String salary; // optional
  public String language; // optional
  public int jobGrade; // optional
  public double status; // optional
  public int visitnum; // optional
  public String lastvisit; // optional
  public int sourceId; // optional
  public String updateTime; // optional
  public String businessGroup; // optional
  public double employmentType; // optional
  public String hrEmail; // optional
  public String benefits; // optional
  public double degree; // optional
  public String feature; // optional
  public byte emailNotice; // optional
  public double candidateSource; // optional
  public String occupation; // optional
  public int isRecom; // optional
  public String industry; // optional
  public int hongbaoConfigId; // optional
  public int hongbaoConfigRecomId; // optional
  public int hongbaoConfigAppId; // optional
  public double emailResumeConf; // optional
  public double lPostingtargetid; // optional
  public double priority; // optional
  public double shareTplId; // optional
  public String district; // optional
  public double count; // optional
  public double salaryTop; // optional
  public double salaryBottom; // optional
  public byte experienceAbove; // optional
  public byte degreeAbove; // optional
  public double managementExperience; // optional
  public double gender; // optional
  public int publisher; // optional
  public int appCvConfigId; // optional
  public double source; // optional
  public byte hbStatus; // optional
  public int childCompanyId; // optional
  public byte age; // optional
  public String majorRequired; // optional
  public String workAddress; // optional
  public String keyword; // optional
  public String reportingTo; // optional
  public byte isHiring; // optional
  public byte underlings; // optional
  public byte languageRequired; // optional
  public byte targetIndustry; // optional
  public byte currentStatus; // optional
  public int positionCode; // optional
  public int teamId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    JOBNUMBER((short)2, "jobnumber"),
    COMPANY_ID((short)3, "companyId"),
    TITLE((short)4, "title"),
    PROVINCE((short)5, "province"),
    CITY((short)6, "city"),
    DEPARTMENT((short)7, "department"),
    L_JOBID((short)8, "lJobid"),
    PUBLISH_DATE((short)9, "publishDate"),
    STOP_DATE((short)10, "stopDate"),
    ACCOUNTABILITIES((short)11, "accountabilities"),
    EXPERIENCE((short)12, "experience"),
    REQUIREMENT((short)13, "requirement"),
    SALARY((short)14, "salary"),
    LANGUAGE((short)15, "language"),
    JOB_GRADE((short)16, "jobGrade"),
    STATUS((short)17, "status"),
    VISITNUM((short)18, "visitnum"),
    LASTVISIT((short)19, "lastvisit"),
    SOURCE_ID((short)20, "sourceId"),
    UPDATE_TIME((short)21, "updateTime"),
    BUSINESS_GROUP((short)22, "businessGroup"),
    EMPLOYMENT_TYPE((short)23, "employmentType"),
    HR_EMAIL((short)24, "hrEmail"),
    BENEFITS((short)25, "benefits"),
    DEGREE((short)26, "degree"),
    FEATURE((short)27, "feature"),
    EMAIL_NOTICE((short)28, "emailNotice"),
    CANDIDATE_SOURCE((short)29, "candidateSource"),
    OCCUPATION((short)30, "occupation"),
    IS_RECOM((short)31, "isRecom"),
    INDUSTRY((short)32, "industry"),
    HONGBAO_CONFIG_ID((short)33, "hongbaoConfigId"),
    HONGBAO_CONFIG_RECOM_ID((short)34, "hongbaoConfigRecomId"),
    HONGBAO_CONFIG_APP_ID((short)35, "hongbaoConfigAppId"),
    EMAIL_RESUME_CONF((short)36, "emailResumeConf"),
    L_POSTINGTARGETID((short)37, "lPostingtargetid"),
    PRIORITY((short)38, "priority"),
    SHARE_TPL_ID((short)39, "shareTplId"),
    DISTRICT((short)40, "district"),
    COUNT((short)41, "count"),
    SALARY_TOP((short)42, "salaryTop"),
    SALARY_BOTTOM((short)43, "salaryBottom"),
    EXPERIENCE_ABOVE((short)44, "experienceAbove"),
    DEGREE_ABOVE((short)45, "degreeAbove"),
    MANAGEMENT_EXPERIENCE((short)46, "managementExperience"),
    GENDER((short)47, "gender"),
    PUBLISHER((short)48, "publisher"),
    APP_CV_CONFIG_ID((short)49, "appCvConfigId"),
    SOURCE((short)50, "source"),
    HB_STATUS((short)51, "hbStatus"),
    CHILD_COMPANY_ID((short)52, "childCompanyId"),
    AGE((short)53, "age"),
    MAJOR_REQUIRED((short)54, "majorRequired"),
    WORK_ADDRESS((short)55, "workAddress"),
    KEYWORD((short)56, "keyword"),
    REPORTING_TO((short)57, "reportingTo"),
    IS_HIRING((short)58, "isHiring"),
    UNDERLINGS((short)59, "underlings"),
    LANGUAGE_REQUIRED((short)60, "languageRequired"),
    TARGET_INDUSTRY((short)61, "targetIndustry"),
    CURRENT_STATUS((short)62, "currentStatus"),
    POSITION_CODE((short)63, "positionCode"),
    TEAM_ID((short)64, "teamId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // JOBNUMBER
          return JOBNUMBER;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // TITLE
          return TITLE;
        case 5: // PROVINCE
          return PROVINCE;
        case 6: // CITY
          return CITY;
        case 7: // DEPARTMENT
          return DEPARTMENT;
        case 8: // L_JOBID
          return L_JOBID;
        case 9: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 10: // STOP_DATE
          return STOP_DATE;
        case 11: // ACCOUNTABILITIES
          return ACCOUNTABILITIES;
        case 12: // EXPERIENCE
          return EXPERIENCE;
        case 13: // REQUIREMENT
          return REQUIREMENT;
        case 14: // SALARY
          return SALARY;
        case 15: // LANGUAGE
          return LANGUAGE;
        case 16: // JOB_GRADE
          return JOB_GRADE;
        case 17: // STATUS
          return STATUS;
        case 18: // VISITNUM
          return VISITNUM;
        case 19: // LASTVISIT
          return LASTVISIT;
        case 20: // SOURCE_ID
          return SOURCE_ID;
        case 21: // UPDATE_TIME
          return UPDATE_TIME;
        case 22: // BUSINESS_GROUP
          return BUSINESS_GROUP;
        case 23: // EMPLOYMENT_TYPE
          return EMPLOYMENT_TYPE;
        case 24: // HR_EMAIL
          return HR_EMAIL;
        case 25: // BENEFITS
          return BENEFITS;
        case 26: // DEGREE
          return DEGREE;
        case 27: // FEATURE
          return FEATURE;
        case 28: // EMAIL_NOTICE
          return EMAIL_NOTICE;
        case 29: // CANDIDATE_SOURCE
          return CANDIDATE_SOURCE;
        case 30: // OCCUPATION
          return OCCUPATION;
        case 31: // IS_RECOM
          return IS_RECOM;
        case 32: // INDUSTRY
          return INDUSTRY;
        case 33: // HONGBAO_CONFIG_ID
          return HONGBAO_CONFIG_ID;
        case 34: // HONGBAO_CONFIG_RECOM_ID
          return HONGBAO_CONFIG_RECOM_ID;
        case 35: // HONGBAO_CONFIG_APP_ID
          return HONGBAO_CONFIG_APP_ID;
        case 36: // EMAIL_RESUME_CONF
          return EMAIL_RESUME_CONF;
        case 37: // L_POSTINGTARGETID
          return L_POSTINGTARGETID;
        case 38: // PRIORITY
          return PRIORITY;
        case 39: // SHARE_TPL_ID
          return SHARE_TPL_ID;
        case 40: // DISTRICT
          return DISTRICT;
        case 41: // COUNT
          return COUNT;
        case 42: // SALARY_TOP
          return SALARY_TOP;
        case 43: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 44: // EXPERIENCE_ABOVE
          return EXPERIENCE_ABOVE;
        case 45: // DEGREE_ABOVE
          return DEGREE_ABOVE;
        case 46: // MANAGEMENT_EXPERIENCE
          return MANAGEMENT_EXPERIENCE;
        case 47: // GENDER
          return GENDER;
        case 48: // PUBLISHER
          return PUBLISHER;
        case 49: // APP_CV_CONFIG_ID
          return APP_CV_CONFIG_ID;
        case 50: // SOURCE
          return SOURCE;
        case 51: // HB_STATUS
          return HB_STATUS;
        case 52: // CHILD_COMPANY_ID
          return CHILD_COMPANY_ID;
        case 53: // AGE
          return AGE;
        case 54: // MAJOR_REQUIRED
          return MAJOR_REQUIRED;
        case 55: // WORK_ADDRESS
          return WORK_ADDRESS;
        case 56: // KEYWORD
          return KEYWORD;
        case 57: // REPORTING_TO
          return REPORTING_TO;
        case 58: // IS_HIRING
          return IS_HIRING;
        case 59: // UNDERLINGS
          return UNDERLINGS;
        case 60: // LANGUAGE_REQUIRED
          return LANGUAGE_REQUIRED;
        case 61: // TARGET_INDUSTRY
          return TARGET_INDUSTRY;
        case 62: // CURRENT_STATUS
          return CURRENT_STATUS;
        case 63: // POSITION_CODE
          return POSITION_CODE;
        case 64: // TEAM_ID
          return TEAM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __LJOBID_ISSET_ID = 2;
  private static final int __JOBGRADE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __VISITNUM_ISSET_ID = 5;
  private static final int __SOURCEID_ISSET_ID = 6;
  private static final int __EMPLOYMENTTYPE_ISSET_ID = 7;
  private static final int __DEGREE_ISSET_ID = 8;
  private static final int __EMAILNOTICE_ISSET_ID = 9;
  private static final int __CANDIDATESOURCE_ISSET_ID = 10;
  private static final int __ISRECOM_ISSET_ID = 11;
  private static final int __HONGBAOCONFIGID_ISSET_ID = 12;
  private static final int __HONGBAOCONFIGRECOMID_ISSET_ID = 13;
  private static final int __HONGBAOCONFIGAPPID_ISSET_ID = 14;
  private static final int __EMAILRESUMECONF_ISSET_ID = 15;
  private static final int __LPOSTINGTARGETID_ISSET_ID = 16;
  private static final int __PRIORITY_ISSET_ID = 17;
  private static final int __SHARETPLID_ISSET_ID = 18;
  private static final int __COUNT_ISSET_ID = 19;
  private static final int __SALARYTOP_ISSET_ID = 20;
  private static final int __SALARYBOTTOM_ISSET_ID = 21;
  private static final int __EXPERIENCEABOVE_ISSET_ID = 22;
  private static final int __DEGREEABOVE_ISSET_ID = 23;
  private static final int __MANAGEMENTEXPERIENCE_ISSET_ID = 24;
  private static final int __GENDER_ISSET_ID = 25;
  private static final int __PUBLISHER_ISSET_ID = 26;
  private static final int __APPCVCONFIGID_ISSET_ID = 27;
  private static final int __SOURCE_ISSET_ID = 28;
  private static final int __HBSTATUS_ISSET_ID = 29;
  private static final int __CHILDCOMPANYID_ISSET_ID = 30;
  private static final int __AGE_ISSET_ID = 31;
  private static final int __ISHIRING_ISSET_ID = 32;
  private static final int __UNDERLINGS_ISSET_ID = 33;
  private static final int __LANGUAGEREQUIRED_ISSET_ID = 34;
  private static final int __TARGETINDUSTRY_ISSET_ID = 35;
  private static final int __CURRENTSTATUS_ISSET_ID = 36;
  private static final int __POSITIONCODE_ISSET_ID = 37;
  private static final int __TEAMID_ISSET_ID = 38;
  private long __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.JOBNUMBER,_Fields.COMPANY_ID,_Fields.TITLE,_Fields.PROVINCE,_Fields.CITY,_Fields.DEPARTMENT,_Fields.L_JOBID,_Fields.PUBLISH_DATE,_Fields.STOP_DATE,_Fields.ACCOUNTABILITIES,_Fields.EXPERIENCE,_Fields.REQUIREMENT,_Fields.SALARY,_Fields.LANGUAGE,_Fields.JOB_GRADE,_Fields.STATUS,_Fields.VISITNUM,_Fields.LASTVISIT,_Fields.SOURCE_ID,_Fields.UPDATE_TIME,_Fields.BUSINESS_GROUP,_Fields.EMPLOYMENT_TYPE,_Fields.HR_EMAIL,_Fields.BENEFITS,_Fields.DEGREE,_Fields.FEATURE,_Fields.EMAIL_NOTICE,_Fields.CANDIDATE_SOURCE,_Fields.OCCUPATION,_Fields.IS_RECOM,_Fields.INDUSTRY,_Fields.HONGBAO_CONFIG_ID,_Fields.HONGBAO_CONFIG_RECOM_ID,_Fields.HONGBAO_CONFIG_APP_ID,_Fields.EMAIL_RESUME_CONF,_Fields.L_POSTINGTARGETID,_Fields.PRIORITY,_Fields.SHARE_TPL_ID,_Fields.DISTRICT,_Fields.COUNT,_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.EXPERIENCE_ABOVE,_Fields.DEGREE_ABOVE,_Fields.MANAGEMENT_EXPERIENCE,_Fields.GENDER,_Fields.PUBLISHER,_Fields.APP_CV_CONFIG_ID,_Fields.SOURCE,_Fields.HB_STATUS,_Fields.CHILD_COMPANY_ID,_Fields.AGE,_Fields.MAJOR_REQUIRED,_Fields.WORK_ADDRESS,_Fields.KEYWORD,_Fields.REPORTING_TO,_Fields.IS_HIRING,_Fields.UNDERLINGS,_Fields.LANGUAGE_REQUIRED,_Fields.TARGET_INDUSTRY,_Fields.CURRENT_STATUS,_Fields.POSITION_CODE,_Fields.TEAM_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOBNUMBER, new org.apache.thrift.meta_data.FieldMetaData("jobnumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.L_JOBID, new org.apache.thrift.meta_data.FieldMetaData("lJobid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publishDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_DATE, new org.apache.thrift.meta_data.FieldMetaData("stopDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNTABILITIES, new org.apache.thrift.meta_data.FieldMetaData("accountabilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("requirement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY, new org.apache.thrift.meta_data.FieldMetaData("salary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_GRADE, new org.apache.thrift.meta_data.FieldMetaData("jobGrade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VISITNUM, new org.apache.thrift.meta_data.FieldMetaData("visitnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTVISIT, new org.apache.thrift.meta_data.FieldMetaData("lastvisit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_GROUP, new org.apache.thrift.meta_data.FieldMetaData("businessGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("employmentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HR_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("hrEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BENEFITS, new org.apache.thrift.meta_data.FieldMetaData("benefits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_NOTICE, new org.apache.thrift.meta_data.FieldMetaData("emailNotice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidateSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RECOM, new org.apache.thrift.meta_data.FieldMetaData("isRecom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("industry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HONGBAO_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hongbaoConfigId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HONGBAO_CONFIG_RECOM_ID, new org.apache.thrift.meta_data.FieldMetaData("hongbaoConfigRecomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HONGBAO_CONFIG_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("hongbaoConfigAppId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL_RESUME_CONF, new org.apache.thrift.meta_data.FieldMetaData("emailResumeConf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.L_POSTINGTARGETID, new org.apache.thrift.meta_data.FieldMetaData("lPostingtargetid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHARE_TPL_ID, new org.apache.thrift.meta_data.FieldMetaData("shareTplId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISTRICT, new org.apache.thrift.meta_data.FieldMetaData("district", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salaryTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salaryBottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPERIENCE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("experienceAbove", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DEGREE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("degreeAbove", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MANAGEMENT_EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("managementExperience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_CV_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("appCvConfigId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HB_STATUS, new org.apache.thrift.meta_data.FieldMetaData("hbStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHILD_COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("childCompanyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAJOR_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("majorRequired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("workAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORTING_TO, new org.apache.thrift.meta_data.FieldMetaData("reportingTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HIRING, new org.apache.thrift.meta_data.FieldMetaData("isHiring", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.UNDERLINGS, new org.apache.thrift.meta_data.FieldMetaData("underlings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LANGUAGE_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("languageRequired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TARGET_INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("targetIndustry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CURRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("currentStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POSITION_CODE, new org.apache.thrift.meta_data.FieldMetaData("positionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobPositionDO.class, metaDataMap);
  }

  public JobPositionDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobPositionDO(JobPositionDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetJobnumber()) {
      this.jobnumber = other.jobnumber;
    }
    this.companyId = other.companyId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    this.lJobid = other.lJobid;
    if (other.isSetPublishDate()) {
      this.publishDate = other.publishDate;
    }
    if (other.isSetStopDate()) {
      this.stopDate = other.stopDate;
    }
    if (other.isSetAccountabilities()) {
      this.accountabilities = other.accountabilities;
    }
    if (other.isSetExperience()) {
      this.experience = other.experience;
    }
    if (other.isSetRequirement()) {
      this.requirement = other.requirement;
    }
    if (other.isSetSalary()) {
      this.salary = other.salary;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    this.jobGrade = other.jobGrade;
    this.status = other.status;
    this.visitnum = other.visitnum;
    if (other.isSetLastvisit()) {
      this.lastvisit = other.lastvisit;
    }
    this.sourceId = other.sourceId;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetBusinessGroup()) {
      this.businessGroup = other.businessGroup;
    }
    this.employmentType = other.employmentType;
    if (other.isSetHrEmail()) {
      this.hrEmail = other.hrEmail;
    }
    if (other.isSetBenefits()) {
      this.benefits = other.benefits;
    }
    this.degree = other.degree;
    if (other.isSetFeature()) {
      this.feature = other.feature;
    }
    this.emailNotice = other.emailNotice;
    this.candidateSource = other.candidateSource;
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    this.isRecom = other.isRecom;
    if (other.isSetIndustry()) {
      this.industry = other.industry;
    }
    this.hongbaoConfigId = other.hongbaoConfigId;
    this.hongbaoConfigRecomId = other.hongbaoConfigRecomId;
    this.hongbaoConfigAppId = other.hongbaoConfigAppId;
    this.emailResumeConf = other.emailResumeConf;
    this.lPostingtargetid = other.lPostingtargetid;
    this.priority = other.priority;
    this.shareTplId = other.shareTplId;
    if (other.isSetDistrict()) {
      this.district = other.district;
    }
    this.count = other.count;
    this.salaryTop = other.salaryTop;
    this.salaryBottom = other.salaryBottom;
    this.experienceAbove = other.experienceAbove;
    this.degreeAbove = other.degreeAbove;
    this.managementExperience = other.managementExperience;
    this.gender = other.gender;
    this.publisher = other.publisher;
    this.appCvConfigId = other.appCvConfigId;
    this.source = other.source;
    this.hbStatus = other.hbStatus;
    this.childCompanyId = other.childCompanyId;
    this.age = other.age;
    if (other.isSetMajorRequired()) {
      this.majorRequired = other.majorRequired;
    }
    if (other.isSetWorkAddress()) {
      this.workAddress = other.workAddress;
    }
    if (other.isSetKeyword()) {
      this.keyword = other.keyword;
    }
    if (other.isSetReportingTo()) {
      this.reportingTo = other.reportingTo;
    }
    this.isHiring = other.isHiring;
    this.underlings = other.underlings;
    this.languageRequired = other.languageRequired;
    this.targetIndustry = other.targetIndustry;
    this.currentStatus = other.currentStatus;
    this.positionCode = other.positionCode;
    this.teamId = other.teamId;
  }

  public JobPositionDO deepCopy() {
    return new JobPositionDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.jobnumber = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.title = null;
    this.province = null;
    this.city = null;
    this.department = null;
    setLJobidIsSet(false);
    this.lJobid = 0;
    this.publishDate = null;
    this.stopDate = null;
    this.accountabilities = null;
    this.experience = null;
    this.requirement = null;
    this.salary = null;
    this.language = null;
    setJobGradeIsSet(false);
    this.jobGrade = 0;
    setStatusIsSet(false);
    this.status = 0.0;
    setVisitnumIsSet(false);
    this.visitnum = 0;
    this.lastvisit = null;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    this.updateTime = null;
    this.businessGroup = null;
    setEmploymentTypeIsSet(false);
    this.employmentType = 0.0;
    this.hrEmail = null;
    this.benefits = null;
    setDegreeIsSet(false);
    this.degree = 0.0;
    this.feature = null;
    setEmailNoticeIsSet(false);
    this.emailNotice = 0;
    setCandidateSourceIsSet(false);
    this.candidateSource = 0.0;
    this.occupation = null;
    setIsRecomIsSet(false);
    this.isRecom = 0;
    this.industry = null;
    setHongbaoConfigIdIsSet(false);
    this.hongbaoConfigId = 0;
    setHongbaoConfigRecomIdIsSet(false);
    this.hongbaoConfigRecomId = 0;
    setHongbaoConfigAppIdIsSet(false);
    this.hongbaoConfigAppId = 0;
    setEmailResumeConfIsSet(false);
    this.emailResumeConf = 0.0;
    setLPostingtargetidIsSet(false);
    this.lPostingtargetid = 0.0;
    setPriorityIsSet(false);
    this.priority = 0.0;
    setShareTplIdIsSet(false);
    this.shareTplId = 0.0;
    this.district = null;
    setCountIsSet(false);
    this.count = 0.0;
    setSalaryTopIsSet(false);
    this.salaryTop = 0.0;
    setSalaryBottomIsSet(false);
    this.salaryBottom = 0.0;
    setExperienceAboveIsSet(false);
    this.experienceAbove = 0;
    setDegreeAboveIsSet(false);
    this.degreeAbove = 0;
    setManagementExperienceIsSet(false);
    this.managementExperience = 0.0;
    setGenderIsSet(false);
    this.gender = 0.0;
    setPublisherIsSet(false);
    this.publisher = 0;
    setAppCvConfigIdIsSet(false);
    this.appCvConfigId = 0;
    setSourceIsSet(false);
    this.source = 0.0;
    setHbStatusIsSet(false);
    this.hbStatus = 0;
    setChildCompanyIdIsSet(false);
    this.childCompanyId = 0;
    setAgeIsSet(false);
    this.age = 0;
    this.majorRequired = null;
    this.workAddress = null;
    this.keyword = null;
    this.reportingTo = null;
    setIsHiringIsSet(false);
    this.isHiring = 0;
    setUnderlingsIsSet(false);
    this.underlings = 0;
    setLanguageRequiredIsSet(false);
    this.languageRequired = 0;
    setTargetIndustryIsSet(false);
    this.targetIndustry = 0;
    setCurrentStatusIsSet(false);
    this.currentStatus = 0;
    setPositionCodeIsSet(false);
    this.positionCode = 0;
    setTeamIdIsSet(false);
    this.teamId = 0;
  }

  public int getId() {
    return this.id;
  }

  public JobPositionDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getJobnumber() {
    return this.jobnumber;
  }

  public JobPositionDO setJobnumber(String jobnumber) {
    this.jobnumber = jobnumber;
    return this;
  }

  public void unsetJobnumber() {
    this.jobnumber = null;
  }

  /** Returns true if field jobnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetJobnumber() {
    return this.jobnumber != null;
  }

  public void setJobnumberIsSet(boolean value) {
    if (!value) {
      this.jobnumber = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public JobPositionDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public JobPositionDO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public JobPositionDO setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public JobPositionDO setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public JobPositionDO setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public int getLJobid() {
    return this.lJobid;
  }

  public JobPositionDO setLJobid(int lJobid) {
    this.lJobid = lJobid;
    setLJobidIsSet(true);
    return this;
  }

  public void unsetLJobid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LJOBID_ISSET_ID);
  }

  /** Returns true if field lJobid is set (has been assigned a value) and false otherwise */
  public boolean isSetLJobid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LJOBID_ISSET_ID);
  }

  public void setLJobidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LJOBID_ISSET_ID, value);
  }

  public String getPublishDate() {
    return this.publishDate;
  }

  public JobPositionDO setPublishDate(String publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  public void unsetPublishDate() {
    this.publishDate = null;
  }

  /** Returns true if field publishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishDate() {
    return this.publishDate != null;
  }

  public void setPublishDateIsSet(boolean value) {
    if (!value) {
      this.publishDate = null;
    }
  }

  public String getStopDate() {
    return this.stopDate;
  }

  public JobPositionDO setStopDate(String stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  public void unsetStopDate() {
    this.stopDate = null;
  }

  /** Returns true if field stopDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStopDate() {
    return this.stopDate != null;
  }

  public void setStopDateIsSet(boolean value) {
    if (!value) {
      this.stopDate = null;
    }
  }

  public String getAccountabilities() {
    return this.accountabilities;
  }

  public JobPositionDO setAccountabilities(String accountabilities) {
    this.accountabilities = accountabilities;
    return this;
  }

  public void unsetAccountabilities() {
    this.accountabilities = null;
  }

  /** Returns true if field accountabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountabilities() {
    return this.accountabilities != null;
  }

  public void setAccountabilitiesIsSet(boolean value) {
    if (!value) {
      this.accountabilities = null;
    }
  }

  public String getExperience() {
    return this.experience;
  }

  public JobPositionDO setExperience(String experience) {
    this.experience = experience;
    return this;
  }

  public void unsetExperience() {
    this.experience = null;
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return this.experience != null;
  }

  public void setExperienceIsSet(boolean value) {
    if (!value) {
      this.experience = null;
    }
  }

  public String getRequirement() {
    return this.requirement;
  }

  public JobPositionDO setRequirement(String requirement) {
    this.requirement = requirement;
    return this;
  }

  public void unsetRequirement() {
    this.requirement = null;
  }

  /** Returns true if field requirement is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirement() {
    return this.requirement != null;
  }

  public void setRequirementIsSet(boolean value) {
    if (!value) {
      this.requirement = null;
    }
  }

  public String getSalary() {
    return this.salary;
  }

  public JobPositionDO setSalary(String salary) {
    this.salary = salary;
    return this;
  }

  public void unsetSalary() {
    this.salary = null;
  }

  /** Returns true if field salary is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary() {
    return this.salary != null;
  }

  public void setSalaryIsSet(boolean value) {
    if (!value) {
      this.salary = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public JobPositionDO setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public int getJobGrade() {
    return this.jobGrade;
  }

  public JobPositionDO setJobGrade(int jobGrade) {
    this.jobGrade = jobGrade;
    setJobGradeIsSet(true);
    return this;
  }

  public void unsetJobGrade() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBGRADE_ISSET_ID);
  }

  /** Returns true if field jobGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetJobGrade() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBGRADE_ISSET_ID);
  }

  public void setJobGradeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBGRADE_ISSET_ID, value);
  }

  public double getStatus() {
    return this.status;
  }

  public JobPositionDO setStatus(double status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getVisitnum() {
    return this.visitnum;
  }

  public JobPositionDO setVisitnum(int visitnum) {
    this.visitnum = visitnum;
    setVisitnumIsSet(true);
    return this;
  }

  public void unsetVisitnum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  /** Returns true if field visitnum is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitnum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  public void setVisitnumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISITNUM_ISSET_ID, value);
  }

  public String getLastvisit() {
    return this.lastvisit;
  }

  public JobPositionDO setLastvisit(String lastvisit) {
    this.lastvisit = lastvisit;
    return this;
  }

  public void unsetLastvisit() {
    this.lastvisit = null;
  }

  /** Returns true if field lastvisit is set (has been assigned a value) and false otherwise */
  public boolean isSetLastvisit() {
    return this.lastvisit != null;
  }

  public void setLastvisitIsSet(boolean value) {
    if (!value) {
      this.lastvisit = null;
    }
  }

  public int getSourceId() {
    return this.sourceId;
  }

  public JobPositionDO setSourceId(int sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    return this;
  }

  public void unsetSourceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public JobPositionDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getBusinessGroup() {
    return this.businessGroup;
  }

  public JobPositionDO setBusinessGroup(String businessGroup) {
    this.businessGroup = businessGroup;
    return this;
  }

  public void unsetBusinessGroup() {
    this.businessGroup = null;
  }

  /** Returns true if field businessGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessGroup() {
    return this.businessGroup != null;
  }

  public void setBusinessGroupIsSet(boolean value) {
    if (!value) {
      this.businessGroup = null;
    }
  }

  public double getEmploymentType() {
    return this.employmentType;
  }

  public JobPositionDO setEmploymentType(double employmentType) {
    this.employmentType = employmentType;
    setEmploymentTypeIsSet(true);
    return this;
  }

  public void unsetEmploymentType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field employmentType is set (has been assigned a value) and false otherwise */
  public boolean isSetEmploymentType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYMENTTYPE_ISSET_ID);
  }

  public void setEmploymentTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYMENTTYPE_ISSET_ID, value);
  }

  public String getHrEmail() {
    return this.hrEmail;
  }

  public JobPositionDO setHrEmail(String hrEmail) {
    this.hrEmail = hrEmail;
    return this;
  }

  public void unsetHrEmail() {
    this.hrEmail = null;
  }

  /** Returns true if field hrEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetHrEmail() {
    return this.hrEmail != null;
  }

  public void setHrEmailIsSet(boolean value) {
    if (!value) {
      this.hrEmail = null;
    }
  }

  public String getBenefits() {
    return this.benefits;
  }

  public JobPositionDO setBenefits(String benefits) {
    this.benefits = benefits;
    return this;
  }

  public void unsetBenefits() {
    this.benefits = null;
  }

  /** Returns true if field benefits is set (has been assigned a value) and false otherwise */
  public boolean isSetBenefits() {
    return this.benefits != null;
  }

  public void setBenefitsIsSet(boolean value) {
    if (!value) {
      this.benefits = null;
    }
  }

  public double getDegree() {
    return this.degree;
  }

  public JobPositionDO setDegree(double degree) {
    this.degree = degree;
    setDegreeIsSet(true);
    return this;
  }

  public void unsetDegree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
  }

  public String getFeature() {
    return this.feature;
  }

  public JobPositionDO setFeature(String feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public byte getEmailNotice() {
    return this.emailNotice;
  }

  public JobPositionDO setEmailNotice(byte emailNotice) {
    this.emailNotice = emailNotice;
    setEmailNoticeIsSet(true);
    return this;
  }

  public void unsetEmailNotice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMAILNOTICE_ISSET_ID);
  }

  /** Returns true if field emailNotice is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailNotice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMAILNOTICE_ISSET_ID);
  }

  public void setEmailNoticeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMAILNOTICE_ISSET_ID, value);
  }

  public double getCandidateSource() {
    return this.candidateSource;
  }

  public JobPositionDO setCandidateSource(double candidateSource) {
    this.candidateSource = candidateSource;
    setCandidateSourceIsSet(true);
    return this;
  }

  public void unsetCandidateSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID);
  }

  /** Returns true if field candidateSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidateSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID);
  }

  public void setCandidateSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID, value);
  }

  public String getOccupation() {
    return this.occupation;
  }

  public JobPositionDO setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public int getIsRecom() {
    return this.isRecom;
  }

  public JobPositionDO setIsRecom(int isRecom) {
    this.isRecom = isRecom;
    setIsRecomIsSet(true);
    return this;
  }

  public void unsetIsRecom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRECOM_ISSET_ID);
  }

  /** Returns true if field isRecom is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRecom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRECOM_ISSET_ID);
  }

  public void setIsRecomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRECOM_ISSET_ID, value);
  }

  public String getIndustry() {
    return this.industry;
  }

  public JobPositionDO setIndustry(String industry) {
    this.industry = industry;
    return this;
  }

  public void unsetIndustry() {
    this.industry = null;
  }

  /** Returns true if field industry is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustry() {
    return this.industry != null;
  }

  public void setIndustryIsSet(boolean value) {
    if (!value) {
      this.industry = null;
    }
  }

  public int getHongbaoConfigId() {
    return this.hongbaoConfigId;
  }

  public JobPositionDO setHongbaoConfigId(int hongbaoConfigId) {
    this.hongbaoConfigId = hongbaoConfigId;
    setHongbaoConfigIdIsSet(true);
    return this;
  }

  public void unsetHongbaoConfigId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HONGBAOCONFIGID_ISSET_ID);
  }

  /** Returns true if field hongbaoConfigId is set (has been assigned a value) and false otherwise */
  public boolean isSetHongbaoConfigId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HONGBAOCONFIGID_ISSET_ID);
  }

  public void setHongbaoConfigIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HONGBAOCONFIGID_ISSET_ID, value);
  }

  public int getHongbaoConfigRecomId() {
    return this.hongbaoConfigRecomId;
  }

  public JobPositionDO setHongbaoConfigRecomId(int hongbaoConfigRecomId) {
    this.hongbaoConfigRecomId = hongbaoConfigRecomId;
    setHongbaoConfigRecomIdIsSet(true);
    return this;
  }

  public void unsetHongbaoConfigRecomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HONGBAOCONFIGRECOMID_ISSET_ID);
  }

  /** Returns true if field hongbaoConfigRecomId is set (has been assigned a value) and false otherwise */
  public boolean isSetHongbaoConfigRecomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HONGBAOCONFIGRECOMID_ISSET_ID);
  }

  public void setHongbaoConfigRecomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HONGBAOCONFIGRECOMID_ISSET_ID, value);
  }

  public int getHongbaoConfigAppId() {
    return this.hongbaoConfigAppId;
  }

  public JobPositionDO setHongbaoConfigAppId(int hongbaoConfigAppId) {
    this.hongbaoConfigAppId = hongbaoConfigAppId;
    setHongbaoConfigAppIdIsSet(true);
    return this;
  }

  public void unsetHongbaoConfigAppId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HONGBAOCONFIGAPPID_ISSET_ID);
  }

  /** Returns true if field hongbaoConfigAppId is set (has been assigned a value) and false otherwise */
  public boolean isSetHongbaoConfigAppId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HONGBAOCONFIGAPPID_ISSET_ID);
  }

  public void setHongbaoConfigAppIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HONGBAOCONFIGAPPID_ISSET_ID, value);
  }

  public double getEmailResumeConf() {
    return this.emailResumeConf;
  }

  public JobPositionDO setEmailResumeConf(double emailResumeConf) {
    this.emailResumeConf = emailResumeConf;
    setEmailResumeConfIsSet(true);
    return this;
  }

  public void unsetEmailResumeConf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID);
  }

  /** Returns true if field emailResumeConf is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailResumeConf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID);
  }

  public void setEmailResumeConfIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID, value);
  }

  public double getLPostingtargetid() {
    return this.lPostingtargetid;
  }

  public JobPositionDO setLPostingtargetid(double lPostingtargetid) {
    this.lPostingtargetid = lPostingtargetid;
    setLPostingtargetidIsSet(true);
    return this;
  }

  public void unsetLPostingtargetid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LPOSTINGTARGETID_ISSET_ID);
  }

  /** Returns true if field lPostingtargetid is set (has been assigned a value) and false otherwise */
  public boolean isSetLPostingtargetid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LPOSTINGTARGETID_ISSET_ID);
  }

  public void setLPostingtargetidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LPOSTINGTARGETID_ISSET_ID, value);
  }

  public double getPriority() {
    return this.priority;
  }

  public JobPositionDO setPriority(double priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public double getShareTplId() {
    return this.shareTplId;
  }

  public JobPositionDO setShareTplId(double shareTplId) {
    this.shareTplId = shareTplId;
    setShareTplIdIsSet(true);
    return this;
  }

  public void unsetShareTplId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARETPLID_ISSET_ID);
  }

  /** Returns true if field shareTplId is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTplId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARETPLID_ISSET_ID);
  }

  public void setShareTplIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARETPLID_ISSET_ID, value);
  }

  public String getDistrict() {
    return this.district;
  }

  public JobPositionDO setDistrict(String district) {
    this.district = district;
    return this;
  }

  public void unsetDistrict() {
    this.district = null;
  }

  /** Returns true if field district is set (has been assigned a value) and false otherwise */
  public boolean isSetDistrict() {
    return this.district != null;
  }

  public void setDistrictIsSet(boolean value) {
    if (!value) {
      this.district = null;
    }
  }

  public double getCount() {
    return this.count;
  }

  public JobPositionDO setCount(double count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public double getSalaryTop() {
    return this.salaryTop;
  }

  public JobPositionDO setSalaryTop(double salaryTop) {
    this.salaryTop = salaryTop;
    setSalaryTopIsSet(true);
    return this;
  }

  public void unsetSalaryTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  /** Returns true if field salaryTop is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  public void setSalaryTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYTOP_ISSET_ID, value);
  }

  public double getSalaryBottom() {
    return this.salaryBottom;
  }

  public JobPositionDO setSalaryBottom(double salaryBottom) {
    this.salaryBottom = salaryBottom;
    setSalaryBottomIsSet(true);
    return this;
  }

  public void unsetSalaryBottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  /** Returns true if field salaryBottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryBottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  public void setSalaryBottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID, value);
  }

  public byte getExperienceAbove() {
    return this.experienceAbove;
  }

  public JobPositionDO setExperienceAbove(byte experienceAbove) {
    this.experienceAbove = experienceAbove;
    setExperienceAboveIsSet(true);
    return this;
  }

  public void unsetExperienceAbove() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID);
  }

  /** Returns true if field experienceAbove is set (has been assigned a value) and false otherwise */
  public boolean isSetExperienceAbove() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID);
  }

  public void setExperienceAboveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID, value);
  }

  public byte getDegreeAbove() {
    return this.degreeAbove;
  }

  public JobPositionDO setDegreeAbove(byte degreeAbove) {
    this.degreeAbove = degreeAbove;
    setDegreeAboveIsSet(true);
    return this;
  }

  public void unsetDegreeAbove() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREEABOVE_ISSET_ID);
  }

  /** Returns true if field degreeAbove is set (has been assigned a value) and false otherwise */
  public boolean isSetDegreeAbove() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREEABOVE_ISSET_ID);
  }

  public void setDegreeAboveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREEABOVE_ISSET_ID, value);
  }

  public double getManagementExperience() {
    return this.managementExperience;
  }

  public JobPositionDO setManagementExperience(double managementExperience) {
    this.managementExperience = managementExperience;
    setManagementExperienceIsSet(true);
    return this;
  }

  public void unsetManagementExperience() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANAGEMENTEXPERIENCE_ISSET_ID);
  }

  /** Returns true if field managementExperience is set (has been assigned a value) and false otherwise */
  public boolean isSetManagementExperience() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANAGEMENTEXPERIENCE_ISSET_ID);
  }

  public void setManagementExperienceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANAGEMENTEXPERIENCE_ISSET_ID, value);
  }

  public double getGender() {
    return this.gender;
  }

  public JobPositionDO setGender(double gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getPublisher() {
    return this.publisher;
  }

  public JobPositionDO setPublisher(int publisher) {
    this.publisher = publisher;
    setPublisherIsSet(true);
    return this;
  }

  public void unsetPublisher() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  /** Returns true if field publisher is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisher() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  public void setPublisherIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBLISHER_ISSET_ID, value);
  }

  public int getAppCvConfigId() {
    return this.appCvConfigId;
  }

  public JobPositionDO setAppCvConfigId(int appCvConfigId) {
    this.appCvConfigId = appCvConfigId;
    setAppCvConfigIdIsSet(true);
    return this;
  }

  public void unsetAppCvConfigId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPCVCONFIGID_ISSET_ID);
  }

  /** Returns true if field appCvConfigId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCvConfigId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPCVCONFIGID_ISSET_ID);
  }

  public void setAppCvConfigIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPCVCONFIGID_ISSET_ID, value);
  }

  public double getSource() {
    return this.source;
  }

  public JobPositionDO setSource(double source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public byte getHbStatus() {
    return this.hbStatus;
  }

  public JobPositionDO setHbStatus(byte hbStatus) {
    this.hbStatus = hbStatus;
    setHbStatusIsSet(true);
    return this;
  }

  public void unsetHbStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HBSTATUS_ISSET_ID);
  }

  /** Returns true if field hbStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetHbStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HBSTATUS_ISSET_ID);
  }

  public void setHbStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HBSTATUS_ISSET_ID, value);
  }

  public int getChildCompanyId() {
    return this.childCompanyId;
  }

  public JobPositionDO setChildCompanyId(int childCompanyId) {
    this.childCompanyId = childCompanyId;
    setChildCompanyIdIsSet(true);
    return this;
  }

  public void unsetChildCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHILDCOMPANYID_ISSET_ID);
  }

  /** Returns true if field childCompanyId is set (has been assigned a value) and false otherwise */
  public boolean isSetChildCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHILDCOMPANYID_ISSET_ID);
  }

  public void setChildCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHILDCOMPANYID_ISSET_ID, value);
  }

  public byte getAge() {
    return this.age;
  }

  public JobPositionDO setAge(byte age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public String getMajorRequired() {
    return this.majorRequired;
  }

  public JobPositionDO setMajorRequired(String majorRequired) {
    this.majorRequired = majorRequired;
    return this;
  }

  public void unsetMajorRequired() {
    this.majorRequired = null;
  }

  /** Returns true if field majorRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetMajorRequired() {
    return this.majorRequired != null;
  }

  public void setMajorRequiredIsSet(boolean value) {
    if (!value) {
      this.majorRequired = null;
    }
  }

  public String getWorkAddress() {
    return this.workAddress;
  }

  public JobPositionDO setWorkAddress(String workAddress) {
    this.workAddress = workAddress;
    return this;
  }

  public void unsetWorkAddress() {
    this.workAddress = null;
  }

  /** Returns true if field workAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkAddress() {
    return this.workAddress != null;
  }

  public void setWorkAddressIsSet(boolean value) {
    if (!value) {
      this.workAddress = null;
    }
  }

  public String getKeyword() {
    return this.keyword;
  }

  public JobPositionDO setKeyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  public void unsetKeyword() {
    this.keyword = null;
  }

  /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.keyword = null;
    }
  }

  public String getReportingTo() {
    return this.reportingTo;
  }

  public JobPositionDO setReportingTo(String reportingTo) {
    this.reportingTo = reportingTo;
    return this;
  }

  public void unsetReportingTo() {
    this.reportingTo = null;
  }

  /** Returns true if field reportingTo is set (has been assigned a value) and false otherwise */
  public boolean isSetReportingTo() {
    return this.reportingTo != null;
  }

  public void setReportingToIsSet(boolean value) {
    if (!value) {
      this.reportingTo = null;
    }
  }

  public byte getIsHiring() {
    return this.isHiring;
  }

  public JobPositionDO setIsHiring(byte isHiring) {
    this.isHiring = isHiring;
    setIsHiringIsSet(true);
    return this;
  }

  public void unsetIsHiring() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISHIRING_ISSET_ID);
  }

  /** Returns true if field isHiring is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHiring() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISHIRING_ISSET_ID);
  }

  public void setIsHiringIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISHIRING_ISSET_ID, value);
  }

  public byte getUnderlings() {
    return this.underlings;
  }

  public JobPositionDO setUnderlings(byte underlings) {
    this.underlings = underlings;
    setUnderlingsIsSet(true);
    return this;
  }

  public void unsetUnderlings() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  /** Returns true if field underlings is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlings() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  public void setUnderlingsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNDERLINGS_ISSET_ID, value);
  }

  public byte getLanguageRequired() {
    return this.languageRequired;
  }

  public JobPositionDO setLanguageRequired(byte languageRequired) {
    this.languageRequired = languageRequired;
    setLanguageRequiredIsSet(true);
    return this;
  }

  public void unsetLanguageRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LANGUAGEREQUIRED_ISSET_ID);
  }

  /** Returns true if field languageRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LANGUAGEREQUIRED_ISSET_ID);
  }

  public void setLanguageRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LANGUAGEREQUIRED_ISSET_ID, value);
  }

  public byte getTargetIndustry() {
    return this.targetIndustry;
  }

  public JobPositionDO setTargetIndustry(byte targetIndustry) {
    this.targetIndustry = targetIndustry;
    setTargetIndustryIsSet(true);
    return this;
  }

  public void unsetTargetIndustry() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETINDUSTRY_ISSET_ID);
  }

  /** Returns true if field targetIndustry is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetIndustry() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETINDUSTRY_ISSET_ID);
  }

  public void setTargetIndustryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETINDUSTRY_ISSET_ID, value);
  }

  public byte getCurrentStatus() {
    return this.currentStatus;
  }

  public JobPositionDO setCurrentStatus(byte currentStatus) {
    this.currentStatus = currentStatus;
    setCurrentStatusIsSet(true);
    return this;
  }

  public void unsetCurrentStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTSTATUS_ISSET_ID);
  }

  /** Returns true if field currentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTSTATUS_ISSET_ID);
  }

  public void setCurrentStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTSTATUS_ISSET_ID, value);
  }

  public int getPositionCode() {
    return this.positionCode;
  }

  public JobPositionDO setPositionCode(int positionCode) {
    this.positionCode = positionCode;
    setPositionCodeIsSet(true);
    return this;
  }

  public void unsetPositionCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONCODE_ISSET_ID);
  }

  /** Returns true if field positionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONCODE_ISSET_ID);
  }

  public void setPositionCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONCODE_ISSET_ID, value);
  }

  public int getTeamId() {
    return this.teamId;
  }

  public JobPositionDO setTeamId(int teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
    return this;
  }

  public void unsetTeamId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case JOBNUMBER:
      if (value == null) {
        unsetJobnumber();
      } else {
        setJobnumber((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case L_JOBID:
      if (value == null) {
        unsetLJobid();
      } else {
        setLJobid((Integer)value);
      }
      break;

    case PUBLISH_DATE:
      if (value == null) {
        unsetPublishDate();
      } else {
        setPublishDate((String)value);
      }
      break;

    case STOP_DATE:
      if (value == null) {
        unsetStopDate();
      } else {
        setStopDate((String)value);
      }
      break;

    case ACCOUNTABILITIES:
      if (value == null) {
        unsetAccountabilities();
      } else {
        setAccountabilities((String)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((String)value);
      }
      break;

    case REQUIREMENT:
      if (value == null) {
        unsetRequirement();
      } else {
        setRequirement((String)value);
      }
      break;

    case SALARY:
      if (value == null) {
        unsetSalary();
      } else {
        setSalary((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case JOB_GRADE:
      if (value == null) {
        unsetJobGrade();
      } else {
        setJobGrade((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Double)value);
      }
      break;

    case VISITNUM:
      if (value == null) {
        unsetVisitnum();
      } else {
        setVisitnum((Integer)value);
      }
      break;

    case LASTVISIT:
      if (value == null) {
        unsetLastvisit();
      } else {
        setLastvisit((String)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case BUSINESS_GROUP:
      if (value == null) {
        unsetBusinessGroup();
      } else {
        setBusinessGroup((String)value);
      }
      break;

    case EMPLOYMENT_TYPE:
      if (value == null) {
        unsetEmploymentType();
      } else {
        setEmploymentType((Double)value);
      }
      break;

    case HR_EMAIL:
      if (value == null) {
        unsetHrEmail();
      } else {
        setHrEmail((String)value);
      }
      break;

    case BENEFITS:
      if (value == null) {
        unsetBenefits();
      } else {
        setBenefits((String)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Double)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((String)value);
      }
      break;

    case EMAIL_NOTICE:
      if (value == null) {
        unsetEmailNotice();
      } else {
        setEmailNotice((Byte)value);
      }
      break;

    case CANDIDATE_SOURCE:
      if (value == null) {
        unsetCandidateSource();
      } else {
        setCandidateSource((Double)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    case IS_RECOM:
      if (value == null) {
        unsetIsRecom();
      } else {
        setIsRecom((Integer)value);
      }
      break;

    case INDUSTRY:
      if (value == null) {
        unsetIndustry();
      } else {
        setIndustry((String)value);
      }
      break;

    case HONGBAO_CONFIG_ID:
      if (value == null) {
        unsetHongbaoConfigId();
      } else {
        setHongbaoConfigId((Integer)value);
      }
      break;

    case HONGBAO_CONFIG_RECOM_ID:
      if (value == null) {
        unsetHongbaoConfigRecomId();
      } else {
        setHongbaoConfigRecomId((Integer)value);
      }
      break;

    case HONGBAO_CONFIG_APP_ID:
      if (value == null) {
        unsetHongbaoConfigAppId();
      } else {
        setHongbaoConfigAppId((Integer)value);
      }
      break;

    case EMAIL_RESUME_CONF:
      if (value == null) {
        unsetEmailResumeConf();
      } else {
        setEmailResumeConf((Double)value);
      }
      break;

    case L_POSTINGTARGETID:
      if (value == null) {
        unsetLPostingtargetid();
      } else {
        setLPostingtargetid((Double)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Double)value);
      }
      break;

    case SHARE_TPL_ID:
      if (value == null) {
        unsetShareTplId();
      } else {
        setShareTplId((Double)value);
      }
      break;

    case DISTRICT:
      if (value == null) {
        unsetDistrict();
      } else {
        setDistrict((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Double)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalaryTop();
      } else {
        setSalaryTop((Double)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalaryBottom();
      } else {
        setSalaryBottom((Double)value);
      }
      break;

    case EXPERIENCE_ABOVE:
      if (value == null) {
        unsetExperienceAbove();
      } else {
        setExperienceAbove((Byte)value);
      }
      break;

    case DEGREE_ABOVE:
      if (value == null) {
        unsetDegreeAbove();
      } else {
        setDegreeAbove((Byte)value);
      }
      break;

    case MANAGEMENT_EXPERIENCE:
      if (value == null) {
        unsetManagementExperience();
      } else {
        setManagementExperience((Double)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Double)value);
      }
      break;

    case PUBLISHER:
      if (value == null) {
        unsetPublisher();
      } else {
        setPublisher((Integer)value);
      }
      break;

    case APP_CV_CONFIG_ID:
      if (value == null) {
        unsetAppCvConfigId();
      } else {
        setAppCvConfigId((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Double)value);
      }
      break;

    case HB_STATUS:
      if (value == null) {
        unsetHbStatus();
      } else {
        setHbStatus((Byte)value);
      }
      break;

    case CHILD_COMPANY_ID:
      if (value == null) {
        unsetChildCompanyId();
      } else {
        setChildCompanyId((Integer)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Byte)value);
      }
      break;

    case MAJOR_REQUIRED:
      if (value == null) {
        unsetMajorRequired();
      } else {
        setMajorRequired((String)value);
      }
      break;

    case WORK_ADDRESS:
      if (value == null) {
        unsetWorkAddress();
      } else {
        setWorkAddress((String)value);
      }
      break;

    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    case REPORTING_TO:
      if (value == null) {
        unsetReportingTo();
      } else {
        setReportingTo((String)value);
      }
      break;

    case IS_HIRING:
      if (value == null) {
        unsetIsHiring();
      } else {
        setIsHiring((Byte)value);
      }
      break;

    case UNDERLINGS:
      if (value == null) {
        unsetUnderlings();
      } else {
        setUnderlings((Byte)value);
      }
      break;

    case LANGUAGE_REQUIRED:
      if (value == null) {
        unsetLanguageRequired();
      } else {
        setLanguageRequired((Byte)value);
      }
      break;

    case TARGET_INDUSTRY:
      if (value == null) {
        unsetTargetIndustry();
      } else {
        setTargetIndustry((Byte)value);
      }
      break;

    case CURRENT_STATUS:
      if (value == null) {
        unsetCurrentStatus();
      } else {
        setCurrentStatus((Byte)value);
      }
      break;

    case POSITION_CODE:
      if (value == null) {
        unsetPositionCode();
      } else {
        setPositionCode((Integer)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case JOBNUMBER:
      return getJobnumber();

    case COMPANY_ID:
      return getCompanyId();

    case TITLE:
      return getTitle();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case DEPARTMENT:
      return getDepartment();

    case L_JOBID:
      return getLJobid();

    case PUBLISH_DATE:
      return getPublishDate();

    case STOP_DATE:
      return getStopDate();

    case ACCOUNTABILITIES:
      return getAccountabilities();

    case EXPERIENCE:
      return getExperience();

    case REQUIREMENT:
      return getRequirement();

    case SALARY:
      return getSalary();

    case LANGUAGE:
      return getLanguage();

    case JOB_GRADE:
      return getJobGrade();

    case STATUS:
      return getStatus();

    case VISITNUM:
      return getVisitnum();

    case LASTVISIT:
      return getLastvisit();

    case SOURCE_ID:
      return getSourceId();

    case UPDATE_TIME:
      return getUpdateTime();

    case BUSINESS_GROUP:
      return getBusinessGroup();

    case EMPLOYMENT_TYPE:
      return getEmploymentType();

    case HR_EMAIL:
      return getHrEmail();

    case BENEFITS:
      return getBenefits();

    case DEGREE:
      return getDegree();

    case FEATURE:
      return getFeature();

    case EMAIL_NOTICE:
      return getEmailNotice();

    case CANDIDATE_SOURCE:
      return getCandidateSource();

    case OCCUPATION:
      return getOccupation();

    case IS_RECOM:
      return getIsRecom();

    case INDUSTRY:
      return getIndustry();

    case HONGBAO_CONFIG_ID:
      return getHongbaoConfigId();

    case HONGBAO_CONFIG_RECOM_ID:
      return getHongbaoConfigRecomId();

    case HONGBAO_CONFIG_APP_ID:
      return getHongbaoConfigAppId();

    case EMAIL_RESUME_CONF:
      return getEmailResumeConf();

    case L_POSTINGTARGETID:
      return getLPostingtargetid();

    case PRIORITY:
      return getPriority();

    case SHARE_TPL_ID:
      return getShareTplId();

    case DISTRICT:
      return getDistrict();

    case COUNT:
      return getCount();

    case SALARY_TOP:
      return getSalaryTop();

    case SALARY_BOTTOM:
      return getSalaryBottom();

    case EXPERIENCE_ABOVE:
      return getExperienceAbove();

    case DEGREE_ABOVE:
      return getDegreeAbove();

    case MANAGEMENT_EXPERIENCE:
      return getManagementExperience();

    case GENDER:
      return getGender();

    case PUBLISHER:
      return getPublisher();

    case APP_CV_CONFIG_ID:
      return getAppCvConfigId();

    case SOURCE:
      return getSource();

    case HB_STATUS:
      return getHbStatus();

    case CHILD_COMPANY_ID:
      return getChildCompanyId();

    case AGE:
      return getAge();

    case MAJOR_REQUIRED:
      return getMajorRequired();

    case WORK_ADDRESS:
      return getWorkAddress();

    case KEYWORD:
      return getKeyword();

    case REPORTING_TO:
      return getReportingTo();

    case IS_HIRING:
      return getIsHiring();

    case UNDERLINGS:
      return getUnderlings();

    case LANGUAGE_REQUIRED:
      return getLanguageRequired();

    case TARGET_INDUSTRY:
      return getTargetIndustry();

    case CURRENT_STATUS:
      return getCurrentStatus();

    case POSITION_CODE:
      return getPositionCode();

    case TEAM_ID:
      return getTeamId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case JOBNUMBER:
      return isSetJobnumber();
    case COMPANY_ID:
      return isSetCompanyId();
    case TITLE:
      return isSetTitle();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case DEPARTMENT:
      return isSetDepartment();
    case L_JOBID:
      return isSetLJobid();
    case PUBLISH_DATE:
      return isSetPublishDate();
    case STOP_DATE:
      return isSetStopDate();
    case ACCOUNTABILITIES:
      return isSetAccountabilities();
    case EXPERIENCE:
      return isSetExperience();
    case REQUIREMENT:
      return isSetRequirement();
    case SALARY:
      return isSetSalary();
    case LANGUAGE:
      return isSetLanguage();
    case JOB_GRADE:
      return isSetJobGrade();
    case STATUS:
      return isSetStatus();
    case VISITNUM:
      return isSetVisitnum();
    case LASTVISIT:
      return isSetLastvisit();
    case SOURCE_ID:
      return isSetSourceId();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case BUSINESS_GROUP:
      return isSetBusinessGroup();
    case EMPLOYMENT_TYPE:
      return isSetEmploymentType();
    case HR_EMAIL:
      return isSetHrEmail();
    case BENEFITS:
      return isSetBenefits();
    case DEGREE:
      return isSetDegree();
    case FEATURE:
      return isSetFeature();
    case EMAIL_NOTICE:
      return isSetEmailNotice();
    case CANDIDATE_SOURCE:
      return isSetCandidateSource();
    case OCCUPATION:
      return isSetOccupation();
    case IS_RECOM:
      return isSetIsRecom();
    case INDUSTRY:
      return isSetIndustry();
    case HONGBAO_CONFIG_ID:
      return isSetHongbaoConfigId();
    case HONGBAO_CONFIG_RECOM_ID:
      return isSetHongbaoConfigRecomId();
    case HONGBAO_CONFIG_APP_ID:
      return isSetHongbaoConfigAppId();
    case EMAIL_RESUME_CONF:
      return isSetEmailResumeConf();
    case L_POSTINGTARGETID:
      return isSetLPostingtargetid();
    case PRIORITY:
      return isSetPriority();
    case SHARE_TPL_ID:
      return isSetShareTplId();
    case DISTRICT:
      return isSetDistrict();
    case COUNT:
      return isSetCount();
    case SALARY_TOP:
      return isSetSalaryTop();
    case SALARY_BOTTOM:
      return isSetSalaryBottom();
    case EXPERIENCE_ABOVE:
      return isSetExperienceAbove();
    case DEGREE_ABOVE:
      return isSetDegreeAbove();
    case MANAGEMENT_EXPERIENCE:
      return isSetManagementExperience();
    case GENDER:
      return isSetGender();
    case PUBLISHER:
      return isSetPublisher();
    case APP_CV_CONFIG_ID:
      return isSetAppCvConfigId();
    case SOURCE:
      return isSetSource();
    case HB_STATUS:
      return isSetHbStatus();
    case CHILD_COMPANY_ID:
      return isSetChildCompanyId();
    case AGE:
      return isSetAge();
    case MAJOR_REQUIRED:
      return isSetMajorRequired();
    case WORK_ADDRESS:
      return isSetWorkAddress();
    case KEYWORD:
      return isSetKeyword();
    case REPORTING_TO:
      return isSetReportingTo();
    case IS_HIRING:
      return isSetIsHiring();
    case UNDERLINGS:
      return isSetUnderlings();
    case LANGUAGE_REQUIRED:
      return isSetLanguageRequired();
    case TARGET_INDUSTRY:
      return isSetTargetIndustry();
    case CURRENT_STATUS:
      return isSetCurrentStatus();
    case POSITION_CODE:
      return isSetPositionCode();
    case TEAM_ID:
      return isSetTeamId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobPositionDO)
      return this.equals((JobPositionDO)that);
    return false;
  }

  public boolean equals(JobPositionDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_jobnumber = true && this.isSetJobnumber();
    boolean that_present_jobnumber = true && that.isSetJobnumber();
    if (this_present_jobnumber || that_present_jobnumber) {
      if (!(this_present_jobnumber && that_present_jobnumber))
        return false;
      if (!this.jobnumber.equals(that.jobnumber))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_lJobid = true && this.isSetLJobid();
    boolean that_present_lJobid = true && that.isSetLJobid();
    if (this_present_lJobid || that_present_lJobid) {
      if (!(this_present_lJobid && that_present_lJobid))
        return false;
      if (this.lJobid != that.lJobid)
        return false;
    }

    boolean this_present_publishDate = true && this.isSetPublishDate();
    boolean that_present_publishDate = true && that.isSetPublishDate();
    if (this_present_publishDate || that_present_publishDate) {
      if (!(this_present_publishDate && that_present_publishDate))
        return false;
      if (!this.publishDate.equals(that.publishDate))
        return false;
    }

    boolean this_present_stopDate = true && this.isSetStopDate();
    boolean that_present_stopDate = true && that.isSetStopDate();
    if (this_present_stopDate || that_present_stopDate) {
      if (!(this_present_stopDate && that_present_stopDate))
        return false;
      if (!this.stopDate.equals(that.stopDate))
        return false;
    }

    boolean this_present_accountabilities = true && this.isSetAccountabilities();
    boolean that_present_accountabilities = true && that.isSetAccountabilities();
    if (this_present_accountabilities || that_present_accountabilities) {
      if (!(this_present_accountabilities && that_present_accountabilities))
        return false;
      if (!this.accountabilities.equals(that.accountabilities))
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (!this.experience.equals(that.experience))
        return false;
    }

    boolean this_present_requirement = true && this.isSetRequirement();
    boolean that_present_requirement = true && that.isSetRequirement();
    if (this_present_requirement || that_present_requirement) {
      if (!(this_present_requirement && that_present_requirement))
        return false;
      if (!this.requirement.equals(that.requirement))
        return false;
    }

    boolean this_present_salary = true && this.isSetSalary();
    boolean that_present_salary = true && that.isSetSalary();
    if (this_present_salary || that_present_salary) {
      if (!(this_present_salary && that_present_salary))
        return false;
      if (!this.salary.equals(that.salary))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_jobGrade = true && this.isSetJobGrade();
    boolean that_present_jobGrade = true && that.isSetJobGrade();
    if (this_present_jobGrade || that_present_jobGrade) {
      if (!(this_present_jobGrade && that_present_jobGrade))
        return false;
      if (this.jobGrade != that.jobGrade)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_visitnum = true && this.isSetVisitnum();
    boolean that_present_visitnum = true && that.isSetVisitnum();
    if (this_present_visitnum || that_present_visitnum) {
      if (!(this_present_visitnum && that_present_visitnum))
        return false;
      if (this.visitnum != that.visitnum)
        return false;
    }

    boolean this_present_lastvisit = true && this.isSetLastvisit();
    boolean that_present_lastvisit = true && that.isSetLastvisit();
    if (this_present_lastvisit || that_present_lastvisit) {
      if (!(this_present_lastvisit && that_present_lastvisit))
        return false;
      if (!this.lastvisit.equals(that.lastvisit))
        return false;
    }

    boolean this_present_sourceId = true && this.isSetSourceId();
    boolean that_present_sourceId = true && that.isSetSourceId();
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_businessGroup = true && this.isSetBusinessGroup();
    boolean that_present_businessGroup = true && that.isSetBusinessGroup();
    if (this_present_businessGroup || that_present_businessGroup) {
      if (!(this_present_businessGroup && that_present_businessGroup))
        return false;
      if (!this.businessGroup.equals(that.businessGroup))
        return false;
    }

    boolean this_present_employmentType = true && this.isSetEmploymentType();
    boolean that_present_employmentType = true && that.isSetEmploymentType();
    if (this_present_employmentType || that_present_employmentType) {
      if (!(this_present_employmentType && that_present_employmentType))
        return false;
      if (this.employmentType != that.employmentType)
        return false;
    }

    boolean this_present_hrEmail = true && this.isSetHrEmail();
    boolean that_present_hrEmail = true && that.isSetHrEmail();
    if (this_present_hrEmail || that_present_hrEmail) {
      if (!(this_present_hrEmail && that_present_hrEmail))
        return false;
      if (!this.hrEmail.equals(that.hrEmail))
        return false;
    }

    boolean this_present_benefits = true && this.isSetBenefits();
    boolean that_present_benefits = true && that.isSetBenefits();
    if (this_present_benefits || that_present_benefits) {
      if (!(this_present_benefits && that_present_benefits))
        return false;
      if (!this.benefits.equals(that.benefits))
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_emailNotice = true && this.isSetEmailNotice();
    boolean that_present_emailNotice = true && that.isSetEmailNotice();
    if (this_present_emailNotice || that_present_emailNotice) {
      if (!(this_present_emailNotice && that_present_emailNotice))
        return false;
      if (this.emailNotice != that.emailNotice)
        return false;
    }

    boolean this_present_candidateSource = true && this.isSetCandidateSource();
    boolean that_present_candidateSource = true && that.isSetCandidateSource();
    if (this_present_candidateSource || that_present_candidateSource) {
      if (!(this_present_candidateSource && that_present_candidateSource))
        return false;
      if (this.candidateSource != that.candidateSource)
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_isRecom = true && this.isSetIsRecom();
    boolean that_present_isRecom = true && that.isSetIsRecom();
    if (this_present_isRecom || that_present_isRecom) {
      if (!(this_present_isRecom && that_present_isRecom))
        return false;
      if (this.isRecom != that.isRecom)
        return false;
    }

    boolean this_present_industry = true && this.isSetIndustry();
    boolean that_present_industry = true && that.isSetIndustry();
    if (this_present_industry || that_present_industry) {
      if (!(this_present_industry && that_present_industry))
        return false;
      if (!this.industry.equals(that.industry))
        return false;
    }

    boolean this_present_hongbaoConfigId = true && this.isSetHongbaoConfigId();
    boolean that_present_hongbaoConfigId = true && that.isSetHongbaoConfigId();
    if (this_present_hongbaoConfigId || that_present_hongbaoConfigId) {
      if (!(this_present_hongbaoConfigId && that_present_hongbaoConfigId))
        return false;
      if (this.hongbaoConfigId != that.hongbaoConfigId)
        return false;
    }

    boolean this_present_hongbaoConfigRecomId = true && this.isSetHongbaoConfigRecomId();
    boolean that_present_hongbaoConfigRecomId = true && that.isSetHongbaoConfigRecomId();
    if (this_present_hongbaoConfigRecomId || that_present_hongbaoConfigRecomId) {
      if (!(this_present_hongbaoConfigRecomId && that_present_hongbaoConfigRecomId))
        return false;
      if (this.hongbaoConfigRecomId != that.hongbaoConfigRecomId)
        return false;
    }

    boolean this_present_hongbaoConfigAppId = true && this.isSetHongbaoConfigAppId();
    boolean that_present_hongbaoConfigAppId = true && that.isSetHongbaoConfigAppId();
    if (this_present_hongbaoConfigAppId || that_present_hongbaoConfigAppId) {
      if (!(this_present_hongbaoConfigAppId && that_present_hongbaoConfigAppId))
        return false;
      if (this.hongbaoConfigAppId != that.hongbaoConfigAppId)
        return false;
    }

    boolean this_present_emailResumeConf = true && this.isSetEmailResumeConf();
    boolean that_present_emailResumeConf = true && that.isSetEmailResumeConf();
    if (this_present_emailResumeConf || that_present_emailResumeConf) {
      if (!(this_present_emailResumeConf && that_present_emailResumeConf))
        return false;
      if (this.emailResumeConf != that.emailResumeConf)
        return false;
    }

    boolean this_present_lPostingtargetid = true && this.isSetLPostingtargetid();
    boolean that_present_lPostingtargetid = true && that.isSetLPostingtargetid();
    if (this_present_lPostingtargetid || that_present_lPostingtargetid) {
      if (!(this_present_lPostingtargetid && that_present_lPostingtargetid))
        return false;
      if (this.lPostingtargetid != that.lPostingtargetid)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_shareTplId = true && this.isSetShareTplId();
    boolean that_present_shareTplId = true && that.isSetShareTplId();
    if (this_present_shareTplId || that_present_shareTplId) {
      if (!(this_present_shareTplId && that_present_shareTplId))
        return false;
      if (this.shareTplId != that.shareTplId)
        return false;
    }

    boolean this_present_district = true && this.isSetDistrict();
    boolean that_present_district = true && that.isSetDistrict();
    if (this_present_district || that_present_district) {
      if (!(this_present_district && that_present_district))
        return false;
      if (!this.district.equals(that.district))
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_salaryTop = true && this.isSetSalaryTop();
    boolean that_present_salaryTop = true && that.isSetSalaryTop();
    if (this_present_salaryTop || that_present_salaryTop) {
      if (!(this_present_salaryTop && that_present_salaryTop))
        return false;
      if (this.salaryTop != that.salaryTop)
        return false;
    }

    boolean this_present_salaryBottom = true && this.isSetSalaryBottom();
    boolean that_present_salaryBottom = true && that.isSetSalaryBottom();
    if (this_present_salaryBottom || that_present_salaryBottom) {
      if (!(this_present_salaryBottom && that_present_salaryBottom))
        return false;
      if (this.salaryBottom != that.salaryBottom)
        return false;
    }

    boolean this_present_experienceAbove = true && this.isSetExperienceAbove();
    boolean that_present_experienceAbove = true && that.isSetExperienceAbove();
    if (this_present_experienceAbove || that_present_experienceAbove) {
      if (!(this_present_experienceAbove && that_present_experienceAbove))
        return false;
      if (this.experienceAbove != that.experienceAbove)
        return false;
    }

    boolean this_present_degreeAbove = true && this.isSetDegreeAbove();
    boolean that_present_degreeAbove = true && that.isSetDegreeAbove();
    if (this_present_degreeAbove || that_present_degreeAbove) {
      if (!(this_present_degreeAbove && that_present_degreeAbove))
        return false;
      if (this.degreeAbove != that.degreeAbove)
        return false;
    }

    boolean this_present_managementExperience = true && this.isSetManagementExperience();
    boolean that_present_managementExperience = true && that.isSetManagementExperience();
    if (this_present_managementExperience || that_present_managementExperience) {
      if (!(this_present_managementExperience && that_present_managementExperience))
        return false;
      if (this.managementExperience != that.managementExperience)
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_publisher = true && this.isSetPublisher();
    boolean that_present_publisher = true && that.isSetPublisher();
    if (this_present_publisher || that_present_publisher) {
      if (!(this_present_publisher && that_present_publisher))
        return false;
      if (this.publisher != that.publisher)
        return false;
    }

    boolean this_present_appCvConfigId = true && this.isSetAppCvConfigId();
    boolean that_present_appCvConfigId = true && that.isSetAppCvConfigId();
    if (this_present_appCvConfigId || that_present_appCvConfigId) {
      if (!(this_present_appCvConfigId && that_present_appCvConfigId))
        return false;
      if (this.appCvConfigId != that.appCvConfigId)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_hbStatus = true && this.isSetHbStatus();
    boolean that_present_hbStatus = true && that.isSetHbStatus();
    if (this_present_hbStatus || that_present_hbStatus) {
      if (!(this_present_hbStatus && that_present_hbStatus))
        return false;
      if (this.hbStatus != that.hbStatus)
        return false;
    }

    boolean this_present_childCompanyId = true && this.isSetChildCompanyId();
    boolean that_present_childCompanyId = true && that.isSetChildCompanyId();
    if (this_present_childCompanyId || that_present_childCompanyId) {
      if (!(this_present_childCompanyId && that_present_childCompanyId))
        return false;
      if (this.childCompanyId != that.childCompanyId)
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_majorRequired = true && this.isSetMajorRequired();
    boolean that_present_majorRequired = true && that.isSetMajorRequired();
    if (this_present_majorRequired || that_present_majorRequired) {
      if (!(this_present_majorRequired && that_present_majorRequired))
        return false;
      if (!this.majorRequired.equals(that.majorRequired))
        return false;
    }

    boolean this_present_workAddress = true && this.isSetWorkAddress();
    boolean that_present_workAddress = true && that.isSetWorkAddress();
    if (this_present_workAddress || that_present_workAddress) {
      if (!(this_present_workAddress && that_present_workAddress))
        return false;
      if (!this.workAddress.equals(that.workAddress))
        return false;
    }

    boolean this_present_keyword = true && this.isSetKeyword();
    boolean that_present_keyword = true && that.isSetKeyword();
    if (this_present_keyword || that_present_keyword) {
      if (!(this_present_keyword && that_present_keyword))
        return false;
      if (!this.keyword.equals(that.keyword))
        return false;
    }

    boolean this_present_reportingTo = true && this.isSetReportingTo();
    boolean that_present_reportingTo = true && that.isSetReportingTo();
    if (this_present_reportingTo || that_present_reportingTo) {
      if (!(this_present_reportingTo && that_present_reportingTo))
        return false;
      if (!this.reportingTo.equals(that.reportingTo))
        return false;
    }

    boolean this_present_isHiring = true && this.isSetIsHiring();
    boolean that_present_isHiring = true && that.isSetIsHiring();
    if (this_present_isHiring || that_present_isHiring) {
      if (!(this_present_isHiring && that_present_isHiring))
        return false;
      if (this.isHiring != that.isHiring)
        return false;
    }

    boolean this_present_underlings = true && this.isSetUnderlings();
    boolean that_present_underlings = true && that.isSetUnderlings();
    if (this_present_underlings || that_present_underlings) {
      if (!(this_present_underlings && that_present_underlings))
        return false;
      if (this.underlings != that.underlings)
        return false;
    }

    boolean this_present_languageRequired = true && this.isSetLanguageRequired();
    boolean that_present_languageRequired = true && that.isSetLanguageRequired();
    if (this_present_languageRequired || that_present_languageRequired) {
      if (!(this_present_languageRequired && that_present_languageRequired))
        return false;
      if (this.languageRequired != that.languageRequired)
        return false;
    }

    boolean this_present_targetIndustry = true && this.isSetTargetIndustry();
    boolean that_present_targetIndustry = true && that.isSetTargetIndustry();
    if (this_present_targetIndustry || that_present_targetIndustry) {
      if (!(this_present_targetIndustry && that_present_targetIndustry))
        return false;
      if (this.targetIndustry != that.targetIndustry)
        return false;
    }

    boolean this_present_currentStatus = true && this.isSetCurrentStatus();
    boolean that_present_currentStatus = true && that.isSetCurrentStatus();
    if (this_present_currentStatus || that_present_currentStatus) {
      if (!(this_present_currentStatus && that_present_currentStatus))
        return false;
      if (this.currentStatus != that.currentStatus)
        return false;
    }

    boolean this_present_positionCode = true && this.isSetPositionCode();
    boolean that_present_positionCode = true && that.isSetPositionCode();
    if (this_present_positionCode || that_present_positionCode) {
      if (!(this_present_positionCode && that_present_positionCode))
        return false;
      if (this.positionCode != that.positionCode)
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetJobnumber()) ? 131071 : 524287);
    if (isSetJobnumber())
      hashCode = hashCode * 8191 + jobnumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
    if (isSetProvince())
      hashCode = hashCode * 8191 + province.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetLJobid()) ? 131071 : 524287);
    if (isSetLJobid())
      hashCode = hashCode * 8191 + lJobid;

    hashCode = hashCode * 8191 + ((isSetPublishDate()) ? 131071 : 524287);
    if (isSetPublishDate())
      hashCode = hashCode * 8191 + publishDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetStopDate()) ? 131071 : 524287);
    if (isSetStopDate())
      hashCode = hashCode * 8191 + stopDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountabilities()) ? 131071 : 524287);
    if (isSetAccountabilities())
      hashCode = hashCode * 8191 + accountabilities.hashCode();

    hashCode = hashCode * 8191 + ((isSetExperience()) ? 131071 : 524287);
    if (isSetExperience())
      hashCode = hashCode * 8191 + experience.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequirement()) ? 131071 : 524287);
    if (isSetRequirement())
      hashCode = hashCode * 8191 + requirement.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalary()) ? 131071 : 524287);
    if (isSetSalary())
      hashCode = hashCode * 8191 + salary.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguage()) ? 131071 : 524287);
    if (isSetLanguage())
      hashCode = hashCode * 8191 + language.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobGrade()) ? 131071 : 524287);
    if (isSetJobGrade())
      hashCode = hashCode * 8191 + jobGrade;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(status);

    hashCode = hashCode * 8191 + ((isSetVisitnum()) ? 131071 : 524287);
    if (isSetVisitnum())
      hashCode = hashCode * 8191 + visitnum;

    hashCode = hashCode * 8191 + ((isSetLastvisit()) ? 131071 : 524287);
    if (isSetLastvisit())
      hashCode = hashCode * 8191 + lastvisit.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceId()) ? 131071 : 524287);
    if (isSetSourceId())
      hashCode = hashCode * 8191 + sourceId;

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetBusinessGroup()) ? 131071 : 524287);
    if (isSetBusinessGroup())
      hashCode = hashCode * 8191 + businessGroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmploymentType()) ? 131071 : 524287);
    if (isSetEmploymentType())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(employmentType);

    hashCode = hashCode * 8191 + ((isSetHrEmail()) ? 131071 : 524287);
    if (isSetHrEmail())
      hashCode = hashCode * 8191 + hrEmail.hashCode();

    hashCode = hashCode * 8191 + ((isSetBenefits()) ? 131071 : 524287);
    if (isSetBenefits())
      hashCode = hashCode * 8191 + benefits.hashCode();

    hashCode = hashCode * 8191 + ((isSetDegree()) ? 131071 : 524287);
    if (isSetDegree())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(degree);

    hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
    if (isSetFeature())
      hashCode = hashCode * 8191 + feature.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmailNotice()) ? 131071 : 524287);
    if (isSetEmailNotice())
      hashCode = hashCode * 8191 + (int) (emailNotice);

    hashCode = hashCode * 8191 + ((isSetCandidateSource()) ? 131071 : 524287);
    if (isSetCandidateSource())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(candidateSource);

    hashCode = hashCode * 8191 + ((isSetOccupation()) ? 131071 : 524287);
    if (isSetOccupation())
      hashCode = hashCode * 8191 + occupation.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsRecom()) ? 131071 : 524287);
    if (isSetIsRecom())
      hashCode = hashCode * 8191 + isRecom;

    hashCode = hashCode * 8191 + ((isSetIndustry()) ? 131071 : 524287);
    if (isSetIndustry())
      hashCode = hashCode * 8191 + industry.hashCode();

    hashCode = hashCode * 8191 + ((isSetHongbaoConfigId()) ? 131071 : 524287);
    if (isSetHongbaoConfigId())
      hashCode = hashCode * 8191 + hongbaoConfigId;

    hashCode = hashCode * 8191 + ((isSetHongbaoConfigRecomId()) ? 131071 : 524287);
    if (isSetHongbaoConfigRecomId())
      hashCode = hashCode * 8191 + hongbaoConfigRecomId;

    hashCode = hashCode * 8191 + ((isSetHongbaoConfigAppId()) ? 131071 : 524287);
    if (isSetHongbaoConfigAppId())
      hashCode = hashCode * 8191 + hongbaoConfigAppId;

    hashCode = hashCode * 8191 + ((isSetEmailResumeConf()) ? 131071 : 524287);
    if (isSetEmailResumeConf())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(emailResumeConf);

    hashCode = hashCode * 8191 + ((isSetLPostingtargetid()) ? 131071 : 524287);
    if (isSetLPostingtargetid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lPostingtargetid);

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priority);

    hashCode = hashCode * 8191 + ((isSetShareTplId()) ? 131071 : 524287);
    if (isSetShareTplId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shareTplId);

    hashCode = hashCode * 8191 + ((isSetDistrict()) ? 131071 : 524287);
    if (isSetDistrict())
      hashCode = hashCode * 8191 + district.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count);

    hashCode = hashCode * 8191 + ((isSetSalaryTop()) ? 131071 : 524287);
    if (isSetSalaryTop())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(salaryTop);

    hashCode = hashCode * 8191 + ((isSetSalaryBottom()) ? 131071 : 524287);
    if (isSetSalaryBottom())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(salaryBottom);

    hashCode = hashCode * 8191 + ((isSetExperienceAbove()) ? 131071 : 524287);
    if (isSetExperienceAbove())
      hashCode = hashCode * 8191 + (int) (experienceAbove);

    hashCode = hashCode * 8191 + ((isSetDegreeAbove()) ? 131071 : 524287);
    if (isSetDegreeAbove())
      hashCode = hashCode * 8191 + (int) (degreeAbove);

    hashCode = hashCode * 8191 + ((isSetManagementExperience()) ? 131071 : 524287);
    if (isSetManagementExperience())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(managementExperience);

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gender);

    hashCode = hashCode * 8191 + ((isSetPublisher()) ? 131071 : 524287);
    if (isSetPublisher())
      hashCode = hashCode * 8191 + publisher;

    hashCode = hashCode * 8191 + ((isSetAppCvConfigId()) ? 131071 : 524287);
    if (isSetAppCvConfigId())
      hashCode = hashCode * 8191 + appCvConfigId;

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source);

    hashCode = hashCode * 8191 + ((isSetHbStatus()) ? 131071 : 524287);
    if (isSetHbStatus())
      hashCode = hashCode * 8191 + (int) (hbStatus);

    hashCode = hashCode * 8191 + ((isSetChildCompanyId()) ? 131071 : 524287);
    if (isSetChildCompanyId())
      hashCode = hashCode * 8191 + childCompanyId;

    hashCode = hashCode * 8191 + ((isSetAge()) ? 131071 : 524287);
    if (isSetAge())
      hashCode = hashCode * 8191 + (int) (age);

    hashCode = hashCode * 8191 + ((isSetMajorRequired()) ? 131071 : 524287);
    if (isSetMajorRequired())
      hashCode = hashCode * 8191 + majorRequired.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkAddress()) ? 131071 : 524287);
    if (isSetWorkAddress())
      hashCode = hashCode * 8191 + workAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
    if (isSetKeyword())
      hashCode = hashCode * 8191 + keyword.hashCode();

    hashCode = hashCode * 8191 + ((isSetReportingTo()) ? 131071 : 524287);
    if (isSetReportingTo())
      hashCode = hashCode * 8191 + reportingTo.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsHiring()) ? 131071 : 524287);
    if (isSetIsHiring())
      hashCode = hashCode * 8191 + (int) (isHiring);

    hashCode = hashCode * 8191 + ((isSetUnderlings()) ? 131071 : 524287);
    if (isSetUnderlings())
      hashCode = hashCode * 8191 + (int) (underlings);

    hashCode = hashCode * 8191 + ((isSetLanguageRequired()) ? 131071 : 524287);
    if (isSetLanguageRequired())
      hashCode = hashCode * 8191 + (int) (languageRequired);

    hashCode = hashCode * 8191 + ((isSetTargetIndustry()) ? 131071 : 524287);
    if (isSetTargetIndustry())
      hashCode = hashCode * 8191 + (int) (targetIndustry);

    hashCode = hashCode * 8191 + ((isSetCurrentStatus()) ? 131071 : 524287);
    if (isSetCurrentStatus())
      hashCode = hashCode * 8191 + (int) (currentStatus);

    hashCode = hashCode * 8191 + ((isSetPositionCode()) ? 131071 : 524287);
    if (isSetPositionCode())
      hashCode = hashCode * 8191 + positionCode;

    hashCode = hashCode * 8191 + ((isSetTeamId()) ? 131071 : 524287);
    if (isSetTeamId())
      hashCode = hashCode * 8191 + teamId;

    return hashCode;
  }

  @Override
  public int compareTo(JobPositionDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobnumber()).compareTo(other.isSetJobnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobnumber, other.jobnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLJobid()).compareTo(other.isSetLJobid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLJobid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lJobid, other.lJobid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishDate()).compareTo(other.isSetPublishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishDate, other.publishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopDate()).compareTo(other.isSetStopDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopDate, other.stopDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountabilities()).compareTo(other.isSetAccountabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountabilities, other.accountabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequirement()).compareTo(other.isSetRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirement, other.requirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary()).compareTo(other.isSetSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary, other.salary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobGrade()).compareTo(other.isSetJobGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobGrade, other.jobGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitnum()).compareTo(other.isSetVisitnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitnum, other.visitnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastvisit()).compareTo(other.isSetLastvisit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastvisit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastvisit, other.lastvisit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessGroup()).compareTo(other.isSetBusinessGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessGroup, other.businessGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmploymentType()).compareTo(other.isSetEmploymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmploymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employmentType, other.employmentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHrEmail()).compareTo(other.isSetHrEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrEmail, other.hrEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenefits()).compareTo(other.isSetBenefits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenefits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benefits, other.benefits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailNotice()).compareTo(other.isSetEmailNotice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailNotice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailNotice, other.emailNotice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCandidateSource()).compareTo(other.isSetCandidateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateSource, other.candidateSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRecom()).compareTo(other.isSetIsRecom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRecom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRecom, other.isRecom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustry()).compareTo(other.isSetIndustry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industry, other.industry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHongbaoConfigId()).compareTo(other.isSetHongbaoConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHongbaoConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hongbaoConfigId, other.hongbaoConfigId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHongbaoConfigRecomId()).compareTo(other.isSetHongbaoConfigRecomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHongbaoConfigRecomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hongbaoConfigRecomId, other.hongbaoConfigRecomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHongbaoConfigAppId()).compareTo(other.isSetHongbaoConfigAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHongbaoConfigAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hongbaoConfigAppId, other.hongbaoConfigAppId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailResumeConf()).compareTo(other.isSetEmailResumeConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailResumeConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailResumeConf, other.emailResumeConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLPostingtargetid()).compareTo(other.isSetLPostingtargetid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLPostingtargetid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lPostingtargetid, other.lPostingtargetid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareTplId()).compareTo(other.isSetShareTplId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTplId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTplId, other.shareTplId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistrict()).compareTo(other.isSetDistrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.district, other.district);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryTop()).compareTo(other.isSetSalaryTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryTop, other.salaryTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryBottom()).compareTo(other.isSetSalaryBottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryBottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryBottom, other.salaryBottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperienceAbove()).compareTo(other.isSetExperienceAbove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperienceAbove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experienceAbove, other.experienceAbove);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegreeAbove()).compareTo(other.isSetDegreeAbove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegreeAbove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degreeAbove, other.degreeAbove);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagementExperience()).compareTo(other.isSetManagementExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagementExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managementExperience, other.managementExperience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisher()).compareTo(other.isSetPublisher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, other.publisher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCvConfigId()).compareTo(other.isSetAppCvConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCvConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCvConfigId, other.appCvConfigId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbStatus()).compareTo(other.isSetHbStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbStatus, other.hbStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildCompanyId()).compareTo(other.isSetChildCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childCompanyId, other.childCompanyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajorRequired()).compareTo(other.isSetMajorRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajorRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.majorRequired, other.majorRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkAddress()).compareTo(other.isSetWorkAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workAddress, other.workAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportingTo()).compareTo(other.isSetReportingTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportingTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportingTo, other.reportingTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHiring()).compareTo(other.isSetIsHiring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHiring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHiring, other.isHiring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlings()).compareTo(other.isSetUnderlings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlings, other.underlings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguageRequired()).compareTo(other.isSetLanguageRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageRequired, other.languageRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetIndustry()).compareTo(other.isSetTargetIndustry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetIndustry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetIndustry, other.targetIndustry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentStatus()).compareTo(other.isSetCurrentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentStatus, other.currentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionCode()).compareTo(other.isSetPositionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCode, other.positionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobPositionDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetJobnumber()) {
      if (!first) sb.append(", ");
      sb.append("jobnumber:");
      if (this.jobnumber == null) {
        sb.append("null");
      } else {
        sb.append(this.jobnumber);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetProvince()) {
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetLJobid()) {
      if (!first) sb.append(", ");
      sb.append("lJobid:");
      sb.append(this.lJobid);
      first = false;
    }
    if (isSetPublishDate()) {
      if (!first) sb.append(", ");
      sb.append("publishDate:");
      if (this.publishDate == null) {
        sb.append("null");
      } else {
        sb.append(this.publishDate);
      }
      first = false;
    }
    if (isSetStopDate()) {
      if (!first) sb.append(", ");
      sb.append("stopDate:");
      if (this.stopDate == null) {
        sb.append("null");
      } else {
        sb.append(this.stopDate);
      }
      first = false;
    }
    if (isSetAccountabilities()) {
      if (!first) sb.append(", ");
      sb.append("accountabilities:");
      if (this.accountabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.accountabilities);
      }
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      if (this.experience == null) {
        sb.append("null");
      } else {
        sb.append(this.experience);
      }
      first = false;
    }
    if (isSetRequirement()) {
      if (!first) sb.append(", ");
      sb.append("requirement:");
      if (this.requirement == null) {
        sb.append("null");
      } else {
        sb.append(this.requirement);
      }
      first = false;
    }
    if (isSetSalary()) {
      if (!first) sb.append(", ");
      sb.append("salary:");
      if (this.salary == null) {
        sb.append("null");
      } else {
        sb.append(this.salary);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    if (isSetJobGrade()) {
      if (!first) sb.append(", ");
      sb.append("jobGrade:");
      sb.append(this.jobGrade);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetVisitnum()) {
      if (!first) sb.append(", ");
      sb.append("visitnum:");
      sb.append(this.visitnum);
      first = false;
    }
    if (isSetLastvisit()) {
      if (!first) sb.append(", ");
      sb.append("lastvisit:");
      if (this.lastvisit == null) {
        sb.append("null");
      } else {
        sb.append(this.lastvisit);
      }
      first = false;
    }
    if (isSetSourceId()) {
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetBusinessGroup()) {
      if (!first) sb.append(", ");
      sb.append("businessGroup:");
      if (this.businessGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.businessGroup);
      }
      first = false;
    }
    if (isSetEmploymentType()) {
      if (!first) sb.append(", ");
      sb.append("employmentType:");
      sb.append(this.employmentType);
      first = false;
    }
    if (isSetHrEmail()) {
      if (!first) sb.append(", ");
      sb.append("hrEmail:");
      if (this.hrEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.hrEmail);
      }
      first = false;
    }
    if (isSetBenefits()) {
      if (!first) sb.append(", ");
      sb.append("benefits:");
      if (this.benefits == null) {
        sb.append("null");
      } else {
        sb.append(this.benefits);
      }
      first = false;
    }
    if (isSetDegree()) {
      if (!first) sb.append(", ");
      sb.append("degree:");
      sb.append(this.degree);
      first = false;
    }
    if (isSetFeature()) {
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
    }
    if (isSetEmailNotice()) {
      if (!first) sb.append(", ");
      sb.append("emailNotice:");
      sb.append(this.emailNotice);
      first = false;
    }
    if (isSetCandidateSource()) {
      if (!first) sb.append(", ");
      sb.append("candidateSource:");
      sb.append(this.candidateSource);
      first = false;
    }
    if (isSetOccupation()) {
      if (!first) sb.append(", ");
      sb.append("occupation:");
      if (this.occupation == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation);
      }
      first = false;
    }
    if (isSetIsRecom()) {
      if (!first) sb.append(", ");
      sb.append("isRecom:");
      sb.append(this.isRecom);
      first = false;
    }
    if (isSetIndustry()) {
      if (!first) sb.append(", ");
      sb.append("industry:");
      if (this.industry == null) {
        sb.append("null");
      } else {
        sb.append(this.industry);
      }
      first = false;
    }
    if (isSetHongbaoConfigId()) {
      if (!first) sb.append(", ");
      sb.append("hongbaoConfigId:");
      sb.append(this.hongbaoConfigId);
      first = false;
    }
    if (isSetHongbaoConfigRecomId()) {
      if (!first) sb.append(", ");
      sb.append("hongbaoConfigRecomId:");
      sb.append(this.hongbaoConfigRecomId);
      first = false;
    }
    if (isSetHongbaoConfigAppId()) {
      if (!first) sb.append(", ");
      sb.append("hongbaoConfigAppId:");
      sb.append(this.hongbaoConfigAppId);
      first = false;
    }
    if (isSetEmailResumeConf()) {
      if (!first) sb.append(", ");
      sb.append("emailResumeConf:");
      sb.append(this.emailResumeConf);
      first = false;
    }
    if (isSetLPostingtargetid()) {
      if (!first) sb.append(", ");
      sb.append("lPostingtargetid:");
      sb.append(this.lPostingtargetid);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetShareTplId()) {
      if (!first) sb.append(", ");
      sb.append("shareTplId:");
      sb.append(this.shareTplId);
      first = false;
    }
    if (isSetDistrict()) {
      if (!first) sb.append(", ");
      sb.append("district:");
      if (this.district == null) {
        sb.append("null");
      } else {
        sb.append(this.district);
      }
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetSalaryTop()) {
      if (!first) sb.append(", ");
      sb.append("salaryTop:");
      sb.append(this.salaryTop);
      first = false;
    }
    if (isSetSalaryBottom()) {
      if (!first) sb.append(", ");
      sb.append("salaryBottom:");
      sb.append(this.salaryBottom);
      first = false;
    }
    if (isSetExperienceAbove()) {
      if (!first) sb.append(", ");
      sb.append("experienceAbove:");
      sb.append(this.experienceAbove);
      first = false;
    }
    if (isSetDegreeAbove()) {
      if (!first) sb.append(", ");
      sb.append("degreeAbove:");
      sb.append(this.degreeAbove);
      first = false;
    }
    if (isSetManagementExperience()) {
      if (!first) sb.append(", ");
      sb.append("managementExperience:");
      sb.append(this.managementExperience);
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetPublisher()) {
      if (!first) sb.append(", ");
      sb.append("publisher:");
      sb.append(this.publisher);
      first = false;
    }
    if (isSetAppCvConfigId()) {
      if (!first) sb.append(", ");
      sb.append("appCvConfigId:");
      sb.append(this.appCvConfigId);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetHbStatus()) {
      if (!first) sb.append(", ");
      sb.append("hbStatus:");
      sb.append(this.hbStatus);
      first = false;
    }
    if (isSetChildCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("childCompanyId:");
      sb.append(this.childCompanyId);
      first = false;
    }
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetMajorRequired()) {
      if (!first) sb.append(", ");
      sb.append("majorRequired:");
      if (this.majorRequired == null) {
        sb.append("null");
      } else {
        sb.append(this.majorRequired);
      }
      first = false;
    }
    if (isSetWorkAddress()) {
      if (!first) sb.append(", ");
      sb.append("workAddress:");
      if (this.workAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.workAddress);
      }
      first = false;
    }
    if (isSetKeyword()) {
      if (!first) sb.append(", ");
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
    }
    if (isSetReportingTo()) {
      if (!first) sb.append(", ");
      sb.append("reportingTo:");
      if (this.reportingTo == null) {
        sb.append("null");
      } else {
        sb.append(this.reportingTo);
      }
      first = false;
    }
    if (isSetIsHiring()) {
      if (!first) sb.append(", ");
      sb.append("isHiring:");
      sb.append(this.isHiring);
      first = false;
    }
    if (isSetUnderlings()) {
      if (!first) sb.append(", ");
      sb.append("underlings:");
      sb.append(this.underlings);
      first = false;
    }
    if (isSetLanguageRequired()) {
      if (!first) sb.append(", ");
      sb.append("languageRequired:");
      sb.append(this.languageRequired);
      first = false;
    }
    if (isSetTargetIndustry()) {
      if (!first) sb.append(", ");
      sb.append("targetIndustry:");
      sb.append(this.targetIndustry);
      first = false;
    }
    if (isSetCurrentStatus()) {
      if (!first) sb.append(", ");
      sb.append("currentStatus:");
      sb.append(this.currentStatus);
      first = false;
    }
    if (isSetPositionCode()) {
      if (!first) sb.append(", ");
      sb.append("positionCode:");
      sb.append(this.positionCode);
      first = false;
    }
    if (isSetTeamId()) {
      if (!first) sb.append(", ");
      sb.append("teamId:");
      sb.append(this.teamId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobPositionDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobPositionDOStandardScheme getScheme() {
      return new JobPositionDOStandardScheme();
    }
  }

  private static class JobPositionDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobPositionDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOBNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobnumber = iprot.readString();
              struct.setJobnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // L_JOBID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lJobid = iprot.readI32();
              struct.setLJobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishDate = iprot.readString();
              struct.setPublishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STOP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopDate = iprot.readString();
              struct.setStopDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCOUNTABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountabilities = iprot.readString();
              struct.setAccountabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experience = iprot.readString();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requirement = iprot.readString();
              struct.setRequirementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salary = iprot.readString();
              struct.setSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JOB_GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobGrade = iprot.readI32();
              struct.setJobGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.status = iprot.readDouble();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VISITNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visitnum = iprot.readI32();
              struct.setVisitnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LASTVISIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastvisit = iprot.readString();
              struct.setLastvisitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceId = iprot.readI32();
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BUSINESS_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessGroup = iprot.readString();
              struct.setBusinessGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // EMPLOYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.employmentType = iprot.readDouble();
              struct.setEmploymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HR_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hrEmail = iprot.readString();
              struct.setHrEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BENEFITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.benefits = iprot.readString();
              struct.setBenefitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.degree = iprot.readDouble();
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature = iprot.readString();
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // EMAIL_NOTICE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.emailNotice = iprot.readByte();
              struct.setEmailNoticeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CANDIDATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.candidateSource = iprot.readDouble();
              struct.setCandidateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IS_RECOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRecom = iprot.readI32();
              struct.setIsRecomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industry = iprot.readString();
              struct.setIndustryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // HONGBAO_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hongbaoConfigId = iprot.readI32();
              struct.setHongbaoConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // HONGBAO_CONFIG_RECOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hongbaoConfigRecomId = iprot.readI32();
              struct.setHongbaoConfigRecomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // HONGBAO_CONFIG_APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hongbaoConfigAppId = iprot.readI32();
              struct.setHongbaoConfigAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // EMAIL_RESUME_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.emailResumeConf = iprot.readDouble();
              struct.setEmailResumeConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // L_POSTINGTARGETID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lPostingtargetid = iprot.readDouble();
              struct.setLPostingtargetidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priority = iprot.readDouble();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SHARE_TPL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shareTplId = iprot.readDouble();
              struct.setShareTplIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DISTRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.district = iprot.readString();
              struct.setDistrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.count = iprot.readDouble();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.salaryTop = iprot.readDouble();
              struct.setSalaryTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.salaryBottom = iprot.readDouble();
              struct.setSalaryBottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // EXPERIENCE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.experienceAbove = iprot.readByte();
              struct.setExperienceAboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // DEGREE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.degreeAbove = iprot.readByte();
              struct.setDegreeAboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // MANAGEMENT_EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.managementExperience = iprot.readDouble();
              struct.setManagementExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gender = iprot.readDouble();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // PUBLISHER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publisher = iprot.readI32();
              struct.setPublisherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // APP_CV_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appCvConfigId = iprot.readI32();
              struct.setAppCvConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.source = iprot.readDouble();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // HB_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.hbStatus = iprot.readByte();
              struct.setHbStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // CHILD_COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.childCompanyId = iprot.readI32();
              struct.setChildCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.age = iprot.readByte();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // MAJOR_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.majorRequired = iprot.readString();
              struct.setMajorRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // WORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workAddress = iprot.readString();
              struct.setWorkAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // REPORTING_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportingTo = iprot.readString();
              struct.setReportingToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // IS_HIRING
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isHiring = iprot.readByte();
              struct.setIsHiringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // UNDERLINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.underlings = iprot.readByte();
              struct.setUnderlingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // LANGUAGE_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.languageRequired = iprot.readByte();
              struct.setLanguageRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // TARGET_INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.targetIndustry = iprot.readByte();
              struct.setTargetIndustryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // CURRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.currentStatus = iprot.readByte();
              struct.setCurrentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // POSITION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionCode = iprot.readI32();
              struct.setPositionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamId = iprot.readI32();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobPositionDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.jobnumber != null) {
        if (struct.isSetJobnumber()) {
          oprot.writeFieldBegin(JOBNUMBER_FIELD_DESC);
          oprot.writeString(struct.jobnumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.province != null) {
        if (struct.isSetProvince()) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLJobid()) {
        oprot.writeFieldBegin(L_JOBID_FIELD_DESC);
        oprot.writeI32(struct.lJobid);
        oprot.writeFieldEnd();
      }
      if (struct.publishDate != null) {
        if (struct.isSetPublishDate()) {
          oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
          oprot.writeString(struct.publishDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stopDate != null) {
        if (struct.isSetStopDate()) {
          oprot.writeFieldBegin(STOP_DATE_FIELD_DESC);
          oprot.writeString(struct.stopDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountabilities != null) {
        if (struct.isSetAccountabilities()) {
          oprot.writeFieldBegin(ACCOUNTABILITIES_FIELD_DESC);
          oprot.writeString(struct.accountabilities);
          oprot.writeFieldEnd();
        }
      }
      if (struct.experience != null) {
        if (struct.isSetExperience()) {
          oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
          oprot.writeString(struct.experience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requirement != null) {
        if (struct.isSetRequirement()) {
          oprot.writeFieldBegin(REQUIREMENT_FIELD_DESC);
          oprot.writeString(struct.requirement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.salary != null) {
        if (struct.isSetSalary()) {
          oprot.writeFieldBegin(SALARY_FIELD_DESC);
          oprot.writeString(struct.salary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetJobGrade()) {
        oprot.writeFieldBegin(JOB_GRADE_FIELD_DESC);
        oprot.writeI32(struct.jobGrade);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeDouble(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisitnum()) {
        oprot.writeFieldBegin(VISITNUM_FIELD_DESC);
        oprot.writeI32(struct.visitnum);
        oprot.writeFieldEnd();
      }
      if (struct.lastvisit != null) {
        if (struct.isSetLastvisit()) {
          oprot.writeFieldBegin(LASTVISIT_FIELD_DESC);
          oprot.writeString(struct.lastvisit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSourceId()) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI32(struct.sourceId);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.businessGroup != null) {
        if (struct.isSetBusinessGroup()) {
          oprot.writeFieldBegin(BUSINESS_GROUP_FIELD_DESC);
          oprot.writeString(struct.businessGroup);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmploymentType()) {
        oprot.writeFieldBegin(EMPLOYMENT_TYPE_FIELD_DESC);
        oprot.writeDouble(struct.employmentType);
        oprot.writeFieldEnd();
      }
      if (struct.hrEmail != null) {
        if (struct.isSetHrEmail()) {
          oprot.writeFieldBegin(HR_EMAIL_FIELD_DESC);
          oprot.writeString(struct.hrEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.benefits != null) {
        if (struct.isSetBenefits()) {
          oprot.writeFieldBegin(BENEFITS_FIELD_DESC);
          oprot.writeString(struct.benefits);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDegree()) {
        oprot.writeFieldBegin(DEGREE_FIELD_DESC);
        oprot.writeDouble(struct.degree);
        oprot.writeFieldEnd();
      }
      if (struct.feature != null) {
        if (struct.isSetFeature()) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmailNotice()) {
        oprot.writeFieldBegin(EMAIL_NOTICE_FIELD_DESC);
        oprot.writeByte(struct.emailNotice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCandidateSource()) {
        oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
        oprot.writeDouble(struct.candidateSource);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        if (struct.isSetOccupation()) {
          oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
          oprot.writeString(struct.occupation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRecom()) {
        oprot.writeFieldBegin(IS_RECOM_FIELD_DESC);
        oprot.writeI32(struct.isRecom);
        oprot.writeFieldEnd();
      }
      if (struct.industry != null) {
        if (struct.isSetIndustry()) {
          oprot.writeFieldBegin(INDUSTRY_FIELD_DESC);
          oprot.writeString(struct.industry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHongbaoConfigId()) {
        oprot.writeFieldBegin(HONGBAO_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.hongbaoConfigId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHongbaoConfigRecomId()) {
        oprot.writeFieldBegin(HONGBAO_CONFIG_RECOM_ID_FIELD_DESC);
        oprot.writeI32(struct.hongbaoConfigRecomId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHongbaoConfigAppId()) {
        oprot.writeFieldBegin(HONGBAO_CONFIG_APP_ID_FIELD_DESC);
        oprot.writeI32(struct.hongbaoConfigAppId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmailResumeConf()) {
        oprot.writeFieldBegin(EMAIL_RESUME_CONF_FIELD_DESC);
        oprot.writeDouble(struct.emailResumeConf);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLPostingtargetid()) {
        oprot.writeFieldBegin(L_POSTINGTARGETID_FIELD_DESC);
        oprot.writeDouble(struct.lPostingtargetid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeDouble(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShareTplId()) {
        oprot.writeFieldBegin(SHARE_TPL_ID_FIELD_DESC);
        oprot.writeDouble(struct.shareTplId);
        oprot.writeFieldEnd();
      }
      if (struct.district != null) {
        if (struct.isSetDistrict()) {
          oprot.writeFieldBegin(DISTRICT_FIELD_DESC);
          oprot.writeString(struct.district);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeDouble(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeDouble(struct.salaryTop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeDouble(struct.salaryBottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExperienceAbove()) {
        oprot.writeFieldBegin(EXPERIENCE_ABOVE_FIELD_DESC);
        oprot.writeByte(struct.experienceAbove);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDegreeAbove()) {
        oprot.writeFieldBegin(DEGREE_ABOVE_FIELD_DESC);
        oprot.writeByte(struct.degreeAbove);
        oprot.writeFieldEnd();
      }
      if (struct.isSetManagementExperience()) {
        oprot.writeFieldBegin(MANAGEMENT_EXPERIENCE_FIELD_DESC);
        oprot.writeDouble(struct.managementExperience);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeDouble(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublisher()) {
        oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
        oprot.writeI32(struct.publisher);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppCvConfigId()) {
        oprot.writeFieldBegin(APP_CV_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.appCvConfigId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeDouble(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHbStatus()) {
        oprot.writeFieldBegin(HB_STATUS_FIELD_DESC);
        oprot.writeByte(struct.hbStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChildCompanyId()) {
        oprot.writeFieldBegin(CHILD_COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.childCompanyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeByte(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.majorRequired != null) {
        if (struct.isSetMajorRequired()) {
          oprot.writeFieldBegin(MAJOR_REQUIRED_FIELD_DESC);
          oprot.writeString(struct.majorRequired);
          oprot.writeFieldEnd();
        }
      }
      if (struct.workAddress != null) {
        if (struct.isSetWorkAddress()) {
          oprot.writeFieldBegin(WORK_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.workAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyword != null) {
        if (struct.isSetKeyword()) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reportingTo != null) {
        if (struct.isSetReportingTo()) {
          oprot.writeFieldBegin(REPORTING_TO_FIELD_DESC);
          oprot.writeString(struct.reportingTo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsHiring()) {
        oprot.writeFieldBegin(IS_HIRING_FIELD_DESC);
        oprot.writeByte(struct.isHiring);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnderlings()) {
        oprot.writeFieldBegin(UNDERLINGS_FIELD_DESC);
        oprot.writeByte(struct.underlings);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLanguageRequired()) {
        oprot.writeFieldBegin(LANGUAGE_REQUIRED_FIELD_DESC);
        oprot.writeByte(struct.languageRequired);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTargetIndustry()) {
        oprot.writeFieldBegin(TARGET_INDUSTRY_FIELD_DESC);
        oprot.writeByte(struct.targetIndustry);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentStatus()) {
        oprot.writeFieldBegin(CURRENT_STATUS_FIELD_DESC);
        oprot.writeByte(struct.currentStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionCode()) {
        oprot.writeFieldBegin(POSITION_CODE_FIELD_DESC);
        oprot.writeI32(struct.positionCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTeamId()) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeI32(struct.teamId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobPositionDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobPositionDOTupleScheme getScheme() {
      return new JobPositionDOTupleScheme();
    }
  }

  private static class JobPositionDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobPositionDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetJobnumber()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetProvince()) {
        optionals.set(4);
      }
      if (struct.isSetCity()) {
        optionals.set(5);
      }
      if (struct.isSetDepartment()) {
        optionals.set(6);
      }
      if (struct.isSetLJobid()) {
        optionals.set(7);
      }
      if (struct.isSetPublishDate()) {
        optionals.set(8);
      }
      if (struct.isSetStopDate()) {
        optionals.set(9);
      }
      if (struct.isSetAccountabilities()) {
        optionals.set(10);
      }
      if (struct.isSetExperience()) {
        optionals.set(11);
      }
      if (struct.isSetRequirement()) {
        optionals.set(12);
      }
      if (struct.isSetSalary()) {
        optionals.set(13);
      }
      if (struct.isSetLanguage()) {
        optionals.set(14);
      }
      if (struct.isSetJobGrade()) {
        optionals.set(15);
      }
      if (struct.isSetStatus()) {
        optionals.set(16);
      }
      if (struct.isSetVisitnum()) {
        optionals.set(17);
      }
      if (struct.isSetLastvisit()) {
        optionals.set(18);
      }
      if (struct.isSetSourceId()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(20);
      }
      if (struct.isSetBusinessGroup()) {
        optionals.set(21);
      }
      if (struct.isSetEmploymentType()) {
        optionals.set(22);
      }
      if (struct.isSetHrEmail()) {
        optionals.set(23);
      }
      if (struct.isSetBenefits()) {
        optionals.set(24);
      }
      if (struct.isSetDegree()) {
        optionals.set(25);
      }
      if (struct.isSetFeature()) {
        optionals.set(26);
      }
      if (struct.isSetEmailNotice()) {
        optionals.set(27);
      }
      if (struct.isSetCandidateSource()) {
        optionals.set(28);
      }
      if (struct.isSetOccupation()) {
        optionals.set(29);
      }
      if (struct.isSetIsRecom()) {
        optionals.set(30);
      }
      if (struct.isSetIndustry()) {
        optionals.set(31);
      }
      if (struct.isSetHongbaoConfigId()) {
        optionals.set(32);
      }
      if (struct.isSetHongbaoConfigRecomId()) {
        optionals.set(33);
      }
      if (struct.isSetHongbaoConfigAppId()) {
        optionals.set(34);
      }
      if (struct.isSetEmailResumeConf()) {
        optionals.set(35);
      }
      if (struct.isSetLPostingtargetid()) {
        optionals.set(36);
      }
      if (struct.isSetPriority()) {
        optionals.set(37);
      }
      if (struct.isSetShareTplId()) {
        optionals.set(38);
      }
      if (struct.isSetDistrict()) {
        optionals.set(39);
      }
      if (struct.isSetCount()) {
        optionals.set(40);
      }
      if (struct.isSetSalaryTop()) {
        optionals.set(41);
      }
      if (struct.isSetSalaryBottom()) {
        optionals.set(42);
      }
      if (struct.isSetExperienceAbove()) {
        optionals.set(43);
      }
      if (struct.isSetDegreeAbove()) {
        optionals.set(44);
      }
      if (struct.isSetManagementExperience()) {
        optionals.set(45);
      }
      if (struct.isSetGender()) {
        optionals.set(46);
      }
      if (struct.isSetPublisher()) {
        optionals.set(47);
      }
      if (struct.isSetAppCvConfigId()) {
        optionals.set(48);
      }
      if (struct.isSetSource()) {
        optionals.set(49);
      }
      if (struct.isSetHbStatus()) {
        optionals.set(50);
      }
      if (struct.isSetChildCompanyId()) {
        optionals.set(51);
      }
      if (struct.isSetAge()) {
        optionals.set(52);
      }
      if (struct.isSetMajorRequired()) {
        optionals.set(53);
      }
      if (struct.isSetWorkAddress()) {
        optionals.set(54);
      }
      if (struct.isSetKeyword()) {
        optionals.set(55);
      }
      if (struct.isSetReportingTo()) {
        optionals.set(56);
      }
      if (struct.isSetIsHiring()) {
        optionals.set(57);
      }
      if (struct.isSetUnderlings()) {
        optionals.set(58);
      }
      if (struct.isSetLanguageRequired()) {
        optionals.set(59);
      }
      if (struct.isSetTargetIndustry()) {
        optionals.set(60);
      }
      if (struct.isSetCurrentStatus()) {
        optionals.set(61);
      }
      if (struct.isSetPositionCode()) {
        optionals.set(62);
      }
      if (struct.isSetTeamId()) {
        optionals.set(63);
      }
      oprot.writeBitSet(optionals, 64);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetJobnumber()) {
        oprot.writeString(struct.jobnumber);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetLJobid()) {
        oprot.writeI32(struct.lJobid);
      }
      if (struct.isSetPublishDate()) {
        oprot.writeString(struct.publishDate);
      }
      if (struct.isSetStopDate()) {
        oprot.writeString(struct.stopDate);
      }
      if (struct.isSetAccountabilities()) {
        oprot.writeString(struct.accountabilities);
      }
      if (struct.isSetExperience()) {
        oprot.writeString(struct.experience);
      }
      if (struct.isSetRequirement()) {
        oprot.writeString(struct.requirement);
      }
      if (struct.isSetSalary()) {
        oprot.writeString(struct.salary);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetJobGrade()) {
        oprot.writeI32(struct.jobGrade);
      }
      if (struct.isSetStatus()) {
        oprot.writeDouble(struct.status);
      }
      if (struct.isSetVisitnum()) {
        oprot.writeI32(struct.visitnum);
      }
      if (struct.isSetLastvisit()) {
        oprot.writeString(struct.lastvisit);
      }
      if (struct.isSetSourceId()) {
        oprot.writeI32(struct.sourceId);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetBusinessGroup()) {
        oprot.writeString(struct.businessGroup);
      }
      if (struct.isSetEmploymentType()) {
        oprot.writeDouble(struct.employmentType);
      }
      if (struct.isSetHrEmail()) {
        oprot.writeString(struct.hrEmail);
      }
      if (struct.isSetBenefits()) {
        oprot.writeString(struct.benefits);
      }
      if (struct.isSetDegree()) {
        oprot.writeDouble(struct.degree);
      }
      if (struct.isSetFeature()) {
        oprot.writeString(struct.feature);
      }
      if (struct.isSetEmailNotice()) {
        oprot.writeByte(struct.emailNotice);
      }
      if (struct.isSetCandidateSource()) {
        oprot.writeDouble(struct.candidateSource);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetIsRecom()) {
        oprot.writeI32(struct.isRecom);
      }
      if (struct.isSetIndustry()) {
        oprot.writeString(struct.industry);
      }
      if (struct.isSetHongbaoConfigId()) {
        oprot.writeI32(struct.hongbaoConfigId);
      }
      if (struct.isSetHongbaoConfigRecomId()) {
        oprot.writeI32(struct.hongbaoConfigRecomId);
      }
      if (struct.isSetHongbaoConfigAppId()) {
        oprot.writeI32(struct.hongbaoConfigAppId);
      }
      if (struct.isSetEmailResumeConf()) {
        oprot.writeDouble(struct.emailResumeConf);
      }
      if (struct.isSetLPostingtargetid()) {
        oprot.writeDouble(struct.lPostingtargetid);
      }
      if (struct.isSetPriority()) {
        oprot.writeDouble(struct.priority);
      }
      if (struct.isSetShareTplId()) {
        oprot.writeDouble(struct.shareTplId);
      }
      if (struct.isSetDistrict()) {
        oprot.writeString(struct.district);
      }
      if (struct.isSetCount()) {
        oprot.writeDouble(struct.count);
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeDouble(struct.salaryTop);
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeDouble(struct.salaryBottom);
      }
      if (struct.isSetExperienceAbove()) {
        oprot.writeByte(struct.experienceAbove);
      }
      if (struct.isSetDegreeAbove()) {
        oprot.writeByte(struct.degreeAbove);
      }
      if (struct.isSetManagementExperience()) {
        oprot.writeDouble(struct.managementExperience);
      }
      if (struct.isSetGender()) {
        oprot.writeDouble(struct.gender);
      }
      if (struct.isSetPublisher()) {
        oprot.writeI32(struct.publisher);
      }
      if (struct.isSetAppCvConfigId()) {
        oprot.writeI32(struct.appCvConfigId);
      }
      if (struct.isSetSource()) {
        oprot.writeDouble(struct.source);
      }
      if (struct.isSetHbStatus()) {
        oprot.writeByte(struct.hbStatus);
      }
      if (struct.isSetChildCompanyId()) {
        oprot.writeI32(struct.childCompanyId);
      }
      if (struct.isSetAge()) {
        oprot.writeByte(struct.age);
      }
      if (struct.isSetMajorRequired()) {
        oprot.writeString(struct.majorRequired);
      }
      if (struct.isSetWorkAddress()) {
        oprot.writeString(struct.workAddress);
      }
      if (struct.isSetKeyword()) {
        oprot.writeString(struct.keyword);
      }
      if (struct.isSetReportingTo()) {
        oprot.writeString(struct.reportingTo);
      }
      if (struct.isSetIsHiring()) {
        oprot.writeByte(struct.isHiring);
      }
      if (struct.isSetUnderlings()) {
        oprot.writeByte(struct.underlings);
      }
      if (struct.isSetLanguageRequired()) {
        oprot.writeByte(struct.languageRequired);
      }
      if (struct.isSetTargetIndustry()) {
        oprot.writeByte(struct.targetIndustry);
      }
      if (struct.isSetCurrentStatus()) {
        oprot.writeByte(struct.currentStatus);
      }
      if (struct.isSetPositionCode()) {
        oprot.writeI32(struct.positionCode);
      }
      if (struct.isSetTeamId()) {
        oprot.writeI32(struct.teamId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(64);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobnumber = iprot.readString();
        struct.setJobnumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lJobid = iprot.readI32();
        struct.setLJobidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.publishDate = iprot.readString();
        struct.setPublishDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stopDate = iprot.readString();
        struct.setStopDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.accountabilities = iprot.readString();
        struct.setAccountabilitiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.experience = iprot.readString();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requirement = iprot.readString();
        struct.setRequirementIsSet(true);
      }
      if (incoming.get(13)) {
        struct.salary = iprot.readString();
        struct.setSalaryIsSet(true);
      }
      if (incoming.get(14)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jobGrade = iprot.readI32();
        struct.setJobGradeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.status = iprot.readDouble();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.visitnum = iprot.readI32();
        struct.setVisitnumIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lastvisit = iprot.readString();
        struct.setLastvisitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sourceId = iprot.readI32();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.businessGroup = iprot.readString();
        struct.setBusinessGroupIsSet(true);
      }
      if (incoming.get(22)) {
        struct.employmentType = iprot.readDouble();
        struct.setEmploymentTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.hrEmail = iprot.readString();
        struct.setHrEmailIsSet(true);
      }
      if (incoming.get(24)) {
        struct.benefits = iprot.readString();
        struct.setBenefitsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.degree = iprot.readDouble();
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.feature = iprot.readString();
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(27)) {
        struct.emailNotice = iprot.readByte();
        struct.setEmailNoticeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.candidateSource = iprot.readDouble();
        struct.setCandidateSourceIsSet(true);
      }
      if (incoming.get(29)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(30)) {
        struct.isRecom = iprot.readI32();
        struct.setIsRecomIsSet(true);
      }
      if (incoming.get(31)) {
        struct.industry = iprot.readString();
        struct.setIndustryIsSet(true);
      }
      if (incoming.get(32)) {
        struct.hongbaoConfigId = iprot.readI32();
        struct.setHongbaoConfigIdIsSet(true);
      }
      if (incoming.get(33)) {
        struct.hongbaoConfigRecomId = iprot.readI32();
        struct.setHongbaoConfigRecomIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.hongbaoConfigAppId = iprot.readI32();
        struct.setHongbaoConfigAppIdIsSet(true);
      }
      if (incoming.get(35)) {
        struct.emailResumeConf = iprot.readDouble();
        struct.setEmailResumeConfIsSet(true);
      }
      if (incoming.get(36)) {
        struct.lPostingtargetid = iprot.readDouble();
        struct.setLPostingtargetidIsSet(true);
      }
      if (incoming.get(37)) {
        struct.priority = iprot.readDouble();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(38)) {
        struct.shareTplId = iprot.readDouble();
        struct.setShareTplIdIsSet(true);
      }
      if (incoming.get(39)) {
        struct.district = iprot.readString();
        struct.setDistrictIsSet(true);
      }
      if (incoming.get(40)) {
        struct.count = iprot.readDouble();
        struct.setCountIsSet(true);
      }
      if (incoming.get(41)) {
        struct.salaryTop = iprot.readDouble();
        struct.setSalaryTopIsSet(true);
      }
      if (incoming.get(42)) {
        struct.salaryBottom = iprot.readDouble();
        struct.setSalaryBottomIsSet(true);
      }
      if (incoming.get(43)) {
        struct.experienceAbove = iprot.readByte();
        struct.setExperienceAboveIsSet(true);
      }
      if (incoming.get(44)) {
        struct.degreeAbove = iprot.readByte();
        struct.setDegreeAboveIsSet(true);
      }
      if (incoming.get(45)) {
        struct.managementExperience = iprot.readDouble();
        struct.setManagementExperienceIsSet(true);
      }
      if (incoming.get(46)) {
        struct.gender = iprot.readDouble();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(47)) {
        struct.publisher = iprot.readI32();
        struct.setPublisherIsSet(true);
      }
      if (incoming.get(48)) {
        struct.appCvConfigId = iprot.readI32();
        struct.setAppCvConfigIdIsSet(true);
      }
      if (incoming.get(49)) {
        struct.source = iprot.readDouble();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(50)) {
        struct.hbStatus = iprot.readByte();
        struct.setHbStatusIsSet(true);
      }
      if (incoming.get(51)) {
        struct.childCompanyId = iprot.readI32();
        struct.setChildCompanyIdIsSet(true);
      }
      if (incoming.get(52)) {
        struct.age = iprot.readByte();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(53)) {
        struct.majorRequired = iprot.readString();
        struct.setMajorRequiredIsSet(true);
      }
      if (incoming.get(54)) {
        struct.workAddress = iprot.readString();
        struct.setWorkAddressIsSet(true);
      }
      if (incoming.get(55)) {
        struct.keyword = iprot.readString();
        struct.setKeywordIsSet(true);
      }
      if (incoming.get(56)) {
        struct.reportingTo = iprot.readString();
        struct.setReportingToIsSet(true);
      }
      if (incoming.get(57)) {
        struct.isHiring = iprot.readByte();
        struct.setIsHiringIsSet(true);
      }
      if (incoming.get(58)) {
        struct.underlings = iprot.readByte();
        struct.setUnderlingsIsSet(true);
      }
      if (incoming.get(59)) {
        struct.languageRequired = iprot.readByte();
        struct.setLanguageRequiredIsSet(true);
      }
      if (incoming.get(60)) {
        struct.targetIndustry = iprot.readByte();
        struct.setTargetIndustryIsSet(true);
      }
      if (incoming.get(61)) {
        struct.currentStatus = iprot.readByte();
        struct.setCurrentStatusIsSet(true);
      }
      if (incoming.get(62)) {
        struct.positionCode = iprot.readI32();
        struct.setPositionCodeIsSet(true);
      }
      if (incoming.get(63)) {
        struct.teamId = iprot.readI32();
        struct.setTeamIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

