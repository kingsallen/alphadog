/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-07-30")
public class WeixinQrcode implements org.apache.thrift.TBase<WeixinQrcode, WeixinQrcode._Fields>, java.io.Serializable, Cloneable, Comparable<WeixinQrcode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeixinQrcode");

  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXPIRE_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("expireSeconds", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionName", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("scene", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WeixinQrcodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WeixinQrcodeTupleSchemeFactory();

  public int wechatId; // optional
  public long sceneId; // optional
  public int expireSeconds; // optional
  public int actionName; // optional
  public String scene; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WECHAT_ID((short)1, "wechatId"),
    SCENE_ID((short)2, "sceneId"),
    EXPIRE_SECONDS((short)3, "expireSeconds"),
    ACTION_NAME((short)4, "actionName"),
    SCENE((short)5, "scene");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WECHAT_ID
          return WECHAT_ID;
        case 2: // SCENE_ID
          return SCENE_ID;
        case 3: // EXPIRE_SECONDS
          return EXPIRE_SECONDS;
        case 4: // ACTION_NAME
          return ACTION_NAME;
        case 5: // SCENE
          return SCENE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WECHATID_ISSET_ID = 0;
  private static final int __SCENEID_ISSET_ID = 1;
  private static final int __EXPIRESECONDS_ISSET_ID = 2;
  private static final int __ACTIONNAME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WECHAT_ID,_Fields.SCENE_ID,_Fields.EXPIRE_SECONDS,_Fields.ACTION_NAME,_Fields.SCENE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("expireSeconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("actionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE, new org.apache.thrift.meta_data.FieldMetaData("scene", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeixinQrcode.class, metaDataMap);
  }

  public WeixinQrcode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeixinQrcode(WeixinQrcode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wechatId = other.wechatId;
    this.sceneId = other.sceneId;
    this.expireSeconds = other.expireSeconds;
    this.actionName = other.actionName;
    if (other.isSetScene()) {
      this.scene = other.scene;
    }
  }

  public WeixinQrcode deepCopy() {
    return new WeixinQrcode(this);
  }

  @Override
  public void clear() {
    setWechatIdIsSet(false);
    this.wechatId = 0;
    setSceneIdIsSet(false);
    this.sceneId = 0;
    setExpireSecondsIsSet(false);
    this.expireSeconds = 0;
    setActionNameIsSet(false);
    this.actionName = 0;
    this.scene = null;
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public WeixinQrcode setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public long getSceneId() {
    return this.sceneId;
  }

  public WeixinQrcode setSceneId(long sceneId) {
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    return this;
  }

  public void unsetSceneId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  public void setSceneIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCENEID_ISSET_ID, value);
  }

  public int getExpireSeconds() {
    return this.expireSeconds;
  }

  public WeixinQrcode setExpireSeconds(int expireSeconds) {
    this.expireSeconds = expireSeconds;
    setExpireSecondsIsSet(true);
    return this;
  }

  public void unsetExpireSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRESECONDS_ISSET_ID);
  }

  /** Returns true if field expireSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRESECONDS_ISSET_ID);
  }

  public void setExpireSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRESECONDS_ISSET_ID, value);
  }

  public int getActionName() {
    return this.actionName;
  }

  public WeixinQrcode setActionName(int actionName) {
    this.actionName = actionName;
    setActionNameIsSet(true);
    return this;
  }

  public void unsetActionName() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIONNAME_ISSET_ID);
  }

  /** Returns true if field actionName is set (has been assigned a value) and false otherwise */
  public boolean isSetActionName() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIONNAME_ISSET_ID);
  }

  public void setActionNameIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIONNAME_ISSET_ID, value);
  }

  public String getScene() {
    return this.scene;
  }

  public WeixinQrcode setScene(String scene) {
    this.scene = scene;
    return this;
  }

  public void unsetScene() {
    this.scene = null;
  }

  /** Returns true if field scene is set (has been assigned a value) and false otherwise */
  public boolean isSetScene() {
    return this.scene != null;
  }

  public void setSceneIsSet(boolean value) {
    if (!value) {
      this.scene = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((Integer)value);
      }
      break;

    case SCENE_ID:
      if (value == null) {
        unsetSceneId();
      } else {
        setSceneId((Long)value);
      }
      break;

    case EXPIRE_SECONDS:
      if (value == null) {
        unsetExpireSeconds();
      } else {
        setExpireSeconds((Integer)value);
      }
      break;

    case ACTION_NAME:
      if (value == null) {
        unsetActionName();
      } else {
        setActionName((Integer)value);
      }
      break;

    case SCENE:
      if (value == null) {
        unsetScene();
      } else {
        setScene((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WECHAT_ID:
      return getWechatId();

    case SCENE_ID:
      return getSceneId();

    case EXPIRE_SECONDS:
      return getExpireSeconds();

    case ACTION_NAME:
      return getActionName();

    case SCENE:
      return getScene();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WECHAT_ID:
      return isSetWechatId();
    case SCENE_ID:
      return isSetSceneId();
    case EXPIRE_SECONDS:
      return isSetExpireSeconds();
    case ACTION_NAME:
      return isSetActionName();
    case SCENE:
      return isSetScene();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WeixinQrcode)
      return this.equals((WeixinQrcode)that);
    return false;
  }

  public boolean equals(WeixinQrcode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_sceneId = true && this.isSetSceneId();
    boolean that_present_sceneId = true && that.isSetSceneId();
    if (this_present_sceneId || that_present_sceneId) {
      if (!(this_present_sceneId && that_present_sceneId))
        return false;
      if (this.sceneId != that.sceneId)
        return false;
    }

    boolean this_present_expireSeconds = true && this.isSetExpireSeconds();
    boolean that_present_expireSeconds = true && that.isSetExpireSeconds();
    if (this_present_expireSeconds || that_present_expireSeconds) {
      if (!(this_present_expireSeconds && that_present_expireSeconds))
        return false;
      if (this.expireSeconds != that.expireSeconds)
        return false;
    }

    boolean this_present_actionName = true && this.isSetActionName();
    boolean that_present_actionName = true && that.isSetActionName();
    if (this_present_actionName || that_present_actionName) {
      if (!(this_present_actionName && that_present_actionName))
        return false;
      if (this.actionName != that.actionName)
        return false;
    }

    boolean this_present_scene = true && this.isSetScene();
    boolean that_present_scene = true && that.isSetScene();
    if (this_present_scene || that_present_scene) {
      if (!(this_present_scene && that_present_scene))
        return false;
      if (!this.scene.equals(that.scene))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetSceneId()) ? 131071 : 524287);
    if (isSetSceneId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sceneId);

    hashCode = hashCode * 8191 + ((isSetExpireSeconds()) ? 131071 : 524287);
    if (isSetExpireSeconds())
      hashCode = hashCode * 8191 + expireSeconds;

    hashCode = hashCode * 8191 + ((isSetActionName()) ? 131071 : 524287);
    if (isSetActionName())
      hashCode = hashCode * 8191 + actionName;

    hashCode = hashCode * 8191 + ((isSetScene()) ? 131071 : 524287);
    if (isSetScene())
      hashCode = hashCode * 8191 + scene.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WeixinQrcode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneId()).compareTo(other.isSetSceneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, other.sceneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireSeconds()).compareTo(other.isSetExpireSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireSeconds, other.expireSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionName()).compareTo(other.isSetActionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionName, other.actionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScene()).compareTo(other.isSetScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scene, other.scene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WeixinQrcode(");
    boolean first = true;

    if (isSetWechatId()) {
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetSceneId()) {
      if (!first) sb.append(", ");
      sb.append("sceneId:");
      sb.append(this.sceneId);
      first = false;
    }
    if (isSetExpireSeconds()) {
      if (!first) sb.append(", ");
      sb.append("expireSeconds:");
      sb.append(this.expireSeconds);
      first = false;
    }
    if (isSetActionName()) {
      if (!first) sb.append(", ");
      sb.append("actionName:");
      sb.append(this.actionName);
      first = false;
    }
    if (isSetScene()) {
      if (!first) sb.append(", ");
      sb.append("scene:");
      if (this.scene == null) {
        sb.append("null");
      } else {
        sb.append(this.scene);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeixinQrcodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeixinQrcodeStandardScheme getScheme() {
      return new WeixinQrcodeStandardScheme();
    }
  }

  private static class WeixinQrcodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<WeixinQrcode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeixinQrcode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCENE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sceneId = iprot.readI64();
              struct.setSceneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPIRE_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expireSeconds = iprot.readI32();
              struct.setExpireSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionName = iprot.readI32();
              struct.setActionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scene = iprot.readString();
              struct.setSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeixinQrcode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSceneId()) {
        oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
        oprot.writeI64(struct.sceneId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpireSeconds()) {
        oprot.writeFieldBegin(EXPIRE_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.expireSeconds);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActionName()) {
        oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
        oprot.writeI32(struct.actionName);
        oprot.writeFieldEnd();
      }
      if (struct.scene != null) {
        if (struct.isSetScene()) {
          oprot.writeFieldBegin(SCENE_FIELD_DESC);
          oprot.writeString(struct.scene);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeixinQrcodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WeixinQrcodeTupleScheme getScheme() {
      return new WeixinQrcodeTupleScheme();
    }
  }

  private static class WeixinQrcodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<WeixinQrcode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeixinQrcode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWechatId()) {
        optionals.set(0);
      }
      if (struct.isSetSceneId()) {
        optionals.set(1);
      }
      if (struct.isSetExpireSeconds()) {
        optionals.set(2);
      }
      if (struct.isSetActionName()) {
        optionals.set(3);
      }
      if (struct.isSetScene()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetSceneId()) {
        oprot.writeI64(struct.sceneId);
      }
      if (struct.isSetExpireSeconds()) {
        oprot.writeI32(struct.expireSeconds);
      }
      if (struct.isSetActionName()) {
        oprot.writeI32(struct.actionName);
      }
      if (struct.isSetScene()) {
        oprot.writeString(struct.scene);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeixinQrcode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sceneId = iprot.readI64();
        struct.setSceneIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expireSeconds = iprot.readI32();
        struct.setExpireSecondsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actionName = iprot.readI32();
        struct.setActionNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.scene = iprot.readString();
        struct.setSceneIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

