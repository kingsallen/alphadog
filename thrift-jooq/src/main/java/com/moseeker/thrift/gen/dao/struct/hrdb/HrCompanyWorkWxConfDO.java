/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-01")
public class HrCompanyWorkWxConfDO implements org.apache.thrift.TBase<HrCompanyWorkWxConfDO, HrCompanyWorkWxConfDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrCompanyWorkWxConfDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrCompanyWorkWxConfDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CORPID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("secret", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOKEN_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenUpdateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TOKEN_EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenExpireTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrCompanyWorkWxConfDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrCompanyWorkWxConfDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String corpid; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String secret; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // optional
  public long tokenUpdateTime; // optional
  public long tokenExpireTime; // optional
  public int errorCode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String errorMsg; // optional
  public double disable; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    CORPID((short)3, "corpid"),
    SECRET((short)4, "secret"),
    ACCESS_TOKEN((short)5, "accessToken"),
    TOKEN_UPDATE_TIME((short)6, "tokenUpdateTime"),
    TOKEN_EXPIRE_TIME((short)7, "tokenExpireTime"),
    ERROR_CODE((short)8, "errorCode"),
    ERROR_MSG((short)9, "errorMsg"),
    DISABLE((short)10, "disable");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // CORPID
          return CORPID;
        case 4: // SECRET
          return SECRET;
        case 5: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 6: // TOKEN_UPDATE_TIME
          return TOKEN_UPDATE_TIME;
        case 7: // TOKEN_EXPIRE_TIME
          return TOKEN_EXPIRE_TIME;
        case 8: // ERROR_CODE
          return ERROR_CODE;
        case 9: // ERROR_MSG
          return ERROR_MSG;
        case 10: // DISABLE
          return DISABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __TOKENUPDATETIME_ISSET_ID = 2;
  private static final int __TOKENEXPIRETIME_ISSET_ID = 3;
  private static final int __ERRORCODE_ISSET_ID = 4;
  private static final int __DISABLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.CORPID,_Fields.SECRET,_Fields.ACCESS_TOKEN,_Fields.TOKEN_UPDATE_TIME,_Fields.TOKEN_EXPIRE_TIME,_Fields.ERROR_CODE,_Fields.ERROR_MSG,_Fields.DISABLE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORPID, new org.apache.thrift.meta_data.FieldMetaData("corpid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET, new org.apache.thrift.meta_data.FieldMetaData("secret", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tokenUpdateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tokenExpireTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrCompanyWorkWxConfDO.class, metaDataMap);
  }

  public HrCompanyWorkWxConfDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrCompanyWorkWxConfDO(HrCompanyWorkWxConfDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    if (other.isSetCorpid()) {
      this.corpid = other.corpid;
    }
    if (other.isSetSecret()) {
      this.secret = other.secret;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    this.tokenUpdateTime = other.tokenUpdateTime;
    this.tokenExpireTime = other.tokenExpireTime;
    this.errorCode = other.errorCode;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    this.disable = other.disable;
  }

  public HrCompanyWorkWxConfDO deepCopy() {
    return new HrCompanyWorkWxConfDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.corpid = null;
    this.secret = null;
    this.accessToken = null;
    setTokenUpdateTimeIsSet(false);
    this.tokenUpdateTime = 0;
    setTokenExpireTimeIsSet(false);
    this.tokenExpireTime = 0;
    setErrorCodeIsSet(false);
    this.errorCode = 0;
    this.errorMsg = null;
    setDisableIsSet(false);
    this.disable = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public HrCompanyWorkWxConfDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrCompanyWorkWxConfDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCorpid() {
    return this.corpid;
  }

  public HrCompanyWorkWxConfDO setCorpid(@org.apache.thrift.annotation.Nullable java.lang.String corpid) {
    this.corpid = corpid;
    return this;
  }

  public void unsetCorpid() {
    this.corpid = null;
  }

  /** Returns true if field corpid is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpid() {
    return this.corpid != null;
  }

  public void setCorpidIsSet(boolean value) {
    if (!value) {
      this.corpid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecret() {
    return this.secret;
  }

  public HrCompanyWorkWxConfDO setSecret(@org.apache.thrift.annotation.Nullable java.lang.String secret) {
    this.secret = secret;
    return this;
  }

  public void unsetSecret() {
    this.secret = null;
  }

  /** Returns true if field secret is set (has been assigned a value) and false otherwise */
  public boolean isSetSecret() {
    return this.secret != null;
  }

  public void setSecretIsSet(boolean value) {
    if (!value) {
      this.secret = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccessToken() {
    return this.accessToken;
  }

  public HrCompanyWorkWxConfDO setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public long getTokenUpdateTime() {
    return this.tokenUpdateTime;
  }

  public HrCompanyWorkWxConfDO setTokenUpdateTime(long tokenUpdateTime) {
    this.tokenUpdateTime = tokenUpdateTime;
    setTokenUpdateTimeIsSet(true);
    return this;
  }

  public void unsetTokenUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENUPDATETIME_ISSET_ID);
  }

  /** Returns true if field tokenUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENUPDATETIME_ISSET_ID);
  }

  public void setTokenUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENUPDATETIME_ISSET_ID, value);
  }

  public long getTokenExpireTime() {
    return this.tokenExpireTime;
  }

  public HrCompanyWorkWxConfDO setTokenExpireTime(long tokenExpireTime) {
    this.tokenExpireTime = tokenExpireTime;
    setTokenExpireTimeIsSet(true);
    return this;
  }

  public void unsetTokenExpireTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENEXPIRETIME_ISSET_ID);
  }

  /** Returns true if field tokenExpireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenExpireTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENEXPIRETIME_ISSET_ID);
  }

  public void setTokenExpireTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENEXPIRETIME_ISSET_ID, value);
  }

  public int getErrorCode() {
    return this.errorCode;
  }

  public HrCompanyWorkWxConfDO setErrorCode(int errorCode) {
    this.errorCode = errorCode;
    setErrorCodeIsSet(true);
    return this;
  }

  public void unsetErrorCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  public void setErrorCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrorMsg() {
    return this.errorMsg;
  }

  public HrCompanyWorkWxConfDO setErrorMsg(@org.apache.thrift.annotation.Nullable java.lang.String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public double getDisable() {
    return this.disable;
  }

  public HrCompanyWorkWxConfDO setDisable(double disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case CORPID:
      if (value == null) {
        unsetCorpid();
      } else {
        setCorpid((java.lang.String)value);
      }
      break;

    case SECRET:
      if (value == null) {
        unsetSecret();
      } else {
        setSecret((java.lang.String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((java.lang.String)value);
      }
      break;

    case TOKEN_UPDATE_TIME:
      if (value == null) {
        unsetTokenUpdateTime();
      } else {
        setTokenUpdateTime((java.lang.Long)value);
      }
      break;

    case TOKEN_EXPIRE_TIME:
      if (value == null) {
        unsetTokenExpireTime();
      } else {
        setTokenExpireTime((java.lang.Long)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((java.lang.Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((java.lang.String)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case CORPID:
      return getCorpid();

    case SECRET:
      return getSecret();

    case ACCESS_TOKEN:
      return getAccessToken();

    case TOKEN_UPDATE_TIME:
      return getTokenUpdateTime();

    case TOKEN_EXPIRE_TIME:
      return getTokenExpireTime();

    case ERROR_CODE:
      return getErrorCode();

    case ERROR_MSG:
      return getErrorMsg();

    case DISABLE:
      return getDisable();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case CORPID:
      return isSetCorpid();
    case SECRET:
      return isSetSecret();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case TOKEN_UPDATE_TIME:
      return isSetTokenUpdateTime();
    case TOKEN_EXPIRE_TIME:
      return isSetTokenExpireTime();
    case ERROR_CODE:
      return isSetErrorCode();
    case ERROR_MSG:
      return isSetErrorMsg();
    case DISABLE:
      return isSetDisable();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrCompanyWorkWxConfDO)
      return this.equals((HrCompanyWorkWxConfDO)that);
    return false;
  }

  public boolean equals(HrCompanyWorkWxConfDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_corpid = true && this.isSetCorpid();
    boolean that_present_corpid = true && that.isSetCorpid();
    if (this_present_corpid || that_present_corpid) {
      if (!(this_present_corpid && that_present_corpid))
        return false;
      if (!this.corpid.equals(that.corpid))
        return false;
    }

    boolean this_present_secret = true && this.isSetSecret();
    boolean that_present_secret = true && that.isSetSecret();
    if (this_present_secret || that_present_secret) {
      if (!(this_present_secret && that_present_secret))
        return false;
      if (!this.secret.equals(that.secret))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_tokenUpdateTime = true && this.isSetTokenUpdateTime();
    boolean that_present_tokenUpdateTime = true && that.isSetTokenUpdateTime();
    if (this_present_tokenUpdateTime || that_present_tokenUpdateTime) {
      if (!(this_present_tokenUpdateTime && that_present_tokenUpdateTime))
        return false;
      if (this.tokenUpdateTime != that.tokenUpdateTime)
        return false;
    }

    boolean this_present_tokenExpireTime = true && this.isSetTokenExpireTime();
    boolean that_present_tokenExpireTime = true && that.isSetTokenExpireTime();
    if (this_present_tokenExpireTime || that_present_tokenExpireTime) {
      if (!(this_present_tokenExpireTime && that_present_tokenExpireTime))
        return false;
      if (this.tokenExpireTime != that.tokenExpireTime)
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (this.errorCode != that.errorCode)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetCorpid()) ? 131071 : 524287);
    if (isSetCorpid())
      hashCode = hashCode * 8191 + corpid.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecret()) ? 131071 : 524287);
    if (isSetSecret())
      hashCode = hashCode * 8191 + secret.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokenUpdateTime()) ? 131071 : 524287);
    if (isSetTokenUpdateTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tokenUpdateTime);

    hashCode = hashCode * 8191 + ((isSetTokenExpireTime()) ? 131071 : 524287);
    if (isSetTokenExpireTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tokenExpireTime);

    hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
    if (isSetErrorCode())
      hashCode = hashCode * 8191 + errorCode;

    hashCode = hashCode * 8191 + ((isSetErrorMsg()) ? 131071 : 524287);
    if (isSetErrorMsg())
      hashCode = hashCode * 8191 + errorMsg.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disable);

    return hashCode;
  }

  @Override
  public int compareTo(HrCompanyWorkWxConfDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCorpid()).compareTo(other.isSetCorpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpid, other.corpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecret()).compareTo(other.isSetSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret, other.secret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenUpdateTime()).compareTo(other.isSetTokenUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenUpdateTime, other.tokenUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenExpireTime()).compareTo(other.isSetTokenExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenExpireTime, other.tokenExpireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrCompanyWorkWxConfDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetCorpid()) {
      if (!first) sb.append(", ");
      sb.append("corpid:");
      if (this.corpid == null) {
        sb.append("null");
      } else {
        sb.append(this.corpid);
      }
      first = false;
    }
    if (isSetSecret()) {
      if (!first) sb.append(", ");
      sb.append("secret:");
      if (this.secret == null) {
        sb.append("null");
      } else {
        sb.append(this.secret);
      }
      first = false;
    }
    if (isSetAccessToken()) {
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
    }
    if (isSetTokenUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("tokenUpdateTime:");
      sb.append(this.tokenUpdateTime);
      first = false;
    }
    if (isSetTokenExpireTime()) {
      if (!first) sb.append(", ");
      sb.append("tokenExpireTime:");
      sb.append(this.tokenExpireTime);
      first = false;
    }
    if (isSetErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
    }
    if (isSetErrorMsg()) {
      if (!first) sb.append(", ");
      sb.append("errorMsg:");
      if (this.errorMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMsg);
      }
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrCompanyWorkWxConfDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCompanyWorkWxConfDOStandardScheme getScheme() {
      return new HrCompanyWorkWxConfDOStandardScheme();
    }
  }

  private static class HrCompanyWorkWxConfDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrCompanyWorkWxConfDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrCompanyWorkWxConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CORPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.corpid = iprot.readString();
              struct.setCorpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secret = iprot.readString();
              struct.setSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOKEN_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tokenUpdateTime = iprot.readI64();
              struct.setTokenUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOKEN_EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tokenExpireTime = iprot.readI64();
              struct.setTokenExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCode = iprot.readI32();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disable = iprot.readDouble();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrCompanyWorkWxConfDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.corpid != null) {
        if (struct.isSetCorpid()) {
          oprot.writeFieldBegin(CORPID_FIELD_DESC);
          oprot.writeString(struct.corpid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secret != null) {
        if (struct.isSetSecret()) {
          oprot.writeFieldBegin(SECRET_FIELD_DESC);
          oprot.writeString(struct.secret);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessToken != null) {
        if (struct.isSetAccessToken()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTokenUpdateTime()) {
        oprot.writeFieldBegin(TOKEN_UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.tokenUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTokenExpireTime()) {
        oprot.writeFieldBegin(TOKEN_EXPIRE_TIME_FIELD_DESC);
        oprot.writeI64(struct.tokenExpireTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErrorCode()) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
      }
      if (struct.errorMsg != null) {
        if (struct.isSetErrorMsg()) {
          oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.errorMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeDouble(struct.disable);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrCompanyWorkWxConfDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCompanyWorkWxConfDOTupleScheme getScheme() {
      return new HrCompanyWorkWxConfDOTupleScheme();
    }
  }

  private static class HrCompanyWorkWxConfDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrCompanyWorkWxConfDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrCompanyWorkWxConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetCorpid()) {
        optionals.set(2);
      }
      if (struct.isSetSecret()) {
        optionals.set(3);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(4);
      }
      if (struct.isSetTokenUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetTokenExpireTime()) {
        optionals.set(6);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(7);
      }
      if (struct.isSetErrorMsg()) {
        optionals.set(8);
      }
      if (struct.isSetDisable()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetCorpid()) {
        oprot.writeString(struct.corpid);
      }
      if (struct.isSetSecret()) {
        oprot.writeString(struct.secret);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetTokenUpdateTime()) {
        oprot.writeI64(struct.tokenUpdateTime);
      }
      if (struct.isSetTokenExpireTime()) {
        oprot.writeI64(struct.tokenExpireTime);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.errorCode);
      }
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
      if (struct.isSetDisable()) {
        oprot.writeDouble(struct.disable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrCompanyWorkWxConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.corpid = iprot.readString();
        struct.setCorpidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.secret = iprot.readString();
        struct.setSecretIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tokenUpdateTime = iprot.readI64();
        struct.setTokenUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tokenExpireTime = iprot.readI64();
        struct.setTokenExpireTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.errorCode = iprot.readI32();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
      if (incoming.get(9)) {
        struct.disable = iprot.readDouble();
        struct.setDisableIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

