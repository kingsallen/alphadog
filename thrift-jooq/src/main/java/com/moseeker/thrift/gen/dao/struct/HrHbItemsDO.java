/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-17")
public class HrHbItemsDO implements org.apache.thrift.TBase<HrHbItemsDO, HrHbItemsDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbItemsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbItemsDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_config_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BINDING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("binding_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxuser_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("open_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRIGGER_WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trigger_wxuser_id", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbItemsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbItemsDOTupleSchemeFactory();

  public int id; // optional
  public int hb_config_id; // optional
  public int binding_id; // optional
  public int index; // optional
  public double amount; // optional
  public int status; // optional
  public int wxuser_id; // optional
  public java.lang.String open_time; // optional
  public java.lang.String create_time; // optional
  public java.lang.String update_time; // optional
  public int trigger_wxuser_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HB_CONFIG_ID((short)2, "hb_config_id"),
    BINDING_ID((short)3, "binding_id"),
    INDEX((short)4, "index"),
    AMOUNT((short)5, "amount"),
    STATUS((short)6, "status"),
    WXUSER_ID((short)7, "wxuser_id"),
    OPEN_TIME((short)8, "open_time"),
    CREATE_TIME((short)9, "create_time"),
    UPDATE_TIME((short)10, "update_time"),
    TRIGGER_WXUSER_ID((short)11, "trigger_wxuser_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HB_CONFIG_ID
          return HB_CONFIG_ID;
        case 3: // BINDING_ID
          return BINDING_ID;
        case 4: // INDEX
          return INDEX;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // STATUS
          return STATUS;
        case 7: // WXUSER_ID
          return WXUSER_ID;
        case 8: // OPEN_TIME
          return OPEN_TIME;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // UPDATE_TIME
          return UPDATE_TIME;
        case 11: // TRIGGER_WXUSER_ID
          return TRIGGER_WXUSER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HB_CONFIG_ID_ISSET_ID = 1;
  private static final int __BINDING_ID_ISSET_ID = 2;
  private static final int __INDEX_ISSET_ID = 3;
  private static final int __AMOUNT_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __WXUSER_ID_ISSET_ID = 6;
  private static final int __TRIGGER_WXUSER_ID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HB_CONFIG_ID,_Fields.BINDING_ID,_Fields.INDEX,_Fields.AMOUNT,_Fields.STATUS,_Fields.WXUSER_ID,_Fields.OPEN_TIME,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.TRIGGER_WXUSER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hb_config_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BINDING_ID, new org.apache.thrift.meta_data.FieldMetaData("binding_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("wxuser_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("open_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.TRIGGER_WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("trigger_wxuser_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbItemsDO.class, metaDataMap);
  }

  public HrHbItemsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbItemsDO(HrHbItemsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.hb_config_id = other.hb_config_id;
    this.binding_id = other.binding_id;
    this.index = other.index;
    this.amount = other.amount;
    this.status = other.status;
    this.wxuser_id = other.wxuser_id;
    if (other.isSetOpen_time()) {
      this.open_time = other.open_time;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    this.trigger_wxuser_id = other.trigger_wxuser_id;
  }

  public HrHbItemsDO deepCopy() {
    return new HrHbItemsDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setHb_config_idIsSet(false);
    this.hb_config_id = 0;
    setBinding_idIsSet(false);
    this.binding_id = 0;
    setIndexIsSet(false);
    this.index = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setWxuser_idIsSet(false);
    this.wxuser_id = 0;
    this.open_time = null;
    this.create_time = null;
    this.update_time = null;
    setTrigger_wxuser_idIsSet(false);
    this.trigger_wxuser_id = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbItemsDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getHb_config_id() {
    return this.hb_config_id;
  }

  public HrHbItemsDO setHb_config_id(int hb_config_id) {
    this.hb_config_id = hb_config_id;
    setHb_config_idIsSet(true);
    return this;
  }

  public void unsetHb_config_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
  }

  /** Returns true if field hb_config_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHb_config_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
  }

  public void setHb_config_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID, value);
  }

  public int getBinding_id() {
    return this.binding_id;
  }

  public HrHbItemsDO setBinding_id(int binding_id) {
    this.binding_id = binding_id;
    setBinding_idIsSet(true);
    return this;
  }

  public void unsetBinding_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINDING_ID_ISSET_ID);
  }

  /** Returns true if field binding_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBinding_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINDING_ID_ISSET_ID);
  }

  public void setBinding_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINDING_ID_ISSET_ID, value);
  }

  public int getIndex() {
    return this.index;
  }

  public HrHbItemsDO setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public HrHbItemsDO setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public HrHbItemsDO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getWxuser_id() {
    return this.wxuser_id;
  }

  public HrHbItemsDO setWxuser_id(int wxuser_id) {
    this.wxuser_id = wxuser_id;
    setWxuser_idIsSet(true);
    return this;
  }

  public void unsetWxuser_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  /** Returns true if field wxuser_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWxuser_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  public void setWxuser_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WXUSER_ID_ISSET_ID, value);
  }

  public java.lang.String getOpen_time() {
    return this.open_time;
  }

  public HrHbItemsDO setOpen_time(java.lang.String open_time) {
    this.open_time = open_time;
    return this;
  }

  public void unsetOpen_time() {
    this.open_time = null;
  }

  /** Returns true if field open_time is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen_time() {
    return this.open_time != null;
  }

  public void setOpen_timeIsSet(boolean value) {
    if (!value) {
      this.open_time = null;
    }
  }

  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public HrHbItemsDO setCreate_time(java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public java.lang.String getUpdate_time() {
    return this.update_time;
  }

  public HrHbItemsDO setUpdate_time(java.lang.String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public int getTrigger_wxuser_id() {
    return this.trigger_wxuser_id;
  }

  public HrHbItemsDO setTrigger_wxuser_id(int trigger_wxuser_id) {
    this.trigger_wxuser_id = trigger_wxuser_id;
    setTrigger_wxuser_idIsSet(true);
    return this;
  }

  public void unsetTrigger_wxuser_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIGGER_WXUSER_ID_ISSET_ID);
  }

  /** Returns true if field trigger_wxuser_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTrigger_wxuser_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIGGER_WXUSER_ID_ISSET_ID);
  }

  public void setTrigger_wxuser_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIGGER_WXUSER_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case HB_CONFIG_ID:
      if (value == null) {
        unsetHb_config_id();
      } else {
        setHb_config_id((java.lang.Integer)value);
      }
      break;

    case BINDING_ID:
      if (value == null) {
        unsetBinding_id();
      } else {
        setBinding_id((java.lang.Integer)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((java.lang.Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((java.lang.Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case WXUSER_ID:
      if (value == null) {
        unsetWxuser_id();
      } else {
        setWxuser_id((java.lang.Integer)value);
      }
      break;

    case OPEN_TIME:
      if (value == null) {
        unsetOpen_time();
      } else {
        setOpen_time((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.String)value);
      }
      break;

    case TRIGGER_WXUSER_ID:
      if (value == null) {
        unsetTrigger_wxuser_id();
      } else {
        setTrigger_wxuser_id((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HB_CONFIG_ID:
      return getHb_config_id();

    case BINDING_ID:
      return getBinding_id();

    case INDEX:
      return getIndex();

    case AMOUNT:
      return getAmount();

    case STATUS:
      return getStatus();

    case WXUSER_ID:
      return getWxuser_id();

    case OPEN_TIME:
      return getOpen_time();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case TRIGGER_WXUSER_ID:
      return getTrigger_wxuser_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HB_CONFIG_ID:
      return isSetHb_config_id();
    case BINDING_ID:
      return isSetBinding_id();
    case INDEX:
      return isSetIndex();
    case AMOUNT:
      return isSetAmount();
    case STATUS:
      return isSetStatus();
    case WXUSER_ID:
      return isSetWxuser_id();
    case OPEN_TIME:
      return isSetOpen_time();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case TRIGGER_WXUSER_ID:
      return isSetTrigger_wxuser_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbItemsDO)
      return this.equals((HrHbItemsDO)that);
    return false;
  }

  public boolean equals(HrHbItemsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hb_config_id = true && this.isSetHb_config_id();
    boolean that_present_hb_config_id = true && that.isSetHb_config_id();
    if (this_present_hb_config_id || that_present_hb_config_id) {
      if (!(this_present_hb_config_id && that_present_hb_config_id))
        return false;
      if (this.hb_config_id != that.hb_config_id)
        return false;
    }

    boolean this_present_binding_id = true && this.isSetBinding_id();
    boolean that_present_binding_id = true && that.isSetBinding_id();
    if (this_present_binding_id || that_present_binding_id) {
      if (!(this_present_binding_id && that_present_binding_id))
        return false;
      if (this.binding_id != that.binding_id)
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_wxuser_id = true && this.isSetWxuser_id();
    boolean that_present_wxuser_id = true && that.isSetWxuser_id();
    if (this_present_wxuser_id || that_present_wxuser_id) {
      if (!(this_present_wxuser_id && that_present_wxuser_id))
        return false;
      if (this.wxuser_id != that.wxuser_id)
        return false;
    }

    boolean this_present_open_time = true && this.isSetOpen_time();
    boolean that_present_open_time = true && that.isSetOpen_time();
    if (this_present_open_time || that_present_open_time) {
      if (!(this_present_open_time && that_present_open_time))
        return false;
      if (!this.open_time.equals(that.open_time))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_trigger_wxuser_id = true && this.isSetTrigger_wxuser_id();
    boolean that_present_trigger_wxuser_id = true && that.isSetTrigger_wxuser_id();
    if (this_present_trigger_wxuser_id || that_present_trigger_wxuser_id) {
      if (!(this_present_trigger_wxuser_id && that_present_trigger_wxuser_id))
        return false;
      if (this.trigger_wxuser_id != that.trigger_wxuser_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetHb_config_id()) ? 131071 : 524287);
    if (isSetHb_config_id())
      hashCode = hashCode * 8191 + hb_config_id;

    hashCode = hashCode * 8191 + ((isSetBinding_id()) ? 131071 : 524287);
    if (isSetBinding_id())
      hashCode = hashCode * 8191 + binding_id;

    hashCode = hashCode * 8191 + ((isSetIndex()) ? 131071 : 524287);
    if (isSetIndex())
      hashCode = hashCode * 8191 + index;

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetWxuser_id()) ? 131071 : 524287);
    if (isSetWxuser_id())
      hashCode = hashCode * 8191 + wxuser_id;

    hashCode = hashCode * 8191 + ((isSetOpen_time()) ? 131071 : 524287);
    if (isSetOpen_time())
      hashCode = hashCode * 8191 + open_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrigger_wxuser_id()) ? 131071 : 524287);
    if (isSetTrigger_wxuser_id())
      hashCode = hashCode * 8191 + trigger_wxuser_id;

    return hashCode;
  }

  @Override
  public int compareTo(HrHbItemsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHb_config_id()).compareTo(other.isSetHb_config_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHb_config_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_config_id, other.hb_config_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinding_id()).compareTo(other.isSetBinding_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinding_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binding_id, other.binding_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWxuser_id()).compareTo(other.isSetWxuser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxuser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxuser_id, other.wxuser_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpen_time()).compareTo(other.isSetOpen_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open_time, other.open_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTrigger_wxuser_id()).compareTo(other.isSetTrigger_wxuser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrigger_wxuser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger_wxuser_id, other.trigger_wxuser_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrHbItemsDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHb_config_id()) {
      if (!first) sb.append(", ");
      sb.append("hb_config_id:");
      sb.append(this.hb_config_id);
      first = false;
    }
    if (isSetBinding_id()) {
      if (!first) sb.append(", ");
      sb.append("binding_id:");
      sb.append(this.binding_id);
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetWxuser_id()) {
      if (!first) sb.append(", ");
      sb.append("wxuser_id:");
      sb.append(this.wxuser_id);
      first = false;
    }
    if (isSetOpen_time()) {
      if (!first) sb.append(", ");
      sb.append("open_time:");
      if (this.open_time == null) {
        sb.append("null");
      } else {
        sb.append(this.open_time);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    if (isSetTrigger_wxuser_id()) {
      if (!first) sb.append(", ");
      sb.append("trigger_wxuser_id:");
      sb.append(this.trigger_wxuser_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbItemsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbItemsDOStandardScheme getScheme() {
      return new HrHbItemsDOStandardScheme();
    }
  }

  private static class HrHbItemsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbItemsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HB_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hb_config_id = iprot.readI32();
              struct.setHb_config_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BINDING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.binding_id = iprot.readI32();
              struct.setBinding_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wxuser_id = iprot.readI32();
              struct.setWxuser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.open_time = iprot.readString();
              struct.setOpen_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRIGGER_WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.trigger_wxuser_id = iprot.readI32();
              struct.setTrigger_wxuser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHb_config_id()) {
        oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.hb_config_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBinding_id()) {
        oprot.writeFieldBegin(BINDING_ID_FIELD_DESC);
        oprot.writeI32(struct.binding_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex()) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWxuser_id()) {
        oprot.writeFieldBegin(WXUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.wxuser_id);
        oprot.writeFieldEnd();
      }
      if (struct.open_time != null) {
        if (struct.isSetOpen_time()) {
          oprot.writeFieldBegin(OPEN_TIME_FIELD_DESC);
          oprot.writeString(struct.open_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrigger_wxuser_id()) {
        oprot.writeFieldBegin(TRIGGER_WXUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.trigger_wxuser_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbItemsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbItemsDOTupleScheme getScheme() {
      return new HrHbItemsDOTupleScheme();
    }
  }

  private static class HrHbItemsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbItemsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHb_config_id()) {
        optionals.set(1);
      }
      if (struct.isSetBinding_id()) {
        optionals.set(2);
      }
      if (struct.isSetIndex()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetWxuser_id()) {
        optionals.set(6);
      }
      if (struct.isSetOpen_time()) {
        optionals.set(7);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(8);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(9);
      }
      if (struct.isSetTrigger_wxuser_id()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHb_config_id()) {
        oprot.writeI32(struct.hb_config_id);
      }
      if (struct.isSetBinding_id()) {
        oprot.writeI32(struct.binding_id);
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetWxuser_id()) {
        oprot.writeI32(struct.wxuser_id);
      }
      if (struct.isSetOpen_time()) {
        oprot.writeString(struct.open_time);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetTrigger_wxuser_id()) {
        oprot.writeI32(struct.trigger_wxuser_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hb_config_id = iprot.readI32();
        struct.setHb_config_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.binding_id = iprot.readI32();
        struct.setBinding_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wxuser_id = iprot.readI32();
        struct.setWxuser_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.open_time = iprot.readString();
        struct.setOpen_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.trigger_wxuser_id = iprot.readI32();
        struct.setTrigger_wxuser_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

