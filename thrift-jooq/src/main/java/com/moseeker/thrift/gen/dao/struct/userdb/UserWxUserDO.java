/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.userdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-12")
public class UserWxUserDO implements org.apache.thrift.TBase<UserWxUserDO, UserWxUserDO._Fields>, java.io.Serializable, Cloneable, Comparable<UserWxUserDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserWxUserDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SYSUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sysuserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubscribe", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("openid", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HEADIMGURL_FIELD_DESC = new org.apache.thrift.protocol.TField("headimgurl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribeTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField UNSUBSCIBE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unsubscibeTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField AUTO_SYNC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("autoSyncInfo", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.DOUBLE, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserWxUserDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserWxUserDOTupleSchemeFactory();

  public int id; // optional
  public int wechatId; // optional
  public int groupId; // optional
  public int sysuserId; // optional
  public byte isSubscribe; // optional
  public java.lang.String openid; // optional
  public java.lang.String nickname; // optional
  public int sex; // optional
  public java.lang.String city; // optional
  public java.lang.String country; // optional
  public java.lang.String province; // optional
  public java.lang.String language; // optional
  public java.lang.String headimgurl; // optional
  public java.lang.String subscribeTime; // optional
  public java.lang.String unsubscibeTime; // optional
  public java.lang.String unionid; // optional
  public int reward; // optional
  public double autoSyncInfo; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional
  public double source; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    WECHAT_ID((short)2, "wechatId"),
    GROUP_ID((short)3, "groupId"),
    SYSUSER_ID((short)4, "sysuserId"),
    IS_SUBSCRIBE((short)5, "isSubscribe"),
    OPENID((short)6, "openid"),
    NICKNAME((short)7, "nickname"),
    SEX((short)8, "sex"),
    CITY((short)9, "city"),
    COUNTRY((short)10, "country"),
    PROVINCE((short)11, "province"),
    LANGUAGE((short)12, "language"),
    HEADIMGURL((short)13, "headimgurl"),
    SUBSCRIBE_TIME((short)14, "subscribeTime"),
    UNSUBSCIBE_TIME((short)15, "unsubscibeTime"),
    UNIONID((short)16, "unionid"),
    REWARD((short)17, "reward"),
    AUTO_SYNC_INFO((short)18, "autoSyncInfo"),
    CREATE_TIME((short)19, "createTime"),
    UPDATE_TIME((short)20, "updateTime"),
    SOURCE((short)21, "source");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // WECHAT_ID
          return WECHAT_ID;
        case 3: // GROUP_ID
          return GROUP_ID;
        case 4: // SYSUSER_ID
          return SYSUSER_ID;
        case 5: // IS_SUBSCRIBE
          return IS_SUBSCRIBE;
        case 6: // OPENID
          return OPENID;
        case 7: // NICKNAME
          return NICKNAME;
        case 8: // SEX
          return SEX;
        case 9: // CITY
          return CITY;
        case 10: // COUNTRY
          return COUNTRY;
        case 11: // PROVINCE
          return PROVINCE;
        case 12: // LANGUAGE
          return LANGUAGE;
        case 13: // HEADIMGURL
          return HEADIMGURL;
        case 14: // SUBSCRIBE_TIME
          return SUBSCRIBE_TIME;
        case 15: // UNSUBSCIBE_TIME
          return UNSUBSCIBE_TIME;
        case 16: // UNIONID
          return UNIONID;
        case 17: // REWARD
          return REWARD;
        case 18: // AUTO_SYNC_INFO
          return AUTO_SYNC_INFO;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // UPDATE_TIME
          return UPDATE_TIME;
        case 21: // SOURCE
          return SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WECHATID_ISSET_ID = 1;
  private static final int __GROUPID_ISSET_ID = 2;
  private static final int __SYSUSERID_ISSET_ID = 3;
  private static final int __ISSUBSCRIBE_ISSET_ID = 4;
  private static final int __SEX_ISSET_ID = 5;
  private static final int __REWARD_ISSET_ID = 6;
  private static final int __AUTOSYNCINFO_ISSET_ID = 7;
  private static final int __SOURCE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.WECHAT_ID,_Fields.GROUP_ID,_Fields.SYSUSER_ID,_Fields.IS_SUBSCRIBE,_Fields.OPENID,_Fields.NICKNAME,_Fields.SEX,_Fields.CITY,_Fields.COUNTRY,_Fields.PROVINCE,_Fields.LANGUAGE,_Fields.HEADIMGURL,_Fields.SUBSCRIBE_TIME,_Fields.UNSUBSCIBE_TIME,_Fields.UNIONID,_Fields.REWARD,_Fields.AUTO_SYNC_INFO,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.SOURCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYSUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("sysuserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("isSubscribe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OPENID, new org.apache.thrift.meta_data.FieldMetaData("openid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADIMGURL, new org.apache.thrift.meta_data.FieldMetaData("headimgurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIBE_TIME, new org.apache.thrift.meta_data.FieldMetaData("subscribeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNSUBSCIBE_TIME, new org.apache.thrift.meta_data.FieldMetaData("unsubscibeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTO_SYNC_INFO, new org.apache.thrift.meta_data.FieldMetaData("autoSyncInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserWxUserDO.class, metaDataMap);
  }

  public UserWxUserDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserWxUserDO(UserWxUserDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.wechatId = other.wechatId;
    this.groupId = other.groupId;
    this.sysuserId = other.sysuserId;
    this.isSubscribe = other.isSubscribe;
    if (other.isSetOpenid()) {
      this.openid = other.openid;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    this.sex = other.sex;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetHeadimgurl()) {
      this.headimgurl = other.headimgurl;
    }
    if (other.isSetSubscribeTime()) {
      this.subscribeTime = other.subscribeTime;
    }
    if (other.isSetUnsubscibeTime()) {
      this.unsubscibeTime = other.unsubscibeTime;
    }
    if (other.isSetUnionid()) {
      this.unionid = other.unionid;
    }
    this.reward = other.reward;
    this.autoSyncInfo = other.autoSyncInfo;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.source = other.source;
  }

  public UserWxUserDO deepCopy() {
    return new UserWxUserDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    setSysuserIdIsSet(false);
    this.sysuserId = 0;
    setIsSubscribeIsSet(false);
    this.isSubscribe = 0;
    this.openid = null;
    this.nickname = null;
    setSexIsSet(false);
    this.sex = 0;
    this.city = null;
    this.country = null;
    this.province = null;
    this.language = null;
    this.headimgurl = null;
    this.subscribeTime = null;
    this.unsubscibeTime = null;
    this.unionid = null;
    setRewardIsSet(false);
    this.reward = 0;
    setAutoSyncInfoIsSet(false);
    this.autoSyncInfo = 0.0;
    this.createTime = null;
    this.updateTime = null;
    setSourceIsSet(false);
    this.source = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public UserWxUserDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public UserWxUserDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.groupId;
  }

  public UserWxUserDO setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getSysuserId() {
    return this.sysuserId;
  }

  public UserWxUserDO setSysuserId(int sysuserId) {
    this.sysuserId = sysuserId;
    setSysuserIdIsSet(true);
    return this;
  }

  public void unsetSysuserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYSUSERID_ISSET_ID);
  }

  /** Returns true if field sysuserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSysuserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYSUSERID_ISSET_ID);
  }

  public void setSysuserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYSUSERID_ISSET_ID, value);
  }

  public byte getIsSubscribe() {
    return this.isSubscribe;
  }

  public UserWxUserDO setIsSubscribe(byte isSubscribe) {
    this.isSubscribe = isSubscribe;
    setIsSubscribeIsSet(true);
    return this;
  }

  public void unsetIsSubscribe() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSUBSCRIBE_ISSET_ID);
  }

  /** Returns true if field isSubscribe is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubscribe() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSUBSCRIBE_ISSET_ID);
  }

  public void setIsSubscribeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSUBSCRIBE_ISSET_ID, value);
  }

  public java.lang.String getOpenid() {
    return this.openid;
  }

  public UserWxUserDO setOpenid(java.lang.String openid) {
    this.openid = openid;
    return this;
  }

  public void unsetOpenid() {
    this.openid = null;
  }

  /** Returns true if field openid is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenid() {
    return this.openid != null;
  }

  public void setOpenidIsSet(boolean value) {
    if (!value) {
      this.openid = null;
    }
  }

  public java.lang.String getNickname() {
    return this.nickname;
  }

  public UserWxUserDO setNickname(java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public UserWxUserDO setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public java.lang.String getCity() {
    return this.city;
  }

  public UserWxUserDO setCity(java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public java.lang.String getCountry() {
    return this.country;
  }

  public UserWxUserDO setCountry(java.lang.String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public java.lang.String getProvince() {
    return this.province;
  }

  public UserWxUserDO setProvince(java.lang.String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public java.lang.String getLanguage() {
    return this.language;
  }

  public UserWxUserDO setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public java.lang.String getHeadimgurl() {
    return this.headimgurl;
  }

  public UserWxUserDO setHeadimgurl(java.lang.String headimgurl) {
    this.headimgurl = headimgurl;
    return this;
  }

  public void unsetHeadimgurl() {
    this.headimgurl = null;
  }

  /** Returns true if field headimgurl is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadimgurl() {
    return this.headimgurl != null;
  }

  public void setHeadimgurlIsSet(boolean value) {
    if (!value) {
      this.headimgurl = null;
    }
  }

  public java.lang.String getSubscribeTime() {
    return this.subscribeTime;
  }

  public UserWxUserDO setSubscribeTime(java.lang.String subscribeTime) {
    this.subscribeTime = subscribeTime;
    return this;
  }

  public void unsetSubscribeTime() {
    this.subscribeTime = null;
  }

  /** Returns true if field subscribeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribeTime() {
    return this.subscribeTime != null;
  }

  public void setSubscribeTimeIsSet(boolean value) {
    if (!value) {
      this.subscribeTime = null;
    }
  }

  public java.lang.String getUnsubscibeTime() {
    return this.unsubscibeTime;
  }

  public UserWxUserDO setUnsubscibeTime(java.lang.String unsubscibeTime) {
    this.unsubscibeTime = unsubscibeTime;
    return this;
  }

  public void unsetUnsubscibeTime() {
    this.unsubscibeTime = null;
  }

  /** Returns true if field unsubscibeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsubscibeTime() {
    return this.unsubscibeTime != null;
  }

  public void setUnsubscibeTimeIsSet(boolean value) {
    if (!value) {
      this.unsubscibeTime = null;
    }
  }

  public java.lang.String getUnionid() {
    return this.unionid;
  }

  public UserWxUserDO setUnionid(java.lang.String unionid) {
    this.unionid = unionid;
    return this;
  }

  public void unsetUnionid() {
    this.unionid = null;
  }

  /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionid() {
    return this.unionid != null;
  }

  public void setUnionidIsSet(boolean value) {
    if (!value) {
      this.unionid = null;
    }
  }

  public int getReward() {
    return this.reward;
  }

  public UserWxUserDO setReward(int reward) {
    this.reward = reward;
    setRewardIsSet(true);
    return this;
  }

  public void unsetReward() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REWARD_ISSET_ID);
  }

  /** Returns true if field reward is set (has been assigned a value) and false otherwise */
  public boolean isSetReward() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REWARD_ISSET_ID);
  }

  public void setRewardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REWARD_ISSET_ID, value);
  }

  public double getAutoSyncInfo() {
    return this.autoSyncInfo;
  }

  public UserWxUserDO setAutoSyncInfo(double autoSyncInfo) {
    this.autoSyncInfo = autoSyncInfo;
    setAutoSyncInfoIsSet(true);
    return this;
  }

  public void unsetAutoSyncInfo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOSYNCINFO_ISSET_ID);
  }

  /** Returns true if field autoSyncInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoSyncInfo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOSYNCINFO_ISSET_ID);
  }

  public void setAutoSyncInfoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOSYNCINFO_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public UserWxUserDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public UserWxUserDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public double getSource() {
    return this.source;
  }

  public UserWxUserDO setSource(double source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((java.lang.Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((java.lang.Integer)value);
      }
      break;

    case SYSUSER_ID:
      if (value == null) {
        unsetSysuserId();
      } else {
        setSysuserId((java.lang.Integer)value);
      }
      break;

    case IS_SUBSCRIBE:
      if (value == null) {
        unsetIsSubscribe();
      } else {
        setIsSubscribe((java.lang.Byte)value);
      }
      break;

    case OPENID:
      if (value == null) {
        unsetOpenid();
      } else {
        setOpenid((java.lang.String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((java.lang.String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((java.lang.Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((java.lang.String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((java.lang.String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((java.lang.String)value);
      }
      break;

    case HEADIMGURL:
      if (value == null) {
        unsetHeadimgurl();
      } else {
        setHeadimgurl((java.lang.String)value);
      }
      break;

    case SUBSCRIBE_TIME:
      if (value == null) {
        unsetSubscribeTime();
      } else {
        setSubscribeTime((java.lang.String)value);
      }
      break;

    case UNSUBSCIBE_TIME:
      if (value == null) {
        unsetUnsubscibeTime();
      } else {
        setUnsubscibeTime((java.lang.String)value);
      }
      break;

    case UNIONID:
      if (value == null) {
        unsetUnionid();
      } else {
        setUnionid((java.lang.String)value);
      }
      break;

    case REWARD:
      if (value == null) {
        unsetReward();
      } else {
        setReward((java.lang.Integer)value);
      }
      break;

    case AUTO_SYNC_INFO:
      if (value == null) {
        unsetAutoSyncInfo();
      } else {
        setAutoSyncInfo((java.lang.Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case WECHAT_ID:
      return getWechatId();

    case GROUP_ID:
      return getGroupId();

    case SYSUSER_ID:
      return getSysuserId();

    case IS_SUBSCRIBE:
      return getIsSubscribe();

    case OPENID:
      return getOpenid();

    case NICKNAME:
      return getNickname();

    case SEX:
      return getSex();

    case CITY:
      return getCity();

    case COUNTRY:
      return getCountry();

    case PROVINCE:
      return getProvince();

    case LANGUAGE:
      return getLanguage();

    case HEADIMGURL:
      return getHeadimgurl();

    case SUBSCRIBE_TIME:
      return getSubscribeTime();

    case UNSUBSCIBE_TIME:
      return getUnsubscibeTime();

    case UNIONID:
      return getUnionid();

    case REWARD:
      return getReward();

    case AUTO_SYNC_INFO:
      return getAutoSyncInfo();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case SOURCE:
      return getSource();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case WECHAT_ID:
      return isSetWechatId();
    case GROUP_ID:
      return isSetGroupId();
    case SYSUSER_ID:
      return isSetSysuserId();
    case IS_SUBSCRIBE:
      return isSetIsSubscribe();
    case OPENID:
      return isSetOpenid();
    case NICKNAME:
      return isSetNickname();
    case SEX:
      return isSetSex();
    case CITY:
      return isSetCity();
    case COUNTRY:
      return isSetCountry();
    case PROVINCE:
      return isSetProvince();
    case LANGUAGE:
      return isSetLanguage();
    case HEADIMGURL:
      return isSetHeadimgurl();
    case SUBSCRIBE_TIME:
      return isSetSubscribeTime();
    case UNSUBSCIBE_TIME:
      return isSetUnsubscibeTime();
    case UNIONID:
      return isSetUnionid();
    case REWARD:
      return isSetReward();
    case AUTO_SYNC_INFO:
      return isSetAutoSyncInfo();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case SOURCE:
      return isSetSource();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserWxUserDO)
      return this.equals((UserWxUserDO)that);
    return false;
  }

  public boolean equals(UserWxUserDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_sysuserId = true && this.isSetSysuserId();
    boolean that_present_sysuserId = true && that.isSetSysuserId();
    if (this_present_sysuserId || that_present_sysuserId) {
      if (!(this_present_sysuserId && that_present_sysuserId))
        return false;
      if (this.sysuserId != that.sysuserId)
        return false;
    }

    boolean this_present_isSubscribe = true && this.isSetIsSubscribe();
    boolean that_present_isSubscribe = true && that.isSetIsSubscribe();
    if (this_present_isSubscribe || that_present_isSubscribe) {
      if (!(this_present_isSubscribe && that_present_isSubscribe))
        return false;
      if (this.isSubscribe != that.isSubscribe)
        return false;
    }

    boolean this_present_openid = true && this.isSetOpenid();
    boolean that_present_openid = true && that.isSetOpenid();
    if (this_present_openid || that_present_openid) {
      if (!(this_present_openid && that_present_openid))
        return false;
      if (!this.openid.equals(that.openid))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_headimgurl = true && this.isSetHeadimgurl();
    boolean that_present_headimgurl = true && that.isSetHeadimgurl();
    if (this_present_headimgurl || that_present_headimgurl) {
      if (!(this_present_headimgurl && that_present_headimgurl))
        return false;
      if (!this.headimgurl.equals(that.headimgurl))
        return false;
    }

    boolean this_present_subscribeTime = true && this.isSetSubscribeTime();
    boolean that_present_subscribeTime = true && that.isSetSubscribeTime();
    if (this_present_subscribeTime || that_present_subscribeTime) {
      if (!(this_present_subscribeTime && that_present_subscribeTime))
        return false;
      if (!this.subscribeTime.equals(that.subscribeTime))
        return false;
    }

    boolean this_present_unsubscibeTime = true && this.isSetUnsubscibeTime();
    boolean that_present_unsubscibeTime = true && that.isSetUnsubscibeTime();
    if (this_present_unsubscibeTime || that_present_unsubscibeTime) {
      if (!(this_present_unsubscibeTime && that_present_unsubscibeTime))
        return false;
      if (!this.unsubscibeTime.equals(that.unsubscibeTime))
        return false;
    }

    boolean this_present_unionid = true && this.isSetUnionid();
    boolean that_present_unionid = true && that.isSetUnionid();
    if (this_present_unionid || that_present_unionid) {
      if (!(this_present_unionid && that_present_unionid))
        return false;
      if (!this.unionid.equals(that.unionid))
        return false;
    }

    boolean this_present_reward = true && this.isSetReward();
    boolean that_present_reward = true && that.isSetReward();
    if (this_present_reward || that_present_reward) {
      if (!(this_present_reward && that_present_reward))
        return false;
      if (this.reward != that.reward)
        return false;
    }

    boolean this_present_autoSyncInfo = true && this.isSetAutoSyncInfo();
    boolean that_present_autoSyncInfo = true && that.isSetAutoSyncInfo();
    if (this_present_autoSyncInfo || that_present_autoSyncInfo) {
      if (!(this_present_autoSyncInfo && that_present_autoSyncInfo))
        return false;
      if (this.autoSyncInfo != that.autoSyncInfo)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetGroupId()) ? 131071 : 524287);
    if (isSetGroupId())
      hashCode = hashCode * 8191 + groupId;

    hashCode = hashCode * 8191 + ((isSetSysuserId()) ? 131071 : 524287);
    if (isSetSysuserId())
      hashCode = hashCode * 8191 + sysuserId;

    hashCode = hashCode * 8191 + ((isSetIsSubscribe()) ? 131071 : 524287);
    if (isSetIsSubscribe())
      hashCode = hashCode * 8191 + (int) (isSubscribe);

    hashCode = hashCode * 8191 + ((isSetOpenid()) ? 131071 : 524287);
    if (isSetOpenid())
      hashCode = hashCode * 8191 + openid.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
    if (isSetCountry())
      hashCode = hashCode * 8191 + country.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
    if (isSetProvince())
      hashCode = hashCode * 8191 + province.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguage()) ? 131071 : 524287);
    if (isSetLanguage())
      hashCode = hashCode * 8191 + language.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadimgurl()) ? 131071 : 524287);
    if (isSetHeadimgurl())
      hashCode = hashCode * 8191 + headimgurl.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubscribeTime()) ? 131071 : 524287);
    if (isSetSubscribeTime())
      hashCode = hashCode * 8191 + subscribeTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnsubscibeTime()) ? 131071 : 524287);
    if (isSetUnsubscibeTime())
      hashCode = hashCode * 8191 + unsubscibeTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
    if (isSetUnionid())
      hashCode = hashCode * 8191 + unionid.hashCode();

    hashCode = hashCode * 8191 + ((isSetReward()) ? 131071 : 524287);
    if (isSetReward())
      hashCode = hashCode * 8191 + reward;

    hashCode = hashCode * 8191 + ((isSetAutoSyncInfo()) ? 131071 : 524287);
    if (isSetAutoSyncInfo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(autoSyncInfo);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source);

    return hashCode;
  }

  @Override
  public int compareTo(UserWxUserDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysuserId()).compareTo(other.isSetSysuserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysuserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysuserId, other.sysuserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSubscribe()).compareTo(other.isSetIsSubscribe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubscribe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubscribe, other.isSubscribe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpenid()).compareTo(other.isSetOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openid, other.openid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadimgurl()).compareTo(other.isSetHeadimgurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadimgurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headimgurl, other.headimgurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubscribeTime()).compareTo(other.isSetSubscribeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribeTime, other.subscribeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnsubscibeTime()).compareTo(other.isSetUnsubscibeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsubscibeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsubscibeTime, other.unsubscibeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutoSyncInfo()).compareTo(other.isSetAutoSyncInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoSyncInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoSyncInfo, other.autoSyncInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserWxUserDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetSysuserId()) {
      if (!first) sb.append(", ");
      sb.append("sysuserId:");
      sb.append(this.sysuserId);
      first = false;
    }
    if (isSetIsSubscribe()) {
      if (!first) sb.append(", ");
      sb.append("isSubscribe:");
      sb.append(this.isSubscribe);
      first = false;
    }
    if (isSetOpenid()) {
      if (!first) sb.append(", ");
      sb.append("openid:");
      if (this.openid == null) {
        sb.append("null");
      } else {
        sb.append(this.openid);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetProvince()) {
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    if (isSetHeadimgurl()) {
      if (!first) sb.append(", ");
      sb.append("headimgurl:");
      if (this.headimgurl == null) {
        sb.append("null");
      } else {
        sb.append(this.headimgurl);
      }
      first = false;
    }
    if (isSetSubscribeTime()) {
      if (!first) sb.append(", ");
      sb.append("subscribeTime:");
      if (this.subscribeTime == null) {
        sb.append("null");
      } else {
        sb.append(this.subscribeTime);
      }
      first = false;
    }
    if (isSetUnsubscibeTime()) {
      if (!first) sb.append(", ");
      sb.append("unsubscibeTime:");
      if (this.unsubscibeTime == null) {
        sb.append("null");
      } else {
        sb.append(this.unsubscibeTime);
      }
      first = false;
    }
    if (isSetUnionid()) {
      if (!first) sb.append(", ");
      sb.append("unionid:");
      if (this.unionid == null) {
        sb.append("null");
      } else {
        sb.append(this.unionid);
      }
      first = false;
    }
    if (isSetReward()) {
      if (!first) sb.append(", ");
      sb.append("reward:");
      sb.append(this.reward);
      first = false;
    }
    if (isSetAutoSyncInfo()) {
      if (!first) sb.append(", ");
      sb.append("autoSyncInfo:");
      sb.append(this.autoSyncInfo);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserWxUserDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserWxUserDOStandardScheme getScheme() {
      return new UserWxUserDOStandardScheme();
    }
  }

  private static class UserWxUserDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserWxUserDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserWxUserDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SYSUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sysuserId = iprot.readI32();
              struct.setSysuserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SUBSCRIBE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isSubscribe = iprot.readByte();
              struct.setIsSubscribeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openid = iprot.readString();
              struct.setOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HEADIMGURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headimgurl = iprot.readString();
              struct.setHeadimgurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SUBSCRIBE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subscribeTime = iprot.readString();
              struct.setSubscribeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UNSUBSCIBE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unsubscibeTime = iprot.readString();
              struct.setUnsubscibeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UNIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionid = iprot.readString();
              struct.setUnionidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reward = iprot.readI32();
              struct.setRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AUTO_SYNC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.autoSyncInfo = iprot.readDouble();
              struct.setAutoSyncInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.source = iprot.readDouble();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserWxUserDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSysuserId()) {
        oprot.writeFieldBegin(SYSUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.sysuserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSubscribe()) {
        oprot.writeFieldBegin(IS_SUBSCRIBE_FIELD_DESC);
        oprot.writeByte(struct.isSubscribe);
        oprot.writeFieldEnd();
      }
      if (struct.openid != null) {
        if (struct.isSetOpenid()) {
          oprot.writeFieldBegin(OPENID_FIELD_DESC);
          oprot.writeString(struct.openid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeString(struct.country);
          oprot.writeFieldEnd();
        }
      }
      if (struct.province != null) {
        if (struct.isSetProvince()) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headimgurl != null) {
        if (struct.isSetHeadimgurl()) {
          oprot.writeFieldBegin(HEADIMGURL_FIELD_DESC);
          oprot.writeString(struct.headimgurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscribeTime != null) {
        if (struct.isSetSubscribeTime()) {
          oprot.writeFieldBegin(SUBSCRIBE_TIME_FIELD_DESC);
          oprot.writeString(struct.subscribeTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unsubscibeTime != null) {
        if (struct.isSetUnsubscibeTime()) {
          oprot.writeFieldBegin(UNSUBSCIBE_TIME_FIELD_DESC);
          oprot.writeString(struct.unsubscibeTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unionid != null) {
        if (struct.isSetUnionid()) {
          oprot.writeFieldBegin(UNIONID_FIELD_DESC);
          oprot.writeString(struct.unionid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReward()) {
        oprot.writeFieldBegin(REWARD_FIELD_DESC);
        oprot.writeI32(struct.reward);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAutoSyncInfo()) {
        oprot.writeFieldBegin(AUTO_SYNC_INFO_FIELD_DESC);
        oprot.writeDouble(struct.autoSyncInfo);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeDouble(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserWxUserDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserWxUserDOTupleScheme getScheme() {
      return new UserWxUserDOTupleScheme();
    }
  }

  private static class UserWxUserDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserWxUserDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserWxUserDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetWechatId()) {
        optionals.set(1);
      }
      if (struct.isSetGroupId()) {
        optionals.set(2);
      }
      if (struct.isSetSysuserId()) {
        optionals.set(3);
      }
      if (struct.isSetIsSubscribe()) {
        optionals.set(4);
      }
      if (struct.isSetOpenid()) {
        optionals.set(5);
      }
      if (struct.isSetNickname()) {
        optionals.set(6);
      }
      if (struct.isSetSex()) {
        optionals.set(7);
      }
      if (struct.isSetCity()) {
        optionals.set(8);
      }
      if (struct.isSetCountry()) {
        optionals.set(9);
      }
      if (struct.isSetProvince()) {
        optionals.set(10);
      }
      if (struct.isSetLanguage()) {
        optionals.set(11);
      }
      if (struct.isSetHeadimgurl()) {
        optionals.set(12);
      }
      if (struct.isSetSubscribeTime()) {
        optionals.set(13);
      }
      if (struct.isSetUnsubscibeTime()) {
        optionals.set(14);
      }
      if (struct.isSetUnionid()) {
        optionals.set(15);
      }
      if (struct.isSetReward()) {
        optionals.set(16);
      }
      if (struct.isSetAutoSyncInfo()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(19);
      }
      if (struct.isSetSource()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetSysuserId()) {
        oprot.writeI32(struct.sysuserId);
      }
      if (struct.isSetIsSubscribe()) {
        oprot.writeByte(struct.isSubscribe);
      }
      if (struct.isSetOpenid()) {
        oprot.writeString(struct.openid);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetHeadimgurl()) {
        oprot.writeString(struct.headimgurl);
      }
      if (struct.isSetSubscribeTime()) {
        oprot.writeString(struct.subscribeTime);
      }
      if (struct.isSetUnsubscibeTime()) {
        oprot.writeString(struct.unsubscibeTime);
      }
      if (struct.isSetUnionid()) {
        oprot.writeString(struct.unionid);
      }
      if (struct.isSetReward()) {
        oprot.writeI32(struct.reward);
      }
      if (struct.isSetAutoSyncInfo()) {
        oprot.writeDouble(struct.autoSyncInfo);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetSource()) {
        oprot.writeDouble(struct.source);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserWxUserDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sysuserId = iprot.readI32();
        struct.setSysuserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isSubscribe = iprot.readByte();
        struct.setIsSubscribeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openid = iprot.readString();
        struct.setOpenidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.headimgurl = iprot.readString();
        struct.setHeadimgurlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.subscribeTime = iprot.readString();
        struct.setSubscribeTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.unsubscibeTime = iprot.readString();
        struct.setUnsubscibeTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unionid = iprot.readString();
        struct.setUnionidIsSet(true);
      }
      if (incoming.get(16)) {
        struct.reward = iprot.readI32();
        struct.setRewardIsSet(true);
      }
      if (incoming.get(17)) {
        struct.autoSyncInfo = iprot.readDouble();
        struct.setAutoSyncInfoIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.source = iprot.readDouble();
        struct.setSourceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

