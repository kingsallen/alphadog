/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.common.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-23")
public class Condition implements org.apache.thrift.TBase<Condition, Condition._Fields>, java.io.Serializable, Cloneable, Comparable<Condition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Condition");

  private static final org.apache.thrift.protocol.TField INNER_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("innerCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("valueCondition", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConditionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConditionTupleSchemeFactory();

  public InnerCondition innerCondition; // optional
  public ValueCondition valueCondition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INNER_CONDITION((short)1, "innerCondition"),
    VALUE_CONDITION((short)2, "valueCondition");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INNER_CONDITION
          return INNER_CONDITION;
        case 2: // VALUE_CONDITION
          return VALUE_CONDITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INNER_CONDITION,_Fields.VALUE_CONDITION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INNER_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("innerCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnerCondition.class)));
    tmpMap.put(_Fields.VALUE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("valueCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ValueCondition.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Condition.class, metaDataMap);
  }

  public Condition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Condition(Condition other) {
    if (other.isSetInnerCondition()) {
      this.innerCondition = new InnerCondition(other.innerCondition);
    }
    if (other.isSetValueCondition()) {
      this.valueCondition = new ValueCondition(other.valueCondition);
    }
  }

  public Condition deepCopy() {
    return new Condition(this);
  }

  @Override
  public void clear() {
    this.innerCondition = null;
    this.valueCondition = null;
  }

  public InnerCondition getInnerCondition() {
    return this.innerCondition;
  }

  public Condition setInnerCondition(InnerCondition innerCondition) {
    this.innerCondition = innerCondition;
    return this;
  }

  public void unsetInnerCondition() {
    this.innerCondition = null;
  }

  /** Returns true if field innerCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerCondition() {
    return this.innerCondition != null;
  }

  public void setInnerConditionIsSet(boolean value) {
    if (!value) {
      this.innerCondition = null;
    }
  }

  public ValueCondition getValueCondition() {
    return this.valueCondition;
  }

  public Condition setValueCondition(ValueCondition valueCondition) {
    this.valueCondition = valueCondition;
    return this;
  }

  public void unsetValueCondition() {
    this.valueCondition = null;
  }

  /** Returns true if field valueCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetValueCondition() {
    return this.valueCondition != null;
  }

  public void setValueConditionIsSet(boolean value) {
    if (!value) {
      this.valueCondition = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INNER_CONDITION:
      if (value == null) {
        unsetInnerCondition();
      } else {
        setInnerCondition((InnerCondition)value);
      }
      break;

    case VALUE_CONDITION:
      if (value == null) {
        unsetValueCondition();
      } else {
        setValueCondition((ValueCondition)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INNER_CONDITION:
      return getInnerCondition();

    case VALUE_CONDITION:
      return getValueCondition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INNER_CONDITION:
      return isSetInnerCondition();
    case VALUE_CONDITION:
      return isSetValueCondition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Condition)
      return this.equals((Condition)that);
    return false;
  }

  public boolean equals(Condition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_innerCondition = true && this.isSetInnerCondition();
    boolean that_present_innerCondition = true && that.isSetInnerCondition();
    if (this_present_innerCondition || that_present_innerCondition) {
      if (!(this_present_innerCondition && that_present_innerCondition))
        return false;
      if (!this.innerCondition.equals(that.innerCondition))
        return false;
    }

    boolean this_present_valueCondition = true && this.isSetValueCondition();
    boolean that_present_valueCondition = true && that.isSetValueCondition();
    if (this_present_valueCondition || that_present_valueCondition) {
      if (!(this_present_valueCondition && that_present_valueCondition))
        return false;
      if (!this.valueCondition.equals(that.valueCondition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInnerCondition()) ? 131071 : 524287);
    if (isSetInnerCondition())
      hashCode = hashCode * 8191 + innerCondition.hashCode();

    hashCode = hashCode * 8191 + ((isSetValueCondition()) ? 131071 : 524287);
    if (isSetValueCondition())
      hashCode = hashCode * 8191 + valueCondition.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Condition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInnerCondition()).compareTo(other.isSetInnerCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerCondition, other.innerCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueCondition()).compareTo(other.isSetValueCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueCondition, other.valueCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Condition(");
    boolean first = true;

    if (isSetInnerCondition()) {
      sb.append("innerCondition:");
      if (this.innerCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.innerCondition);
      }
      first = false;
    }
    if (isSetValueCondition()) {
      if (!first) sb.append(", ");
      sb.append("valueCondition:");
      if (this.valueCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.valueCondition);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (innerCondition != null) {
      innerCondition.validate();
    }
    if (valueCondition != null) {
      valueCondition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConditionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConditionStandardScheme getScheme() {
      return new ConditionStandardScheme();
    }
  }

  private static class ConditionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Condition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Condition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INNER_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.innerCondition = new InnerCondition();
              struct.innerCondition.read(iprot);
              struct.setInnerConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valueCondition = new ValueCondition();
              struct.valueCondition.read(iprot);
              struct.setValueConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Condition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.innerCondition != null) {
        if (struct.isSetInnerCondition()) {
          oprot.writeFieldBegin(INNER_CONDITION_FIELD_DESC);
          struct.innerCondition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.valueCondition != null) {
        if (struct.isSetValueCondition()) {
          oprot.writeFieldBegin(VALUE_CONDITION_FIELD_DESC);
          struct.valueCondition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConditionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConditionTupleScheme getScheme() {
      return new ConditionTupleScheme();
    }
  }

  private static class ConditionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Condition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Condition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInnerCondition()) {
        optionals.set(0);
      }
      if (struct.isSetValueCondition()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetInnerCondition()) {
        struct.innerCondition.write(oprot);
      }
      if (struct.isSetValueCondition()) {
        struct.valueCondition.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Condition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.innerCondition = new InnerCondition();
        struct.innerCondition.read(iprot);
        struct.setInnerConditionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.valueCondition = new ValueCondition();
        struct.valueCondition.read(iprot);
        struct.setValueConditionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

