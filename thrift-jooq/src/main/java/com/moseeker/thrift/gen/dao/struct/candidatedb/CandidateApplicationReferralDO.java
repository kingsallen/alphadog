/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.candidatedb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-05")
public class CandidateApplicationReferralDO implements org.apache.thrift.TBase<CandidateApplicationReferralDO, CandidateApplicationReferralDO._Fields>, java.io.Serializable, Cloneable, Comparable<CandidateApplicationReferralDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CandidateApplicationReferralDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PSC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pscId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECT_RFERRAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("directRferralUserId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CandidateApplicationReferralDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CandidateApplicationReferralDOTupleSchemeFactory();

  public int id; // optional
  public int applicationId; // optional
  public int pscId; // optional
  public int directRferralUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APPLICATION_ID((short)2, "applicationId"),
    PSC_ID((short)3, "pscId"),
    DIRECT_RFERRAL_USER_ID((short)4, "directRferralUserId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APPLICATION_ID
          return APPLICATION_ID;
        case 3: // PSC_ID
          return PSC_ID;
        case 4: // DIRECT_RFERRAL_USER_ID
          return DIRECT_RFERRAL_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __APPLICATIONID_ISSET_ID = 1;
  private static final int __PSCID_ISSET_ID = 2;
  private static final int __DIRECTRFERRALUSERID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.APPLICATION_ID,_Fields.PSC_ID,_Fields.DIRECT_RFERRAL_USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PSC_ID, new org.apache.thrift.meta_data.FieldMetaData("pscId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECT_RFERRAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("directRferralUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CandidateApplicationReferralDO.class, metaDataMap);
  }

  public CandidateApplicationReferralDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CandidateApplicationReferralDO(CandidateApplicationReferralDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.applicationId = other.applicationId;
    this.pscId = other.pscId;
    this.directRferralUserId = other.directRferralUserId;
  }

  public CandidateApplicationReferralDO deepCopy() {
    return new CandidateApplicationReferralDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setApplicationIdIsSet(false);
    this.applicationId = 0;
    setPscIdIsSet(false);
    this.pscId = 0;
    setDirectRferralUserIdIsSet(false);
    this.directRferralUserId = 0;
  }

  public int getId() {
    return this.id;
  }

  public CandidateApplicationReferralDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getApplicationId() {
    return this.applicationId;
  }

  public CandidateApplicationReferralDO setApplicationId(int applicationId) {
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
    return this;
  }

  public void unsetApplicationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  public void setApplicationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
  }

  public int getPscId() {
    return this.pscId;
  }

  public CandidateApplicationReferralDO setPscId(int pscId) {
    this.pscId = pscId;
    setPscIdIsSet(true);
    return this;
  }

  public void unsetPscId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PSCID_ISSET_ID);
  }

  /** Returns true if field pscId is set (has been assigned a value) and false otherwise */
  public boolean isSetPscId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PSCID_ISSET_ID);
  }

  public void setPscIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PSCID_ISSET_ID, value);
  }

  public int getDirectRferralUserId() {
    return this.directRferralUserId;
  }

  public CandidateApplicationReferralDO setDirectRferralUserId(int directRferralUserId) {
    this.directRferralUserId = directRferralUserId;
    setDirectRferralUserIdIsSet(true);
    return this;
  }

  public void unsetDirectRferralUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTRFERRALUSERID_ISSET_ID);
  }

  /** Returns true if field directRferralUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectRferralUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTRFERRALUSERID_ISSET_ID);
  }

  public void setDirectRferralUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTRFERRALUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((Integer)value);
      }
      break;

    case PSC_ID:
      if (value == null) {
        unsetPscId();
      } else {
        setPscId((Integer)value);
      }
      break;

    case DIRECT_RFERRAL_USER_ID:
      if (value == null) {
        unsetDirectRferralUserId();
      } else {
        setDirectRferralUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case APPLICATION_ID:
      return getApplicationId();

    case PSC_ID:
      return getPscId();

    case DIRECT_RFERRAL_USER_ID:
      return getDirectRferralUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APPLICATION_ID:
      return isSetApplicationId();
    case PSC_ID:
      return isSetPscId();
    case DIRECT_RFERRAL_USER_ID:
      return isSetDirectRferralUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CandidateApplicationReferralDO)
      return this.equals((CandidateApplicationReferralDO)that);
    return false;
  }

  public boolean equals(CandidateApplicationReferralDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (this.applicationId != that.applicationId)
        return false;
    }

    boolean this_present_pscId = true && this.isSetPscId();
    boolean that_present_pscId = true && that.isSetPscId();
    if (this_present_pscId || that_present_pscId) {
      if (!(this_present_pscId && that_present_pscId))
        return false;
      if (this.pscId != that.pscId)
        return false;
    }

    boolean this_present_directRferralUserId = true && this.isSetDirectRferralUserId();
    boolean that_present_directRferralUserId = true && that.isSetDirectRferralUserId();
    if (this_present_directRferralUserId || that_present_directRferralUserId) {
      if (!(this_present_directRferralUserId && that_present_directRferralUserId))
        return false;
      if (this.directRferralUserId != that.directRferralUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetApplicationId()) ? 131071 : 524287);
    if (isSetApplicationId())
      hashCode = hashCode * 8191 + applicationId;

    hashCode = hashCode * 8191 + ((isSetPscId()) ? 131071 : 524287);
    if (isSetPscId())
      hashCode = hashCode * 8191 + pscId;

    hashCode = hashCode * 8191 + ((isSetDirectRferralUserId()) ? 131071 : 524287);
    if (isSetDirectRferralUserId())
      hashCode = hashCode * 8191 + directRferralUserId;

    return hashCode;
  }

  @Override
  public int compareTo(CandidateApplicationReferralDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPscId()).compareTo(other.isSetPscId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPscId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pscId, other.pscId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirectRferralUserId()).compareTo(other.isSetDirectRferralUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectRferralUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directRferralUserId, other.directRferralUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CandidateApplicationReferralDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetApplicationId()) {
      if (!first) sb.append(", ");
      sb.append("applicationId:");
      sb.append(this.applicationId);
      first = false;
    }
    if (isSetPscId()) {
      if (!first) sb.append(", ");
      sb.append("pscId:");
      sb.append(this.pscId);
      first = false;
    }
    if (isSetDirectRferralUserId()) {
      if (!first) sb.append(", ");
      sb.append("directRferralUserId:");
      sb.append(this.directRferralUserId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CandidateApplicationReferralDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidateApplicationReferralDOStandardScheme getScheme() {
      return new CandidateApplicationReferralDOStandardScheme();
    }
  }

  private static class CandidateApplicationReferralDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CandidateApplicationReferralDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applicationId = iprot.readI32();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PSC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pscId = iprot.readI32();
              struct.setPscIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECT_RFERRAL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.directRferralUserId = iprot.readI32();
              struct.setDirectRferralUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApplicationId()) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeI32(struct.applicationId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPscId()) {
        oprot.writeFieldBegin(PSC_ID_FIELD_DESC);
        oprot.writeI32(struct.pscId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDirectRferralUserId()) {
        oprot.writeFieldBegin(DIRECT_RFERRAL_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.directRferralUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CandidateApplicationReferralDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidateApplicationReferralDOTupleScheme getScheme() {
      return new CandidateApplicationReferralDOTupleScheme();
    }
  }

  private static class CandidateApplicationReferralDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CandidateApplicationReferralDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationId()) {
        optionals.set(1);
      }
      if (struct.isSetPscId()) {
        optionals.set(2);
      }
      if (struct.isSetDirectRferralUserId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetApplicationId()) {
        oprot.writeI32(struct.applicationId);
      }
      if (struct.isSetPscId()) {
        oprot.writeI32(struct.pscId);
      }
      if (struct.isSetDirectRferralUserId()) {
        oprot.writeI32(struct.directRferralUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationId = iprot.readI32();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pscId = iprot.readI32();
        struct.setPscIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.directRferralUserId = iprot.readI32();
        struct.setDirectRferralUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

