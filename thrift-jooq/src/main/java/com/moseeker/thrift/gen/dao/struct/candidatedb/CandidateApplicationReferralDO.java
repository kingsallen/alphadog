/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.candidatedb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-05")
public class CandidateApplicationReferralDO implements org.apache.thrift.TBase<CandidateApplicationReferralDO, CandidateApplicationReferralDO._Fields>, java.io.Serializable, Cloneable, Comparable<CandidateApplicationReferralDO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CandidateApplicationReferralDO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PSC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pscId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECT_REFERRAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("directReferralUserId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CandidateApplicationReferralDOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CandidateApplicationReferralDOTupleSchemeFactory();

    public int id; // optional
    public int applicationId; // optional
    public int pscId; // optional
    public int directReferralUserId; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short)1, "id"),
        APPLICATION_ID((short)2, "applicationId"),
        PSC_ID((short)3, "pscId"),
        DIRECT_REFERRAL_USER_ID((short)4, "directReferralUserId");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ID
                    return ID;
                case 2: // APPLICATION_ID
                    return APPLICATION_ID;
                case 3: // PSC_ID
                    return PSC_ID;
                case 4: // DIRECT_REFERRAL_USER_ID
                    return DIRECT_REFERRAL_USER_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __APPLICATIONID_ISSET_ID = 1;
    private static final int __PSCID_ISSET_ID = 2;
    private static final int __DIRECTREFERRALUSERID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ID,_Fields.APPLICATION_ID,_Fields.PSC_ID,_Fields.DIRECT_REFERRAL_USER_ID};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PSC_ID, new org.apache.thrift.meta_data.FieldMetaData("pscId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DIRECT_REFERRAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("directReferralUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CandidateApplicationReferralDO.class, metaDataMap);
    }

    public CandidateApplicationReferralDO() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CandidateApplicationReferralDO(CandidateApplicationReferralDO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        this.applicationId = other.applicationId;
        this.pscId = other.pscId;
        this.directReferralUserId = other.directReferralUserId;
    }

    public CandidateApplicationReferralDO deepCopy() {
        return new CandidateApplicationReferralDO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        setApplicationIdIsSet(false);
        this.applicationId = 0;
        setPscIdIsSet(false);
        this.pscId = 0;
        setDirectReferralUserIdIsSet(false);
        this.directReferralUserId = 0;
    }

    public int getId() {
        return this.id;
    }

    public CandidateApplicationReferralDO setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getApplicationId() {
        return this.applicationId;
    }

    public CandidateApplicationReferralDO setApplicationId(int applicationId) {
        this.applicationId = applicationId;
        setApplicationIdIsSet(true);
        return this;
    }

    public void unsetApplicationId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
    }

    public void setApplicationIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
    }

    public int getPscId() {
        return this.pscId;
    }

    public CandidateApplicationReferralDO setPscId(int pscId) {
        this.pscId = pscId;
        setPscIdIsSet(true);
        return this;
    }

    public void unsetPscId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PSCID_ISSET_ID);
    }

    /** Returns true if field pscId is set (has been assigned a value) and false otherwise */
    public boolean isSetPscId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PSCID_ISSET_ID);
    }

    public void setPscIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PSCID_ISSET_ID, value);
    }

    public int getDirectReferralUserId() {
        return this.directReferralUserId;
    }

    public CandidateApplicationReferralDO setDirectReferralUserId(int directReferralUserId) {
        this.directReferralUserId = directReferralUserId;
        setDirectReferralUserIdIsSet(true);
        return this;
    }

    public void unsetDirectReferralUserId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID);
    }

    /** Returns true if field directReferralUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetDirectReferralUserId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID);
    }

    public void setDirectReferralUserIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer)value);
                }
                break;

            case APPLICATION_ID:
                if (value == null) {
                    unsetApplicationId();
                } else {
                    setApplicationId((java.lang.Integer)value);
                }
                break;

            case PSC_ID:
                if (value == null) {
                    unsetPscId();
                } else {
                    setPscId((java.lang.Integer)value);
                }
                break;

            case DIRECT_REFERRAL_USER_ID:
                if (value == null) {
                    unsetDirectReferralUserId();
                } else {
                    setDirectReferralUserId((java.lang.Integer)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case APPLICATION_ID:
                return getApplicationId();

            case PSC_ID:
                return getPscId();

            case DIRECT_REFERRAL_USER_ID:
                return getDirectReferralUserId();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case APPLICATION_ID:
                return isSetApplicationId();
            case PSC_ID:
                return isSetPscId();
            case DIRECT_REFERRAL_USER_ID:
                return isSetDirectReferralUserId();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof CandidateApplicationReferralDO)
            return this.equals((CandidateApplicationReferralDO)that);
        return false;
    }

    public boolean equals(CandidateApplicationReferralDO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_applicationId = true && this.isSetApplicationId();
        boolean that_present_applicationId = true && that.isSetApplicationId();
        if (this_present_applicationId || that_present_applicationId) {
            if (!(this_present_applicationId && that_present_applicationId))
                return false;
            if (this.applicationId != that.applicationId)
                return false;
        }

        boolean this_present_pscId = true && this.isSetPscId();
        boolean that_present_pscId = true && that.isSetPscId();
        if (this_present_pscId || that_present_pscId) {
            if (!(this_present_pscId && that_present_pscId))
                return false;
            if (this.pscId != that.pscId)
                return false;
        }

        boolean this_present_directReferralUserId = true && this.isSetDirectReferralUserId();
        boolean that_present_directReferralUserId = true && that.isSetDirectReferralUserId();
        if (this_present_directReferralUserId || that_present_directReferralUserId) {
            if (!(this_present_directReferralUserId && that_present_directReferralUserId))
                return false;
            if (this.directReferralUserId != that.directReferralUserId)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetApplicationId()) ? 131071 : 524287);
        if (isSetApplicationId())
            hashCode = hashCode * 8191 + applicationId;

        hashCode = hashCode * 8191 + ((isSetPscId()) ? 131071 : 524287);
        if (isSetPscId())
            hashCode = hashCode * 8191 + pscId;

        hashCode = hashCode * 8191 + ((isSetDirectReferralUserId()) ? 131071 : 524287);
        if (isSetDirectReferralUserId())
            hashCode = hashCode * 8191 + directReferralUserId;

        return hashCode;
    }

    @Override
    public int compareTo(CandidateApplicationReferralDO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetApplicationId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPscId()).compareTo(other.isSetPscId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPscId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pscId, other.pscId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDirectReferralUserId()).compareTo(other.isSetDirectReferralUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDirectReferralUserId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directReferralUserId, other.directReferralUserId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("CandidateApplicationReferralDO(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (isSetApplicationId()) {
            if (!first) sb.append(", ");
            sb.append("applicationId:");
            sb.append(this.applicationId);
            first = false;
        }
        if (isSetPscId()) {
            if (!first) sb.append(", ");
            sb.append("pscId:");
            sb.append(this.pscId);
            first = false;
        }
        if (isSetDirectReferralUserId()) {
            if (!first) sb.append(", ");
            sb.append("directReferralUserId:");
            sb.append(this.directReferralUserId);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CandidateApplicationReferralDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CandidateApplicationReferralDOStandardScheme getScheme() {
            return new CandidateApplicationReferralDOStandardScheme();
        }
    }

    private static class CandidateApplicationReferralDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CandidateApplicationReferralDO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // APPLICATION_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.applicationId = iprot.readI32();
                            struct.setApplicationIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PSC_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.pscId = iprot.readI32();
                            struct.setPscIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // DIRECT_REFERRAL_USER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.directReferralUserId = iprot.readI32();
                            struct.setDirectReferralUserIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.isSetApplicationId()) {
                oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
                oprot.writeI32(struct.applicationId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetPscId()) {
                oprot.writeFieldBegin(PSC_ID_FIELD_DESC);
                oprot.writeI32(struct.pscId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDirectReferralUserId()) {
                oprot.writeFieldBegin(DIRECT_REFERRAL_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.directReferralUserId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CandidateApplicationReferralDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CandidateApplicationReferralDOTupleScheme getScheme() {
            return new CandidateApplicationReferralDOTupleScheme();
        }
    }

    private static class CandidateApplicationReferralDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CandidateApplicationReferralDO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetApplicationId()) {
                optionals.set(1);
            }
            if (struct.isSetPscId()) {
                optionals.set(2);
            }
            if (struct.isSetDirectReferralUserId()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetApplicationId()) {
                oprot.writeI32(struct.applicationId);
            }
            if (struct.isSetPscId()) {
                oprot.writeI32(struct.pscId);
            }
            if (struct.isSetDirectReferralUserId()) {
                oprot.writeI32(struct.directReferralUserId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CandidateApplicationReferralDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.applicationId = iprot.readI32();
                struct.setApplicationIdIsSet(true);
            }
            if (incoming.get(2)) {
                struct.pscId = iprot.readI32();
                struct.setPscIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.directReferralUserId = iprot.readI32();
                struct.setDirectReferralUserIdIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

