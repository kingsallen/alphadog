/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class HrHbItemsDO implements org.apache.thrift.TBase<HrHbItemsDO, HrHbItemsDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbItemsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbItemsDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hbConfigId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BINDING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bindingId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxuserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRIGGER_WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerWxuserId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbItemsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbItemsDOTupleSchemeFactory();

  public int id; // optional
  public int hbConfigId; // optional
  public int bindingId; // optional
  public int index; // optional
  public double amount; // optional
  public byte status; // optional
  public int wxuserId; // optional
  public String openTime; // optional
  public String createTime; // optional
  public String updateTime; // optional
  public int triggerWxuserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HB_CONFIG_ID((short)2, "hbConfigId"),
    BINDING_ID((short)3, "bindingId"),
    INDEX((short)4, "index"),
    AMOUNT((short)5, "amount"),
    STATUS((short)6, "status"),
    WXUSER_ID((short)7, "wxuserId"),
    OPEN_TIME((short)8, "openTime"),
    CREATE_TIME((short)9, "createTime"),
    UPDATE_TIME((short)10, "updateTime"),
    TRIGGER_WXUSER_ID((short)11, "triggerWxuserId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HB_CONFIG_ID
          return HB_CONFIG_ID;
        case 3: // BINDING_ID
          return BINDING_ID;
        case 4: // INDEX
          return INDEX;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // STATUS
          return STATUS;
        case 7: // WXUSER_ID
          return WXUSER_ID;
        case 8: // OPEN_TIME
          return OPEN_TIME;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // UPDATE_TIME
          return UPDATE_TIME;
        case 11: // TRIGGER_WXUSER_ID
          return TRIGGER_WXUSER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HBCONFIGID_ISSET_ID = 1;
  private static final int __BINDINGID_ISSET_ID = 2;
  private static final int __INDEX_ISSET_ID = 3;
  private static final int __AMOUNT_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __WXUSERID_ISSET_ID = 6;
  private static final int __TRIGGERWXUSERID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HB_CONFIG_ID,_Fields.BINDING_ID,_Fields.INDEX,_Fields.AMOUNT,_Fields.STATUS,_Fields.WXUSER_ID,_Fields.OPEN_TIME,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.TRIGGER_WXUSER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hbConfigId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BINDING_ID, new org.apache.thrift.meta_data.FieldMetaData("bindingId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("wxuserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("openTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIGGER_WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("triggerWxuserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbItemsDO.class, metaDataMap);
  }

  public HrHbItemsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbItemsDO(HrHbItemsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.hbConfigId = other.hbConfigId;
    this.bindingId = other.bindingId;
    this.index = other.index;
    this.amount = other.amount;
    this.status = other.status;
    this.wxuserId = other.wxuserId;
    if (other.isSetOpenTime()) {
      this.openTime = other.openTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.triggerWxuserId = other.triggerWxuserId;
  }

  public HrHbItemsDO deepCopy() {
    return new HrHbItemsDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setHbConfigIdIsSet(false);
    this.hbConfigId = 0;
    setBindingIdIsSet(false);
    this.bindingId = 0;
    setIndexIsSet(false);
    this.index = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setWxuserIdIsSet(false);
    this.wxuserId = 0;
    this.openTime = null;
    this.createTime = null;
    this.updateTime = null;
    setTriggerWxuserIdIsSet(false);
    this.triggerWxuserId = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbItemsDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getHbConfigId() {
    return this.hbConfigId;
  }

  public HrHbItemsDO setHbConfigId(int hbConfigId) {
    this.hbConfigId = hbConfigId;
    setHbConfigIdIsSet(true);
    return this;
  }

  public void unsetHbConfigId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HBCONFIGID_ISSET_ID);
  }

  /** Returns true if field hbConfigId is set (has been assigned a value) and false otherwise */
  public boolean isSetHbConfigId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HBCONFIGID_ISSET_ID);
  }

  public void setHbConfigIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HBCONFIGID_ISSET_ID, value);
  }

  public int getBindingId() {
    return this.bindingId;
  }

  public HrHbItemsDO setBindingId(int bindingId) {
    this.bindingId = bindingId;
    setBindingIdIsSet(true);
    return this;
  }

  public void unsetBindingId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINDINGID_ISSET_ID);
  }

  /** Returns true if field bindingId is set (has been assigned a value) and false otherwise */
  public boolean isSetBindingId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINDINGID_ISSET_ID);
  }

  public void setBindingIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINDINGID_ISSET_ID, value);
  }

  public int getIndex() {
    return this.index;
  }

  public HrHbItemsDO setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public HrHbItemsDO setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public byte getStatus() {
    return this.status;
  }

  public HrHbItemsDO setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getWxuserId() {
    return this.wxuserId;
  }

  public HrHbItemsDO setWxuserId(int wxuserId) {
    this.wxuserId = wxuserId;
    setWxuserIdIsSet(true);
    return this;
  }

  public void unsetWxuserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WXUSERID_ISSET_ID);
  }

  /** Returns true if field wxuserId is set (has been assigned a value) and false otherwise */
  public boolean isSetWxuserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WXUSERID_ISSET_ID);
  }

  public void setWxuserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WXUSERID_ISSET_ID, value);
  }

  public String getOpenTime() {
    return this.openTime;
  }

  public HrHbItemsDO setOpenTime(String openTime) {
    this.openTime = openTime;
    return this;
  }

  public void unsetOpenTime() {
    this.openTime = null;
  }

  /** Returns true if field openTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTime() {
    return this.openTime != null;
  }

  public void setOpenTimeIsSet(boolean value) {
    if (!value) {
      this.openTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HrHbItemsDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public HrHbItemsDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getTriggerWxuserId() {
    return this.triggerWxuserId;
  }

  public HrHbItemsDO setTriggerWxuserId(int triggerWxuserId) {
    this.triggerWxuserId = triggerWxuserId;
    setTriggerWxuserIdIsSet(true);
    return this;
  }

  public void unsetTriggerWxuserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIGGERWXUSERID_ISSET_ID);
  }

  /** Returns true if field triggerWxuserId is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerWxuserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIGGERWXUSERID_ISSET_ID);
  }

  public void setTriggerWxuserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIGGERWXUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HB_CONFIG_ID:
      if (value == null) {
        unsetHbConfigId();
      } else {
        setHbConfigId((Integer)value);
      }
      break;

    case BINDING_ID:
      if (value == null) {
        unsetBindingId();
      } else {
        setBindingId((Integer)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Byte)value);
      }
      break;

    case WXUSER_ID:
      if (value == null) {
        unsetWxuserId();
      } else {
        setWxuserId((Integer)value);
      }
      break;

    case OPEN_TIME:
      if (value == null) {
        unsetOpenTime();
      } else {
        setOpenTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case TRIGGER_WXUSER_ID:
      if (value == null) {
        unsetTriggerWxuserId();
      } else {
        setTriggerWxuserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HB_CONFIG_ID:
      return getHbConfigId();

    case BINDING_ID:
      return getBindingId();

    case INDEX:
      return getIndex();

    case AMOUNT:
      return getAmount();

    case STATUS:
      return getStatus();

    case WXUSER_ID:
      return getWxuserId();

    case OPEN_TIME:
      return getOpenTime();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case TRIGGER_WXUSER_ID:
      return getTriggerWxuserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HB_CONFIG_ID:
      return isSetHbConfigId();
    case BINDING_ID:
      return isSetBindingId();
    case INDEX:
      return isSetIndex();
    case AMOUNT:
      return isSetAmount();
    case STATUS:
      return isSetStatus();
    case WXUSER_ID:
      return isSetWxuserId();
    case OPEN_TIME:
      return isSetOpenTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case TRIGGER_WXUSER_ID:
      return isSetTriggerWxuserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbItemsDO)
      return this.equals((HrHbItemsDO)that);
    return false;
  }

  public boolean equals(HrHbItemsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hbConfigId = true && this.isSetHbConfigId();
    boolean that_present_hbConfigId = true && that.isSetHbConfigId();
    if (this_present_hbConfigId || that_present_hbConfigId) {
      if (!(this_present_hbConfigId && that_present_hbConfigId))
        return false;
      if (this.hbConfigId != that.hbConfigId)
        return false;
    }

    boolean this_present_bindingId = true && this.isSetBindingId();
    boolean that_present_bindingId = true && that.isSetBindingId();
    if (this_present_bindingId || that_present_bindingId) {
      if (!(this_present_bindingId && that_present_bindingId))
        return false;
      if (this.bindingId != that.bindingId)
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_wxuserId = true && this.isSetWxuserId();
    boolean that_present_wxuserId = true && that.isSetWxuserId();
    if (this_present_wxuserId || that_present_wxuserId) {
      if (!(this_present_wxuserId && that_present_wxuserId))
        return false;
      if (this.wxuserId != that.wxuserId)
        return false;
    }

    boolean this_present_openTime = true && this.isSetOpenTime();
    boolean that_present_openTime = true && that.isSetOpenTime();
    if (this_present_openTime || that_present_openTime) {
      if (!(this_present_openTime && that_present_openTime))
        return false;
      if (!this.openTime.equals(that.openTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_triggerWxuserId = true && this.isSetTriggerWxuserId();
    boolean that_present_triggerWxuserId = true && that.isSetTriggerWxuserId();
    if (this_present_triggerWxuserId || that_present_triggerWxuserId) {
      if (!(this_present_triggerWxuserId && that_present_triggerWxuserId))
        return false;
      if (this.triggerWxuserId != that.triggerWxuserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetHbConfigId()) ? 131071 : 524287);
    if (isSetHbConfigId())
      hashCode = hashCode * 8191 + hbConfigId;

    hashCode = hashCode * 8191 + ((isSetBindingId()) ? 131071 : 524287);
    if (isSetBindingId())
      hashCode = hashCode * 8191 + bindingId;

    hashCode = hashCode * 8191 + ((isSetIndex()) ? 131071 : 524287);
    if (isSetIndex())
      hashCode = hashCode * 8191 + index;

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetWxuserId()) ? 131071 : 524287);
    if (isSetWxuserId())
      hashCode = hashCode * 8191 + wxuserId;

    hashCode = hashCode * 8191 + ((isSetOpenTime()) ? 131071 : 524287);
    if (isSetOpenTime())
      hashCode = hashCode * 8191 + openTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetTriggerWxuserId()) ? 131071 : 524287);
    if (isSetTriggerWxuserId())
      hashCode = hashCode * 8191 + triggerWxuserId;

    return hashCode;
  }

  @Override
  public int compareTo(HrHbItemsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbConfigId()).compareTo(other.isSetHbConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbConfigId, other.hbConfigId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindingId()).compareTo(other.isSetBindingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindingId, other.bindingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWxuserId()).compareTo(other.isSetWxuserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxuserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxuserId, other.wxuserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTime()).compareTo(other.isSetOpenTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTime, other.openTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerWxuserId()).compareTo(other.isSetTriggerWxuserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerWxuserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerWxuserId, other.triggerWxuserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrHbItemsDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHbConfigId()) {
      if (!first) sb.append(", ");
      sb.append("hbConfigId:");
      sb.append(this.hbConfigId);
      first = false;
    }
    if (isSetBindingId()) {
      if (!first) sb.append(", ");
      sb.append("bindingId:");
      sb.append(this.bindingId);
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetWxuserId()) {
      if (!first) sb.append(", ");
      sb.append("wxuserId:");
      sb.append(this.wxuserId);
      first = false;
    }
    if (isSetOpenTime()) {
      if (!first) sb.append(", ");
      sb.append("openTime:");
      if (this.openTime == null) {
        sb.append("null");
      } else {
        sb.append(this.openTime);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetTriggerWxuserId()) {
      if (!first) sb.append(", ");
      sb.append("triggerWxuserId:");
      sb.append(this.triggerWxuserId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbItemsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbItemsDOStandardScheme getScheme() {
      return new HrHbItemsDOStandardScheme();
    }
  }

  private static class HrHbItemsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbItemsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HB_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hbConfigId = iprot.readI32();
              struct.setHbConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BINDING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bindingId = iprot.readI32();
              struct.setBindingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wxuserId = iprot.readI32();
              struct.setWxuserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openTime = iprot.readString();
              struct.setOpenTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRIGGER_WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.triggerWxuserId = iprot.readI32();
              struct.setTriggerWxuserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHbConfigId()) {
        oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.hbConfigId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBindingId()) {
        oprot.writeFieldBegin(BINDING_ID_FIELD_DESC);
        oprot.writeI32(struct.bindingId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex()) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWxuserId()) {
        oprot.writeFieldBegin(WXUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.wxuserId);
        oprot.writeFieldEnd();
      }
      if (struct.openTime != null) {
        if (struct.isSetOpenTime()) {
          oprot.writeFieldBegin(OPEN_TIME_FIELD_DESC);
          oprot.writeString(struct.openTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTriggerWxuserId()) {
        oprot.writeFieldBegin(TRIGGER_WXUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.triggerWxuserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbItemsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbItemsDOTupleScheme getScheme() {
      return new HrHbItemsDOTupleScheme();
    }
  }

  private static class HrHbItemsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbItemsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHbConfigId()) {
        optionals.set(1);
      }
      if (struct.isSetBindingId()) {
        optionals.set(2);
      }
      if (struct.isSetIndex()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetWxuserId()) {
        optionals.set(6);
      }
      if (struct.isSetOpenTime()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(9);
      }
      if (struct.isSetTriggerWxuserId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHbConfigId()) {
        oprot.writeI32(struct.hbConfigId);
      }
      if (struct.isSetBindingId()) {
        oprot.writeI32(struct.bindingId);
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetWxuserId()) {
        oprot.writeI32(struct.wxuserId);
      }
      if (struct.isSetOpenTime()) {
        oprot.writeString(struct.openTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetTriggerWxuserId()) {
        oprot.writeI32(struct.triggerWxuserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbItemsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hbConfigId = iprot.readI32();
        struct.setHbConfigIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bindingId = iprot.readI32();
        struct.setBindingIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wxuserId = iprot.readI32();
        struct.setWxuserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.openTime = iprot.readString();
        struct.setOpenTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.triggerWxuserId = iprot.readI32();
        struct.setTriggerWxuserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

