/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.employee.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-06")
public class EmployeeCustomFieldsConf implements org.apache.thrift.TBase<EmployeeCustomFieldsConf, EmployeeCustomFieldsConf._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeCustomFieldsConf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeCustomFieldsConf");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldValues", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MANDATORY_FIELD_DESC = new org.apache.thrift.protocol.TField("mandatory", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeCustomFieldsConfStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeCustomFieldsConfTupleSchemeFactory();

  public int id; // required
  public int companyId; // required
  public java.lang.String fieldName; // required
  public java.util.List<java.lang.String> fieldValues; // required
  public boolean mandatory; // required
  public int order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    FIELD_NAME((short)3, "fieldName"),
    FIELD_VALUES((short)4, "fieldValues"),
    MANDATORY((short)5, "mandatory"),
    ORDER((short)6, "order");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // FIELD_NAME
          return FIELD_NAME;
        case 4: // FIELD_VALUES
          return FIELD_VALUES;
        case 5: // MANDATORY
          return MANDATORY;
        case 6: // ORDER
          return ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __MANDATORY_ISSET_ID = 2;
  private static final int __ORDER_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_VALUES, new org.apache.thrift.meta_data.FieldMetaData("fieldValues", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MANDATORY, new org.apache.thrift.meta_data.FieldMetaData("mandatory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeCustomFieldsConf.class, metaDataMap);
  }

  public EmployeeCustomFieldsConf() {
  }

  public EmployeeCustomFieldsConf(
    int id,
    int companyId,
    java.lang.String fieldName,
    java.util.List<java.lang.String> fieldValues,
    boolean mandatory,
    int order)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    this.fieldName = fieldName;
    this.fieldValues = fieldValues;
    this.mandatory = mandatory;
    setMandatoryIsSet(true);
    this.order = order;
    setOrderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployeeCustomFieldsConf(EmployeeCustomFieldsConf other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    if (other.isSetFieldValues()) {
      java.util.List<java.lang.String> __this__fieldValues = new java.util.ArrayList<java.lang.String>(other.fieldValues);
      this.fieldValues = __this__fieldValues;
    }
    this.mandatory = other.mandatory;
    this.order = other.order;
  }

  public EmployeeCustomFieldsConf deepCopy() {
    return new EmployeeCustomFieldsConf(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.fieldName = null;
    this.fieldValues = null;
    setMandatoryIsSet(false);
    this.mandatory = false;
    setOrderIsSet(false);
    this.order = 0;
  }

  public int getId() {
    return this.id;
  }

  public EmployeeCustomFieldsConf setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public EmployeeCustomFieldsConf setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public java.lang.String getFieldName() {
    return this.fieldName;
  }

  public EmployeeCustomFieldsConf setFieldName(java.lang.String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public int getFieldValuesSize() {
    return (this.fieldValues == null) ? 0 : this.fieldValues.size();
  }

  public java.util.Iterator<java.lang.String> getFieldValuesIterator() {
    return (this.fieldValues == null) ? null : this.fieldValues.iterator();
  }

  public void addToFieldValues(java.lang.String elem) {
    if (this.fieldValues == null) {
      this.fieldValues = new java.util.ArrayList<java.lang.String>();
    }
    this.fieldValues.add(elem);
  }

  public java.util.List<java.lang.String> getFieldValues() {
    return this.fieldValues;
  }

  public EmployeeCustomFieldsConf setFieldValues(java.util.List<java.lang.String> fieldValues) {
    this.fieldValues = fieldValues;
    return this;
  }

  public void unsetFieldValues() {
    this.fieldValues = null;
  }

  /** Returns true if field fieldValues is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldValues() {
    return this.fieldValues != null;
  }

  public void setFieldValuesIsSet(boolean value) {
    if (!value) {
      this.fieldValues = null;
    }
  }

  public boolean isMandatory() {
    return this.mandatory;
  }

  public EmployeeCustomFieldsConf setMandatory(boolean mandatory) {
    this.mandatory = mandatory;
    setMandatoryIsSet(true);
    return this;
  }

  public void unsetMandatory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANDATORY_ISSET_ID);
  }

  /** Returns true if field mandatory is set (has been assigned a value) and false otherwise */
  public boolean isSetMandatory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANDATORY_ISSET_ID);
  }

  public void setMandatoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANDATORY_ISSET_ID, value);
  }

  public int getOrder() {
    return this.order;
  }

  public EmployeeCustomFieldsConf setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
    return this;
  }

  public void unsetOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((java.lang.String)value);
      }
      break;

    case FIELD_VALUES:
      if (value == null) {
        unsetFieldValues();
      } else {
        setFieldValues((java.util.List<java.lang.String>)value);
      }
      break;

    case MANDATORY:
      if (value == null) {
        unsetMandatory();
      } else {
        setMandatory((java.lang.Boolean)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case FIELD_NAME:
      return getFieldName();

    case FIELD_VALUES:
      return getFieldValues();

    case MANDATORY:
      return isMandatory();

    case ORDER:
      return getOrder();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case FIELD_NAME:
      return isSetFieldName();
    case FIELD_VALUES:
      return isSetFieldValues();
    case MANDATORY:
      return isSetMandatory();
    case ORDER:
      return isSetOrder();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EmployeeCustomFieldsConf)
      return this.equals((EmployeeCustomFieldsConf)that);
    return false;
  }

  public boolean equals(EmployeeCustomFieldsConf that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true;
    boolean that_present_companyId = true;
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_fieldValues = true && this.isSetFieldValues();
    boolean that_present_fieldValues = true && that.isSetFieldValues();
    if (this_present_fieldValues || that_present_fieldValues) {
      if (!(this_present_fieldValues && that_present_fieldValues))
        return false;
      if (!this.fieldValues.equals(that.fieldValues))
        return false;
    }

    boolean this_present_mandatory = true;
    boolean that_present_mandatory = true;
    if (this_present_mandatory || that_present_mandatory) {
      if (!(this_present_mandatory && that_present_mandatory))
        return false;
      if (this.mandatory != that.mandatory)
        return false;
    }

    boolean this_present_order = true;
    boolean that_present_order = true;
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
    if (isSetFieldName())
      hashCode = hashCode * 8191 + fieldName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldValues()) ? 131071 : 524287);
    if (isSetFieldValues())
      hashCode = hashCode * 8191 + fieldValues.hashCode();

    hashCode = hashCode * 8191 + ((mandatory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + order;

    return hashCode;
  }

  @Override
  public int compareTo(EmployeeCustomFieldsConf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFieldValues()).compareTo(other.isSetFieldValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldValues, other.fieldValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMandatory()).compareTo(other.isSetMandatory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMandatory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mandatory, other.mandatory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeCustomFieldsConf(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyId:");
    sb.append(this.companyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldValues:");
    if (this.fieldValues == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mandatory:");
    sb.append(this.mandatory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    sb.append(this.order);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'companyId' because it's a primitive and you chose the non-beans generator.
    if (fieldName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fieldName' was not present! Struct: " + toString());
    }
    if (fieldValues == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fieldValues' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mandatory' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'order' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeCustomFieldsConfStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeCustomFieldsConfStandardScheme getScheme() {
      return new EmployeeCustomFieldsConfStandardScheme();
    }
  }

  private static class EmployeeCustomFieldsConfStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeCustomFieldsConf> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeCustomFieldsConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.fieldValues = new java.util.ArrayList<java.lang.String>(_list26.size);
                java.lang.String _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readString();
                  struct.fieldValues.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setFieldValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANDATORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mandatory = iprot.readBool();
              struct.setMandatoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompanyId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'companyId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMandatory()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mandatory' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOrder()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'order' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeCustomFieldsConf struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
      oprot.writeI32(struct.companyId);
      oprot.writeFieldEnd();
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      if (struct.fieldValues != null) {
        oprot.writeFieldBegin(FIELD_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fieldValues.size()));
          for (java.lang.String _iter29 : struct.fieldValues)
          {
            oprot.writeString(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MANDATORY_FIELD_DESC);
      oprot.writeBool(struct.mandatory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_FIELD_DESC);
      oprot.writeI32(struct.order);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeCustomFieldsConfTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeCustomFieldsConfTupleScheme getScheme() {
      return new EmployeeCustomFieldsConfTupleScheme();
    }
  }

  private static class EmployeeCustomFieldsConfTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeCustomFieldsConf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeCustomFieldsConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.companyId);
      oprot.writeString(struct.fieldName);
      {
        oprot.writeI32(struct.fieldValues.size());
        for (java.lang.String _iter30 : struct.fieldValues)
        {
          oprot.writeString(_iter30);
        }
      }
      oprot.writeBool(struct.mandatory);
      oprot.writeI32(struct.order);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeCustomFieldsConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.companyId = iprot.readI32();
      struct.setCompanyIdIsSet(true);
      struct.fieldName = iprot.readString();
      struct.setFieldNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.fieldValues = new java.util.ArrayList<java.lang.String>(_list31.size);
        java.lang.String _elem32;
        for (int _i33 = 0; _i33 < _list31.size; ++_i33)
        {
          _elem32 = iprot.readString();
          struct.fieldValues.add(_elem32);
        }
      }
      struct.setFieldValuesIsSet(true);
      struct.mandatory = iprot.readBool();
      struct.setMandatoryIsSet(true);
      struct.order = iprot.readI32();
      struct.setOrderIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

