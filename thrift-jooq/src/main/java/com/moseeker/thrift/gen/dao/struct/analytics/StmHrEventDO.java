/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class StmHrEventDO implements org.apache.thrift.TBase<StmHrEventDO, StmHrEventDO._Fields>, java.io.Serializable, Cloneable, Comparable<StmHrEventDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StmHrEventDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REQ_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqTypeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RES_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resTypeId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WECHAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RES_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("resContent", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQ_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("reqUri", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REQ_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("reqParams", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REMOTE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteIp", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SYS_USER_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sysUserCookie", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField USERAGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("useragent", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REFERER_FIELD_DESC = new org.apache.thrift.protocol.TField("referer", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StmHrEventDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StmHrEventDOTupleSchemeFactory();

  public int id; // optional
  public int reqTypeId; // optional
  public int statusCode; // optional
  public int wechatId; // optional
  public int resTypeId; // optional
  public java.lang.String handler; // optional
  public int wechatType; // optional
  public java.lang.String departmentId; // optional
  public java.lang.String employeeId; // optional
  public java.lang.String resContent; // optional
  public java.lang.String reqUri; // optional
  public java.lang.String reqParams; // optional
  public int eventId; // optional
  public java.lang.String remoteIp; // optional
  public java.lang.String sessionId; // optional
  public java.lang.String sysUserCookie; // optional
  public java.lang.String useragent; // optional
  public java.lang.String createTime; // optional
  public java.lang.String referer; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    REQ_TYPE_ID((short)2, "reqTypeId"),
    STATUS_CODE((short)3, "statusCode"),
    WECHAT_ID((short)4, "wechatId"),
    RES_TYPE_ID((short)5, "resTypeId"),
    HANDLER((short)6, "handler"),
    WECHAT_TYPE((short)7, "wechatType"),
    DEPARTMENT_ID((short)8, "departmentId"),
    EMPLOYEE_ID((short)9, "employeeId"),
    RES_CONTENT((short)10, "resContent"),
    REQ_URI((short)11, "reqUri"),
    REQ_PARAMS((short)12, "reqParams"),
    EVENT_ID((short)13, "eventId"),
    REMOTE_IP((short)14, "remoteIp"),
    SESSION_ID((short)15, "sessionId"),
    SYS_USER_COOKIE((short)16, "sysUserCookie"),
    USERAGENT((short)17, "useragent"),
    CREATE_TIME((short)18, "createTime"),
    REFERER((short)19, "referer");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REQ_TYPE_ID
          return REQ_TYPE_ID;
        case 3: // STATUS_CODE
          return STATUS_CODE;
        case 4: // WECHAT_ID
          return WECHAT_ID;
        case 5: // RES_TYPE_ID
          return RES_TYPE_ID;
        case 6: // HANDLER
          return HANDLER;
        case 7: // WECHAT_TYPE
          return WECHAT_TYPE;
        case 8: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 9: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 10: // RES_CONTENT
          return RES_CONTENT;
        case 11: // REQ_URI
          return REQ_URI;
        case 12: // REQ_PARAMS
          return REQ_PARAMS;
        case 13: // EVENT_ID
          return EVENT_ID;
        case 14: // REMOTE_IP
          return REMOTE_IP;
        case 15: // SESSION_ID
          return SESSION_ID;
        case 16: // SYS_USER_COOKIE
          return SYS_USER_COOKIE;
        case 17: // USERAGENT
          return USERAGENT;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // REFERER
          return REFERER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __REQTYPEID_ISSET_ID = 1;
  private static final int __STATUSCODE_ISSET_ID = 2;
  private static final int __WECHATID_ISSET_ID = 3;
  private static final int __RESTYPEID_ISSET_ID = 4;
  private static final int __WECHATTYPE_ISSET_ID = 5;
  private static final int __EVENTID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.REQ_TYPE_ID,_Fields.STATUS_CODE,_Fields.WECHAT_ID,_Fields.RES_TYPE_ID,_Fields.HANDLER,_Fields.WECHAT_TYPE,_Fields.DEPARTMENT_ID,_Fields.EMPLOYEE_ID,_Fields.RES_CONTENT,_Fields.REQ_URI,_Fields.REQ_PARAMS,_Fields.EVENT_ID,_Fields.REMOTE_IP,_Fields.SESSION_ID,_Fields.SYS_USER_COOKIE,_Fields.USERAGENT,_Fields.CREATE_TIME,_Fields.REFERER};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQ_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("reqTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RES_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("resTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("wechatType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RES_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("resContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_URI, new org.apache.thrift.meta_data.FieldMetaData("reqUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("reqParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMOTE_IP, new org.apache.thrift.meta_data.FieldMetaData("remoteIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYS_USER_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sysUserCookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERAGENT, new org.apache.thrift.meta_data.FieldMetaData("useragent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERER, new org.apache.thrift.meta_data.FieldMetaData("referer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StmHrEventDO.class, metaDataMap);
  }

  public StmHrEventDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StmHrEventDO(StmHrEventDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.reqTypeId = other.reqTypeId;
    this.statusCode = other.statusCode;
    this.wechatId = other.wechatId;
    this.resTypeId = other.resTypeId;
    if (other.isSetHandler()) {
      this.handler = other.handler;
    }
    this.wechatType = other.wechatType;
    if (other.isSetDepartmentId()) {
      this.departmentId = other.departmentId;
    }
    if (other.isSetEmployeeId()) {
      this.employeeId = other.employeeId;
    }
    if (other.isSetResContent()) {
      this.resContent = other.resContent;
    }
    if (other.isSetReqUri()) {
      this.reqUri = other.reqUri;
    }
    if (other.isSetReqParams()) {
      this.reqParams = other.reqParams;
    }
    this.eventId = other.eventId;
    if (other.isSetRemoteIp()) {
      this.remoteIp = other.remoteIp;
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetSysUserCookie()) {
      this.sysUserCookie = other.sysUserCookie;
    }
    if (other.isSetUseragent()) {
      this.useragent = other.useragent;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetReferer()) {
      this.referer = other.referer;
    }
  }

  public StmHrEventDO deepCopy() {
    return new StmHrEventDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setReqTypeIdIsSet(false);
    this.reqTypeId = 0;
    setStatusCodeIsSet(false);
    this.statusCode = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    setResTypeIdIsSet(false);
    this.resTypeId = 0;
    this.handler = null;
    setWechatTypeIsSet(false);
    this.wechatType = 0;
    this.departmentId = null;
    this.employeeId = null;
    this.resContent = null;
    this.reqUri = null;
    this.reqParams = null;
    setEventIdIsSet(false);
    this.eventId = 0;
    this.remoteIp = null;
    this.sessionId = null;
    this.sysUserCookie = null;
    this.useragent = null;
    this.createTime = null;
    this.referer = null;
  }

  public int getId() {
    return this.id;
  }

  public StmHrEventDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getReqTypeId() {
    return this.reqTypeId;
  }

  public StmHrEventDO setReqTypeId(int reqTypeId) {
    this.reqTypeId = reqTypeId;
    setReqTypeIdIsSet(true);
    return this;
  }

  public void unsetReqTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQTYPEID_ISSET_ID);
  }

  /** Returns true if field reqTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQTYPEID_ISSET_ID);
  }

  public void setReqTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQTYPEID_ISSET_ID, value);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public StmHrEventDO setStatusCode(int statusCode) {
    this.statusCode = statusCode;
    setStatusCodeIsSet(true);
    return this;
  }

  public void unsetStatusCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
  }

  public void setStatusCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCODE_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public StmHrEventDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public int getResTypeId() {
    return this.resTypeId;
  }

  public StmHrEventDO setResTypeId(int resTypeId) {
    this.resTypeId = resTypeId;
    setResTypeIdIsSet(true);
    return this;
  }

  public void unsetResTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESTYPEID_ISSET_ID);
  }

  /** Returns true if field resTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetResTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESTYPEID_ISSET_ID);
  }

  public void setResTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESTYPEID_ISSET_ID, value);
  }

  public java.lang.String getHandler() {
    return this.handler;
  }

  public StmHrEventDO setHandler(java.lang.String handler) {
    this.handler = handler;
    return this;
  }

  public void unsetHandler() {
    this.handler = null;
  }

  /** Returns true if field handler is set (has been assigned a value) and false otherwise */
  public boolean isSetHandler() {
    return this.handler != null;
  }

  public void setHandlerIsSet(boolean value) {
    if (!value) {
      this.handler = null;
    }
  }

  public int getWechatType() {
    return this.wechatType;
  }

  public StmHrEventDO setWechatType(int wechatType) {
    this.wechatType = wechatType;
    setWechatTypeIsSet(true);
    return this;
  }

  public void unsetWechatType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATTYPE_ISSET_ID);
  }

  /** Returns true if field wechatType is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATTYPE_ISSET_ID);
  }

  public void setWechatTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATTYPE_ISSET_ID, value);
  }

  public java.lang.String getDepartmentId() {
    return this.departmentId;
  }

  public StmHrEventDO setDepartmentId(java.lang.String departmentId) {
    this.departmentId = departmentId;
    return this;
  }

  public void unsetDepartmentId() {
    this.departmentId = null;
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return this.departmentId != null;
  }

  public void setDepartmentIdIsSet(boolean value) {
    if (!value) {
      this.departmentId = null;
    }
  }

  public java.lang.String getEmployeeId() {
    return this.employeeId;
  }

  public StmHrEventDO setEmployeeId(java.lang.String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  public void unsetEmployeeId() {
    this.employeeId = null;
  }

  /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeId() {
    return this.employeeId != null;
  }

  public void setEmployeeIdIsSet(boolean value) {
    if (!value) {
      this.employeeId = null;
    }
  }

  public java.lang.String getResContent() {
    return this.resContent;
  }

  public StmHrEventDO setResContent(java.lang.String resContent) {
    this.resContent = resContent;
    return this;
  }

  public void unsetResContent() {
    this.resContent = null;
  }

  /** Returns true if field resContent is set (has been assigned a value) and false otherwise */
  public boolean isSetResContent() {
    return this.resContent != null;
  }

  public void setResContentIsSet(boolean value) {
    if (!value) {
      this.resContent = null;
    }
  }

  public java.lang.String getReqUri() {
    return this.reqUri;
  }

  public StmHrEventDO setReqUri(java.lang.String reqUri) {
    this.reqUri = reqUri;
    return this;
  }

  public void unsetReqUri() {
    this.reqUri = null;
  }

  /** Returns true if field reqUri is set (has been assigned a value) and false otherwise */
  public boolean isSetReqUri() {
    return this.reqUri != null;
  }

  public void setReqUriIsSet(boolean value) {
    if (!value) {
      this.reqUri = null;
    }
  }

  public java.lang.String getReqParams() {
    return this.reqParams;
  }

  public StmHrEventDO setReqParams(java.lang.String reqParams) {
    this.reqParams = reqParams;
    return this;
  }

  public void unsetReqParams() {
    this.reqParams = null;
  }

  /** Returns true if field reqParams is set (has been assigned a value) and false otherwise */
  public boolean isSetReqParams() {
    return this.reqParams != null;
  }

  public void setReqParamsIsSet(boolean value) {
    if (!value) {
      this.reqParams = null;
    }
  }

  public int getEventId() {
    return this.eventId;
  }

  public StmHrEventDO setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public java.lang.String getRemoteIp() {
    return this.remoteIp;
  }

  public StmHrEventDO setRemoteIp(java.lang.String remoteIp) {
    this.remoteIp = remoteIp;
    return this;
  }

  public void unsetRemoteIp() {
    this.remoteIp = null;
  }

  /** Returns true if field remoteIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteIp() {
    return this.remoteIp != null;
  }

  public void setRemoteIpIsSet(boolean value) {
    if (!value) {
      this.remoteIp = null;
    }
  }

  public java.lang.String getSessionId() {
    return this.sessionId;
  }

  public StmHrEventDO setSessionId(java.lang.String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public java.lang.String getSysUserCookie() {
    return this.sysUserCookie;
  }

  public StmHrEventDO setSysUserCookie(java.lang.String sysUserCookie) {
    this.sysUserCookie = sysUserCookie;
    return this;
  }

  public void unsetSysUserCookie() {
    this.sysUserCookie = null;
  }

  /** Returns true if field sysUserCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSysUserCookie() {
    return this.sysUserCookie != null;
  }

  public void setSysUserCookieIsSet(boolean value) {
    if (!value) {
      this.sysUserCookie = null;
    }
  }

  public java.lang.String getUseragent() {
    return this.useragent;
  }

  public StmHrEventDO setUseragent(java.lang.String useragent) {
    this.useragent = useragent;
    return this;
  }

  public void unsetUseragent() {
    this.useragent = null;
  }

  /** Returns true if field useragent is set (has been assigned a value) and false otherwise */
  public boolean isSetUseragent() {
    return this.useragent != null;
  }

  public void setUseragentIsSet(boolean value) {
    if (!value) {
      this.useragent = null;
    }
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public StmHrEventDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getReferer() {
    return this.referer;
  }

  public StmHrEventDO setReferer(java.lang.String referer) {
    this.referer = referer;
    return this;
  }

  public void unsetReferer() {
    this.referer = null;
  }

  /** Returns true if field referer is set (has been assigned a value) and false otherwise */
  public boolean isSetReferer() {
    return this.referer != null;
  }

  public void setRefererIsSet(boolean value) {
    if (!value) {
      this.referer = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case REQ_TYPE_ID:
      if (value == null) {
        unsetReqTypeId();
      } else {
        setReqTypeId((java.lang.Integer)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((java.lang.Integer)value);
      }
      break;

    case RES_TYPE_ID:
      if (value == null) {
        unsetResTypeId();
      } else {
        setResTypeId((java.lang.Integer)value);
      }
      break;

    case HANDLER:
      if (value == null) {
        unsetHandler();
      } else {
        setHandler((java.lang.String)value);
      }
      break;

    case WECHAT_TYPE:
      if (value == null) {
        unsetWechatType();
      } else {
        setWechatType((java.lang.Integer)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((java.lang.String)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployeeId();
      } else {
        setEmployeeId((java.lang.String)value);
      }
      break;

    case RES_CONTENT:
      if (value == null) {
        unsetResContent();
      } else {
        setResContent((java.lang.String)value);
      }
      break;

    case REQ_URI:
      if (value == null) {
        unsetReqUri();
      } else {
        setReqUri((java.lang.String)value);
      }
      break;

    case REQ_PARAMS:
      if (value == null) {
        unsetReqParams();
      } else {
        setReqParams((java.lang.String)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((java.lang.Integer)value);
      }
      break;

    case REMOTE_IP:
      if (value == null) {
        unsetRemoteIp();
      } else {
        setRemoteIp((java.lang.String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.String)value);
      }
      break;

    case SYS_USER_COOKIE:
      if (value == null) {
        unsetSysUserCookie();
      } else {
        setSysUserCookie((java.lang.String)value);
      }
      break;

    case USERAGENT:
      if (value == null) {
        unsetUseragent();
      } else {
        setUseragent((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case REFERER:
      if (value == null) {
        unsetReferer();
      } else {
        setReferer((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case REQ_TYPE_ID:
      return getReqTypeId();

    case STATUS_CODE:
      return getStatusCode();

    case WECHAT_ID:
      return getWechatId();

    case RES_TYPE_ID:
      return getResTypeId();

    case HANDLER:
      return getHandler();

    case WECHAT_TYPE:
      return getWechatType();

    case DEPARTMENT_ID:
      return getDepartmentId();

    case EMPLOYEE_ID:
      return getEmployeeId();

    case RES_CONTENT:
      return getResContent();

    case REQ_URI:
      return getReqUri();

    case REQ_PARAMS:
      return getReqParams();

    case EVENT_ID:
      return getEventId();

    case REMOTE_IP:
      return getRemoteIp();

    case SESSION_ID:
      return getSessionId();

    case SYS_USER_COOKIE:
      return getSysUserCookie();

    case USERAGENT:
      return getUseragent();

    case CREATE_TIME:
      return getCreateTime();

    case REFERER:
      return getReferer();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REQ_TYPE_ID:
      return isSetReqTypeId();
    case STATUS_CODE:
      return isSetStatusCode();
    case WECHAT_ID:
      return isSetWechatId();
    case RES_TYPE_ID:
      return isSetResTypeId();
    case HANDLER:
      return isSetHandler();
    case WECHAT_TYPE:
      return isSetWechatType();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case EMPLOYEE_ID:
      return isSetEmployeeId();
    case RES_CONTENT:
      return isSetResContent();
    case REQ_URI:
      return isSetReqUri();
    case REQ_PARAMS:
      return isSetReqParams();
    case EVENT_ID:
      return isSetEventId();
    case REMOTE_IP:
      return isSetRemoteIp();
    case SESSION_ID:
      return isSetSessionId();
    case SYS_USER_COOKIE:
      return isSetSysUserCookie();
    case USERAGENT:
      return isSetUseragent();
    case CREATE_TIME:
      return isSetCreateTime();
    case REFERER:
      return isSetReferer();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StmHrEventDO)
      return this.equals((StmHrEventDO)that);
    return false;
  }

  public boolean equals(StmHrEventDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_reqTypeId = true && this.isSetReqTypeId();
    boolean that_present_reqTypeId = true && that.isSetReqTypeId();
    if (this_present_reqTypeId || that_present_reqTypeId) {
      if (!(this_present_reqTypeId && that_present_reqTypeId))
        return false;
      if (this.reqTypeId != that.reqTypeId)
        return false;
    }

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (this.statusCode != that.statusCode)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_resTypeId = true && this.isSetResTypeId();
    boolean that_present_resTypeId = true && that.isSetResTypeId();
    if (this_present_resTypeId || that_present_resTypeId) {
      if (!(this_present_resTypeId && that_present_resTypeId))
        return false;
      if (this.resTypeId != that.resTypeId)
        return false;
    }

    boolean this_present_handler = true && this.isSetHandler();
    boolean that_present_handler = true && that.isSetHandler();
    if (this_present_handler || that_present_handler) {
      if (!(this_present_handler && that_present_handler))
        return false;
      if (!this.handler.equals(that.handler))
        return false;
    }

    boolean this_present_wechatType = true && this.isSetWechatType();
    boolean that_present_wechatType = true && that.isSetWechatType();
    if (this_present_wechatType || that_present_wechatType) {
      if (!(this_present_wechatType && that_present_wechatType))
        return false;
      if (this.wechatType != that.wechatType)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (!this.departmentId.equals(that.departmentId))
        return false;
    }

    boolean this_present_employeeId = true && this.isSetEmployeeId();
    boolean that_present_employeeId = true && that.isSetEmployeeId();
    if (this_present_employeeId || that_present_employeeId) {
      if (!(this_present_employeeId && that_present_employeeId))
        return false;
      if (!this.employeeId.equals(that.employeeId))
        return false;
    }

    boolean this_present_resContent = true && this.isSetResContent();
    boolean that_present_resContent = true && that.isSetResContent();
    if (this_present_resContent || that_present_resContent) {
      if (!(this_present_resContent && that_present_resContent))
        return false;
      if (!this.resContent.equals(that.resContent))
        return false;
    }

    boolean this_present_reqUri = true && this.isSetReqUri();
    boolean that_present_reqUri = true && that.isSetReqUri();
    if (this_present_reqUri || that_present_reqUri) {
      if (!(this_present_reqUri && that_present_reqUri))
        return false;
      if (!this.reqUri.equals(that.reqUri))
        return false;
    }

    boolean this_present_reqParams = true && this.isSetReqParams();
    boolean that_present_reqParams = true && that.isSetReqParams();
    if (this_present_reqParams || that_present_reqParams) {
      if (!(this_present_reqParams && that_present_reqParams))
        return false;
      if (!this.reqParams.equals(that.reqParams))
        return false;
    }

    boolean this_present_eventId = true && this.isSetEventId();
    boolean that_present_eventId = true && that.isSetEventId();
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_remoteIp = true && this.isSetRemoteIp();
    boolean that_present_remoteIp = true && that.isSetRemoteIp();
    if (this_present_remoteIp || that_present_remoteIp) {
      if (!(this_present_remoteIp && that_present_remoteIp))
        return false;
      if (!this.remoteIp.equals(that.remoteIp))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_sysUserCookie = true && this.isSetSysUserCookie();
    boolean that_present_sysUserCookie = true && that.isSetSysUserCookie();
    if (this_present_sysUserCookie || that_present_sysUserCookie) {
      if (!(this_present_sysUserCookie && that_present_sysUserCookie))
        return false;
      if (!this.sysUserCookie.equals(that.sysUserCookie))
        return false;
    }

    boolean this_present_useragent = true && this.isSetUseragent();
    boolean that_present_useragent = true && that.isSetUseragent();
    if (this_present_useragent || that_present_useragent) {
      if (!(this_present_useragent && that_present_useragent))
        return false;
      if (!this.useragent.equals(that.useragent))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_referer = true && this.isSetReferer();
    boolean that_present_referer = true && that.isSetReferer();
    if (this_present_referer || that_present_referer) {
      if (!(this_present_referer && that_present_referer))
        return false;
      if (!this.referer.equals(that.referer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetReqTypeId()) ? 131071 : 524287);
    if (isSetReqTypeId())
      hashCode = hashCode * 8191 + reqTypeId;

    hashCode = hashCode * 8191 + ((isSetStatusCode()) ? 131071 : 524287);
    if (isSetStatusCode())
      hashCode = hashCode * 8191 + statusCode;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetResTypeId()) ? 131071 : 524287);
    if (isSetResTypeId())
      hashCode = hashCode * 8191 + resTypeId;

    hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
    if (isSetHandler())
      hashCode = hashCode * 8191 + handler.hashCode();

    hashCode = hashCode * 8191 + ((isSetWechatType()) ? 131071 : 524287);
    if (isSetWechatType())
      hashCode = hashCode * 8191 + wechatType;

    hashCode = hashCode * 8191 + ((isSetDepartmentId()) ? 131071 : 524287);
    if (isSetDepartmentId())
      hashCode = hashCode * 8191 + departmentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
    if (isSetEmployeeId())
      hashCode = hashCode * 8191 + employeeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetResContent()) ? 131071 : 524287);
    if (isSetResContent())
      hashCode = hashCode * 8191 + resContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetReqUri()) ? 131071 : 524287);
    if (isSetReqUri())
      hashCode = hashCode * 8191 + reqUri.hashCode();

    hashCode = hashCode * 8191 + ((isSetReqParams()) ? 131071 : 524287);
    if (isSetReqParams())
      hashCode = hashCode * 8191 + reqParams.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventId()) ? 131071 : 524287);
    if (isSetEventId())
      hashCode = hashCode * 8191 + eventId;

    hashCode = hashCode * 8191 + ((isSetRemoteIp()) ? 131071 : 524287);
    if (isSetRemoteIp())
      hashCode = hashCode * 8191 + remoteIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
    if (isSetSessionId())
      hashCode = hashCode * 8191 + sessionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSysUserCookie()) ? 131071 : 524287);
    if (isSetSysUserCookie())
      hashCode = hashCode * 8191 + sysUserCookie.hashCode();

    hashCode = hashCode * 8191 + ((isSetUseragent()) ? 131071 : 524287);
    if (isSetUseragent())
      hashCode = hashCode * 8191 + useragent.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetReferer()) ? 131071 : 524287);
    if (isSetReferer())
      hashCode = hashCode * 8191 + referer.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StmHrEventDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReqTypeId()).compareTo(other.isSetReqTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqTypeId, other.reqTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, other.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResTypeId()).compareTo(other.isSetResTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resTypeId, other.resTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHandler()).compareTo(other.isSetHandler());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandler()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatType()).compareTo(other.isSetWechatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatType, other.wechatType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResContent()).compareTo(other.isSetResContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resContent, other.resContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReqUri()).compareTo(other.isSetReqUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqUri, other.reqUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReqParams()).compareTo(other.isSetReqParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqParams, other.reqParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemoteIp()).compareTo(other.isSetRemoteIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteIp, other.remoteIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysUserCookie()).compareTo(other.isSetSysUserCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysUserCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysUserCookie, other.sysUserCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUseragent()).compareTo(other.isSetUseragent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseragent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useragent, other.useragent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReferer()).compareTo(other.isSetReferer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referer, other.referer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StmHrEventDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetReqTypeId()) {
      if (!first) sb.append(", ");
      sb.append("reqTypeId:");
      sb.append(this.reqTypeId);
      first = false;
    }
    if (isSetStatusCode()) {
      if (!first) sb.append(", ");
      sb.append("statusCode:");
      sb.append(this.statusCode);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetResTypeId()) {
      if (!first) sb.append(", ");
      sb.append("resTypeId:");
      sb.append(this.resTypeId);
      first = false;
    }
    if (isSetHandler()) {
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
    }
    if (isSetWechatType()) {
      if (!first) sb.append(", ");
      sb.append("wechatType:");
      sb.append(this.wechatType);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      if (this.departmentId == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentId);
      }
      first = false;
    }
    if (isSetEmployeeId()) {
      if (!first) sb.append(", ");
      sb.append("employeeId:");
      if (this.employeeId == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeId);
      }
      first = false;
    }
    if (isSetResContent()) {
      if (!first) sb.append(", ");
      sb.append("resContent:");
      if (this.resContent == null) {
        sb.append("null");
      } else {
        sb.append(this.resContent);
      }
      first = false;
    }
    if (isSetReqUri()) {
      if (!first) sb.append(", ");
      sb.append("reqUri:");
      if (this.reqUri == null) {
        sb.append("null");
      } else {
        sb.append(this.reqUri);
      }
      first = false;
    }
    if (isSetReqParams()) {
      if (!first) sb.append(", ");
      sb.append("reqParams:");
      if (this.reqParams == null) {
        sb.append("null");
      } else {
        sb.append(this.reqParams);
      }
      first = false;
    }
    if (isSetEventId()) {
      if (!first) sb.append(", ");
      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
    }
    if (isSetRemoteIp()) {
      if (!first) sb.append(", ");
      sb.append("remoteIp:");
      if (this.remoteIp == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteIp);
      }
      first = false;
    }
    if (isSetSessionId()) {
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
    }
    if (isSetSysUserCookie()) {
      if (!first) sb.append(", ");
      sb.append("sysUserCookie:");
      if (this.sysUserCookie == null) {
        sb.append("null");
      } else {
        sb.append(this.sysUserCookie);
      }
      first = false;
    }
    if (isSetUseragent()) {
      if (!first) sb.append(", ");
      sb.append("useragent:");
      if (this.useragent == null) {
        sb.append("null");
      } else {
        sb.append(this.useragent);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetReferer()) {
      if (!first) sb.append(", ");
      sb.append("referer:");
      if (this.referer == null) {
        sb.append("null");
      } else {
        sb.append(this.referer);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StmHrEventDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StmHrEventDOStandardScheme getScheme() {
      return new StmHrEventDOStandardScheme();
    }
  }

  private static class StmHrEventDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<StmHrEventDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StmHrEventDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQ_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reqTypeId = iprot.readI32();
              struct.setReqTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusCode = iprot.readI32();
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RES_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resTypeId = iprot.readI32();
              struct.setResTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HANDLER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handler = iprot.readString();
              struct.setHandlerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WECHAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatType = iprot.readI32();
              struct.setWechatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departmentId = iprot.readString();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employeeId = iprot.readString();
              struct.setEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RES_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resContent = iprot.readString();
              struct.setResContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQ_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqUri = iprot.readString();
              struct.setReqUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQ_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqParams = iprot.readString();
              struct.setReqParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REMOTE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteIp = iprot.readString();
              struct.setRemoteIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SYS_USER_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sysUserCookie = iprot.readString();
              struct.setSysUserCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USERAGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useragent = iprot.readString();
              struct.setUseragentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REFERER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.referer = iprot.readString();
              struct.setRefererIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StmHrEventDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReqTypeId()) {
        oprot.writeFieldBegin(REQ_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.reqTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusCode()) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI32(struct.statusCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResTypeId()) {
        oprot.writeFieldBegin(RES_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.resTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.handler != null) {
        if (struct.isSetHandler()) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          oprot.writeString(struct.handler);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWechatType()) {
        oprot.writeFieldBegin(WECHAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.wechatType);
        oprot.writeFieldEnd();
      }
      if (struct.departmentId != null) {
        if (struct.isSetDepartmentId()) {
          oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
          oprot.writeString(struct.departmentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.employeeId != null) {
        if (struct.isSetEmployeeId()) {
          oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
          oprot.writeString(struct.employeeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resContent != null) {
        if (struct.isSetResContent()) {
          oprot.writeFieldBegin(RES_CONTENT_FIELD_DESC);
          oprot.writeString(struct.resContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reqUri != null) {
        if (struct.isSetReqUri()) {
          oprot.writeFieldBegin(REQ_URI_FIELD_DESC);
          oprot.writeString(struct.reqUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reqParams != null) {
        if (struct.isSetReqParams()) {
          oprot.writeFieldBegin(REQ_PARAMS_FIELD_DESC);
          oprot.writeString(struct.reqParams);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEventId()) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
      }
      if (struct.remoteIp != null) {
        if (struct.isSetRemoteIp()) {
          oprot.writeFieldBegin(REMOTE_IP_FIELD_DESC);
          oprot.writeString(struct.remoteIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionId != null) {
        if (struct.isSetSessionId()) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sysUserCookie != null) {
        if (struct.isSetSysUserCookie()) {
          oprot.writeFieldBegin(SYS_USER_COOKIE_FIELD_DESC);
          oprot.writeString(struct.sysUserCookie);
          oprot.writeFieldEnd();
        }
      }
      if (struct.useragent != null) {
        if (struct.isSetUseragent()) {
          oprot.writeFieldBegin(USERAGENT_FIELD_DESC);
          oprot.writeString(struct.useragent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.referer != null) {
        if (struct.isSetReferer()) {
          oprot.writeFieldBegin(REFERER_FIELD_DESC);
          oprot.writeString(struct.referer);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StmHrEventDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StmHrEventDOTupleScheme getScheme() {
      return new StmHrEventDOTupleScheme();
    }
  }

  private static class StmHrEventDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<StmHrEventDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StmHrEventDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReqTypeId()) {
        optionals.set(1);
      }
      if (struct.isSetStatusCode()) {
        optionals.set(2);
      }
      if (struct.isSetWechatId()) {
        optionals.set(3);
      }
      if (struct.isSetResTypeId()) {
        optionals.set(4);
      }
      if (struct.isSetHandler()) {
        optionals.set(5);
      }
      if (struct.isSetWechatType()) {
        optionals.set(6);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(7);
      }
      if (struct.isSetEmployeeId()) {
        optionals.set(8);
      }
      if (struct.isSetResContent()) {
        optionals.set(9);
      }
      if (struct.isSetReqUri()) {
        optionals.set(10);
      }
      if (struct.isSetReqParams()) {
        optionals.set(11);
      }
      if (struct.isSetEventId()) {
        optionals.set(12);
      }
      if (struct.isSetRemoteIp()) {
        optionals.set(13);
      }
      if (struct.isSetSessionId()) {
        optionals.set(14);
      }
      if (struct.isSetSysUserCookie()) {
        optionals.set(15);
      }
      if (struct.isSetUseragent()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(17);
      }
      if (struct.isSetReferer()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetReqTypeId()) {
        oprot.writeI32(struct.reqTypeId);
      }
      if (struct.isSetStatusCode()) {
        oprot.writeI32(struct.statusCode);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetResTypeId()) {
        oprot.writeI32(struct.resTypeId);
      }
      if (struct.isSetHandler()) {
        oprot.writeString(struct.handler);
      }
      if (struct.isSetWechatType()) {
        oprot.writeI32(struct.wechatType);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeString(struct.departmentId);
      }
      if (struct.isSetEmployeeId()) {
        oprot.writeString(struct.employeeId);
      }
      if (struct.isSetResContent()) {
        oprot.writeString(struct.resContent);
      }
      if (struct.isSetReqUri()) {
        oprot.writeString(struct.reqUri);
      }
      if (struct.isSetReqParams()) {
        oprot.writeString(struct.reqParams);
      }
      if (struct.isSetEventId()) {
        oprot.writeI32(struct.eventId);
      }
      if (struct.isSetRemoteIp()) {
        oprot.writeString(struct.remoteIp);
      }
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
      if (struct.isSetSysUserCookie()) {
        oprot.writeString(struct.sysUserCookie);
      }
      if (struct.isSetUseragent()) {
        oprot.writeString(struct.useragent);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetReferer()) {
        oprot.writeString(struct.referer);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StmHrEventDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reqTypeId = iprot.readI32();
        struct.setReqTypeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.statusCode = iprot.readI32();
        struct.setStatusCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resTypeId = iprot.readI32();
        struct.setResTypeIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.handler = iprot.readString();
        struct.setHandlerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wechatType = iprot.readI32();
        struct.setWechatTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.departmentId = iprot.readString();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.employeeId = iprot.readString();
        struct.setEmployeeIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.resContent = iprot.readString();
        struct.setResContentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reqUri = iprot.readString();
        struct.setReqUriIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reqParams = iprot.readString();
        struct.setReqParamsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.eventId = iprot.readI32();
        struct.setEventIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.remoteIp = iprot.readString();
        struct.setRemoteIpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sysUserCookie = iprot.readString();
        struct.setSysUserCookieIsSet(true);
      }
      if (incoming.get(16)) {
        struct.useragent = iprot.readString();
        struct.setUseragentIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.referer = iprot.readString();
        struct.setRefererIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

