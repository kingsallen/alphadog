/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.foundation.chaos.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-01")
public class ChaosServices {

  /**
   * TODO:list what notation this dateTime represents. eg ISO-8601
   * or if its in the format like YYYY-mm-DD you mentioned.
   */
  public interface Iface {

    public String binding(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public String bindConfirm(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras, boolean confirm) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public String bindMessage(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras, String code) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public void synchronizePosition(java.util.List<String> positions) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void binding(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void bindConfirm(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras, boolean confirm, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void bindMessage(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String, String> extras, String code, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void synchronizePosition(java.util.List<String> positions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String binding(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_binding(thirdPartyAccount, extras);
      return recv_binding();
    }

    public void send_binding(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras) throws org.apache.thrift.TException
    {
      binding_args args = new binding_args();
      args.setThirdPartyAccount(thirdPartyAccount);
      args.setExtras(extras);
      sendBase("binding", args);
    }

    public String recv_binding() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      binding_result result = new binding_result();
      receiveBase(result, "binding");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "binding failed: unknown result");
    }

    public String bindConfirm(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, boolean confirm) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_bindConfirm(thirdPartyAccount, extras, confirm);
      return recv_bindConfirm();
    }

    public void send_bindConfirm(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, boolean confirm) throws org.apache.thrift.TException
    {
      bindConfirm_args args = new bindConfirm_args();
      args.setThirdPartyAccount(thirdPartyAccount);
      args.setExtras(extras);
      args.setConfirm(confirm);
      sendBase("bindConfirm", args);
    }

    public String recv_bindConfirm() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      bindConfirm_result result = new bindConfirm_result();
      receiveBase(result, "bindConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindConfirm failed: unknown result");
    }

    public String bindMessage(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, String code) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_bindMessage(thirdPartyAccount, extras, code);
      return recv_bindMessage();
    }

    public void send_bindMessage(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, String code) throws org.apache.thrift.TException
    {
      bindMessage_args args = new bindMessage_args();
      args.setThirdPartyAccount(thirdPartyAccount);
      args.setExtras(extras);
      args.setCode(code);
      sendBase("bindMessage", args);
    }

    public String recv_bindMessage() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      bindMessage_result result = new bindMessage_result();
      receiveBase(result, "bindMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindMessage failed: unknown result");
    }

    public void synchronizePosition(java.util.List<String> positions) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_synchronizePosition(positions);
      recv_synchronizePosition();
    }

    public void send_synchronizePosition(java.util.List<String> positions) throws org.apache.thrift.TException
    {
      synchronizePosition_args args = new synchronizePosition_args();
      args.setPositions(positions);
      sendBase("synchronizePosition", args);
    }

    public void recv_synchronizePosition() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      synchronizePosition_result result = new synchronizePosition_result();
      receiveBase(result, "synchronizePosition");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void binding(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      binding_call method_call = new binding_call(thirdPartyAccount, extras, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class binding_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount;
      private java.util.Map<String,String> extras;
      public binding_call(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thirdPartyAccount = thirdPartyAccount;
        this.extras = extras;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("binding", org.apache.thrift.protocol.TMessageType.CALL, 0));
        binding_args args = new binding_args();
        args.setThirdPartyAccount(thirdPartyAccount);
        args.setExtras(extras);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_binding();
      }
    }

    public void bindConfirm(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, boolean confirm, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindConfirm_call method_call = new bindConfirm_call(thirdPartyAccount, extras, confirm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindConfirm_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount;
      private java.util.Map<String,String> extras;
      private boolean confirm;
      public bindConfirm_call(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, boolean confirm, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thirdPartyAccount = thirdPartyAccount;
        this.extras = extras;
        this.confirm = confirm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindConfirm_args args = new bindConfirm_args();
        args.setThirdPartyAccount(thirdPartyAccount);
        args.setExtras(extras);
        args.setConfirm(confirm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindConfirm();
      }
    }

    public void bindMessage(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, String code, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindMessage_call method_call = new bindMessage_call(thirdPartyAccount, extras, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindMessage_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount;
      private java.util.Map<String,String> extras;
      private String code;
      public bindMessage_call(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<String,String> extras, String code, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thirdPartyAccount = thirdPartyAccount;
        this.extras = extras;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindMessage_args args = new bindMessage_args();
        args.setThirdPartyAccount(thirdPartyAccount);
        args.setExtras(extras);
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindMessage();
      }
    }

    public void synchronizePosition(java.util.List<String> positions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchronizePosition_call method_call = new synchronizePosition_call(positions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchronizePosition_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<String> positions;
      public synchronizePosition_call(java.util.List<String> positions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.positions = positions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchronizePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchronizePosition_args args = new synchronizePosition_args();
        args.setPositions(positions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("binding", new binding());
      processMap.put("bindConfirm", new bindConfirm());
      processMap.put("bindMessage", new bindMessage());
      processMap.put("synchronizePosition", new synchronizePosition());
      return processMap;
    }

    public static class binding<I extends Iface> extends org.apache.thrift.ProcessFunction<I, binding_args> {
      public binding() {
        super("binding");
      }

      public binding_args getEmptyArgsInstance() {
        return new binding_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public binding_result getResult(I iface, binding_args args) throws org.apache.thrift.TException {
        binding_result result = new binding_result();
        try {
          result.success = iface.binding(args.thirdPartyAccount, args.extras);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bindConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindConfirm_args> {
      public bindConfirm() {
        super("bindConfirm");
      }

      public bindConfirm_args getEmptyArgsInstance() {
        return new bindConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindConfirm_result getResult(I iface, bindConfirm_args args) throws org.apache.thrift.TException {
        bindConfirm_result result = new bindConfirm_result();
        try {
          result.success = iface.bindConfirm(args.thirdPartyAccount, args.extras, args.confirm);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bindMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindMessage_args> {
      public bindMessage() {
        super("bindMessage");
      }

      public bindMessage_args getEmptyArgsInstance() {
        return new bindMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindMessage_result getResult(I iface, bindMessage_args args) throws org.apache.thrift.TException {
        bindMessage_result result = new bindMessage_result();
        try {
          result.success = iface.bindMessage(args.thirdPartyAccount, args.extras, args.code);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class synchronizePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchronizePosition_args> {
      public synchronizePosition() {
        super("synchronizePosition");
      }

      public synchronizePosition_args getEmptyArgsInstance() {
        return new synchronizePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public synchronizePosition_result getResult(I iface, synchronizePosition_args args) throws org.apache.thrift.TException {
        synchronizePosition_result result = new synchronizePosition_result();
        try {
          iface.synchronizePosition(args.positions);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("binding", new binding());
      processMap.put("bindConfirm", new bindConfirm());
      processMap.put("bindMessage", new bindMessage());
      processMap.put("synchronizePosition", new synchronizePosition());
      return processMap;
    }

    public static class binding<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, binding_args, String> {
      public binding() {
        super("binding");
      }

      public binding_args getEmptyArgsInstance() {
        return new binding_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            binding_result result = new binding_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            binding_result result = new binding_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, binding_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.binding(args.thirdPartyAccount, args.extras,resultHandler);
      }
    }

    public static class bindConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindConfirm_args, String> {
      public bindConfirm() {
        super("bindConfirm");
      }

      public bindConfirm_args getEmptyArgsInstance() {
        return new bindConfirm_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            bindConfirm_result result = new bindConfirm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bindConfirm_result result = new bindConfirm_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.bindConfirm(args.thirdPartyAccount, args.extras, args.confirm,resultHandler);
      }
    }

    public static class bindMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindMessage_args, String> {
      public bindMessage() {
        super("bindMessage");
      }

      public bindMessage_args getEmptyArgsInstance() {
        return new bindMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            bindMessage_result result = new bindMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bindMessage_result result = new bindMessage_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.bindMessage(args.thirdPartyAccount, args.extras, args.code,resultHandler);
      }
    }

    public static class synchronizePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchronizePosition_args, Void> {
      public synchronizePosition() {
        super("synchronizePosition");
      }

      public synchronizePosition_args getEmptyArgsInstance() {
        return new synchronizePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            synchronizePosition_result result = new synchronizePosition_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            synchronizePosition_result result = new synchronizePosition_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchronizePosition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.synchronizePosition(args.positions,resultHandler);
      }
    }

  }

  public static class binding_args implements org.apache.thrift.TBase<binding_args, binding_args._Fields>, java.io.Serializable, Cloneable, Comparable<binding_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("binding_args");

    private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXTRAS_FIELD_DESC = new org.apache.thrift.protocol.TField("extras", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new binding_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new binding_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount; // required
    public java.util.Map<String,String> extras; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THIRD_PARTY_ACCOUNT((short)1, "thirdPartyAccount"),
      EXTRAS((short)2, "extras");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THIRD_PARTY_ACCOUNT
            return THIRD_PARTY_ACCOUNT;
          case 2: // EXTRAS
            return EXTRAS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO.class)));
      tmpMap.put(_Fields.EXTRAS, new org.apache.thrift.meta_data.FieldMetaData("extras", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(binding_args.class, metaDataMap);
    }

    public binding_args() {
    }

    public binding_args(
      com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount,
      java.util.Map<String,String> extras)
    {
      this();
      this.thirdPartyAccount = thirdPartyAccount;
      this.extras = extras;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public binding_args(binding_args other) {
      if (other.isSetThirdPartyAccount()) {
        this.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO(other.thirdPartyAccount);
      }
      if (other.isSetExtras()) {
        java.util.Map<String,String> __this__extras = new java.util.HashMap<String,String>(other.extras);
        this.extras = __this__extras;
      }
    }

    public binding_args deepCopy() {
      return new binding_args(this);
    }

    @Override
    public void clear() {
      this.thirdPartyAccount = null;
      this.extras = null;
    }

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO getThirdPartyAccount() {
      return this.thirdPartyAccount;
    }

    public binding_args setThirdPartyAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount) {
      this.thirdPartyAccount = thirdPartyAccount;
      return this;
    }

    public void unsetThirdPartyAccount() {
      this.thirdPartyAccount = null;
    }

    /** Returns true if field thirdPartyAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdPartyAccount() {
      return this.thirdPartyAccount != null;
    }

    public void setThirdPartyAccountIsSet(boolean value) {
      if (!value) {
        this.thirdPartyAccount = null;
      }
    }

    public int getExtrasSize() {
      return (this.extras == null) ? 0 : this.extras.size();
    }

    public void putToExtras(String key, String val) {
      if (this.extras == null) {
        this.extras = new java.util.HashMap<String,String>();
      }
      this.extras.put(key, val);
    }

    public java.util.Map<String,String> getExtras() {
      return this.extras;
    }

    public binding_args setExtras(java.util.Map<String,String> extras) {
      this.extras = extras;
      return this;
    }

    public void unsetExtras() {
      this.extras = null;
    }

    /** Returns true if field extras is set (has been assigned a value) and false otherwise */
    public boolean isSetExtras() {
      return this.extras != null;
    }

    public void setExtrasIsSet(boolean value) {
      if (!value) {
        this.extras = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        if (value == null) {
          unsetThirdPartyAccount();
        } else {
          setThirdPartyAccount((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO)value);
        }
        break;

      case EXTRAS:
        if (value == null) {
          unsetExtras();
        } else {
          setExtras((java.util.Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return getThirdPartyAccount();

      case EXTRAS:
        return getExtras();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return isSetThirdPartyAccount();
      case EXTRAS:
        return isSetExtras();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof binding_args)
        return this.equals((binding_args)that);
      return false;
    }

    public boolean equals(binding_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_thirdPartyAccount = true && this.isSetThirdPartyAccount();
      boolean that_present_thirdPartyAccount = true && that.isSetThirdPartyAccount();
      if (this_present_thirdPartyAccount || that_present_thirdPartyAccount) {
        if (!(this_present_thirdPartyAccount && that_present_thirdPartyAccount))
          return false;
        if (!this.thirdPartyAccount.equals(that.thirdPartyAccount))
          return false;
      }

      boolean this_present_extras = true && this.isSetExtras();
      boolean that_present_extras = true && that.isSetExtras();
      if (this_present_extras || that_present_extras) {
        if (!(this_present_extras && that_present_extras))
          return false;
        if (!this.extras.equals(that.extras))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetThirdPartyAccount()) ? 131071 : 524287);
      if (isSetThirdPartyAccount())
        hashCode = hashCode * 8191 + thirdPartyAccount.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtras()) ? 131071 : 524287);
      if (isSetExtras())
        hashCode = hashCode * 8191 + extras.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(binding_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThirdPartyAccount()).compareTo(other.isSetThirdPartyAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdPartyAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccount, other.thirdPartyAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtras()).compareTo(other.isSetExtras());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtras()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extras, other.extras);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("binding_args(");
      boolean first = true;

      sb.append("thirdPartyAccount:");
      if (this.thirdPartyAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartyAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extras:");
      if (this.extras == null) {
        sb.append("null");
      } else {
        sb.append(this.extras);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (thirdPartyAccount != null) {
        thirdPartyAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class binding_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public binding_argsStandardScheme getScheme() {
        return new binding_argsStandardScheme();
      }
    }

    private static class binding_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<binding_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, binding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THIRD_PARTY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
                struct.thirdPartyAccount.read(iprot);
                struct.setThirdPartyAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXTRAS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.extras = new java.util.HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.extras.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setExtrasIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, binding_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thirdPartyAccount != null) {
          oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_FIELD_DESC);
          struct.thirdPartyAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.extras != null) {
          oprot.writeFieldBegin(EXTRAS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extras.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.extras.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class binding_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public binding_argsTupleScheme getScheme() {
        return new binding_argsTupleScheme();
      }
    }

    private static class binding_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<binding_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, binding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetThirdPartyAccount()) {
          optionals.set(0);
        }
        if (struct.isSetExtras()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetThirdPartyAccount()) {
          struct.thirdPartyAccount.write(oprot);
        }
        if (struct.isSetExtras()) {
          {
            oprot.writeI32(struct.extras.size());
            for (java.util.Map.Entry<String, String> _iter5 : struct.extras.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, binding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
          struct.thirdPartyAccount.read(iprot);
          struct.setThirdPartyAccountIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.extras = new java.util.HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.extras.put(_key7, _val8);
            }
          }
          struct.setExtrasIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class binding_result implements org.apache.thrift.TBase<binding_result, binding_result._Fields>, java.io.Serializable, Cloneable, Comparable<binding_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("binding_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new binding_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new binding_resultTupleSchemeFactory();

    public String success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(binding_result.class, metaDataMap);
    }

    public binding_result() {
    }

    public binding_result(
      String success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public binding_result(binding_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public binding_result deepCopy() {
      return new binding_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public binding_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public binding_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof binding_result)
        return this.equals((binding_result)that);
      return false;
    }

    public boolean equals(binding_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(binding_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("binding_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class binding_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public binding_resultStandardScheme getScheme() {
        return new binding_resultStandardScheme();
      }
    }

    private static class binding_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<binding_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, binding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, binding_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class binding_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public binding_resultTupleScheme getScheme() {
        return new binding_resultTupleScheme();
      }
    }

    private static class binding_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<binding_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, binding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, binding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bindConfirm_args implements org.apache.thrift.TBase<bindConfirm_args, bindConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindConfirm_args");

    private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXTRAS_FIELD_DESC = new org.apache.thrift.protocol.TField("extras", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("confirm", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindConfirm_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindConfirm_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount; // required
    public java.util.Map<String,String> extras; // required
    public boolean confirm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THIRD_PARTY_ACCOUNT((short)1, "thirdPartyAccount"),
      EXTRAS((short)2, "extras"),
      CONFIRM((short)3, "confirm");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THIRD_PARTY_ACCOUNT
            return THIRD_PARTY_ACCOUNT;
          case 2: // EXTRAS
            return EXTRAS;
          case 3: // CONFIRM
            return CONFIRM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIRM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO.class)));
      tmpMap.put(_Fields.EXTRAS, new org.apache.thrift.meta_data.FieldMetaData("extras", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("confirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindConfirm_args.class, metaDataMap);
    }

    public bindConfirm_args() {
    }

    public bindConfirm_args(
      com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount,
      java.util.Map<String,String> extras,
      boolean confirm)
    {
      this();
      this.thirdPartyAccount = thirdPartyAccount;
      this.extras = extras;
      this.confirm = confirm;
      setConfirmIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindConfirm_args(bindConfirm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetThirdPartyAccount()) {
        this.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO(other.thirdPartyAccount);
      }
      if (other.isSetExtras()) {
        java.util.Map<String,String> __this__extras = new java.util.HashMap<String,String>(other.extras);
        this.extras = __this__extras;
      }
      this.confirm = other.confirm;
    }

    public bindConfirm_args deepCopy() {
      return new bindConfirm_args(this);
    }

    @Override
    public void clear() {
      this.thirdPartyAccount = null;
      this.extras = null;
      setConfirmIsSet(false);
      this.confirm = false;
    }

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO getThirdPartyAccount() {
      return this.thirdPartyAccount;
    }

    public bindConfirm_args setThirdPartyAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount) {
      this.thirdPartyAccount = thirdPartyAccount;
      return this;
    }

    public void unsetThirdPartyAccount() {
      this.thirdPartyAccount = null;
    }

    /** Returns true if field thirdPartyAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdPartyAccount() {
      return this.thirdPartyAccount != null;
    }

    public void setThirdPartyAccountIsSet(boolean value) {
      if (!value) {
        this.thirdPartyAccount = null;
      }
    }

    public int getExtrasSize() {
      return (this.extras == null) ? 0 : this.extras.size();
    }

    public void putToExtras(String key, String val) {
      if (this.extras == null) {
        this.extras = new java.util.HashMap<String,String>();
      }
      this.extras.put(key, val);
    }

    public java.util.Map<String,String> getExtras() {
      return this.extras;
    }

    public bindConfirm_args setExtras(java.util.Map<String,String> extras) {
      this.extras = extras;
      return this;
    }

    public void unsetExtras() {
      this.extras = null;
    }

    /** Returns true if field extras is set (has been assigned a value) and false otherwise */
    public boolean isSetExtras() {
      return this.extras != null;
    }

    public void setExtrasIsSet(boolean value) {
      if (!value) {
        this.extras = null;
      }
    }

    public boolean isConfirm() {
      return this.confirm;
    }

    public bindConfirm_args setConfirm(boolean confirm) {
      this.confirm = confirm;
      setConfirmIsSet(true);
      return this;
    }

    public void unsetConfirm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIRM_ISSET_ID);
    }

    /** Returns true if field confirm is set (has been assigned a value) and false otherwise */
    public boolean isSetConfirm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIRM_ISSET_ID);
    }

    public void setConfirmIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIRM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        if (value == null) {
          unsetThirdPartyAccount();
        } else {
          setThirdPartyAccount((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO)value);
        }
        break;

      case EXTRAS:
        if (value == null) {
          unsetExtras();
        } else {
          setExtras((java.util.Map<String,String>)value);
        }
        break;

      case CONFIRM:
        if (value == null) {
          unsetConfirm();
        } else {
          setConfirm((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return getThirdPartyAccount();

      case EXTRAS:
        return getExtras();

      case CONFIRM:
        return isConfirm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return isSetThirdPartyAccount();
      case EXTRAS:
        return isSetExtras();
      case CONFIRM:
        return isSetConfirm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindConfirm_args)
        return this.equals((bindConfirm_args)that);
      return false;
    }

    public boolean equals(bindConfirm_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_thirdPartyAccount = true && this.isSetThirdPartyAccount();
      boolean that_present_thirdPartyAccount = true && that.isSetThirdPartyAccount();
      if (this_present_thirdPartyAccount || that_present_thirdPartyAccount) {
        if (!(this_present_thirdPartyAccount && that_present_thirdPartyAccount))
          return false;
        if (!this.thirdPartyAccount.equals(that.thirdPartyAccount))
          return false;
      }

      boolean this_present_extras = true && this.isSetExtras();
      boolean that_present_extras = true && that.isSetExtras();
      if (this_present_extras || that_present_extras) {
        if (!(this_present_extras && that_present_extras))
          return false;
        if (!this.extras.equals(that.extras))
          return false;
      }

      boolean this_present_confirm = true;
      boolean that_present_confirm = true;
      if (this_present_confirm || that_present_confirm) {
        if (!(this_present_confirm && that_present_confirm))
          return false;
        if (this.confirm != that.confirm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetThirdPartyAccount()) ? 131071 : 524287);
      if (isSetThirdPartyAccount())
        hashCode = hashCode * 8191 + thirdPartyAccount.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtras()) ? 131071 : 524287);
      if (isSetExtras())
        hashCode = hashCode * 8191 + extras.hashCode();

      hashCode = hashCode * 8191 + ((confirm) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(bindConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThirdPartyAccount()).compareTo(other.isSetThirdPartyAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdPartyAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccount, other.thirdPartyAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtras()).compareTo(other.isSetExtras());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtras()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extras, other.extras);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfirm()).compareTo(other.isSetConfirm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfirm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirm, other.confirm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindConfirm_args(");
      boolean first = true;

      sb.append("thirdPartyAccount:");
      if (this.thirdPartyAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartyAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extras:");
      if (this.extras == null) {
        sb.append("null");
      } else {
        sb.append(this.extras);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confirm:");
      sb.append(this.confirm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (thirdPartyAccount != null) {
        thirdPartyAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindConfirm_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindConfirm_argsStandardScheme getScheme() {
        return new bindConfirm_argsStandardScheme();
      }
    }

    private static class bindConfirm_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THIRD_PARTY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
                struct.thirdPartyAccount.read(iprot);
                struct.setThirdPartyAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXTRAS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.extras = new java.util.HashMap<String,String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.extras.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setExtrasIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIRM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.confirm = iprot.readBool();
                struct.setConfirmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thirdPartyAccount != null) {
          oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_FIELD_DESC);
          struct.thirdPartyAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.extras != null) {
          oprot.writeFieldBegin(EXTRAS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extras.size()));
            for (java.util.Map.Entry<String, String> _iter14 : struct.extras.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIRM_FIELD_DESC);
        oprot.writeBool(struct.confirm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindConfirm_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindConfirm_argsTupleScheme getScheme() {
        return new bindConfirm_argsTupleScheme();
      }
    }

    private static class bindConfirm_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetThirdPartyAccount()) {
          optionals.set(0);
        }
        if (struct.isSetExtras()) {
          optionals.set(1);
        }
        if (struct.isSetConfirm()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetThirdPartyAccount()) {
          struct.thirdPartyAccount.write(oprot);
        }
        if (struct.isSetExtras()) {
          {
            oprot.writeI32(struct.extras.size());
            for (java.util.Map.Entry<String, String> _iter15 : struct.extras.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
        if (struct.isSetConfirm()) {
          oprot.writeBool(struct.confirm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
          struct.thirdPartyAccount.read(iprot);
          struct.setThirdPartyAccountIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.extras = new java.util.HashMap<String,String>(2*_map16.size);
            String _key17;
            String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.extras.put(_key17, _val18);
            }
          }
          struct.setExtrasIsSet(true);
        }
        if (incoming.get(2)) {
          struct.confirm = iprot.readBool();
          struct.setConfirmIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bindConfirm_result implements org.apache.thrift.TBase<bindConfirm_result, bindConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindConfirm_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindConfirm_resultTupleSchemeFactory();

    public String success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindConfirm_result.class, metaDataMap);
    }

    public bindConfirm_result() {
    }

    public bindConfirm_result(
      String success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindConfirm_result(bindConfirm_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public bindConfirm_result deepCopy() {
      return new bindConfirm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bindConfirm_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public bindConfirm_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindConfirm_result)
        return this.equals((bindConfirm_result)that);
      return false;
    }

    public boolean equals(bindConfirm_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bindConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindConfirm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindConfirm_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindConfirm_resultStandardScheme getScheme() {
        return new bindConfirm_resultStandardScheme();
      }
    }

    private static class bindConfirm_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindConfirm_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindConfirm_resultTupleScheme getScheme() {
        return new bindConfirm_resultTupleScheme();
      }
    }

    private static class bindConfirm_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bindMessage_args implements org.apache.thrift.TBase<bindMessage_args, bindMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindMessage_args");

    private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXTRAS_FIELD_DESC = new org.apache.thrift.protocol.TField("extras", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindMessage_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount; // required
    public java.util.Map<String,String> extras; // required
    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THIRD_PARTY_ACCOUNT((short)1, "thirdPartyAccount"),
      EXTRAS((short)2, "extras"),
      CODE((short)3, "code");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THIRD_PARTY_ACCOUNT
            return THIRD_PARTY_ACCOUNT;
          case 2: // EXTRAS
            return EXTRAS;
          case 3: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO.class)));
      tmpMap.put(_Fields.EXTRAS, new org.apache.thrift.meta_data.FieldMetaData("extras", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindMessage_args.class, metaDataMap);
    }

    public bindMessage_args() {
    }

    public bindMessage_args(
      com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount,
      java.util.Map<String,String> extras,
      String code)
    {
      this();
      this.thirdPartyAccount = thirdPartyAccount;
      this.extras = extras;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindMessage_args(bindMessage_args other) {
      if (other.isSetThirdPartyAccount()) {
        this.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO(other.thirdPartyAccount);
      }
      if (other.isSetExtras()) {
        java.util.Map<String,String> __this__extras = new java.util.HashMap<String,String>(other.extras);
        this.extras = __this__extras;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public bindMessage_args deepCopy() {
      return new bindMessage_args(this);
    }

    @Override
    public void clear() {
      this.thirdPartyAccount = null;
      this.extras = null;
      this.code = null;
    }

    public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO getThirdPartyAccount() {
      return this.thirdPartyAccount;
    }

    public bindMessage_args setThirdPartyAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount) {
      this.thirdPartyAccount = thirdPartyAccount;
      return this;
    }

    public void unsetThirdPartyAccount() {
      this.thirdPartyAccount = null;
    }

    /** Returns true if field thirdPartyAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdPartyAccount() {
      return this.thirdPartyAccount != null;
    }

    public void setThirdPartyAccountIsSet(boolean value) {
      if (!value) {
        this.thirdPartyAccount = null;
      }
    }

    public int getExtrasSize() {
      return (this.extras == null) ? 0 : this.extras.size();
    }

    public void putToExtras(String key, String val) {
      if (this.extras == null) {
        this.extras = new java.util.HashMap<String,String>();
      }
      this.extras.put(key, val);
    }

    public java.util.Map<String,String> getExtras() {
      return this.extras;
    }

    public bindMessage_args setExtras(java.util.Map<String,String> extras) {
      this.extras = extras;
      return this;
    }

    public void unsetExtras() {
      this.extras = null;
    }

    /** Returns true if field extras is set (has been assigned a value) and false otherwise */
    public boolean isSetExtras() {
      return this.extras != null;
    }

    public void setExtrasIsSet(boolean value) {
      if (!value) {
        this.extras = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public bindMessage_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        if (value == null) {
          unsetThirdPartyAccount();
        } else {
          setThirdPartyAccount((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO)value);
        }
        break;

      case EXTRAS:
        if (value == null) {
          unsetExtras();
        } else {
          setExtras((java.util.Map<String,String>)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return getThirdPartyAccount();

      case EXTRAS:
        return getExtras();

      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THIRD_PARTY_ACCOUNT:
        return isSetThirdPartyAccount();
      case EXTRAS:
        return isSetExtras();
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindMessage_args)
        return this.equals((bindMessage_args)that);
      return false;
    }

    public boolean equals(bindMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_thirdPartyAccount = true && this.isSetThirdPartyAccount();
      boolean that_present_thirdPartyAccount = true && that.isSetThirdPartyAccount();
      if (this_present_thirdPartyAccount || that_present_thirdPartyAccount) {
        if (!(this_present_thirdPartyAccount && that_present_thirdPartyAccount))
          return false;
        if (!this.thirdPartyAccount.equals(that.thirdPartyAccount))
          return false;
      }

      boolean this_present_extras = true && this.isSetExtras();
      boolean that_present_extras = true && that.isSetExtras();
      if (this_present_extras || that_present_extras) {
        if (!(this_present_extras && that_present_extras))
          return false;
        if (!this.extras.equals(that.extras))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetThirdPartyAccount()) ? 131071 : 524287);
      if (isSetThirdPartyAccount())
        hashCode = hashCode * 8191 + thirdPartyAccount.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtras()) ? 131071 : 524287);
      if (isSetExtras())
        hashCode = hashCode * 8191 + extras.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bindMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThirdPartyAccount()).compareTo(other.isSetThirdPartyAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdPartyAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccount, other.thirdPartyAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtras()).compareTo(other.isSetExtras());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtras()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extras, other.extras);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindMessage_args(");
      boolean first = true;

      sb.append("thirdPartyAccount:");
      if (this.thirdPartyAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartyAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extras:");
      if (this.extras == null) {
        sb.append("null");
      } else {
        sb.append(this.extras);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (thirdPartyAccount != null) {
        thirdPartyAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindMessage_argsStandardScheme getScheme() {
        return new bindMessage_argsStandardScheme();
      }
    }

    private static class bindMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THIRD_PARTY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
                struct.thirdPartyAccount.read(iprot);
                struct.setThirdPartyAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXTRAS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.extras = new java.util.HashMap<String,String>(2*_map20.size);
                  String _key21;
                  String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.extras.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setExtrasIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thirdPartyAccount != null) {
          oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_FIELD_DESC);
          struct.thirdPartyAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.extras != null) {
          oprot.writeFieldBegin(EXTRAS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extras.size()));
            for (java.util.Map.Entry<String, String> _iter24 : struct.extras.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindMessage_argsTupleScheme getScheme() {
        return new bindMessage_argsTupleScheme();
      }
    }

    private static class bindMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetThirdPartyAccount()) {
          optionals.set(0);
        }
        if (struct.isSetExtras()) {
          optionals.set(1);
        }
        if (struct.isSetCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetThirdPartyAccount()) {
          struct.thirdPartyAccount.write(oprot);
        }
        if (struct.isSetExtras()) {
          {
            oprot.writeI32(struct.extras.size());
            for (java.util.Map.Entry<String, String> _iter25 : struct.extras.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
          struct.thirdPartyAccount.read(iprot);
          struct.setThirdPartyAccountIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.extras = new java.util.HashMap<String,String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.extras.put(_key27, _val28);
            }
          }
          struct.setExtrasIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bindMessage_result implements org.apache.thrift.TBase<bindMessage_result, bindMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindMessage_resultTupleSchemeFactory();

    public String success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindMessage_result.class, metaDataMap);
    }

    public bindMessage_result() {
    }

    public bindMessage_result(
      String success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindMessage_result(bindMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public bindMessage_result deepCopy() {
      return new bindMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bindMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public bindMessage_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindMessage_result)
        return this.equals((bindMessage_result)that);
      return false;
    }

    public boolean equals(bindMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bindMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindMessage_resultStandardScheme getScheme() {
        return new bindMessage_resultStandardScheme();
      }
    }

    private static class bindMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindMessage_resultTupleScheme getScheme() {
        return new bindMessage_resultTupleScheme();
      }
    }

    private static class bindMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class synchronizePosition_args implements org.apache.thrift.TBase<synchronizePosition_args, synchronizePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizePosition_args");

    private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new synchronizePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new synchronizePosition_argsTupleSchemeFactory();

    public java.util.List<String> positions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSITIONS((short)1, "positions");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSITIONS
            return POSITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizePosition_args.class, metaDataMap);
    }

    public synchronizePosition_args() {
    }

    public synchronizePosition_args(
      java.util.List<String> positions)
    {
      this();
      this.positions = positions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizePosition_args(synchronizePosition_args other) {
      if (other.isSetPositions()) {
        java.util.List<String> __this__positions = new java.util.ArrayList<String>(other.positions);
        this.positions = __this__positions;
      }
    }

    public synchronizePosition_args deepCopy() {
      return new synchronizePosition_args(this);
    }

    @Override
    public void clear() {
      this.positions = null;
    }

    public int getPositionsSize() {
      return (this.positions == null) ? 0 : this.positions.size();
    }

    public java.util.Iterator<String> getPositionsIterator() {
      return (this.positions == null) ? null : this.positions.iterator();
    }

    public void addToPositions(String elem) {
      if (this.positions == null) {
        this.positions = new java.util.ArrayList<String>();
      }
      this.positions.add(elem);
    }

    public java.util.List<String> getPositions() {
      return this.positions;
    }

    public synchronizePosition_args setPositions(java.util.List<String> positions) {
      this.positions = positions;
      return this;
    }

    public void unsetPositions() {
      this.positions = null;
    }

    /** Returns true if field positions is set (has been assigned a value) and false otherwise */
    public boolean isSetPositions() {
      return this.positions != null;
    }

    public void setPositionsIsSet(boolean value) {
      if (!value) {
        this.positions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case POSITIONS:
        if (value == null) {
          unsetPositions();
        } else {
          setPositions((java.util.List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POSITIONS:
        return getPositions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POSITIONS:
        return isSetPositions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizePosition_args)
        return this.equals((synchronizePosition_args)that);
      return false;
    }

    public boolean equals(synchronizePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_positions = true && this.isSetPositions();
      boolean that_present_positions = true && that.isSetPositions();
      if (this_present_positions || that_present_positions) {
        if (!(this_present_positions && that_present_positions))
          return false;
        if (!this.positions.equals(that.positions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPositions()) ? 131071 : 524287);
      if (isSetPositions())
        hashCode = hashCode * 8191 + positions.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(synchronizePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizePosition_args(");
      boolean first = true;

      sb.append("positions:");
      if (this.positions == null) {
        sb.append("null");
      } else {
        sb.append(this.positions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizePosition_argsStandardScheme getScheme() {
        return new synchronizePosition_argsStandardScheme();
      }
    }

    private static class synchronizePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<synchronizePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                  struct.positions = new java.util.ArrayList<String>(_list30.size);
                  String _elem31;
                  for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                  {
                    _elem31 = iprot.readString();
                    struct.positions.add(_elem31);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.positions != null) {
          oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.positions.size()));
            for (String _iter33 : struct.positions)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizePosition_argsTupleScheme getScheme() {
        return new synchronizePosition_argsTupleScheme();
      }
    }

    private static class synchronizePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<synchronizePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPositions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPositions()) {
          {
            oprot.writeI32(struct.positions.size());
            for (String _iter34 : struct.positions)
            {
              oprot.writeString(_iter34);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.positions = new java.util.ArrayList<String>(_list35.size);
            String _elem36;
            for (int _i37 = 0; _i37 < _list35.size; ++_i37)
            {
              _elem36 = iprot.readString();
              struct.positions.add(_elem36);
            }
          }
          struct.setPositionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class synchronizePosition_result implements org.apache.thrift.TBase<synchronizePosition_result, synchronizePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizePosition_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new synchronizePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new synchronizePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizePosition_result.class, metaDataMap);
    }

    public synchronizePosition_result() {
    }

    public synchronizePosition_result(
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizePosition_result(synchronizePosition_result other) {
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public synchronizePosition_result deepCopy() {
      return new synchronizePosition_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public synchronizePosition_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizePosition_result)
        return this.equals((synchronizePosition_result)that);
      return false;
    }

    public boolean equals(synchronizePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(synchronizePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchronizePosition_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizePosition_resultStandardScheme getScheme() {
        return new synchronizePosition_resultStandardScheme();
      }
    }

    private static class synchronizePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<synchronizePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizePosition_resultTupleScheme getScheme() {
        return new synchronizePosition_resultTupleScheme();
      }
    }

    private static class synchronizePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<synchronizePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
