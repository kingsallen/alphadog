/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class ConfigSysAppTemplateDO implements org.apache.thrift.TBase<ConfigSysAppTemplateDO, ConfigSysAppTemplateDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysAppTemplateDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysAppTemplateDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("enname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("needed", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ENTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entitle", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysAppTemplateDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysAppTemplateDOTupleSchemeFactory();

  public int id; // optional
  public String enname; // optional
  public String chname; // optional
  public double priority; // optional
  public double display; // optional
  public double needed; // optional
  public double type; // optional
  public String remark; // optional
  public String entitle; // optional
  public int parentId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ENNAME((short)2, "enname"),
    CHNAME((short)3, "chname"),
    PRIORITY((short)4, "priority"),
    DISPLAY((short)5, "display"),
    NEEDED((short)6, "needed"),
    TYPE((short)7, "type"),
    REMARK((short)8, "remark"),
    ENTITLE((short)9, "entitle"),
    PARENT_ID((short)10, "parentId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ENNAME
          return ENNAME;
        case 3: // CHNAME
          return CHNAME;
        case 4: // PRIORITY
          return PRIORITY;
        case 5: // DISPLAY
          return DISPLAY;
        case 6: // NEEDED
          return NEEDED;
        case 7: // TYPE
          return TYPE;
        case 8: // REMARK
          return REMARK;
        case 9: // ENTITLE
          return ENTITLE;
        case 10: // PARENT_ID
          return PARENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRIORITY_ISSET_ID = 1;
  private static final int __DISPLAY_ISSET_ID = 2;
  private static final int __NEEDED_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private static final int __PARENTID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ENNAME,_Fields.CHNAME,_Fields.PRIORITY,_Fields.DISPLAY,_Fields.NEEDED,_Fields.TYPE,_Fields.REMARK,_Fields.ENTITLE,_Fields.PARENT_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENNAME, new org.apache.thrift.meta_data.FieldMetaData("enname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHNAME, new org.apache.thrift.meta_data.FieldMetaData("chname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEEDED, new org.apache.thrift.meta_data.FieldMetaData("needed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTITLE, new org.apache.thrift.meta_data.FieldMetaData("entitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysAppTemplateDO.class, metaDataMap);
  }

  public ConfigSysAppTemplateDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysAppTemplateDO(ConfigSysAppTemplateDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetEnname()) {
      this.enname = other.enname;
    }
    if (other.isSetChname()) {
      this.chname = other.chname;
    }
    this.priority = other.priority;
    this.display = other.display;
    this.needed = other.needed;
    this.type = other.type;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetEntitle()) {
      this.entitle = other.entitle;
    }
    this.parentId = other.parentId;
  }

  public ConfigSysAppTemplateDO deepCopy() {
    return new ConfigSysAppTemplateDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.enname = null;
    this.chname = null;
    setPriorityIsSet(false);
    this.priority = 0.0;
    setDisplayIsSet(false);
    this.display = 0.0;
    setNeededIsSet(false);
    this.needed = 0.0;
    setTypeIsSet(false);
    this.type = 0.0;
    this.remark = null;
    this.entitle = null;
    setParentIdIsSet(false);
    this.parentId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysAppTemplateDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getEnname() {
    return this.enname;
  }

  public ConfigSysAppTemplateDO setEnname(String enname) {
    this.enname = enname;
    return this;
  }

  public void unsetEnname() {
    this.enname = null;
  }

  /** Returns true if field enname is set (has been assigned a value) and false otherwise */
  public boolean isSetEnname() {
    return this.enname != null;
  }

  public void setEnnameIsSet(boolean value) {
    if (!value) {
      this.enname = null;
    }
  }

  public String getChname() {
    return this.chname;
  }

  public ConfigSysAppTemplateDO setChname(String chname) {
    this.chname = chname;
    return this;
  }

  public void unsetChname() {
    this.chname = null;
  }

  /** Returns true if field chname is set (has been assigned a value) and false otherwise */
  public boolean isSetChname() {
    return this.chname != null;
  }

  public void setChnameIsSet(boolean value) {
    if (!value) {
      this.chname = null;
    }
  }

  public double getPriority() {
    return this.priority;
  }

  public ConfigSysAppTemplateDO setPriority(double priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public double getDisplay() {
    return this.display;
  }

  public ConfigSysAppTemplateDO setDisplay(double display) {
    this.display = display;
    setDisplayIsSet(true);
    return this;
  }

  public void unsetDisplay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  public void setDisplayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISPLAY_ISSET_ID, value);
  }

  public double getNeeded() {
    return this.needed;
  }

  public ConfigSysAppTemplateDO setNeeded(double needed) {
    this.needed = needed;
    setNeededIsSet(true);
    return this;
  }

  public void unsetNeeded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDED_ISSET_ID);
  }

  /** Returns true if field needed is set (has been assigned a value) and false otherwise */
  public boolean isSetNeeded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDED_ISSET_ID);
  }

  public void setNeededIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDED_ISSET_ID, value);
  }

  public double getType() {
    return this.type;
  }

  public ConfigSysAppTemplateDO setType(double type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ConfigSysAppTemplateDO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getEntitle() {
    return this.entitle;
  }

  public ConfigSysAppTemplateDO setEntitle(String entitle) {
    this.entitle = entitle;
    return this;
  }

  public void unsetEntitle() {
    this.entitle = null;
  }

  /** Returns true if field entitle is set (has been assigned a value) and false otherwise */
  public boolean isSetEntitle() {
    return this.entitle != null;
  }

  public void setEntitleIsSet(boolean value) {
    if (!value) {
      this.entitle = null;
    }
  }

  public int getParentId() {
    return this.parentId;
  }

  public ConfigSysAppTemplateDO setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ENNAME:
      if (value == null) {
        unsetEnname();
      } else {
        setEnname((String)value);
      }
      break;

    case CHNAME:
      if (value == null) {
        unsetChname();
      } else {
        setChname((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Double)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((Double)value);
      }
      break;

    case NEEDED:
      if (value == null) {
        unsetNeeded();
      } else {
        setNeeded((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ENTITLE:
      if (value == null) {
        unsetEntitle();
      } else {
        setEntitle((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ENNAME:
      return getEnname();

    case CHNAME:
      return getChname();

    case PRIORITY:
      return getPriority();

    case DISPLAY:
      return getDisplay();

    case NEEDED:
      return getNeeded();

    case TYPE:
      return getType();

    case REMARK:
      return getRemark();

    case ENTITLE:
      return getEntitle();

    case PARENT_ID:
      return getParentId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ENNAME:
      return isSetEnname();
    case CHNAME:
      return isSetChname();
    case PRIORITY:
      return isSetPriority();
    case DISPLAY:
      return isSetDisplay();
    case NEEDED:
      return isSetNeeded();
    case TYPE:
      return isSetType();
    case REMARK:
      return isSetRemark();
    case ENTITLE:
      return isSetEntitle();
    case PARENT_ID:
      return isSetParentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysAppTemplateDO)
      return this.equals((ConfigSysAppTemplateDO)that);
    return false;
  }

  public boolean equals(ConfigSysAppTemplateDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_enname = true && this.isSetEnname();
    boolean that_present_enname = true && that.isSetEnname();
    if (this_present_enname || that_present_enname) {
      if (!(this_present_enname && that_present_enname))
        return false;
      if (!this.enname.equals(that.enname))
        return false;
    }

    boolean this_present_chname = true && this.isSetChname();
    boolean that_present_chname = true && that.isSetChname();
    if (this_present_chname || that_present_chname) {
      if (!(this_present_chname && that_present_chname))
        return false;
      if (!this.chname.equals(that.chname))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_display = true && this.isSetDisplay();
    boolean that_present_display = true && that.isSetDisplay();
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (this.display != that.display)
        return false;
    }

    boolean this_present_needed = true && this.isSetNeeded();
    boolean that_present_needed = true && that.isSetNeeded();
    if (this_present_needed || that_present_needed) {
      if (!(this_present_needed && that_present_needed))
        return false;
      if (this.needed != that.needed)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_entitle = true && this.isSetEntitle();
    boolean that_present_entitle = true && that.isSetEntitle();
    if (this_present_entitle || that_present_entitle) {
      if (!(this_present_entitle && that_present_entitle))
        return false;
      if (!this.entitle.equals(that.entitle))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetEnname()) ? 131071 : 524287);
    if (isSetEnname())
      hashCode = hashCode * 8191 + enname.hashCode();

    hashCode = hashCode * 8191 + ((isSetChname()) ? 131071 : 524287);
    if (isSetChname())
      hashCode = hashCode * 8191 + chname.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priority);

    hashCode = hashCode * 8191 + ((isSetDisplay()) ? 131071 : 524287);
    if (isSetDisplay())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(display);

    hashCode = hashCode * 8191 + ((isSetNeeded()) ? 131071 : 524287);
    if (isSetNeeded())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(needed);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(type);

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntitle()) ? 131071 : 524287);
    if (isSetEntitle())
      hashCode = hashCode * 8191 + entitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentId()) ? 131071 : 524287);
    if (isSetParentId())
      hashCode = hashCode * 8191 + parentId;

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysAppTemplateDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnname()).compareTo(other.isSetEnname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enname, other.enname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChname()).compareTo(other.isSetChname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chname, other.chname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeeded()).compareTo(other.isSetNeeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needed, other.needed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntitle()).compareTo(other.isSetEntitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entitle, other.entitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysAppTemplateDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetEnname()) {
      if (!first) sb.append(", ");
      sb.append("enname:");
      if (this.enname == null) {
        sb.append("null");
      } else {
        sb.append(this.enname);
      }
      first = false;
    }
    if (isSetChname()) {
      if (!first) sb.append(", ");
      sb.append("chname:");
      if (this.chname == null) {
        sb.append("null");
      } else {
        sb.append(this.chname);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetDisplay()) {
      if (!first) sb.append(", ");
      sb.append("display:");
      sb.append(this.display);
      first = false;
    }
    if (isSetNeeded()) {
      if (!first) sb.append(", ");
      sb.append("needed:");
      sb.append(this.needed);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetEntitle()) {
      if (!first) sb.append(", ");
      sb.append("entitle:");
      if (this.entitle == null) {
        sb.append("null");
      } else {
        sb.append(this.entitle);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysAppTemplateDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysAppTemplateDOStandardScheme getScheme() {
      return new ConfigSysAppTemplateDOStandardScheme();
    }
  }

  private static class ConfigSysAppTemplateDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysAppTemplateDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysAppTemplateDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enname = iprot.readString();
              struct.setEnnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chname = iprot.readString();
              struct.setChnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priority = iprot.readDouble();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.display = iprot.readDouble();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.needed = iprot.readDouble();
              struct.setNeededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.type = iprot.readDouble();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENTITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entitle = iprot.readString();
              struct.setEntitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysAppTemplateDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.enname != null) {
        if (struct.isSetEnname()) {
          oprot.writeFieldBegin(ENNAME_FIELD_DESC);
          oprot.writeString(struct.enname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chname != null) {
        if (struct.isSetChname()) {
          oprot.writeFieldBegin(CHNAME_FIELD_DESC);
          oprot.writeString(struct.chname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeDouble(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisplay()) {
        oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
        oprot.writeDouble(struct.display);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNeeded()) {
        oprot.writeFieldBegin(NEEDED_FIELD_DESC);
        oprot.writeDouble(struct.needed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeDouble(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entitle != null) {
        if (struct.isSetEntitle()) {
          oprot.writeFieldBegin(ENTITLE_FIELD_DESC);
          oprot.writeString(struct.entitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentId()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysAppTemplateDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysAppTemplateDOTupleScheme getScheme() {
      return new ConfigSysAppTemplateDOTupleScheme();
    }
  }

  private static class ConfigSysAppTemplateDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysAppTemplateDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysAppTemplateDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetEnname()) {
        optionals.set(1);
      }
      if (struct.isSetChname()) {
        optionals.set(2);
      }
      if (struct.isSetPriority()) {
        optionals.set(3);
      }
      if (struct.isSetDisplay()) {
        optionals.set(4);
      }
      if (struct.isSetNeeded()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetEntitle()) {
        optionals.set(8);
      }
      if (struct.isSetParentId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetEnname()) {
        oprot.writeString(struct.enname);
      }
      if (struct.isSetChname()) {
        oprot.writeString(struct.chname);
      }
      if (struct.isSetPriority()) {
        oprot.writeDouble(struct.priority);
      }
      if (struct.isSetDisplay()) {
        oprot.writeDouble(struct.display);
      }
      if (struct.isSetNeeded()) {
        oprot.writeDouble(struct.needed);
      }
      if (struct.isSetType()) {
        oprot.writeDouble(struct.type);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetEntitle()) {
        oprot.writeString(struct.entitle);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysAppTemplateDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enname = iprot.readString();
        struct.setEnnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chname = iprot.readString();
        struct.setChnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.priority = iprot.readDouble();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.display = iprot.readDouble();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.needed = iprot.readDouble();
        struct.setNeededIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readDouble();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.entitle = iprot.readString();
        struct.setEntitleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

