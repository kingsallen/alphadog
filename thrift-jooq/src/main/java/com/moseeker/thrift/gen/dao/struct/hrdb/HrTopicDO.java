/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-20")
public class HrTopicDO implements org.apache.thrift.TBase<HrTopicDO, HrTopicDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrTopicDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrTopicDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHARE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHARE_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("shareLogo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHARE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDescription", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STYLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("styleId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrTopicDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrTopicDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public java.lang.String shareTitle; // optional
  public java.lang.String shareLogo; // optional
  public java.lang.String shareDescription; // optional
  public int styleId; // optional
  public int creator; // optional
  public double disable; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    SHARE_TITLE((short)3, "shareTitle"),
    SHARE_LOGO((short)4, "shareLogo"),
    SHARE_DESCRIPTION((short)5, "shareDescription"),
    STYLE_ID((short)6, "styleId"),
    CREATOR((short)7, "creator"),
    DISABLE((short)8, "disable"),
    CREATE_TIME((short)9, "createTime"),
    UPDATE_TIME((short)10, "updateTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // SHARE_TITLE
          return SHARE_TITLE;
        case 4: // SHARE_LOGO
          return SHARE_LOGO;
        case 5: // SHARE_DESCRIPTION
          return SHARE_DESCRIPTION;
        case 6: // STYLE_ID
          return STYLE_ID;
        case 7: // CREATOR
          return CREATOR;
        case 8: // DISABLE
          return DISABLE;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __STYLEID_ISSET_ID = 2;
  private static final int __CREATOR_ISSET_ID = 3;
  private static final int __DISABLE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.SHARE_TITLE,_Fields.SHARE_LOGO,_Fields.SHARE_DESCRIPTION,_Fields.STYLE_ID,_Fields.CREATOR,_Fields.DISABLE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("shareTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_LOGO, new org.apache.thrift.meta_data.FieldMetaData("shareLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("shareDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STYLE_ID, new org.apache.thrift.meta_data.FieldMetaData("styleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrTopicDO.class, metaDataMap);
  }

  public HrTopicDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrTopicDO(HrTopicDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    if (other.isSetShareTitle()) {
      this.shareTitle = other.shareTitle;
    }
    if (other.isSetShareLogo()) {
      this.shareLogo = other.shareLogo;
    }
    if (other.isSetShareDescription()) {
      this.shareDescription = other.shareDescription;
    }
    this.styleId = other.styleId;
    this.creator = other.creator;
    this.disable = other.disable;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public HrTopicDO deepCopy() {
    return new HrTopicDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.shareTitle = null;
    this.shareLogo = null;
    this.shareDescription = null;
    setStyleIdIsSet(false);
    this.styleId = 0;
    setCreatorIsSet(false);
    this.creator = 0;
    setDisableIsSet(false);
    this.disable = 0.0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public HrTopicDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrTopicDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public java.lang.String getShareTitle() {
    return this.shareTitle;
  }

  public HrTopicDO setShareTitle(java.lang.String shareTitle) {
    this.shareTitle = shareTitle;
    return this;
  }

  public void unsetShareTitle() {
    this.shareTitle = null;
  }

  /** Returns true if field shareTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTitle() {
    return this.shareTitle != null;
  }

  public void setShareTitleIsSet(boolean value) {
    if (!value) {
      this.shareTitle = null;
    }
  }

  public java.lang.String getShareLogo() {
    return this.shareLogo;
  }

  public HrTopicDO setShareLogo(java.lang.String shareLogo) {
    this.shareLogo = shareLogo;
    return this;
  }

  public void unsetShareLogo() {
    this.shareLogo = null;
  }

  /** Returns true if field shareLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetShareLogo() {
    return this.shareLogo != null;
  }

  public void setShareLogoIsSet(boolean value) {
    if (!value) {
      this.shareLogo = null;
    }
  }

  public java.lang.String getShareDescription() {
    return this.shareDescription;
  }

  public HrTopicDO setShareDescription(java.lang.String shareDescription) {
    this.shareDescription = shareDescription;
    return this;
  }

  public void unsetShareDescription() {
    this.shareDescription = null;
  }

  /** Returns true if field shareDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDescription() {
    return this.shareDescription != null;
  }

  public void setShareDescriptionIsSet(boolean value) {
    if (!value) {
      this.shareDescription = null;
    }
  }

  public int getStyleId() {
    return this.styleId;
  }

  public HrTopicDO setStyleId(int styleId) {
    this.styleId = styleId;
    setStyleIdIsSet(true);
    return this;
  }

  public void unsetStyleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STYLEID_ISSET_ID);
  }

  /** Returns true if field styleId is set (has been assigned a value) and false otherwise */
  public boolean isSetStyleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STYLEID_ISSET_ID);
  }

  public void setStyleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STYLEID_ISSET_ID, value);
  }

  public int getCreator() {
    return this.creator;
  }

  public HrTopicDO setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);
    return this;
  }

  public void unsetCreator() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public double getDisable() {
    return this.disable;
  }

  public HrTopicDO setDisable(double disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public HrTopicDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public HrTopicDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case SHARE_TITLE:
      if (value == null) {
        unsetShareTitle();
      } else {
        setShareTitle((java.lang.String)value);
      }
      break;

    case SHARE_LOGO:
      if (value == null) {
        unsetShareLogo();
      } else {
        setShareLogo((java.lang.String)value);
      }
      break;

    case SHARE_DESCRIPTION:
      if (value == null) {
        unsetShareDescription();
      } else {
        setShareDescription((java.lang.String)value);
      }
      break;

    case STYLE_ID:
      if (value == null) {
        unsetStyleId();
      } else {
        setStyleId((java.lang.Integer)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((java.lang.Integer)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((java.lang.Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case SHARE_TITLE:
      return getShareTitle();

    case SHARE_LOGO:
      return getShareLogo();

    case SHARE_DESCRIPTION:
      return getShareDescription();

    case STYLE_ID:
      return getStyleId();

    case CREATOR:
      return getCreator();

    case DISABLE:
      return getDisable();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case SHARE_TITLE:
      return isSetShareTitle();
    case SHARE_LOGO:
      return isSetShareLogo();
    case SHARE_DESCRIPTION:
      return isSetShareDescription();
    case STYLE_ID:
      return isSetStyleId();
    case CREATOR:
      return isSetCreator();
    case DISABLE:
      return isSetDisable();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrTopicDO)
      return this.equals((HrTopicDO)that);
    return false;
  }

  public boolean equals(HrTopicDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_shareTitle = true && this.isSetShareTitle();
    boolean that_present_shareTitle = true && that.isSetShareTitle();
    if (this_present_shareTitle || that_present_shareTitle) {
      if (!(this_present_shareTitle && that_present_shareTitle))
        return false;
      if (!this.shareTitle.equals(that.shareTitle))
        return false;
    }

    boolean this_present_shareLogo = true && this.isSetShareLogo();
    boolean that_present_shareLogo = true && that.isSetShareLogo();
    if (this_present_shareLogo || that_present_shareLogo) {
      if (!(this_present_shareLogo && that_present_shareLogo))
        return false;
      if (!this.shareLogo.equals(that.shareLogo))
        return false;
    }

    boolean this_present_shareDescription = true && this.isSetShareDescription();
    boolean that_present_shareDescription = true && that.isSetShareDescription();
    if (this_present_shareDescription || that_present_shareDescription) {
      if (!(this_present_shareDescription && that_present_shareDescription))
        return false;
      if (!this.shareDescription.equals(that.shareDescription))
        return false;
    }

    boolean this_present_styleId = true && this.isSetStyleId();
    boolean that_present_styleId = true && that.isSetStyleId();
    if (this_present_styleId || that_present_styleId) {
      if (!(this_present_styleId && that_present_styleId))
        return false;
      if (this.styleId != that.styleId)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetShareTitle()) ? 131071 : 524287);
    if (isSetShareTitle())
      hashCode = hashCode * 8191 + shareTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareLogo()) ? 131071 : 524287);
    if (isSetShareLogo())
      hashCode = hashCode * 8191 + shareLogo.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareDescription()) ? 131071 : 524287);
    if (isSetShareDescription())
      hashCode = hashCode * 8191 + shareDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetStyleId()) ? 131071 : 524287);
    if (isSetStyleId())
      hashCode = hashCode * 8191 + styleId;

    hashCode = hashCode * 8191 + ((isSetCreator()) ? 131071 : 524287);
    if (isSetCreator())
      hashCode = hashCode * 8191 + creator;

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disable);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrTopicDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareTitle()).compareTo(other.isSetShareTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTitle, other.shareTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareLogo()).compareTo(other.isSetShareLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareLogo, other.shareLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareDescription()).compareTo(other.isSetShareDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDescription, other.shareDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStyleId()).compareTo(other.isSetStyleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStyleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.styleId, other.styleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrTopicDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetShareTitle()) {
      if (!first) sb.append(", ");
      sb.append("shareTitle:");
      if (this.shareTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.shareTitle);
      }
      first = false;
    }
    if (isSetShareLogo()) {
      if (!first) sb.append(", ");
      sb.append("shareLogo:");
      if (this.shareLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.shareLogo);
      }
      first = false;
    }
    if (isSetShareDescription()) {
      if (!first) sb.append(", ");
      sb.append("shareDescription:");
      if (this.shareDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.shareDescription);
      }
      first = false;
    }
    if (isSetStyleId()) {
      if (!first) sb.append(", ");
      sb.append("styleId:");
      sb.append(this.styleId);
      first = false;
    }
    if (isSetCreator()) {
      if (!first) sb.append(", ");
      sb.append("creator:");
      sb.append(this.creator);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrTopicDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrTopicDOStandardScheme getScheme() {
      return new HrTopicDOStandardScheme();
    }
  }

  private static class HrTopicDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrTopicDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrTopicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHARE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareTitle = iprot.readString();
              struct.setShareTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARE_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareLogo = iprot.readString();
              struct.setShareLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareDescription = iprot.readString();
              struct.setShareDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STYLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.styleId = iprot.readI32();
              struct.setStyleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator = iprot.readI32();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disable = iprot.readDouble();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrTopicDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.shareTitle != null) {
        if (struct.isSetShareTitle()) {
          oprot.writeFieldBegin(SHARE_TITLE_FIELD_DESC);
          oprot.writeString(struct.shareTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareLogo != null) {
        if (struct.isSetShareLogo()) {
          oprot.writeFieldBegin(SHARE_LOGO_FIELD_DESC);
          oprot.writeString(struct.shareLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareDescription != null) {
        if (struct.isSetShareDescription()) {
          oprot.writeFieldBegin(SHARE_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.shareDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStyleId()) {
        oprot.writeFieldBegin(STYLE_ID_FIELD_DESC);
        oprot.writeI32(struct.styleId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreator()) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeI32(struct.creator);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeDouble(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrTopicDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrTopicDOTupleScheme getScheme() {
      return new HrTopicDOTupleScheme();
    }
  }

  private static class HrTopicDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrTopicDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrTopicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetShareTitle()) {
        optionals.set(2);
      }
      if (struct.isSetShareLogo()) {
        optionals.set(3);
      }
      if (struct.isSetShareDescription()) {
        optionals.set(4);
      }
      if (struct.isSetStyleId()) {
        optionals.set(5);
      }
      if (struct.isSetCreator()) {
        optionals.set(6);
      }
      if (struct.isSetDisable()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetShareTitle()) {
        oprot.writeString(struct.shareTitle);
      }
      if (struct.isSetShareLogo()) {
        oprot.writeString(struct.shareLogo);
      }
      if (struct.isSetShareDescription()) {
        oprot.writeString(struct.shareDescription);
      }
      if (struct.isSetStyleId()) {
        oprot.writeI32(struct.styleId);
      }
      if (struct.isSetCreator()) {
        oprot.writeI32(struct.creator);
      }
      if (struct.isSetDisable()) {
        oprot.writeDouble(struct.disable);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrTopicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shareTitle = iprot.readString();
        struct.setShareTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shareLogo = iprot.readString();
        struct.setShareLogoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shareDescription = iprot.readString();
        struct.setShareDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.styleId = iprot.readI32();
        struct.setStyleIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creator = iprot.readI32();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.disable = iprot.readDouble();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

