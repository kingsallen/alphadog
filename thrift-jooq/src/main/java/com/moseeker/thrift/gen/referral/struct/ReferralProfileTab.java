/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.referral.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-01")
public class ReferralProfileTab implements org.apache.thrift.TBase<ReferralProfileTab, ReferralProfileTab._Fields>, java.io.Serializable, Cloneable, Comparable<ReferralProfileTab> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferralProfileTab");

  private static final org.apache.thrift.protocol.TField POSITION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionTitle", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPLOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReferralProfileTabStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReferralProfileTabTupleSchemeFactory();

  public String positionTitle; // optional
  public String sender; // optional
  public String uploadTime; // optional
  public String filePath; // optional
  public int id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POSITION_TITLE((short)1, "positionTitle"),
    SENDER((short)2, "sender"),
    UPLOAD_TIME((short)3, "uploadTime"),
    FILE_PATH((short)4, "filePath"),
    ID((short)5, "id");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSITION_TITLE
          return POSITION_TITLE;
        case 2: // SENDER
          return SENDER;
        case 3: // UPLOAD_TIME
          return UPLOAD_TIME;
        case 4: // FILE_PATH
          return FILE_PATH;
        case 5: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POSITION_TITLE,_Fields.SENDER,_Fields.UPLOAD_TIME,_Fields.FILE_PATH,_Fields.ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSITION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("positionTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("uploadTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferralProfileTab.class, metaDataMap);
  }

  public ReferralProfileTab() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferralProfileTab(ReferralProfileTab other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPositionTitle()) {
      this.positionTitle = other.positionTitle;
    }
    if (other.isSetSender()) {
      this.sender = other.sender;
    }
    if (other.isSetUploadTime()) {
      this.uploadTime = other.uploadTime;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    this.id = other.id;
  }

  public ReferralProfileTab deepCopy() {
    return new ReferralProfileTab(this);
  }

  @Override
  public void clear() {
    this.positionTitle = null;
    this.sender = null;
    this.uploadTime = null;
    this.filePath = null;
    setIdIsSet(false);
    this.id = 0;
  }

  public String getPositionTitle() {
    return this.positionTitle;
  }

  public ReferralProfileTab setPositionTitle(String positionTitle) {
    this.positionTitle = positionTitle;
    return this;
  }

  public void unsetPositionTitle() {
    this.positionTitle = null;
  }

  /** Returns true if field positionTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionTitle() {
    return this.positionTitle != null;
  }

  public void setPositionTitleIsSet(boolean value) {
    if (!value) {
      this.positionTitle = null;
    }
  }

  public String getSender() {
    return this.sender;
  }

  public ReferralProfileTab setSender(String sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  public String getUploadTime() {
    return this.uploadTime;
  }

  public ReferralProfileTab setUploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  public void unsetUploadTime() {
    this.uploadTime = null;
  }

  /** Returns true if field uploadTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadTime() {
    return this.uploadTime != null;
  }

  public void setUploadTimeIsSet(boolean value) {
    if (!value) {
      this.uploadTime = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public ReferralProfileTab setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public ReferralProfileTab setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POSITION_TITLE:
      if (value == null) {
        unsetPositionTitle();
      } else {
        setPositionTitle((String)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((String)value);
      }
      break;

    case UPLOAD_TIME:
      if (value == null) {
        unsetUploadTime();
      } else {
        setUploadTime((String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POSITION_TITLE:
      return getPositionTitle();

    case SENDER:
      return getSender();

    case UPLOAD_TIME:
      return getUploadTime();

    case FILE_PATH:
      return getFilePath();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POSITION_TITLE:
      return isSetPositionTitle();
    case SENDER:
      return isSetSender();
    case UPLOAD_TIME:
      return isSetUploadTime();
    case FILE_PATH:
      return isSetFilePath();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferralProfileTab)
      return this.equals((ReferralProfileTab)that);
    return false;
  }

  public boolean equals(ReferralProfileTab that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_positionTitle = true && this.isSetPositionTitle();
    boolean that_present_positionTitle = true && that.isSetPositionTitle();
    if (this_present_positionTitle || that_present_positionTitle) {
      if (!(this_present_positionTitle && that_present_positionTitle))
        return false;
      if (!this.positionTitle.equals(that.positionTitle))
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_uploadTime = true && this.isSetUploadTime();
    boolean that_present_uploadTime = true && that.isSetUploadTime();
    if (this_present_uploadTime || that_present_uploadTime) {
      if (!(this_present_uploadTime && that_present_uploadTime))
        return false;
      if (!this.uploadTime.equals(that.uploadTime))
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPositionTitle()) ? 131071 : 524287);
    if (isSetPositionTitle())
      hashCode = hashCode * 8191 + positionTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetSender()) ? 131071 : 524287);
    if (isSetSender())
      hashCode = hashCode * 8191 + sender.hashCode();

    hashCode = hashCode * 8191 + ((isSetUploadTime()) ? 131071 : 524287);
    if (isSetUploadTime())
      hashCode = hashCode * 8191 + uploadTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath())
      hashCode = hashCode * 8191 + filePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    return hashCode;
  }

  @Override
  public int compareTo(ReferralProfileTab other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPositionTitle()).compareTo(other.isSetPositionTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionTitle, other.positionTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadTime()).compareTo(other.isSetUploadTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadTime, other.uploadTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReferralProfileTab(");
    boolean first = true;

    if (isSetPositionTitle()) {
      sb.append("positionTitle:");
      if (this.positionTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.positionTitle);
      }
      first = false;
    }
    if (isSetSender()) {
      if (!first) sb.append(", ");
      sb.append("sender:");
      if (this.sender == null) {
        sb.append("null");
      } else {
        sb.append(this.sender);
      }
      first = false;
    }
    if (isSetUploadTime()) {
      if (!first) sb.append(", ");
      sb.append("uploadTime:");
      if (this.uploadTime == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadTime);
      }
      first = false;
    }
    if (isSetFilePath()) {
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferralProfileTabStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralProfileTabStandardScheme getScheme() {
      return new ReferralProfileTabStandardScheme();
    }
  }

  private static class ReferralProfileTabStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReferralProfileTab> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferralProfileTab struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSITION_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionTitle = iprot.readString();
              struct.setPositionTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender = iprot.readString();
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPLOAD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadTime = iprot.readString();
              struct.setUploadTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferralProfileTab struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.positionTitle != null) {
        if (struct.isSetPositionTitle()) {
          oprot.writeFieldBegin(POSITION_TITLE_FIELD_DESC);
          oprot.writeString(struct.positionTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sender != null) {
        if (struct.isSetSender()) {
          oprot.writeFieldBegin(SENDER_FIELD_DESC);
          oprot.writeString(struct.sender);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uploadTime != null) {
        if (struct.isSetUploadTime()) {
          oprot.writeFieldBegin(UPLOAD_TIME_FIELD_DESC);
          oprot.writeString(struct.uploadTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.filePath != null) {
        if (struct.isSetFilePath()) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferralProfileTabTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralProfileTabTupleScheme getScheme() {
      return new ReferralProfileTabTupleScheme();
    }
  }

  private static class ReferralProfileTabTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReferralProfileTab> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferralProfileTab struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPositionTitle()) {
        optionals.set(0);
      }
      if (struct.isSetSender()) {
        optionals.set(1);
      }
      if (struct.isSetUploadTime()) {
        optionals.set(2);
      }
      if (struct.isSetFilePath()) {
        optionals.set(3);
      }
      if (struct.isSetId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPositionTitle()) {
        oprot.writeString(struct.positionTitle);
      }
      if (struct.isSetSender()) {
        oprot.writeString(struct.sender);
      }
      if (struct.isSetUploadTime()) {
        oprot.writeString(struct.uploadTime);
      }
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferralProfileTab struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.positionTitle = iprot.readString();
        struct.setPositionTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sender = iprot.readString();
        struct.setSenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uploadTime = iprot.readString();
        struct.setUploadTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

