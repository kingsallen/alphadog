/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-03")
public class TalentpoolNewServices {

    public interface Iface {

        public com.moseeker.thrift.gen.common.struct.Response addProfileContent(int userId, int accountId, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void addProfileContent(int userId, int accountId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.common.struct.Response addProfileContent(int userId, int accountId, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addProfileContent(userId, accountId, content);
            return recv_addProfileContent();
        }

        public void send_addProfileContent(int userId, int accountId, java.lang.String content) throws org.apache.thrift.TException
        {
            addProfileContent_args args = new addProfileContent_args();
            args.setUserId(userId);
            args.setAccountId(accountId);
            args.setContent(content);
            sendBase("addProfileContent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addProfileContent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addProfileContent_result result = new addProfileContent_result();
            receiveBase(result, "addProfileContent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProfileContent failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void addProfileContent(int userId, int accountId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addProfileContent_call method_call = new addProfileContent_call(userId, accountId, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addProfileContent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int accountId;
            private java.lang.String content;
            public addProfileContent_call(int userId, int accountId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.accountId = accountId;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProfileContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addProfileContent_args args = new addProfileContent_args();
                args.setUserId(userId);
                args.setAccountId(accountId);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addProfileContent();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("addProfileContent", new addProfileContent());
            return processMap;
        }

        public static class addProfileContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProfileContent_args> {
            public addProfileContent() {
                super("addProfileContent");
            }

            public addProfileContent_args getEmptyArgsInstance() {
                return new addProfileContent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addProfileContent_result getResult(I iface, addProfileContent_args args) throws org.apache.thrift.TException {
                addProfileContent_result result = new addProfileContent_result();
                try {
                    result.success = iface.addProfileContent(args.userId, args.accountId, args.content);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("addProfileContent", new addProfileContent());
            return processMap;
        }

        public static class addProfileContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProfileContent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addProfileContent() {
                super("addProfileContent");
            }

            public addProfileContent_args getEmptyArgsInstance() {
                return new addProfileContent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addProfileContent_result result = new addProfileContent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addProfileContent_result result = new addProfileContent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addProfileContent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addProfileContent(args.userId, args.accountId, args.content,resultHandler);
            }
        }

    }

    public static class addProfileContent_args implements org.apache.thrift.TBase<addProfileContent_args, addProfileContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileContent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileContent_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileContent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileContent_argsTupleSchemeFactory();

        public int userId; // required
        public int accountId; // required
        public java.lang.String content; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            ACCOUNT_ID((short)2, "accountId"),
            CONTENT((short)3, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    case 3: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __ACCOUNTID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileContent_args.class, metaDataMap);
        }

        public addProfileContent_args() {
        }

        public addProfileContent_args(
                int userId,
                int accountId,
                java.lang.String content)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.accountId = accountId;
            setAccountIdIsSet(true);
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileContent_args(addProfileContent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.accountId = other.accountId;
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public addProfileContent_args deepCopy() {
            return new addProfileContent_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setAccountIdIsSet(false);
            this.accountId = 0;
            this.content = null;
        }

        public int getUserId() {
            return this.userId;
        }

        public addProfileContent_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getAccountId() {
            return this.accountId;
        }

        public addProfileContent_args setAccountId(int accountId) {
            this.accountId = accountId;
            setAccountIdIsSet(true);
            return this;
        }

        public void unsetAccountId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
        public boolean isSetAccountId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        public void setAccountIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
        }

        public java.lang.String getContent() {
            return this.content;
        }

        public addProfileContent_args setContent(java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /** Returns true if field content is set (has been assigned a value) and false otherwise */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccountId();
                    } else {
                        setAccountId((java.lang.Integer)value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case ACCOUNT_ID:
                    return getAccountId();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case ACCOUNT_ID:
                    return isSetAccountId();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileContent_args)
                return this.equals((addProfileContent_args)that);
            return false;
        }

        public boolean equals(addProfileContent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_accountId = true;
            boolean that_present_accountId = true;
            if (this_present_accountId || that_present_accountId) {
                if (!(this_present_accountId && that_present_accountId))
                    return false;
                if (this.accountId != that.accountId)
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + accountId;

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addProfileContent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccountId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileContent_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("accountId:");
            sb.append(this.accountId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileContent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileContent_argsStandardScheme getScheme() {
                return new addProfileContent_argsStandardScheme();
            }
        }

        private static class addProfileContent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileContent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.accountId = iprot.readI32();
                                struct.setAccountIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileContent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.accountId);
                oprot.writeFieldEnd();
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileContent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileContent_argsTupleScheme getScheme() {
                return new addProfileContent_argsTupleScheme();
            }
        }

        private static class addProfileContent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileContent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetAccountId()) {
                    optionals.set(1);
                }
                if (struct.isSetContent()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetAccountId()) {
                    oprot.writeI32(struct.accountId);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.accountId = iprot.readI32();
                    struct.setAccountIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addProfileContent_result implements org.apache.thrift.TBase<addProfileContent_result, addProfileContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileContent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileContent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileContent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileContent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileContent_result.class, metaDataMap);
        }

        public addProfileContent_result() {
        }

        public addProfileContent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileContent_result(addProfileContent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addProfileContent_result deepCopy() {
            return new addProfileContent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addProfileContent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addProfileContent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileContent_result)
                return this.equals((addProfileContent_result)that);
            return false;
        }

        public boolean equals(addProfileContent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addProfileContent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileContent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileContent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileContent_resultStandardScheme getScheme() {
                return new addProfileContent_resultStandardScheme();
            }
        }

        private static class addProfileContent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileContent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileContent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileContent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileContent_resultTupleScheme getScheme() {
                return new addProfileContent_resultTupleScheme();
            }
        }

        private static class addProfileContent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileContent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
