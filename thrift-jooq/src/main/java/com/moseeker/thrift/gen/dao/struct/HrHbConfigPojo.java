/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-22")
public class HrHbConfigPojo implements org.apache.thrift.TBase<HrHbConfigPojo, HrHbConfigPojo._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbConfigPojo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbConfigPojo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("total_amount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RANGE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("range_min", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RANGE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("range_max", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("probability", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField D_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("d_type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("headline", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HEADLINE_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("headline_failure", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHARE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("share_title", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SHARE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("share_desc", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SHARE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("share_img", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField CHECKED_FIELD_DESC = new org.apache.thrift.protocol.TField("checked", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ESTIMATED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("estimated_total", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actual_total", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbConfigPojoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbConfigPojoTupleSchemeFactory();

  public int id; // optional
  public int type; // optional
  public int target; // optional
  public int company_id; // optional
  public java.lang.String start_time; // optional
  public java.lang.String end_time; // optional
  public int total_amount; // optional
  public double range_min; // optional
  public double range_max; // optional
  public int probability; // optional
  public int d_type; // optional
  public java.lang.String headline; // optional
  public java.lang.String headline_failure; // optional
  public java.lang.String share_title; // optional
  public java.lang.String share_desc; // optional
  public java.lang.String share_img; // optional
  public int status; // optional
  public int checked; // optional
  public int estimated_total; // optional
  public java.lang.String create_time; // optional
  public java.lang.String update_time; // optional
  public int actual_total; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    TARGET((short)3, "target"),
    COMPANY_ID((short)4, "company_id"),
    START_TIME((short)5, "start_time"),
    END_TIME((short)6, "end_time"),
    TOTAL_AMOUNT((short)7, "total_amount"),
    RANGE_MIN((short)8, "range_min"),
    RANGE_MAX((short)9, "range_max"),
    PROBABILITY((short)10, "probability"),
    D_TYPE((short)11, "d_type"),
    HEADLINE((short)12, "headline"),
    HEADLINE_FAILURE((short)13, "headline_failure"),
    SHARE_TITLE((short)14, "share_title"),
    SHARE_DESC((short)15, "share_desc"),
    SHARE_IMG((short)16, "share_img"),
    STATUS((short)17, "status"),
    CHECKED((short)18, "checked"),
    ESTIMATED_TOTAL((short)19, "estimated_total"),
    CREATE_TIME((short)20, "create_time"),
    UPDATE_TIME((short)21, "update_time"),
    ACTUAL_TOTAL((short)22, "actual_total");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // TARGET
          return TARGET;
        case 4: // COMPANY_ID
          return COMPANY_ID;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 8: // RANGE_MIN
          return RANGE_MIN;
        case 9: // RANGE_MAX
          return RANGE_MAX;
        case 10: // PROBABILITY
          return PROBABILITY;
        case 11: // D_TYPE
          return D_TYPE;
        case 12: // HEADLINE
          return HEADLINE;
        case 13: // HEADLINE_FAILURE
          return HEADLINE_FAILURE;
        case 14: // SHARE_TITLE
          return SHARE_TITLE;
        case 15: // SHARE_DESC
          return SHARE_DESC;
        case 16: // SHARE_IMG
          return SHARE_IMG;
        case 17: // STATUS
          return STATUS;
        case 18: // CHECKED
          return CHECKED;
        case 19: // ESTIMATED_TOTAL
          return ESTIMATED_TOTAL;
        case 20: // CREATE_TIME
          return CREATE_TIME;
        case 21: // UPDATE_TIME
          return UPDATE_TIME;
        case 22: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __TARGET_ISSET_ID = 2;
  private static final int __COMPANY_ID_ISSET_ID = 3;
  private static final int __TOTAL_AMOUNT_ISSET_ID = 4;
  private static final int __RANGE_MIN_ISSET_ID = 5;
  private static final int __RANGE_MAX_ISSET_ID = 6;
  private static final int __PROBABILITY_ISSET_ID = 7;
  private static final int __D_TYPE_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __CHECKED_ISSET_ID = 10;
  private static final int __ESTIMATED_TOTAL_ISSET_ID = 11;
  private static final int __ACTUAL_TOTAL_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TYPE,_Fields.TARGET,_Fields.COMPANY_ID,_Fields.START_TIME,_Fields.END_TIME,_Fields.TOTAL_AMOUNT,_Fields.RANGE_MIN,_Fields.RANGE_MAX,_Fields.PROBABILITY,_Fields.D_TYPE,_Fields.HEADLINE,_Fields.HEADLINE_FAILURE,_Fields.SHARE_TITLE,_Fields.SHARE_DESC,_Fields.SHARE_IMG,_Fields.STATUS,_Fields.CHECKED,_Fields.ESTIMATED_TOTAL,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.ACTUAL_TOTAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("end_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("total_amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANGE_MIN, new org.apache.thrift.meta_data.FieldMetaData("range_min", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_MAX, new org.apache.thrift.meta_data.FieldMetaData("range_max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData("probability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D_TYPE, new org.apache.thrift.meta_data.FieldMetaData("d_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("headline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADLINE_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("headline_failure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("share_title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESC, new org.apache.thrift.meta_data.FieldMetaData("share_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_IMG, new org.apache.thrift.meta_data.FieldMetaData("share_img", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECKED, new org.apache.thrift.meta_data.FieldMetaData("checked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTIMATED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("estimated_total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actual_total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbConfigPojo.class, metaDataMap);
  }

  public HrHbConfigPojo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbConfigPojo(HrHbConfigPojo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.type = other.type;
    this.target = other.target;
    this.company_id = other.company_id;
    if (other.isSetStart_time()) {
      this.start_time = other.start_time;
    }
    if (other.isSetEnd_time()) {
      this.end_time = other.end_time;
    }
    this.total_amount = other.total_amount;
    this.range_min = other.range_min;
    this.range_max = other.range_max;
    this.probability = other.probability;
    this.d_type = other.d_type;
    if (other.isSetHeadline()) {
      this.headline = other.headline;
    }
    if (other.isSetHeadline_failure()) {
      this.headline_failure = other.headline_failure;
    }
    if (other.isSetShare_title()) {
      this.share_title = other.share_title;
    }
    if (other.isSetShare_desc()) {
      this.share_desc = other.share_desc;
    }
    if (other.isSetShare_img()) {
      this.share_img = other.share_img;
    }
    this.status = other.status;
    this.checked = other.checked;
    this.estimated_total = other.estimated_total;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    this.actual_total = other.actual_total;
  }

  public HrHbConfigPojo deepCopy() {
    return new HrHbConfigPojo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setTargetIsSet(false);
    this.target = 0;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.start_time = null;
    this.end_time = null;
    setTotal_amountIsSet(false);
    this.total_amount = 0;
    setRange_minIsSet(false);
    this.range_min = 0.0;
    setRange_maxIsSet(false);
    this.range_max = 0.0;
    setProbabilityIsSet(false);
    this.probability = 0;
    setD_typeIsSet(false);
    this.d_type = 0;
    this.headline = null;
    this.headline_failure = null;
    this.share_title = null;
    this.share_desc = null;
    this.share_img = null;
    setStatusIsSet(false);
    this.status = 0;
    setCheckedIsSet(false);
    this.checked = 0;
    setEstimated_totalIsSet(false);
    this.estimated_total = 0;
    this.create_time = null;
    this.update_time = null;
    setActual_totalIsSet(false);
    this.actual_total = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbConfigPojo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public HrHbConfigPojo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getTarget() {
    return this.target;
  }

  public HrHbConfigPojo setTarget(int target) {
    this.target = target;
    setTargetIsSet(true);
    return this;
  }

  public void unsetTarget() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  public void setTargetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public HrHbConfigPojo setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public java.lang.String getStart_time() {
    return this.start_time;
  }

  public HrHbConfigPojo setStart_time(java.lang.String start_time) {
    this.start_time = start_time;
    return this;
  }

  public void unsetStart_time() {
    this.start_time = null;
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return this.start_time != null;
  }

  public void setStart_timeIsSet(boolean value) {
    if (!value) {
      this.start_time = null;
    }
  }

  public java.lang.String getEnd_time() {
    return this.end_time;
  }

  public HrHbConfigPojo setEnd_time(java.lang.String end_time) {
    this.end_time = end_time;
    return this;
  }

  public void unsetEnd_time() {
    this.end_time = null;
  }

  /** Returns true if field end_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_time() {
    return this.end_time != null;
  }

  public void setEnd_timeIsSet(boolean value) {
    if (!value) {
      this.end_time = null;
    }
  }

  public int getTotal_amount() {
    return this.total_amount;
  }

  public HrHbConfigPojo setTotal_amount(int total_amount) {
    this.total_amount = total_amount;
    setTotal_amountIsSet(true);
    return this;
  }

  public void unsetTotal_amount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_AMOUNT_ISSET_ID);
  }

  /** Returns true if field total_amount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_amount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_AMOUNT_ISSET_ID);
  }

  public void setTotal_amountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_AMOUNT_ISSET_ID, value);
  }

  public double getRange_min() {
    return this.range_min;
  }

  public HrHbConfigPojo setRange_min(double range_min) {
    this.range_min = range_min;
    setRange_minIsSet(true);
    return this;
  }

  public void unsetRange_min() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGE_MIN_ISSET_ID);
  }

  /** Returns true if field range_min is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_min() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGE_MIN_ISSET_ID);
  }

  public void setRange_minIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGE_MIN_ISSET_ID, value);
  }

  public double getRange_max() {
    return this.range_max;
  }

  public HrHbConfigPojo setRange_max(double range_max) {
    this.range_max = range_max;
    setRange_maxIsSet(true);
    return this;
  }

  public void unsetRange_max() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGE_MAX_ISSET_ID);
  }

  /** Returns true if field range_max is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_max() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGE_MAX_ISSET_ID);
  }

  public void setRange_maxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGE_MAX_ISSET_ID, value);
  }

  public int getProbability() {
    return this.probability;
  }

  public HrHbConfigPojo setProbability(int probability) {
    this.probability = probability;
    setProbabilityIsSet(true);
    return this;
  }

  public void unsetProbability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  /** Returns true if field probability is set (has been assigned a value) and false otherwise */
  public boolean isSetProbability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  public void setProbabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROBABILITY_ISSET_ID, value);
  }

  public int getD_type() {
    return this.d_type;
  }

  public HrHbConfigPojo setD_type(int d_type) {
    this.d_type = d_type;
    setD_typeIsSet(true);
    return this;
  }

  public void unsetD_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D_TYPE_ISSET_ID);
  }

  /** Returns true if field d_type is set (has been assigned a value) and false otherwise */
  public boolean isSetD_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D_TYPE_ISSET_ID);
  }

  public void setD_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D_TYPE_ISSET_ID, value);
  }

  public java.lang.String getHeadline() {
    return this.headline;
  }

  public HrHbConfigPojo setHeadline(java.lang.String headline) {
    this.headline = headline;
    return this;
  }

  public void unsetHeadline() {
    this.headline = null;
  }

  /** Returns true if field headline is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadline() {
    return this.headline != null;
  }

  public void setHeadlineIsSet(boolean value) {
    if (!value) {
      this.headline = null;
    }
  }

  public java.lang.String getHeadline_failure() {
    return this.headline_failure;
  }

  public HrHbConfigPojo setHeadline_failure(java.lang.String headline_failure) {
    this.headline_failure = headline_failure;
    return this;
  }

  public void unsetHeadline_failure() {
    this.headline_failure = null;
  }

  /** Returns true if field headline_failure is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadline_failure() {
    return this.headline_failure != null;
  }

  public void setHeadline_failureIsSet(boolean value) {
    if (!value) {
      this.headline_failure = null;
    }
  }

  public java.lang.String getShare_title() {
    return this.share_title;
  }

  public HrHbConfigPojo setShare_title(java.lang.String share_title) {
    this.share_title = share_title;
    return this;
  }

  public void unsetShare_title() {
    this.share_title = null;
  }

  /** Returns true if field share_title is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_title() {
    return this.share_title != null;
  }

  public void setShare_titleIsSet(boolean value) {
    if (!value) {
      this.share_title = null;
    }
  }

  public java.lang.String getShare_desc() {
    return this.share_desc;
  }

  public HrHbConfigPojo setShare_desc(java.lang.String share_desc) {
    this.share_desc = share_desc;
    return this;
  }

  public void unsetShare_desc() {
    this.share_desc = null;
  }

  /** Returns true if field share_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_desc() {
    return this.share_desc != null;
  }

  public void setShare_descIsSet(boolean value) {
    if (!value) {
      this.share_desc = null;
    }
  }

  public java.lang.String getShare_img() {
    return this.share_img;
  }

  public HrHbConfigPojo setShare_img(java.lang.String share_img) {
    this.share_img = share_img;
    return this;
  }

  public void unsetShare_img() {
    this.share_img = null;
  }

  /** Returns true if field share_img is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_img() {
    return this.share_img != null;
  }

  public void setShare_imgIsSet(boolean value) {
    if (!value) {
      this.share_img = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public HrHbConfigPojo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getChecked() {
    return this.checked;
  }

  public HrHbConfigPojo setChecked(int checked) {
    this.checked = checked;
    setCheckedIsSet(true);
    return this;
  }

  public void unsetChecked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  /** Returns true if field checked is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  public void setCheckedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKED_ISSET_ID, value);
  }

  public int getEstimated_total() {
    return this.estimated_total;
  }

  public HrHbConfigPojo setEstimated_total(int estimated_total) {
    this.estimated_total = estimated_total;
    setEstimated_totalIsSet(true);
    return this;
  }

  public void unsetEstimated_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTIMATED_TOTAL_ISSET_ID);
  }

  /** Returns true if field estimated_total is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimated_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTIMATED_TOTAL_ISSET_ID);
  }

  public void setEstimated_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTIMATED_TOTAL_ISSET_ID, value);
  }

  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public HrHbConfigPojo setCreate_time(java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public java.lang.String getUpdate_time() {
    return this.update_time;
  }

  public HrHbConfigPojo setUpdate_time(java.lang.String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public int getActual_total() {
    return this.actual_total;
  }

  public HrHbConfigPojo setActual_total(int actual_total) {
    this.actual_total = actual_total;
    setActual_totalIsSet(true);
    return this;
  }

  public void unsetActual_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTUAL_TOTAL_ISSET_ID);
  }

  /** Returns true if field actual_total is set (has been assigned a value) and false otherwise */
  public boolean isSetActual_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTUAL_TOTAL_ISSET_ID);
  }

  public void setActual_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTUAL_TOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Integer)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((java.lang.Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((java.lang.String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEnd_time();
      } else {
        setEnd_time((java.lang.String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotal_amount();
      } else {
        setTotal_amount((java.lang.Integer)value);
      }
      break;

    case RANGE_MIN:
      if (value == null) {
        unsetRange_min();
      } else {
        setRange_min((java.lang.Double)value);
      }
      break;

    case RANGE_MAX:
      if (value == null) {
        unsetRange_max();
      } else {
        setRange_max((java.lang.Double)value);
      }
      break;

    case PROBABILITY:
      if (value == null) {
        unsetProbability();
      } else {
        setProbability((java.lang.Integer)value);
      }
      break;

    case D_TYPE:
      if (value == null) {
        unsetD_type();
      } else {
        setD_type((java.lang.Integer)value);
      }
      break;

    case HEADLINE:
      if (value == null) {
        unsetHeadline();
      } else {
        setHeadline((java.lang.String)value);
      }
      break;

    case HEADLINE_FAILURE:
      if (value == null) {
        unsetHeadline_failure();
      } else {
        setHeadline_failure((java.lang.String)value);
      }
      break;

    case SHARE_TITLE:
      if (value == null) {
        unsetShare_title();
      } else {
        setShare_title((java.lang.String)value);
      }
      break;

    case SHARE_DESC:
      if (value == null) {
        unsetShare_desc();
      } else {
        setShare_desc((java.lang.String)value);
      }
      break;

    case SHARE_IMG:
      if (value == null) {
        unsetShare_img();
      } else {
        setShare_img((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case CHECKED:
      if (value == null) {
        unsetChecked();
      } else {
        setChecked((java.lang.Integer)value);
      }
      break;

    case ESTIMATED_TOTAL:
      if (value == null) {
        unsetEstimated_total();
      } else {
        setEstimated_total((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.String)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActual_total();
      } else {
        setActual_total((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return getType();

    case TARGET:
      return getTarget();

    case COMPANY_ID:
      return getCompany_id();

    case START_TIME:
      return getStart_time();

    case END_TIME:
      return getEnd_time();

    case TOTAL_AMOUNT:
      return getTotal_amount();

    case RANGE_MIN:
      return getRange_min();

    case RANGE_MAX:
      return getRange_max();

    case PROBABILITY:
      return getProbability();

    case D_TYPE:
      return getD_type();

    case HEADLINE:
      return getHeadline();

    case HEADLINE_FAILURE:
      return getHeadline_failure();

    case SHARE_TITLE:
      return getShare_title();

    case SHARE_DESC:
      return getShare_desc();

    case SHARE_IMG:
      return getShare_img();

    case STATUS:
      return getStatus();

    case CHECKED:
      return getChecked();

    case ESTIMATED_TOTAL:
      return getEstimated_total();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case ACTUAL_TOTAL:
      return getActual_total();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case TARGET:
      return isSetTarget();
    case COMPANY_ID:
      return isSetCompany_id();
    case START_TIME:
      return isSetStart_time();
    case END_TIME:
      return isSetEnd_time();
    case TOTAL_AMOUNT:
      return isSetTotal_amount();
    case RANGE_MIN:
      return isSetRange_min();
    case RANGE_MAX:
      return isSetRange_max();
    case PROBABILITY:
      return isSetProbability();
    case D_TYPE:
      return isSetD_type();
    case HEADLINE:
      return isSetHeadline();
    case HEADLINE_FAILURE:
      return isSetHeadline_failure();
    case SHARE_TITLE:
      return isSetShare_title();
    case SHARE_DESC:
      return isSetShare_desc();
    case SHARE_IMG:
      return isSetShare_img();
    case STATUS:
      return isSetStatus();
    case CHECKED:
      return isSetChecked();
    case ESTIMATED_TOTAL:
      return isSetEstimated_total();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case ACTUAL_TOTAL:
      return isSetActual_total();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbConfigPojo)
      return this.equals((HrHbConfigPojo)that);
    return false;
  }

  public boolean equals(HrHbConfigPojo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (this.target != that.target)
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_start_time = true && this.isSetStart_time();
    boolean that_present_start_time = true && that.isSetStart_time();
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (!this.start_time.equals(that.start_time))
        return false;
    }

    boolean this_present_end_time = true && this.isSetEnd_time();
    boolean that_present_end_time = true && that.isSetEnd_time();
    if (this_present_end_time || that_present_end_time) {
      if (!(this_present_end_time && that_present_end_time))
        return false;
      if (!this.end_time.equals(that.end_time))
        return false;
    }

    boolean this_present_total_amount = true && this.isSetTotal_amount();
    boolean that_present_total_amount = true && that.isSetTotal_amount();
    if (this_present_total_amount || that_present_total_amount) {
      if (!(this_present_total_amount && that_present_total_amount))
        return false;
      if (this.total_amount != that.total_amount)
        return false;
    }

    boolean this_present_range_min = true && this.isSetRange_min();
    boolean that_present_range_min = true && that.isSetRange_min();
    if (this_present_range_min || that_present_range_min) {
      if (!(this_present_range_min && that_present_range_min))
        return false;
      if (this.range_min != that.range_min)
        return false;
    }

    boolean this_present_range_max = true && this.isSetRange_max();
    boolean that_present_range_max = true && that.isSetRange_max();
    if (this_present_range_max || that_present_range_max) {
      if (!(this_present_range_max && that_present_range_max))
        return false;
      if (this.range_max != that.range_max)
        return false;
    }

    boolean this_present_probability = true && this.isSetProbability();
    boolean that_present_probability = true && that.isSetProbability();
    if (this_present_probability || that_present_probability) {
      if (!(this_present_probability && that_present_probability))
        return false;
      if (this.probability != that.probability)
        return false;
    }

    boolean this_present_d_type = true && this.isSetD_type();
    boolean that_present_d_type = true && that.isSetD_type();
    if (this_present_d_type || that_present_d_type) {
      if (!(this_present_d_type && that_present_d_type))
        return false;
      if (this.d_type != that.d_type)
        return false;
    }

    boolean this_present_headline = true && this.isSetHeadline();
    boolean that_present_headline = true && that.isSetHeadline();
    if (this_present_headline || that_present_headline) {
      if (!(this_present_headline && that_present_headline))
        return false;
      if (!this.headline.equals(that.headline))
        return false;
    }

    boolean this_present_headline_failure = true && this.isSetHeadline_failure();
    boolean that_present_headline_failure = true && that.isSetHeadline_failure();
    if (this_present_headline_failure || that_present_headline_failure) {
      if (!(this_present_headline_failure && that_present_headline_failure))
        return false;
      if (!this.headline_failure.equals(that.headline_failure))
        return false;
    }

    boolean this_present_share_title = true && this.isSetShare_title();
    boolean that_present_share_title = true && that.isSetShare_title();
    if (this_present_share_title || that_present_share_title) {
      if (!(this_present_share_title && that_present_share_title))
        return false;
      if (!this.share_title.equals(that.share_title))
        return false;
    }

    boolean this_present_share_desc = true && this.isSetShare_desc();
    boolean that_present_share_desc = true && that.isSetShare_desc();
    if (this_present_share_desc || that_present_share_desc) {
      if (!(this_present_share_desc && that_present_share_desc))
        return false;
      if (!this.share_desc.equals(that.share_desc))
        return false;
    }

    boolean this_present_share_img = true && this.isSetShare_img();
    boolean that_present_share_img = true && that.isSetShare_img();
    if (this_present_share_img || that_present_share_img) {
      if (!(this_present_share_img && that_present_share_img))
        return false;
      if (!this.share_img.equals(that.share_img))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_checked = true && this.isSetChecked();
    boolean that_present_checked = true && that.isSetChecked();
    if (this_present_checked || that_present_checked) {
      if (!(this_present_checked && that_present_checked))
        return false;
      if (this.checked != that.checked)
        return false;
    }

    boolean this_present_estimated_total = true && this.isSetEstimated_total();
    boolean that_present_estimated_total = true && that.isSetEstimated_total();
    if (this_present_estimated_total || that_present_estimated_total) {
      if (!(this_present_estimated_total && that_present_estimated_total))
        return false;
      if (this.estimated_total != that.estimated_total)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_actual_total = true && this.isSetActual_total();
    boolean that_present_actual_total = true && that.isSetActual_total();
    if (this_present_actual_total || that_present_actual_total) {
      if (!(this_present_actual_total && that_present_actual_total))
        return false;
      if (this.actual_total != that.actual_total)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target;

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetStart_time()) ? 131071 : 524287);
    if (isSetStart_time())
      hashCode = hashCode * 8191 + start_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_time()) ? 131071 : 524287);
    if (isSetEnd_time())
      hashCode = hashCode * 8191 + end_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotal_amount()) ? 131071 : 524287);
    if (isSetTotal_amount())
      hashCode = hashCode * 8191 + total_amount;

    hashCode = hashCode * 8191 + ((isSetRange_min()) ? 131071 : 524287);
    if (isSetRange_min())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(range_min);

    hashCode = hashCode * 8191 + ((isSetRange_max()) ? 131071 : 524287);
    if (isSetRange_max())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(range_max);

    hashCode = hashCode * 8191 + ((isSetProbability()) ? 131071 : 524287);
    if (isSetProbability())
      hashCode = hashCode * 8191 + probability;

    hashCode = hashCode * 8191 + ((isSetD_type()) ? 131071 : 524287);
    if (isSetD_type())
      hashCode = hashCode * 8191 + d_type;

    hashCode = hashCode * 8191 + ((isSetHeadline()) ? 131071 : 524287);
    if (isSetHeadline())
      hashCode = hashCode * 8191 + headline.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadline_failure()) ? 131071 : 524287);
    if (isSetHeadline_failure())
      hashCode = hashCode * 8191 + headline_failure.hashCode();

    hashCode = hashCode * 8191 + ((isSetShare_title()) ? 131071 : 524287);
    if (isSetShare_title())
      hashCode = hashCode * 8191 + share_title.hashCode();

    hashCode = hashCode * 8191 + ((isSetShare_desc()) ? 131071 : 524287);
    if (isSetShare_desc())
      hashCode = hashCode * 8191 + share_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetShare_img()) ? 131071 : 524287);
    if (isSetShare_img())
      hashCode = hashCode * 8191 + share_img.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetChecked()) ? 131071 : 524287);
    if (isSetChecked())
      hashCode = hashCode * 8191 + checked;

    hashCode = hashCode * 8191 + ((isSetEstimated_total()) ? 131071 : 524287);
    if (isSetEstimated_total())
      hashCode = hashCode * 8191 + estimated_total;

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetActual_total()) ? 131071 : 524287);
    if (isSetActual_total())
      hashCode = hashCode * 8191 + actual_total;

    return hashCode;
  }

  @Override
  public int compareTo(HrHbConfigPojo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnd_time()).compareTo(other.isSetEnd_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time, other.end_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_amount()).compareTo(other.isSetTotal_amount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_amount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_amount, other.total_amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRange_min()).compareTo(other.isSetRange_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_min, other.range_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRange_max()).compareTo(other.isSetRange_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_max, other.range_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProbability()).compareTo(other.isSetProbability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probability, other.probability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetD_type()).compareTo(other.isSetD_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_type, other.d_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadline()).compareTo(other.isSetHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headline, other.headline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadline_failure()).compareTo(other.isSetHeadline_failure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadline_failure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headline_failure, other.headline_failure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShare_title()).compareTo(other.isSetShare_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_title, other.share_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShare_desc()).compareTo(other.isSetShare_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_desc, other.share_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShare_img()).compareTo(other.isSetShare_img());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_img()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_img, other.share_img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChecked()).compareTo(other.isSetChecked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked, other.checked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEstimated_total()).compareTo(other.isSetEstimated_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimated_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimated_total, other.estimated_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActual_total()).compareTo(other.isSetActual_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActual_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actual_total, other.actual_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrHbConfigPojo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetTarget()) {
      if (!first) sb.append(", ");
      sb.append("target:");
      sb.append(this.target);
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetStart_time()) {
      if (!first) sb.append(", ");
      sb.append("start_time:");
      if (this.start_time == null) {
        sb.append("null");
      } else {
        sb.append(this.start_time);
      }
      first = false;
    }
    if (isSetEnd_time()) {
      if (!first) sb.append(", ");
      sb.append("end_time:");
      if (this.end_time == null) {
        sb.append("null");
      } else {
        sb.append(this.end_time);
      }
      first = false;
    }
    if (isSetTotal_amount()) {
      if (!first) sb.append(", ");
      sb.append("total_amount:");
      sb.append(this.total_amount);
      first = false;
    }
    if (isSetRange_min()) {
      if (!first) sb.append(", ");
      sb.append("range_min:");
      sb.append(this.range_min);
      first = false;
    }
    if (isSetRange_max()) {
      if (!first) sb.append(", ");
      sb.append("range_max:");
      sb.append(this.range_max);
      first = false;
    }
    if (isSetProbability()) {
      if (!first) sb.append(", ");
      sb.append("probability:");
      sb.append(this.probability);
      first = false;
    }
    if (isSetD_type()) {
      if (!first) sb.append(", ");
      sb.append("d_type:");
      sb.append(this.d_type);
      first = false;
    }
    if (isSetHeadline()) {
      if (!first) sb.append(", ");
      sb.append("headline:");
      if (this.headline == null) {
        sb.append("null");
      } else {
        sb.append(this.headline);
      }
      first = false;
    }
    if (isSetHeadline_failure()) {
      if (!first) sb.append(", ");
      sb.append("headline_failure:");
      if (this.headline_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.headline_failure);
      }
      first = false;
    }
    if (isSetShare_title()) {
      if (!first) sb.append(", ");
      sb.append("share_title:");
      if (this.share_title == null) {
        sb.append("null");
      } else {
        sb.append(this.share_title);
      }
      first = false;
    }
    if (isSetShare_desc()) {
      if (!first) sb.append(", ");
      sb.append("share_desc:");
      if (this.share_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.share_desc);
      }
      first = false;
    }
    if (isSetShare_img()) {
      if (!first) sb.append(", ");
      sb.append("share_img:");
      if (this.share_img == null) {
        sb.append("null");
      } else {
        sb.append(this.share_img);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetChecked()) {
      if (!first) sb.append(", ");
      sb.append("checked:");
      sb.append(this.checked);
      first = false;
    }
    if (isSetEstimated_total()) {
      if (!first) sb.append(", ");
      sb.append("estimated_total:");
      sb.append(this.estimated_total);
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    if (isSetActual_total()) {
      if (!first) sb.append(", ");
      sb.append("actual_total:");
      sb.append(this.actual_total);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbConfigPojoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbConfigPojoStandardScheme getScheme() {
      return new HrHbConfigPojoStandardScheme();
    }
  }

  private static class HrHbConfigPojoStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbConfigPojo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbConfigPojo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target = iprot.readI32();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_time = iprot.readString();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_time = iprot.readString();
              struct.setEnd_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_amount = iprot.readI32();
              struct.setTotal_amountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANGE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.range_min = iprot.readDouble();
              struct.setRange_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RANGE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.range_max = iprot.readDouble();
              struct.setRange_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROBABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.probability = iprot.readI32();
              struct.setProbabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // D_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.d_type = iprot.readI32();
              struct.setD_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headline = iprot.readString();
              struct.setHeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HEADLINE_FAILURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headline_failure = iprot.readString();
              struct.setHeadline_failureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHARE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.share_title = iprot.readString();
              struct.setShare_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHARE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.share_desc = iprot.readString();
              struct.setShare_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHARE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.share_img = iprot.readString();
              struct.setShare_imgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checked = iprot.readI32();
              struct.setCheckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ESTIMATED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estimated_total = iprot.readI32();
              struct.setEstimated_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actual_total = iprot.readI32();
              struct.setActual_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbConfigPojo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTarget()) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI32(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.start_time != null) {
        if (struct.isSetStart_time()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.start_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_time != null) {
        if (struct.isSetEnd_time()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.end_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotal_amount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.total_amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRange_min()) {
        oprot.writeFieldBegin(RANGE_MIN_FIELD_DESC);
        oprot.writeDouble(struct.range_min);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRange_max()) {
        oprot.writeFieldBegin(RANGE_MAX_FIELD_DESC);
        oprot.writeDouble(struct.range_max);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProbability()) {
        oprot.writeFieldBegin(PROBABILITY_FIELD_DESC);
        oprot.writeI32(struct.probability);
        oprot.writeFieldEnd();
      }
      if (struct.isSetD_type()) {
        oprot.writeFieldBegin(D_TYPE_FIELD_DESC);
        oprot.writeI32(struct.d_type);
        oprot.writeFieldEnd();
      }
      if (struct.headline != null) {
        if (struct.isSetHeadline()) {
          oprot.writeFieldBegin(HEADLINE_FIELD_DESC);
          oprot.writeString(struct.headline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headline_failure != null) {
        if (struct.isSetHeadline_failure()) {
          oprot.writeFieldBegin(HEADLINE_FAILURE_FIELD_DESC);
          oprot.writeString(struct.headline_failure);
          oprot.writeFieldEnd();
        }
      }
      if (struct.share_title != null) {
        if (struct.isSetShare_title()) {
          oprot.writeFieldBegin(SHARE_TITLE_FIELD_DESC);
          oprot.writeString(struct.share_title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.share_desc != null) {
        if (struct.isSetShare_desc()) {
          oprot.writeFieldBegin(SHARE_DESC_FIELD_DESC);
          oprot.writeString(struct.share_desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.share_img != null) {
        if (struct.isSetShare_img()) {
          oprot.writeFieldBegin(SHARE_IMG_FIELD_DESC);
          oprot.writeString(struct.share_img);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecked()) {
        oprot.writeFieldBegin(CHECKED_FIELD_DESC);
        oprot.writeI32(struct.checked);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstimated_total()) {
        oprot.writeFieldBegin(ESTIMATED_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.estimated_total);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActual_total()) {
        oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.actual_total);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbConfigPojoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbConfigPojoTupleScheme getScheme() {
      return new HrHbConfigPojoTupleScheme();
    }
  }

  private static class HrHbConfigPojoTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbConfigPojo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbConfigPojo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(3);
      }
      if (struct.isSetStart_time()) {
        optionals.set(4);
      }
      if (struct.isSetEnd_time()) {
        optionals.set(5);
      }
      if (struct.isSetTotal_amount()) {
        optionals.set(6);
      }
      if (struct.isSetRange_min()) {
        optionals.set(7);
      }
      if (struct.isSetRange_max()) {
        optionals.set(8);
      }
      if (struct.isSetProbability()) {
        optionals.set(9);
      }
      if (struct.isSetD_type()) {
        optionals.set(10);
      }
      if (struct.isSetHeadline()) {
        optionals.set(11);
      }
      if (struct.isSetHeadline_failure()) {
        optionals.set(12);
      }
      if (struct.isSetShare_title()) {
        optionals.set(13);
      }
      if (struct.isSetShare_desc()) {
        optionals.set(14);
      }
      if (struct.isSetShare_img()) {
        optionals.set(15);
      }
      if (struct.isSetStatus()) {
        optionals.set(16);
      }
      if (struct.isSetChecked()) {
        optionals.set(17);
      }
      if (struct.isSetEstimated_total()) {
        optionals.set(18);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(19);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(20);
      }
      if (struct.isSetActual_total()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetTarget()) {
        oprot.writeI32(struct.target);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetStart_time()) {
        oprot.writeString(struct.start_time);
      }
      if (struct.isSetEnd_time()) {
        oprot.writeString(struct.end_time);
      }
      if (struct.isSetTotal_amount()) {
        oprot.writeI32(struct.total_amount);
      }
      if (struct.isSetRange_min()) {
        oprot.writeDouble(struct.range_min);
      }
      if (struct.isSetRange_max()) {
        oprot.writeDouble(struct.range_max);
      }
      if (struct.isSetProbability()) {
        oprot.writeI32(struct.probability);
      }
      if (struct.isSetD_type()) {
        oprot.writeI32(struct.d_type);
      }
      if (struct.isSetHeadline()) {
        oprot.writeString(struct.headline);
      }
      if (struct.isSetHeadline_failure()) {
        oprot.writeString(struct.headline_failure);
      }
      if (struct.isSetShare_title()) {
        oprot.writeString(struct.share_title);
      }
      if (struct.isSetShare_desc()) {
        oprot.writeString(struct.share_desc);
      }
      if (struct.isSetShare_img()) {
        oprot.writeString(struct.share_img);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetChecked()) {
        oprot.writeI32(struct.checked);
      }
      if (struct.isSetEstimated_total()) {
        oprot.writeI32(struct.estimated_total);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetActual_total()) {
        oprot.writeI32(struct.actual_total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbConfigPojo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target = iprot.readI32();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.start_time = iprot.readString();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.end_time = iprot.readString();
        struct.setEnd_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.total_amount = iprot.readI32();
        struct.setTotal_amountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.range_min = iprot.readDouble();
        struct.setRange_minIsSet(true);
      }
      if (incoming.get(8)) {
        struct.range_max = iprot.readDouble();
        struct.setRange_maxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.probability = iprot.readI32();
        struct.setProbabilityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.d_type = iprot.readI32();
        struct.setD_typeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.headline = iprot.readString();
        struct.setHeadlineIsSet(true);
      }
      if (incoming.get(12)) {
        struct.headline_failure = iprot.readString();
        struct.setHeadline_failureIsSet(true);
      }
      if (incoming.get(13)) {
        struct.share_title = iprot.readString();
        struct.setShare_titleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.share_desc = iprot.readString();
        struct.setShare_descIsSet(true);
      }
      if (incoming.get(15)) {
        struct.share_img = iprot.readString();
        struct.setShare_imgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.checked = iprot.readI32();
        struct.setCheckedIsSet(true);
      }
      if (incoming.get(18)) {
        struct.estimated_total = iprot.readI32();
        struct.setEstimated_totalIsSet(true);
      }
      if (incoming.get(19)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.actual_total = iprot.readI32();
        struct.setActual_totalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

