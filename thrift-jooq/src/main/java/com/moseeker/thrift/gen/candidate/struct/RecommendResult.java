/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.candidate.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-10")
public class RecommendResult implements org.apache.thrift.TBase<RecommendResult, RecommendResult._Fields>, java.io.Serializable, Cloneable, Comparable<RecommendResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecommendResult");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("positionName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRESENTEE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEXT_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextOne", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RECOM_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recomTotal", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECOM_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("recomIndex", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RECOM_IGNORE_FIELD_DESC = new org.apache.thrift.protocol.TField("recomIgnore", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RecommendResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RecommendResultTupleSchemeFactory();

  public int id; // optional
  public java.lang.String positionName; // optional
  public java.lang.String presenteeName; // optional
  public boolean nextOne; // optional
  public int recomTotal; // optional
  public int recomIndex; // optional
  public int recomIgnore; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POSITION_NAME((short)2, "positionName"),
    PRESENTEE_NAME((short)3, "presenteeName"),
    NEXT_ONE((short)4, "nextOne"),
    RECOM_TOTAL((short)5, "recomTotal"),
    RECOM_INDEX((short)6, "recomIndex"),
    RECOM_IGNORE((short)7, "recomIgnore");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POSITION_NAME
          return POSITION_NAME;
        case 3: // PRESENTEE_NAME
          return PRESENTEE_NAME;
        case 4: // NEXT_ONE
          return NEXT_ONE;
        case 5: // RECOM_TOTAL
          return RECOM_TOTAL;
        case 6: // RECOM_INDEX
          return RECOM_INDEX;
        case 7: // RECOM_IGNORE
          return RECOM_IGNORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NEXTONE_ISSET_ID = 1;
  private static final int __RECOMTOTAL_ISSET_ID = 2;
  private static final int __RECOMINDEX_ISSET_ID = 3;
  private static final int __RECOMIGNORE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.POSITION_NAME,_Fields.PRESENTEE_NAME,_Fields.NEXT_ONE,_Fields.RECOM_TOTAL,_Fields.RECOM_INDEX,_Fields.RECOM_IGNORE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("positionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESENTEE_NAME, new org.apache.thrift.meta_data.FieldMetaData("presenteeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_ONE, new org.apache.thrift.meta_data.FieldMetaData("nextOne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RECOM_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("recomTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM_INDEX, new org.apache.thrift.meta_data.FieldMetaData("recomIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM_IGNORE, new org.apache.thrift.meta_data.FieldMetaData("recomIgnore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecommendResult.class, metaDataMap);
  }

  public RecommendResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecommendResult(RecommendResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPositionName()) {
      this.positionName = other.positionName;
    }
    if (other.isSetPresenteeName()) {
      this.presenteeName = other.presenteeName;
    }
    this.nextOne = other.nextOne;
    this.recomTotal = other.recomTotal;
    this.recomIndex = other.recomIndex;
    this.recomIgnore = other.recomIgnore;
  }

  public RecommendResult deepCopy() {
    return new RecommendResult(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.positionName = null;
    this.presenteeName = null;
    setNextOneIsSet(false);
    this.nextOne = false;
    setRecomTotalIsSet(false);
    this.recomTotal = 0;
    setRecomIndexIsSet(false);
    this.recomIndex = 0;
    setRecomIgnoreIsSet(false);
    this.recomIgnore = 0;
  }

  public int getId() {
    return this.id;
  }

  public RecommendResult setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getPositionName() {
    return this.positionName;
  }

  public RecommendResult setPositionName(java.lang.String positionName) {
    this.positionName = positionName;
    return this;
  }

  public void unsetPositionName() {
    this.positionName = null;
  }

  /** Returns true if field positionName is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionName() {
    return this.positionName != null;
  }

  public void setPositionNameIsSet(boolean value) {
    if (!value) {
      this.positionName = null;
    }
  }

  public java.lang.String getPresenteeName() {
    return this.presenteeName;
  }

  public RecommendResult setPresenteeName(java.lang.String presenteeName) {
    this.presenteeName = presenteeName;
    return this;
  }

  public void unsetPresenteeName() {
    this.presenteeName = null;
  }

  /** Returns true if field presenteeName is set (has been assigned a value) and false otherwise */
  public boolean isSetPresenteeName() {
    return this.presenteeName != null;
  }

  public void setPresenteeNameIsSet(boolean value) {
    if (!value) {
      this.presenteeName = null;
    }
  }

  public boolean isNextOne() {
    return this.nextOne;
  }

  public RecommendResult setNextOne(boolean nextOne) {
    this.nextOne = nextOne;
    setNextOneIsSet(true);
    return this;
  }

  public void unsetNextOne() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXTONE_ISSET_ID);
  }

  /** Returns true if field nextOne is set (has been assigned a value) and false otherwise */
  public boolean isSetNextOne() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXTONE_ISSET_ID);
  }

  public void setNextOneIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXTONE_ISSET_ID, value);
  }

  public int getRecomTotal() {
    return this.recomTotal;
  }

  public RecommendResult setRecomTotal(int recomTotal) {
    this.recomTotal = recomTotal;
    setRecomTotalIsSet(true);
    return this;
  }

  public void unsetRecomTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMTOTAL_ISSET_ID);
  }

  /** Returns true if field recomTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMTOTAL_ISSET_ID);
  }

  public void setRecomTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMTOTAL_ISSET_ID, value);
  }

  public int getRecomIndex() {
    return this.recomIndex;
  }

  public RecommendResult setRecomIndex(int recomIndex) {
    this.recomIndex = recomIndex;
    setRecomIndexIsSet(true);
    return this;
  }

  public void unsetRecomIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMINDEX_ISSET_ID);
  }

  /** Returns true if field recomIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMINDEX_ISSET_ID);
  }

  public void setRecomIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMINDEX_ISSET_ID, value);
  }

  public int getRecomIgnore() {
    return this.recomIgnore;
  }

  public RecommendResult setRecomIgnore(int recomIgnore) {
    this.recomIgnore = recomIgnore;
    setRecomIgnoreIsSet(true);
    return this;
  }

  public void unsetRecomIgnore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMIGNORE_ISSET_ID);
  }

  /** Returns true if field recomIgnore is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomIgnore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMIGNORE_ISSET_ID);
  }

  public void setRecomIgnoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMIGNORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case POSITION_NAME:
      if (value == null) {
        unsetPositionName();
      } else {
        setPositionName((java.lang.String)value);
      }
      break;

    case PRESENTEE_NAME:
      if (value == null) {
        unsetPresenteeName();
      } else {
        setPresenteeName((java.lang.String)value);
      }
      break;

    case NEXT_ONE:
      if (value == null) {
        unsetNextOne();
      } else {
        setNextOne((java.lang.Boolean)value);
      }
      break;

    case RECOM_TOTAL:
      if (value == null) {
        unsetRecomTotal();
      } else {
        setRecomTotal((java.lang.Integer)value);
      }
      break;

    case RECOM_INDEX:
      if (value == null) {
        unsetRecomIndex();
      } else {
        setRecomIndex((java.lang.Integer)value);
      }
      break;

    case RECOM_IGNORE:
      if (value == null) {
        unsetRecomIgnore();
      } else {
        setRecomIgnore((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case POSITION_NAME:
      return getPositionName();

    case PRESENTEE_NAME:
      return getPresenteeName();

    case NEXT_ONE:
      return isNextOne();

    case RECOM_TOTAL:
      return getRecomTotal();

    case RECOM_INDEX:
      return getRecomIndex();

    case RECOM_IGNORE:
      return getRecomIgnore();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POSITION_NAME:
      return isSetPositionName();
    case PRESENTEE_NAME:
      return isSetPresenteeName();
    case NEXT_ONE:
      return isSetNextOne();
    case RECOM_TOTAL:
      return isSetRecomTotal();
    case RECOM_INDEX:
      return isSetRecomIndex();
    case RECOM_IGNORE:
      return isSetRecomIgnore();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RecommendResult)
      return this.equals((RecommendResult)that);
    return false;
  }

  public boolean equals(RecommendResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_positionName = true && this.isSetPositionName();
    boolean that_present_positionName = true && that.isSetPositionName();
    if (this_present_positionName || that_present_positionName) {
      if (!(this_present_positionName && that_present_positionName))
        return false;
      if (!this.positionName.equals(that.positionName))
        return false;
    }

    boolean this_present_presenteeName = true && this.isSetPresenteeName();
    boolean that_present_presenteeName = true && that.isSetPresenteeName();
    if (this_present_presenteeName || that_present_presenteeName) {
      if (!(this_present_presenteeName && that_present_presenteeName))
        return false;
      if (!this.presenteeName.equals(that.presenteeName))
        return false;
    }

    boolean this_present_nextOne = true && this.isSetNextOne();
    boolean that_present_nextOne = true && that.isSetNextOne();
    if (this_present_nextOne || that_present_nextOne) {
      if (!(this_present_nextOne && that_present_nextOne))
        return false;
      if (this.nextOne != that.nextOne)
        return false;
    }

    boolean this_present_recomTotal = true && this.isSetRecomTotal();
    boolean that_present_recomTotal = true && that.isSetRecomTotal();
    if (this_present_recomTotal || that_present_recomTotal) {
      if (!(this_present_recomTotal && that_present_recomTotal))
        return false;
      if (this.recomTotal != that.recomTotal)
        return false;
    }

    boolean this_present_recomIndex = true && this.isSetRecomIndex();
    boolean that_present_recomIndex = true && that.isSetRecomIndex();
    if (this_present_recomIndex || that_present_recomIndex) {
      if (!(this_present_recomIndex && that_present_recomIndex))
        return false;
      if (this.recomIndex != that.recomIndex)
        return false;
    }

    boolean this_present_recomIgnore = true && this.isSetRecomIgnore();
    boolean that_present_recomIgnore = true && that.isSetRecomIgnore();
    if (this_present_recomIgnore || that_present_recomIgnore) {
      if (!(this_present_recomIgnore && that_present_recomIgnore))
        return false;
      if (this.recomIgnore != that.recomIgnore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPositionName()) ? 131071 : 524287);
    if (isSetPositionName())
      hashCode = hashCode * 8191 + positionName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPresenteeName()) ? 131071 : 524287);
    if (isSetPresenteeName())
      hashCode = hashCode * 8191 + presenteeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetNextOne()) ? 131071 : 524287);
    if (isSetNextOne())
      hashCode = hashCode * 8191 + ((nextOne) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRecomTotal()) ? 131071 : 524287);
    if (isSetRecomTotal())
      hashCode = hashCode * 8191 + recomTotal;

    hashCode = hashCode * 8191 + ((isSetRecomIndex()) ? 131071 : 524287);
    if (isSetRecomIndex())
      hashCode = hashCode * 8191 + recomIndex;

    hashCode = hashCode * 8191 + ((isSetRecomIgnore()) ? 131071 : 524287);
    if (isSetRecomIgnore())
      hashCode = hashCode * 8191 + recomIgnore;

    return hashCode;
  }

  @Override
  public int compareTo(RecommendResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionName()).compareTo(other.isSetPositionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionName, other.positionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPresenteeName()).compareTo(other.isSetPresenteeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresenteeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeName, other.presenteeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNextOne()).compareTo(other.isSetNextOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextOne, other.nextOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomTotal()).compareTo(other.isSetRecomTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomTotal, other.recomTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomIndex()).compareTo(other.isSetRecomIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomIndex, other.recomIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomIgnore()).compareTo(other.isSetRecomIgnore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomIgnore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomIgnore, other.recomIgnore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RecommendResult(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPositionName()) {
      if (!first) sb.append(", ");
      sb.append("positionName:");
      if (this.positionName == null) {
        sb.append("null");
      } else {
        sb.append(this.positionName);
      }
      first = false;
    }
    if (isSetPresenteeName()) {
      if (!first) sb.append(", ");
      sb.append("presenteeName:");
      if (this.presenteeName == null) {
        sb.append("null");
      } else {
        sb.append(this.presenteeName);
      }
      first = false;
    }
    if (isSetNextOne()) {
      if (!first) sb.append(", ");
      sb.append("nextOne:");
      sb.append(this.nextOne);
      first = false;
    }
    if (isSetRecomTotal()) {
      if (!first) sb.append(", ");
      sb.append("recomTotal:");
      sb.append(this.recomTotal);
      first = false;
    }
    if (isSetRecomIndex()) {
      if (!first) sb.append(", ");
      sb.append("recomIndex:");
      sb.append(this.recomIndex);
      first = false;
    }
    if (isSetRecomIgnore()) {
      if (!first) sb.append(", ");
      sb.append("recomIgnore:");
      sb.append(this.recomIgnore);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecommendResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RecommendResultStandardScheme getScheme() {
      return new RecommendResultStandardScheme();
    }
  }

  private static class RecommendResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RecommendResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecommendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionName = iprot.readString();
              struct.setPositionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRESENTEE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.presenteeName = iprot.readString();
              struct.setPresenteeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEXT_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.nextOne = iprot.readBool();
              struct.setNextOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECOM_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomTotal = iprot.readI32();
              struct.setRecomTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECOM_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomIndex = iprot.readI32();
              struct.setRecomIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECOM_IGNORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomIgnore = iprot.readI32();
              struct.setRecomIgnoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecommendResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.positionName != null) {
        if (struct.isSetPositionName()) {
          oprot.writeFieldBegin(POSITION_NAME_FIELD_DESC);
          oprot.writeString(struct.positionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.presenteeName != null) {
        if (struct.isSetPresenteeName()) {
          oprot.writeFieldBegin(PRESENTEE_NAME_FIELD_DESC);
          oprot.writeString(struct.presenteeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNextOne()) {
        oprot.writeFieldBegin(NEXT_ONE_FIELD_DESC);
        oprot.writeBool(struct.nextOne);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomTotal()) {
        oprot.writeFieldBegin(RECOM_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.recomTotal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomIndex()) {
        oprot.writeFieldBegin(RECOM_INDEX_FIELD_DESC);
        oprot.writeI32(struct.recomIndex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomIgnore()) {
        oprot.writeFieldBegin(RECOM_IGNORE_FIELD_DESC);
        oprot.writeI32(struct.recomIgnore);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecommendResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RecommendResultTupleScheme getScheme() {
      return new RecommendResultTupleScheme();
    }
  }

  private static class RecommendResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RecommendResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecommendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPositionName()) {
        optionals.set(1);
      }
      if (struct.isSetPresenteeName()) {
        optionals.set(2);
      }
      if (struct.isSetNextOne()) {
        optionals.set(3);
      }
      if (struct.isSetRecomTotal()) {
        optionals.set(4);
      }
      if (struct.isSetRecomIndex()) {
        optionals.set(5);
      }
      if (struct.isSetRecomIgnore()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPositionName()) {
        oprot.writeString(struct.positionName);
      }
      if (struct.isSetPresenteeName()) {
        oprot.writeString(struct.presenteeName);
      }
      if (struct.isSetNextOne()) {
        oprot.writeBool(struct.nextOne);
      }
      if (struct.isSetRecomTotal()) {
        oprot.writeI32(struct.recomTotal);
      }
      if (struct.isSetRecomIndex()) {
        oprot.writeI32(struct.recomIndex);
      }
      if (struct.isSetRecomIgnore()) {
        oprot.writeI32(struct.recomIgnore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecommendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.positionName = iprot.readString();
        struct.setPositionNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.presenteeName = iprot.readString();
        struct.setPresenteeNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nextOne = iprot.readBool();
        struct.setNextOneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recomTotal = iprot.readI32();
        struct.setRecomTotalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recomIndex = iprot.readI32();
        struct.setRecomIndexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recomIgnore = iprot.readI32();
        struct.setRecomIgnoreIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

