/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.mq.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class WxMessageFrequency implements org.apache.thrift.TBase<WxMessageFrequency, WxMessageFrequency._Fields>, java.io.Serializable, Cloneable, Comparable<WxMessageFrequency> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WxMessageFrequency");

  private static final org.apache.thrift.protocol.TField FIXED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValue", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WxMessageFrequencyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WxMessageFrequencyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String fixedTime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<WxMessageFrequencyOption> options; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String value; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String defaultValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIXED_TIME((short)1, "fixedTime"),
    OPTIONS((short)2, "options"),
    VALUE((short)3, "value"),
    DEFAULT_VALUE((short)4, "defaultValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIXED_TIME
          return FIXED_TIME;
        case 2: // OPTIONS
          return OPTIONS;
        case 3: // VALUE
          return VALUE;
        case 4: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FIXED_TIME,_Fields.OPTIONS,_Fields.VALUE,_Fields.DEFAULT_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIXED_TIME, new org.apache.thrift.meta_data.FieldMetaData("fixedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "WxMessageFrequencyOption"))));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("defaultValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WxMessageFrequency.class, metaDataMap);
  }

  public WxMessageFrequency() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WxMessageFrequency(WxMessageFrequency other) {
    if (other.isSetFixedTime()) {
      this.fixedTime = other.fixedTime;
    }
    if (other.isSetOptions()) {
      java.util.List<WxMessageFrequencyOption> __this__options = new java.util.ArrayList<WxMessageFrequencyOption>(other.options.size());
      for (WxMessageFrequencyOption other_element : other.options) {
        __this__options.add(new WxMessageFrequencyOption(other_element));
      }
      this.options = __this__options;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetDefaultValue()) {
      this.defaultValue = other.defaultValue;
    }
  }

  public WxMessageFrequency deepCopy() {
    return new WxMessageFrequency(this);
  }

  @Override
  public void clear() {
    this.fixedTime = null;
    this.options = null;
    this.value = null;
    this.defaultValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFixedTime() {
    return this.fixedTime;
  }

  public WxMessageFrequency setFixedTime(@org.apache.thrift.annotation.Nullable java.lang.String fixedTime) {
    this.fixedTime = fixedTime;
    return this;
  }

  public void unsetFixedTime() {
    this.fixedTime = null;
  }

  /** Returns true if field fixedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedTime() {
    return this.fixedTime != null;
  }

  public void setFixedTimeIsSet(boolean value) {
    if (!value) {
      this.fixedTime = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<WxMessageFrequencyOption> getOptionsIterator() {
    return (this.options == null) ? null : this.options.iterator();
  }

  public void addToOptions(WxMessageFrequencyOption elem) {
    if (this.options == null) {
      this.options = new java.util.ArrayList<WxMessageFrequencyOption>();
    }
    this.options.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<WxMessageFrequencyOption> getOptions() {
    return this.options;
  }

  public WxMessageFrequency setOptions(@org.apache.thrift.annotation.Nullable java.util.List<WxMessageFrequencyOption> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValue() {
    return this.value;
  }

  public WxMessageFrequency setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefaultValue() {
    return this.defaultValue;
  }

  public WxMessageFrequency setDefaultValue(@org.apache.thrift.annotation.Nullable java.lang.String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  public void unsetDefaultValue() {
    this.defaultValue = null;
  }

  /** Returns true if field defaultValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValue() {
    return this.defaultValue != null;
  }

  public void setDefaultValueIsSet(boolean value) {
    if (!value) {
      this.defaultValue = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FIXED_TIME:
      if (value == null) {
        unsetFixedTime();
      } else {
        setFixedTime((java.lang.String)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((java.util.List<WxMessageFrequencyOption>)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.String)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefaultValue();
      } else {
        setDefaultValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIXED_TIME:
      return getFixedTime();

    case OPTIONS:
      return getOptions();

    case VALUE:
      return getValue();

    case DEFAULT_VALUE:
      return getDefaultValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIXED_TIME:
      return isSetFixedTime();
    case OPTIONS:
      return isSetOptions();
    case VALUE:
      return isSetValue();
    case DEFAULT_VALUE:
      return isSetDefaultValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WxMessageFrequency)
      return this.equals((WxMessageFrequency)that);
    return false;
  }

  public boolean equals(WxMessageFrequency that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fixedTime = true && this.isSetFixedTime();
    boolean that_present_fixedTime = true && that.isSetFixedTime();
    if (this_present_fixedTime || that_present_fixedTime) {
      if (!(this_present_fixedTime && that_present_fixedTime))
        return false;
      if (!this.fixedTime.equals(that.fixedTime))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_defaultValue = true && this.isSetDefaultValue();
    boolean that_present_defaultValue = true && that.isSetDefaultValue();
    if (this_present_defaultValue || that_present_defaultValue) {
      if (!(this_present_defaultValue && that_present_defaultValue))
        return false;
      if (!this.defaultValue.equals(that.defaultValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFixedTime()) ? 131071 : 524287);
    if (isSetFixedTime())
      hashCode = hashCode * 8191 + fixedTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + options.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValue()) ? 131071 : 524287);
    if (isSetDefaultValue())
      hashCode = hashCode * 8191 + defaultValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WxMessageFrequency other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFixedTime()).compareTo(other.isSetFixedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedTime, other.fixedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultValue()).compareTo(other.isSetDefaultValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValue, other.defaultValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WxMessageFrequency(");
    boolean first = true;

    if (isSetFixedTime()) {
      sb.append("fixedTime:");
      if (this.fixedTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fixedTime);
      }
      first = false;
    }
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetDefaultValue()) {
      if (!first) sb.append(", ");
      sb.append("defaultValue:");
      if (this.defaultValue == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WxMessageFrequencyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WxMessageFrequencyStandardScheme getScheme() {
      return new WxMessageFrequencyStandardScheme();
    }
  }

  private static class WxMessageFrequencyStandardScheme extends org.apache.thrift.scheme.StandardScheme<WxMessageFrequency> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WxMessageFrequency struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIXED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fixedTime = iprot.readString();
              struct.setFixedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.options = new java.util.ArrayList<WxMessageFrequencyOption>(_list46.size);
                @org.apache.thrift.annotation.Nullable WxMessageFrequencyOption _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new WxMessageFrequencyOption();
                  _elem47.read(iprot);
                  struct.options.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultValue = iprot.readString();
              struct.setDefaultValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WxMessageFrequency struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fixedTime != null) {
        if (struct.isSetFixedTime()) {
          oprot.writeFieldBegin(FIXED_TIME_FIELD_DESC);
          oprot.writeString(struct.fixedTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.options.size()));
            for (WxMessageFrequencyOption _iter49 : struct.options)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.defaultValue != null) {
        if (struct.isSetDefaultValue()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeString(struct.defaultValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WxMessageFrequencyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WxMessageFrequencyTupleScheme getScheme() {
      return new WxMessageFrequencyTupleScheme();
    }
  }

  private static class WxMessageFrequencyTupleScheme extends org.apache.thrift.scheme.TupleScheme<WxMessageFrequency> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WxMessageFrequency struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFixedTime()) {
        optionals.set(0);
      }
      if (struct.isSetOptions()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetDefaultValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFixedTime()) {
        oprot.writeString(struct.fixedTime);
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (WxMessageFrequencyOption _iter50 : struct.options)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetDefaultValue()) {
        oprot.writeString(struct.defaultValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WxMessageFrequency struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fixedTime = iprot.readString();
        struct.setFixedTimeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.options = new java.util.ArrayList<WxMessageFrequencyOption>(_list51.size);
          @org.apache.thrift.annotation.Nullable WxMessageFrequencyOption _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = new WxMessageFrequencyOption();
            _elem52.read(iprot);
            struct.options.add(_elem52);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.defaultValue = iprot.readString();
        struct.setDefaultValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

