/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class StmButtonPidDO implements org.apache.thrift.TBase<StmButtonPidDO, StmButtonPidDO._Fields>, java.io.Serializable, Cloneable, Comparable<StmButtonPidDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StmButtonPidDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AB_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("abGroup", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("button", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_RECOM_FIELD_DESC = new org.apache.thrift.protocol.TField("isRecom", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RECOM_FIELD_DESC = new org.apache.thrift.protocol.TField("recom", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StmButtonPidDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StmButtonPidDOTupleSchemeFactory();

  public long id; // optional
  public java.lang.String abGroup; // optional
  public java.lang.String button; // optional
  public java.lang.String createTime; // optional
  public java.lang.String ip; // optional
  public byte isRecom; // optional
  public long pid; // optional
  public java.lang.String recom; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AB_GROUP((short)2, "abGroup"),
    BUTTON((short)3, "button"),
    CREATE_TIME((short)4, "createTime"),
    IP((short)5, "ip"),
    IS_RECOM((short)6, "isRecom"),
    PID((short)7, "pid"),
    RECOM((short)8, "recom");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AB_GROUP
          return AB_GROUP;
        case 3: // BUTTON
          return BUTTON;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // IP
          return IP;
        case 6: // IS_RECOM
          return IS_RECOM;
        case 7: // PID
          return PID;
        case 8: // RECOM
          return RECOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISRECOM_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.AB_GROUP,_Fields.BUTTON,_Fields.CREATE_TIME,_Fields.IP,_Fields.IS_RECOM,_Fields.PID,_Fields.RECOM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AB_GROUP, new org.apache.thrift.meta_data.FieldMetaData("abGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUTTON, new org.apache.thrift.meta_data.FieldMetaData("button", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RECOM, new org.apache.thrift.meta_data.FieldMetaData("isRecom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECOM, new org.apache.thrift.meta_data.FieldMetaData("recom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StmButtonPidDO.class, metaDataMap);
  }

  public StmButtonPidDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StmButtonPidDO(StmButtonPidDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetAbGroup()) {
      this.abGroup = other.abGroup;
    }
    if (other.isSetButton()) {
      this.button = other.button;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.isRecom = other.isRecom;
    this.pid = other.pid;
    if (other.isSetRecom()) {
      this.recom = other.recom;
    }
  }

  public StmButtonPidDO deepCopy() {
    return new StmButtonPidDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.abGroup = null;
    this.button = null;
    this.createTime = null;
    this.ip = null;
    setIsRecomIsSet(false);
    this.isRecom = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.recom = null;
  }

  public long getId() {
    return this.id;
  }

  public StmButtonPidDO setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getAbGroup() {
    return this.abGroup;
  }

  public StmButtonPidDO setAbGroup(java.lang.String abGroup) {
    this.abGroup = abGroup;
    return this;
  }

  public void unsetAbGroup() {
    this.abGroup = null;
  }

  /** Returns true if field abGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetAbGroup() {
    return this.abGroup != null;
  }

  public void setAbGroupIsSet(boolean value) {
    if (!value) {
      this.abGroup = null;
    }
  }

  public java.lang.String getButton() {
    return this.button;
  }

  public StmButtonPidDO setButton(java.lang.String button) {
    this.button = button;
    return this;
  }

  public void unsetButton() {
    this.button = null;
  }

  /** Returns true if field button is set (has been assigned a value) and false otherwise */
  public boolean isSetButton() {
    return this.button != null;
  }

  public void setButtonIsSet(boolean value) {
    if (!value) {
      this.button = null;
    }
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public StmButtonPidDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getIp() {
    return this.ip;
  }

  public StmButtonPidDO setIp(java.lang.String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public byte getIsRecom() {
    return this.isRecom;
  }

  public StmButtonPidDO setIsRecom(byte isRecom) {
    this.isRecom = isRecom;
    setIsRecomIsSet(true);
    return this;
  }

  public void unsetIsRecom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRECOM_ISSET_ID);
  }

  /** Returns true if field isRecom is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRecom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRECOM_ISSET_ID);
  }

  public void setIsRecomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRECOM_ISSET_ID, value);
  }

  public long getPid() {
    return this.pid;
  }

  public StmButtonPidDO setPid(long pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public java.lang.String getRecom() {
    return this.recom;
  }

  public StmButtonPidDO setRecom(java.lang.String recom) {
    this.recom = recom;
    return this;
  }

  public void unsetRecom() {
    this.recom = null;
  }

  /** Returns true if field recom is set (has been assigned a value) and false otherwise */
  public boolean isSetRecom() {
    return this.recom != null;
  }

  public void setRecomIsSet(boolean value) {
    if (!value) {
      this.recom = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case AB_GROUP:
      if (value == null) {
        unsetAbGroup();
      } else {
        setAbGroup((java.lang.String)value);
      }
      break;

    case BUTTON:
      if (value == null) {
        unsetButton();
      } else {
        setButton((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((java.lang.String)value);
      }
      break;

    case IS_RECOM:
      if (value == null) {
        unsetIsRecom();
      } else {
        setIsRecom((java.lang.Byte)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Long)value);
      }
      break;

    case RECOM:
      if (value == null) {
        unsetRecom();
      } else {
        setRecom((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case AB_GROUP:
      return getAbGroup();

    case BUTTON:
      return getButton();

    case CREATE_TIME:
      return getCreateTime();

    case IP:
      return getIp();

    case IS_RECOM:
      return getIsRecom();

    case PID:
      return getPid();

    case RECOM:
      return getRecom();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AB_GROUP:
      return isSetAbGroup();
    case BUTTON:
      return isSetButton();
    case CREATE_TIME:
      return isSetCreateTime();
    case IP:
      return isSetIp();
    case IS_RECOM:
      return isSetIsRecom();
    case PID:
      return isSetPid();
    case RECOM:
      return isSetRecom();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StmButtonPidDO)
      return this.equals((StmButtonPidDO)that);
    return false;
  }

  public boolean equals(StmButtonPidDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_abGroup = true && this.isSetAbGroup();
    boolean that_present_abGroup = true && that.isSetAbGroup();
    if (this_present_abGroup || that_present_abGroup) {
      if (!(this_present_abGroup && that_present_abGroup))
        return false;
      if (!this.abGroup.equals(that.abGroup))
        return false;
    }

    boolean this_present_button = true && this.isSetButton();
    boolean that_present_button = true && that.isSetButton();
    if (this_present_button || that_present_button) {
      if (!(this_present_button && that_present_button))
        return false;
      if (!this.button.equals(that.button))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_isRecom = true && this.isSetIsRecom();
    boolean that_present_isRecom = true && that.isSetIsRecom();
    if (this_present_isRecom || that_present_isRecom) {
      if (!(this_present_isRecom && that_present_isRecom))
        return false;
      if (this.isRecom != that.isRecom)
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_recom = true && this.isSetRecom();
    boolean that_present_recom = true && that.isSetRecom();
    if (this_present_recom || that_present_recom) {
      if (!(this_present_recom && that_present_recom))
        return false;
      if (!this.recom.equals(that.recom))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetAbGroup()) ? 131071 : 524287);
    if (isSetAbGroup())
      hashCode = hashCode * 8191 + abGroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetButton()) ? 131071 : 524287);
    if (isSetButton())
      hashCode = hashCode * 8191 + button.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsRecom()) ? 131071 : 524287);
    if (isSetIsRecom())
      hashCode = hashCode * 8191 + (int) (isRecom);

    hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
    if (isSetPid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pid);

    hashCode = hashCode * 8191 + ((isSetRecom()) ? 131071 : 524287);
    if (isSetRecom())
      hashCode = hashCode * 8191 + recom.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StmButtonPidDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAbGroup()).compareTo(other.isSetAbGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abGroup, other.abGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetButton()).compareTo(other.isSetButton());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetButton()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.button, other.button);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRecom()).compareTo(other.isSetIsRecom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRecom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRecom, other.isRecom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecom()).compareTo(other.isSetRecom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recom, other.recom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StmButtonPidDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAbGroup()) {
      if (!first) sb.append(", ");
      sb.append("abGroup:");
      if (this.abGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.abGroup);
      }
      first = false;
    }
    if (isSetButton()) {
      if (!first) sb.append(", ");
      sb.append("button:");
      if (this.button == null) {
        sb.append("null");
      } else {
        sb.append(this.button);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetIsRecom()) {
      if (!first) sb.append(", ");
      sb.append("isRecom:");
      sb.append(this.isRecom);
      first = false;
    }
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetRecom()) {
      if (!first) sb.append(", ");
      sb.append("recom:");
      if (this.recom == null) {
        sb.append("null");
      } else {
        sb.append(this.recom);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StmButtonPidDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StmButtonPidDOStandardScheme getScheme() {
      return new StmButtonPidDOStandardScheme();
    }
  }

  private static class StmButtonPidDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<StmButtonPidDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StmButtonPidDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AB_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abGroup = iprot.readString();
              struct.setAbGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUTTON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.button = iprot.readString();
              struct.setButtonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_RECOM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isRecom = iprot.readByte();
              struct.setIsRecomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pid = iprot.readI64();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recom = iprot.readString();
              struct.setRecomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StmButtonPidDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.abGroup != null) {
        if (struct.isSetAbGroup()) {
          oprot.writeFieldBegin(AB_GROUP_FIELD_DESC);
          oprot.writeString(struct.abGroup);
          oprot.writeFieldEnd();
        }
      }
      if (struct.button != null) {
        if (struct.isSetButton()) {
          oprot.writeFieldBegin(BUTTON_FIELD_DESC);
          oprot.writeString(struct.button);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRecom()) {
        oprot.writeFieldBegin(IS_RECOM_FIELD_DESC);
        oprot.writeByte(struct.isRecom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.recom != null) {
        if (struct.isSetRecom()) {
          oprot.writeFieldBegin(RECOM_FIELD_DESC);
          oprot.writeString(struct.recom);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StmButtonPidDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StmButtonPidDOTupleScheme getScheme() {
      return new StmButtonPidDOTupleScheme();
    }
  }

  private static class StmButtonPidDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<StmButtonPidDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StmButtonPidDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAbGroup()) {
        optionals.set(1);
      }
      if (struct.isSetButton()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetIp()) {
        optionals.set(4);
      }
      if (struct.isSetIsRecom()) {
        optionals.set(5);
      }
      if (struct.isSetPid()) {
        optionals.set(6);
      }
      if (struct.isSetRecom()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetAbGroup()) {
        oprot.writeString(struct.abGroup);
      }
      if (struct.isSetButton()) {
        oprot.writeString(struct.button);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetIsRecom()) {
        oprot.writeByte(struct.isRecom);
      }
      if (struct.isSetPid()) {
        oprot.writeI64(struct.pid);
      }
      if (struct.isSetRecom()) {
        oprot.writeString(struct.recom);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StmButtonPidDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.abGroup = iprot.readString();
        struct.setAbGroupIsSet(true);
      }
      if (incoming.get(2)) {
        struct.button = iprot.readString();
        struct.setButtonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isRecom = iprot.readByte();
        struct.setIsRecomIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pid = iprot.readI64();
        struct.setPidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recom = iprot.readString();
        struct.setRecomIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

