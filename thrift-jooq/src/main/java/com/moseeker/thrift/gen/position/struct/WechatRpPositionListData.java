/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-10")
public class WechatRpPositionListData implements org.apache.thrift.TBase<WechatRpPositionListData, WechatRpPositionListData._Fields>, java.io.Serializable, Cloneable, Comparable<WechatRpPositionListData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WechatRpPositionListData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIXED_FIELD_DESC = new org.apache.thrift.protocol.TField("fixed", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_top", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_bottom", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_date", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VISITNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("visitnum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IN_HB_FIELD_DESC = new org.apache.thrift.protocol.TField("in_hb", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField COMPANY_ABBR_FIELD_DESC = new org.apache.thrift.protocol.TField("company_abbr", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMPANY_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("company_logo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("company_name", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("is_new", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField REMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("remain", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("employee_only", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_source", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("requirement", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WechatRpPositionListDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WechatRpPositionListDataTupleSchemeFactory();

  public int id; // optional
  public java.lang.String title; // optional
  public boolean fixed; // optional
  public int salary_top; // optional
  public int salary_bottom; // optional
  public java.lang.String publish_date; // optional
  public java.lang.String department; // optional
  public int visitnum; // optional
  public boolean in_hb; // optional
  public int count; // optional
  public java.lang.String company_abbr; // optional
  public java.lang.String company_logo; // optional
  public java.lang.String company_name; // optional
  public boolean is_new; // optional
  public int remain; // optional
  public boolean employee_only; // optional
  public java.lang.String city; // optional
  public int candidate_source; // optional
  public java.lang.String requirement; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    FIXED((short)3, "fixed"),
    SALARY_TOP((short)4, "salary_top"),
    SALARY_BOTTOM((short)5, "salary_bottom"),
    PUBLISH_DATE((short)6, "publish_date"),
    DEPARTMENT((short)7, "department"),
    VISITNUM((short)8, "visitnum"),
    IN_HB((short)9, "in_hb"),
    COUNT((short)10, "count"),
    COMPANY_ABBR((short)11, "company_abbr"),
    COMPANY_LOGO((short)12, "company_logo"),
    COMPANY_NAME((short)13, "company_name"),
    IS_NEW((short)14, "is_new"),
    REMAIN((short)15, "remain"),
    EMPLOYEE_ONLY((short)16, "employee_only"),
    CITY((short)17, "city"),
    CANDIDATE_SOURCE((short)18, "candidate_source"),
    REQUIREMENT((short)19, "requirement");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // FIXED
          return FIXED;
        case 4: // SALARY_TOP
          return SALARY_TOP;
        case 5: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 6: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 7: // DEPARTMENT
          return DEPARTMENT;
        case 8: // VISITNUM
          return VISITNUM;
        case 9: // IN_HB
          return IN_HB;
        case 10: // COUNT
          return COUNT;
        case 11: // COMPANY_ABBR
          return COMPANY_ABBR;
        case 12: // COMPANY_LOGO
          return COMPANY_LOGO;
        case 13: // COMPANY_NAME
          return COMPANY_NAME;
        case 14: // IS_NEW
          return IS_NEW;
        case 15: // REMAIN
          return REMAIN;
        case 16: // EMPLOYEE_ONLY
          return EMPLOYEE_ONLY;
        case 17: // CITY
          return CITY;
        case 18: // CANDIDATE_SOURCE
          return CANDIDATE_SOURCE;
        case 19: // REQUIREMENT
          return REQUIREMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FIXED_ISSET_ID = 1;
  private static final int __SALARY_TOP_ISSET_ID = 2;
  private static final int __SALARY_BOTTOM_ISSET_ID = 3;
  private static final int __VISITNUM_ISSET_ID = 4;
  private static final int __IN_HB_ISSET_ID = 5;
  private static final int __COUNT_ISSET_ID = 6;
  private static final int __IS_NEW_ISSET_ID = 7;
  private static final int __REMAIN_ISSET_ID = 8;
  private static final int __EMPLOYEE_ONLY_ISSET_ID = 9;
  private static final int __CANDIDATE_SOURCE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.FIXED,_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.PUBLISH_DATE,_Fields.DEPARTMENT,_Fields.VISITNUM,_Fields.IN_HB,_Fields.COUNT,_Fields.COMPANY_ABBR,_Fields.COMPANY_LOGO,_Fields.COMPANY_NAME,_Fields.IS_NEW,_Fields.REMAIN,_Fields.EMPLOYEE_ONLY,_Fields.CITY,_Fields.CANDIDATE_SOURCE,_Fields.REQUIREMENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIXED, new org.apache.thrift.meta_data.FieldMetaData("fixed", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salary_top", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salary_bottom", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publish_date", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISITNUM, new org.apache.thrift.meta_data.FieldMetaData("visitnum", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_HB, new org.apache.thrift.meta_data.FieldMetaData("in_hb", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ABBR, new org.apache.thrift.meta_data.FieldMetaData("company_abbr", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_LOGO, new org.apache.thrift.meta_data.FieldMetaData("company_logo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("company_name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEW, new org.apache.thrift.meta_data.FieldMetaData("is_new", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REMAIN, new org.apache.thrift.meta_data.FieldMetaData("remain", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOYEE_ONLY, new org.apache.thrift.meta_data.FieldMetaData("employee_only", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidate_source", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("requirement", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WechatRpPositionListData.class, metaDataMap);
  }

  public WechatRpPositionListData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WechatRpPositionListData(WechatRpPositionListData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.fixed = other.fixed;
    this.salary_top = other.salary_top;
    this.salary_bottom = other.salary_bottom;
    if (other.isSetPublish_date()) {
      this.publish_date = other.publish_date;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    this.visitnum = other.visitnum;
    this.in_hb = other.in_hb;
    this.count = other.count;
    if (other.isSetCompany_abbr()) {
      this.company_abbr = other.company_abbr;
    }
    if (other.isSetCompany_logo()) {
      this.company_logo = other.company_logo;
    }
    if (other.isSetCompany_name()) {
      this.company_name = other.company_name;
    }
    this.is_new = other.is_new;
    this.remain = other.remain;
    this.employee_only = other.employee_only;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.candidate_source = other.candidate_source;
    if (other.isSetRequirement()) {
      this.requirement = other.requirement;
    }
  }

  public WechatRpPositionListData deepCopy() {
    return new WechatRpPositionListData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    setFixedIsSet(false);
    this.fixed = false;
    setSalary_topIsSet(false);
    this.salary_top = 0;
    setSalary_bottomIsSet(false);
    this.salary_bottom = 0;
    this.publish_date = null;
    this.department = null;
    setVisitnumIsSet(false);
    this.visitnum = 0;
    setIn_hbIsSet(false);
    this.in_hb = false;
    setCountIsSet(false);
    this.count = 0;
    this.company_abbr = null;
    this.company_logo = null;
    this.company_name = null;
    setIs_newIsSet(false);
    this.is_new = false;
    setRemainIsSet(false);
    this.remain = 0;
    setEmployee_onlyIsSet(false);
    this.employee_only = false;
    this.city = null;
    setCandidate_sourceIsSet(false);
    this.candidate_source = 0;
    this.requirement = null;
  }

  public int getId() {
    return this.id;
  }

  public WechatRpPositionListData setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public WechatRpPositionListData setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public boolean isFixed() {
    return this.fixed;
  }

  public WechatRpPositionListData setFixed(boolean fixed) {
    this.fixed = fixed;
    setFixedIsSet(true);
    return this;
  }

  public void unsetFixed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIXED_ISSET_ID);
  }

  /** Returns true if field fixed is set (has been assigned a value) and false otherwise */
  public boolean isSetFixed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIXED_ISSET_ID);
  }

  public void setFixedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIXED_ISSET_ID, value);
  }

  public int getSalary_top() {
    return this.salary_top;
  }

  public WechatRpPositionListData setSalary_top(int salary_top) {
    this.salary_top = salary_top;
    setSalary_topIsSet(true);
    return this;
  }

  public void unsetSalary_top() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  /** Returns true if field salary_top is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_top() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  public void setSalary_topIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_TOP_ISSET_ID, value);
  }

  public int getSalary_bottom() {
    return this.salary_bottom;
  }

  public WechatRpPositionListData setSalary_bottom(int salary_bottom) {
    this.salary_bottom = salary_bottom;
    setSalary_bottomIsSet(true);
    return this;
  }

  public void unsetSalary_bottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  /** Returns true if field salary_bottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_bottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  public void setSalary_bottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID, value);
  }

  public java.lang.String getPublish_date() {
    return this.publish_date;
  }

  public WechatRpPositionListData setPublish_date(java.lang.String publish_date) {
    this.publish_date = publish_date;
    return this;
  }

  public void unsetPublish_date() {
    this.publish_date = null;
  }

  /** Returns true if field publish_date is set (has been assigned a value) and false otherwise */
  public boolean isSetPublish_date() {
    return this.publish_date != null;
  }

  public void setPublish_dateIsSet(boolean value) {
    if (!value) {
      this.publish_date = null;
    }
  }

  public java.lang.String getDepartment() {
    return this.department;
  }

  public WechatRpPositionListData setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public int getVisitnum() {
    return this.visitnum;
  }

  public WechatRpPositionListData setVisitnum(int visitnum) {
    this.visitnum = visitnum;
    setVisitnumIsSet(true);
    return this;
  }

  public void unsetVisitnum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  /** Returns true if field visitnum is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitnum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  public void setVisitnumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISITNUM_ISSET_ID, value);
  }

  public boolean isIn_hb() {
    return this.in_hb;
  }

  public WechatRpPositionListData setIn_hb(boolean in_hb) {
    this.in_hb = in_hb;
    setIn_hbIsSet(true);
    return this;
  }

  public void unsetIn_hb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IN_HB_ISSET_ID);
  }

  /** Returns true if field in_hb is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_hb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IN_HB_ISSET_ID);
  }

  public void setIn_hbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IN_HB_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public WechatRpPositionListData setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public java.lang.String getCompany_abbr() {
    return this.company_abbr;
  }

  public WechatRpPositionListData setCompany_abbr(java.lang.String company_abbr) {
    this.company_abbr = company_abbr;
    return this;
  }

  public void unsetCompany_abbr() {
    this.company_abbr = null;
  }

  /** Returns true if field company_abbr is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_abbr() {
    return this.company_abbr != null;
  }

  public void setCompany_abbrIsSet(boolean value) {
    if (!value) {
      this.company_abbr = null;
    }
  }

  public java.lang.String getCompany_logo() {
    return this.company_logo;
  }

  public WechatRpPositionListData setCompany_logo(java.lang.String company_logo) {
    this.company_logo = company_logo;
    return this;
  }

  public void unsetCompany_logo() {
    this.company_logo = null;
  }

  /** Returns true if field company_logo is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_logo() {
    return this.company_logo != null;
  }

  public void setCompany_logoIsSet(boolean value) {
    if (!value) {
      this.company_logo = null;
    }
  }

  public java.lang.String getCompany_name() {
    return this.company_name;
  }

  public WechatRpPositionListData setCompany_name(java.lang.String company_name) {
    this.company_name = company_name;
    return this;
  }

  public void unsetCompany_name() {
    this.company_name = null;
  }

  /** Returns true if field company_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_name() {
    return this.company_name != null;
  }

  public void setCompany_nameIsSet(boolean value) {
    if (!value) {
      this.company_name = null;
    }
  }

  public boolean isIs_new() {
    return this.is_new;
  }

  public WechatRpPositionListData setIs_new(boolean is_new) {
    this.is_new = is_new;
    setIs_newIsSet(true);
    return this;
  }

  public void unsetIs_new() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_NEW_ISSET_ID);
  }

  /** Returns true if field is_new is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_new() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_NEW_ISSET_ID);
  }

  public void setIs_newIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_NEW_ISSET_ID, value);
  }

  public int getRemain() {
    return this.remain;
  }

  public WechatRpPositionListData setRemain(int remain) {
    this.remain = remain;
    setRemainIsSet(true);
    return this;
  }

  public void unsetRemain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REMAIN_ISSET_ID);
  }

  /** Returns true if field remain is set (has been assigned a value) and false otherwise */
  public boolean isSetRemain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REMAIN_ISSET_ID);
  }

  public void setRemainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REMAIN_ISSET_ID, value);
  }

  public boolean isEmployee_only() {
    return this.employee_only;
  }

  public WechatRpPositionListData setEmployee_only(boolean employee_only) {
    this.employee_only = employee_only;
    setEmployee_onlyIsSet(true);
    return this;
  }

  public void unsetEmployee_only() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEE_ONLY_ISSET_ID);
  }

  /** Returns true if field employee_only is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployee_only() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEE_ONLY_ISSET_ID);
  }

  public void setEmployee_onlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEE_ONLY_ISSET_ID, value);
  }

  public java.lang.String getCity() {
    return this.city;
  }

  public WechatRpPositionListData setCity(java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getCandidate_source() {
    return this.candidate_source;
  }

  public WechatRpPositionListData setCandidate_source(int candidate_source) {
    this.candidate_source = candidate_source;
    setCandidate_sourceIsSet(true);
    return this;
  }

  public void unsetCandidate_source() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  /** Returns true if field candidate_source is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_source() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  public void setCandidate_sourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID, value);
  }

  public java.lang.String getRequirement() {
    return this.requirement;
  }

  public WechatRpPositionListData setRequirement(java.lang.String requirement) {
    this.requirement = requirement;
    return this;
  }

  public void unsetRequirement() {
    this.requirement = null;
  }

  /** Returns true if field requirement is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirement() {
    return this.requirement != null;
  }

  public void setRequirementIsSet(boolean value) {
    if (!value) {
      this.requirement = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((java.lang.String)value);
        }
        break;

      case FIXED:
        if (value == null) {
          unsetFixed();
        } else {
          setFixed((java.lang.Boolean)value);
        }
        break;

      case SALARY_TOP:
        if (value == null) {
          unsetSalary_top();
        } else {
          setSalary_top((java.lang.Integer)value);
        }
        break;

      case SALARY_BOTTOM:
        if (value == null) {
          unsetSalary_bottom();
        } else {
          setSalary_bottom((java.lang.Integer)value);
        }
        break;

      case PUBLISH_DATE:
        if (value == null) {
          unsetPublish_date();
        } else {
          setPublish_date((java.lang.String)value);
        }
        break;

      case DEPARTMENT:
        if (value == null) {
          unsetDepartment();
        } else {
          setDepartment((java.lang.String)value);
        }
        break;

      case VISITNUM:
        if (value == null) {
          unsetVisitnum();
        } else {
          setVisitnum((java.lang.Integer)value);
        }
        break;

      case IN_HB:
        if (value == null) {
          unsetIn_hb();
        } else {
          setIn_hb((java.lang.Boolean)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      case COMPANY_ABBR:
        if (value == null) {
          unsetCompany_abbr();
        } else {
          setCompany_abbr((java.lang.String)value);
        }
        break;

      case COMPANY_LOGO:
        if (value == null) {
          unsetCompany_logo();
        } else {
          setCompany_logo((java.lang.String)value);
        }
        break;

      case COMPANY_NAME:
        if (value == null) {
          unsetCompany_name();
        } else {
          setCompany_name((java.lang.String)value);
        }
        break;

      case IS_NEW:
        if (value == null) {
          unsetIs_new();
        } else {
          setIs_new((java.lang.Boolean)value);
        }
        break;

      case REMAIN:
        if (value == null) {
          unsetRemain();
        } else {
          setRemain((java.lang.Integer)value);
        }
        break;

      case EMPLOYEE_ONLY:
        if (value == null) {
          unsetEmployee_only();
        } else {
          setEmployee_only((java.lang.Boolean)value);
        }
        break;

      case CITY:
        if (value == null) {
          unsetCity();
        } else {
          setCity((java.lang.String)value);
        }
        break;

      case CANDIDATE_SOURCE:
        if (value == null) {
          unsetCandidate_source();
        } else {
          setCandidate_source((java.lang.Integer)value);
        }
        break;

      case REQUIREMENT:
        if (value == null) {
          unsetRequirement();
        } else {
          setRequirement((java.lang.String)value);
        }
        break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case ID:
        return getId();

      case TITLE:
        return getTitle();

      case FIXED:
        return isFixed();

      case SALARY_TOP:
        return getSalary_top();

      case SALARY_BOTTOM:
        return getSalary_bottom();

      case PUBLISH_DATE:
        return getPublish_date();

      case DEPARTMENT:
        return getDepartment();

      case VISITNUM:
        return getVisitnum();

      case IN_HB:
        return isIn_hb();

      case COUNT:
        return getCount();

      case COMPANY_ABBR:
        return getCompany_abbr();

      case COMPANY_LOGO:
        return getCompany_logo();

      case COMPANY_NAME:
        return getCompany_name();

      case IS_NEW:
        return isIs_new();

      case REMAIN:
        return getRemain();

      case EMPLOYEE_ONLY:
        return isEmployee_only();

      case CITY:
        return getCity();

      case CANDIDATE_SOURCE:
        return getCandidate_source();

      case REQUIREMENT:
        return getRequirement();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case ID:
        return isSetId();
      case TITLE:
        return isSetTitle();
      case FIXED:
        return isSetFixed();
      case SALARY_TOP:
        return isSetSalary_top();
      case SALARY_BOTTOM:
        return isSetSalary_bottom();
      case PUBLISH_DATE:
        return isSetPublish_date();
      case DEPARTMENT:
        return isSetDepartment();
      case VISITNUM:
        return isSetVisitnum();
      case IN_HB:
        return isSetIn_hb();
      case COUNT:
        return isSetCount();
      case COMPANY_ABBR:
        return isSetCompany_abbr();
      case COMPANY_LOGO:
        return isSetCompany_logo();
      case COMPANY_NAME:
        return isSetCompany_name();
      case IS_NEW:
        return isSetIs_new();
      case REMAIN:
        return isSetRemain();
      case EMPLOYEE_ONLY:
        return isSetEmployee_only();
      case CITY:
        return isSetCity();
      case CANDIDATE_SOURCE:
        return isSetCandidate_source();
      case REQUIREMENT:
        return isSetRequirement();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WechatRpPositionListData)
      return this.equals((WechatRpPositionListData)that);
    return false;
  }

  public boolean equals(WechatRpPositionListData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_fixed = true && this.isSetFixed();
    boolean that_present_fixed = true && that.isSetFixed();
    if (this_present_fixed || that_present_fixed) {
      if (!(this_present_fixed && that_present_fixed))
        return false;
      if (this.fixed != that.fixed)
        return false;
    }

    boolean this_present_salary_top = true && this.isSetSalary_top();
    boolean that_present_salary_top = true && that.isSetSalary_top();
    if (this_present_salary_top || that_present_salary_top) {
      if (!(this_present_salary_top && that_present_salary_top))
        return false;
      if (this.salary_top != that.salary_top)
        return false;
    }

    boolean this_present_salary_bottom = true && this.isSetSalary_bottom();
    boolean that_present_salary_bottom = true && that.isSetSalary_bottom();
    if (this_present_salary_bottom || that_present_salary_bottom) {
      if (!(this_present_salary_bottom && that_present_salary_bottom))
        return false;
      if (this.salary_bottom != that.salary_bottom)
        return false;
    }

    boolean this_present_publish_date = true && this.isSetPublish_date();
    boolean that_present_publish_date = true && that.isSetPublish_date();
    if (this_present_publish_date || that_present_publish_date) {
      if (!(this_present_publish_date && that_present_publish_date))
        return false;
      if (!this.publish_date.equals(that.publish_date))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_visitnum = true && this.isSetVisitnum();
    boolean that_present_visitnum = true && that.isSetVisitnum();
    if (this_present_visitnum || that_present_visitnum) {
      if (!(this_present_visitnum && that_present_visitnum))
        return false;
      if (this.visitnum != that.visitnum)
        return false;
    }

    boolean this_present_in_hb = true && this.isSetIn_hb();
    boolean that_present_in_hb = true && that.isSetIn_hb();
    if (this_present_in_hb || that_present_in_hb) {
      if (!(this_present_in_hb && that_present_in_hb))
        return false;
      if (this.in_hb != that.in_hb)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_company_abbr = true && this.isSetCompany_abbr();
    boolean that_present_company_abbr = true && that.isSetCompany_abbr();
    if (this_present_company_abbr || that_present_company_abbr) {
      if (!(this_present_company_abbr && that_present_company_abbr))
        return false;
      if (!this.company_abbr.equals(that.company_abbr))
        return false;
    }

    boolean this_present_company_logo = true && this.isSetCompany_logo();
    boolean that_present_company_logo = true && that.isSetCompany_logo();
    if (this_present_company_logo || that_present_company_logo) {
      if (!(this_present_company_logo && that_present_company_logo))
        return false;
      if (!this.company_logo.equals(that.company_logo))
        return false;
    }

    boolean this_present_company_name = true && this.isSetCompany_name();
    boolean that_present_company_name = true && that.isSetCompany_name();
    if (this_present_company_name || that_present_company_name) {
      if (!(this_present_company_name && that_present_company_name))
        return false;
      if (!this.company_name.equals(that.company_name))
        return false;
    }

    boolean this_present_is_new = true && this.isSetIs_new();
    boolean that_present_is_new = true && that.isSetIs_new();
    if (this_present_is_new || that_present_is_new) {
      if (!(this_present_is_new && that_present_is_new))
        return false;
      if (this.is_new != that.is_new)
        return false;
    }

    boolean this_present_remain = true && this.isSetRemain();
    boolean that_present_remain = true && that.isSetRemain();
    if (this_present_remain || that_present_remain) {
      if (!(this_present_remain && that_present_remain))
        return false;
      if (this.remain != that.remain)
        return false;
    }

    boolean this_present_employee_only = true && this.isSetEmployee_only();
    boolean that_present_employee_only = true && that.isSetEmployee_only();
    if (this_present_employee_only || that_present_employee_only) {
      if (!(this_present_employee_only && that_present_employee_only))
        return false;
      if (this.employee_only != that.employee_only)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_candidate_source = true && this.isSetCandidate_source();
    boolean that_present_candidate_source = true && that.isSetCandidate_source();
    if (this_present_candidate_source || that_present_candidate_source) {
      if (!(this_present_candidate_source && that_present_candidate_source))
        return false;
      if (this.candidate_source != that.candidate_source)
        return false;
    }

    boolean this_present_requirement = true && this.isSetRequirement();
    boolean that_present_requirement = true && that.isSetRequirement();
    if (this_present_requirement || that_present_requirement) {
      if (!(this_present_requirement && that_present_requirement))
        return false;
      if (!this.requirement.equals(that.requirement))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetFixed()) ? 131071 : 524287);
    if (isSetFixed())
      hashCode = hashCode * 8191 + ((fixed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSalary_top()) ? 131071 : 524287);
    if (isSetSalary_top())
      hashCode = hashCode * 8191 + salary_top;

    hashCode = hashCode * 8191 + ((isSetSalary_bottom()) ? 131071 : 524287);
    if (isSetSalary_bottom())
      hashCode = hashCode * 8191 + salary_bottom;

    hashCode = hashCode * 8191 + ((isSetPublish_date()) ? 131071 : 524287);
    if (isSetPublish_date())
      hashCode = hashCode * 8191 + publish_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetVisitnum()) ? 131071 : 524287);
    if (isSetVisitnum())
      hashCode = hashCode * 8191 + visitnum;

    hashCode = hashCode * 8191 + ((isSetIn_hb()) ? 131071 : 524287);
    if (isSetIn_hb())
      hashCode = hashCode * 8191 + ((in_hb) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetCompany_abbr()) ? 131071 : 524287);
    if (isSetCompany_abbr())
      hashCode = hashCode * 8191 + company_abbr.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_logo()) ? 131071 : 524287);
    if (isSetCompany_logo())
      hashCode = hashCode * 8191 + company_logo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_name()) ? 131071 : 524287);
    if (isSetCompany_name())
      hashCode = hashCode * 8191 + company_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_new()) ? 131071 : 524287);
    if (isSetIs_new())
      hashCode = hashCode * 8191 + ((is_new) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRemain()) ? 131071 : 524287);
    if (isSetRemain())
      hashCode = hashCode * 8191 + remain;

    hashCode = hashCode * 8191 + ((isSetEmployee_only()) ? 131071 : 524287);
    if (isSetEmployee_only())
      hashCode = hashCode * 8191 + ((employee_only) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetCandidate_source()) ? 131071 : 524287);
    if (isSetCandidate_source())
      hashCode = hashCode * 8191 + candidate_source;

    hashCode = hashCode * 8191 + ((isSetRequirement()) ? 131071 : 524287);
    if (isSetRequirement())
      hashCode = hashCode * 8191 + requirement.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WechatRpPositionListData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFixed()).compareTo(other.isSetFixed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixed, other.fixed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalary_top()).compareTo(other.isSetSalary_top());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_top()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_top, other.salary_top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalary_bottom()).compareTo(other.isSetSalary_bottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_bottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_bottom, other.salary_bottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublish_date()).compareTo(other.isSetPublish_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublish_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_date, other.publish_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVisitnum()).compareTo(other.isSetVisitnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitnum, other.visitnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIn_hb()).compareTo(other.isSetIn_hb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_hb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_hb, other.in_hb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany_abbr()).compareTo(other.isSetCompany_abbr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_abbr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_abbr, other.company_abbr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany_logo()).compareTo(other.isSetCompany_logo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_logo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_logo, other.company_logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany_name()).compareTo(other.isSetCompany_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_name, other.company_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_new()).compareTo(other.isSetIs_new());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_new()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_new, other.is_new);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemain()).compareTo(other.isSetRemain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remain, other.remain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmployee_only()).compareTo(other.isSetEmployee_only());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployee_only()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employee_only, other.employee_only);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCandidate_source()).compareTo(other.isSetCandidate_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_source, other.candidate_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequirement()).compareTo(other.isSetRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirement, other.requirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WechatRpPositionListData(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetFixed()) {
      if (!first) sb.append(", ");
      sb.append("fixed:");
      sb.append(this.fixed);
      first = false;
    }
    if (isSetSalary_top()) {
      if (!first) sb.append(", ");
      sb.append("salary_top:");
      sb.append(this.salary_top);
      first = false;
    }
    if (isSetSalary_bottom()) {
      if (!first) sb.append(", ");
      sb.append("salary_bottom:");
      sb.append(this.salary_bottom);
      first = false;
    }
    if (isSetPublish_date()) {
      if (!first) sb.append(", ");
      sb.append("publish_date:");
      if (this.publish_date == null) {
        sb.append("null");
      } else {
        sb.append(this.publish_date);
      }
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetVisitnum()) {
      if (!first) sb.append(", ");
      sb.append("visitnum:");
      sb.append(this.visitnum);
      first = false;
    }
    if (isSetIn_hb()) {
      if (!first) sb.append(", ");
      sb.append("in_hb:");
      sb.append(this.in_hb);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetCompany_abbr()) {
      if (!first) sb.append(", ");
      sb.append("company_abbr:");
      if (this.company_abbr == null) {
        sb.append("null");
      } else {
        sb.append(this.company_abbr);
      }
      first = false;
    }
    if (isSetCompany_logo()) {
      if (!first) sb.append(", ");
      sb.append("company_logo:");
      if (this.company_logo == null) {
        sb.append("null");
      } else {
        sb.append(this.company_logo);
      }
      first = false;
    }
    if (isSetCompany_name()) {
      if (!first) sb.append(", ");
      sb.append("company_name:");
      if (this.company_name == null) {
        sb.append("null");
      } else {
        sb.append(this.company_name);
      }
      first = false;
    }
    if (isSetIs_new()) {
      if (!first) sb.append(", ");
      sb.append("is_new:");
      sb.append(this.is_new);
      first = false;
    }
    if (isSetRemain()) {
      if (!first) sb.append(", ");
      sb.append("remain:");
      sb.append(this.remain);
      first = false;
    }
    if (isSetEmployee_only()) {
      if (!first) sb.append(", ");
      sb.append("employee_only:");
      sb.append(this.employee_only);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetCandidate_source()) {
      if (!first) sb.append(", ");
      sb.append("candidate_source:");
      sb.append(this.candidate_source);
      first = false;
    }
    if (isSetRequirement()) {
      if (!first) sb.append(", ");
      sb.append("requirement:");
      if (this.requirement == null) {
        sb.append("null");
      } else {
        sb.append(this.requirement);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WechatRpPositionListDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatRpPositionListDataStandardScheme getScheme() {
      return new WechatRpPositionListDataStandardScheme();
    }
  }

  private static class WechatRpPositionListDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<WechatRpPositionListData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WechatRpPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIXED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fixed = iprot.readBool();
              struct.setFixedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_top = iprot.readI32();
              struct.setSalary_topIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_bottom = iprot.readI32();
              struct.setSalary_bottomIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publish_date = iprot.readString();
              struct.setPublish_dateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VISITNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visitnum = iprot.readI32();
              struct.setVisitnumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IN_HB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.in_hb = iprot.readBool();
              struct.setIn_hbIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPANY_ABBR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_abbr = iprot.readString();
              struct.setCompany_abbrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMPANY_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_logo = iprot.readString();
              struct.setCompany_logoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_name = iprot.readString();
              struct.setCompany_nameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_new = iprot.readBool();
              struct.setIs_newIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remain = iprot.readI32();
              struct.setRemainIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EMPLOYEE_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.employee_only = iprot.readBool();
              struct.setEmployee_onlyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CANDIDATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candidate_source = iprot.readI32();
              struct.setCandidate_sourceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requirement = iprot.readString();
              struct.setRequirementIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WechatRpPositionListData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFixed()) {
        oprot.writeFieldBegin(FIXED_FIELD_DESC);
        oprot.writeBool(struct.fixed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_top()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salary_top);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salary_bottom);
        oprot.writeFieldEnd();
      }
      if (struct.publish_date != null) {
        if (struct.isSetPublish_date()) {
          oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
          oprot.writeString(struct.publish_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVisitnum()) {
        oprot.writeFieldBegin(VISITNUM_FIELD_DESC);
        oprot.writeI32(struct.visitnum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIn_hb()) {
        oprot.writeFieldBegin(IN_HB_FIELD_DESC);
        oprot.writeBool(struct.in_hb);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.company_abbr != null) {
        if (struct.isSetCompany_abbr()) {
          oprot.writeFieldBegin(COMPANY_ABBR_FIELD_DESC);
          oprot.writeString(struct.company_abbr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.company_logo != null) {
        if (struct.isSetCompany_logo()) {
          oprot.writeFieldBegin(COMPANY_LOGO_FIELD_DESC);
          oprot.writeString(struct.company_logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.company_name != null) {
        if (struct.isSetCompany_name()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.company_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_new()) {
        oprot.writeFieldBegin(IS_NEW_FIELD_DESC);
        oprot.writeBool(struct.is_new);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRemain()) {
        oprot.writeFieldBegin(REMAIN_FIELD_DESC);
        oprot.writeI32(struct.remain);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmployee_only()) {
        oprot.writeFieldBegin(EMPLOYEE_ONLY_FIELD_DESC);
        oprot.writeBool(struct.employee_only);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.candidate_source);
        oprot.writeFieldEnd();
      }
      if (struct.requirement != null) {
        if (struct.isSetRequirement()) {
          oprot.writeFieldBegin(REQUIREMENT_FIELD_DESC);
          oprot.writeString(struct.requirement);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WechatRpPositionListDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatRpPositionListDataTupleScheme getScheme() {
      return new WechatRpPositionListDataTupleScheme();
    }
  }

  private static class WechatRpPositionListDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<WechatRpPositionListData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WechatRpPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetFixed()) {
        optionals.set(2);
      }
      if (struct.isSetSalary_top()) {
        optionals.set(3);
      }
      if (struct.isSetSalary_bottom()) {
        optionals.set(4);
      }
      if (struct.isSetPublish_date()) {
        optionals.set(5);
      }
      if (struct.isSetDepartment()) {
        optionals.set(6);
      }
      if (struct.isSetVisitnum()) {
        optionals.set(7);
      }
      if (struct.isSetIn_hb()) {
        optionals.set(8);
      }
      if (struct.isSetCount()) {
        optionals.set(9);
      }
      if (struct.isSetCompany_abbr()) {
        optionals.set(10);
      }
      if (struct.isSetCompany_logo()) {
        optionals.set(11);
      }
      if (struct.isSetCompany_name()) {
        optionals.set(12);
      }
      if (struct.isSetIs_new()) {
        optionals.set(13);
      }
      if (struct.isSetRemain()) {
        optionals.set(14);
      }
      if (struct.isSetEmployee_only()) {
        optionals.set(15);
      }
      if (struct.isSetCity()) {
        optionals.set(16);
      }
      if (struct.isSetCandidate_source()) {
        optionals.set(17);
      }
      if (struct.isSetRequirement()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetFixed()) {
        oprot.writeBool(struct.fixed);
      }
      if (struct.isSetSalary_top()) {
        oprot.writeI32(struct.salary_top);
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeI32(struct.salary_bottom);
      }
      if (struct.isSetPublish_date()) {
        oprot.writeString(struct.publish_date);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetVisitnum()) {
        oprot.writeI32(struct.visitnum);
      }
      if (struct.isSetIn_hb()) {
        oprot.writeBool(struct.in_hb);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetCompany_abbr()) {
        oprot.writeString(struct.company_abbr);
      }
      if (struct.isSetCompany_logo()) {
        oprot.writeString(struct.company_logo);
      }
      if (struct.isSetCompany_name()) {
        oprot.writeString(struct.company_name);
      }
      if (struct.isSetIs_new()) {
        oprot.writeBool(struct.is_new);
      }
      if (struct.isSetRemain()) {
        oprot.writeI32(struct.remain);
      }
      if (struct.isSetEmployee_only()) {
        oprot.writeBool(struct.employee_only);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeI32(struct.candidate_source);
      }
      if (struct.isSetRequirement()) {
        oprot.writeString(struct.requirement);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WechatRpPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fixed = iprot.readBool();
        struct.setFixedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.salary_top = iprot.readI32();
        struct.setSalary_topIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salary_bottom = iprot.readI32();
        struct.setSalary_bottomIsSet(true);
      }
      if (incoming.get(5)) {
        struct.publish_date = iprot.readString();
        struct.setPublish_dateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.visitnum = iprot.readI32();
        struct.setVisitnumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.in_hb = iprot.readBool();
        struct.setIn_hbIsSet(true);
      }
      if (incoming.get(9)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.company_abbr = iprot.readString();
        struct.setCompany_abbrIsSet(true);
      }
      if (incoming.get(11)) {
        struct.company_logo = iprot.readString();
        struct.setCompany_logoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.company_name = iprot.readString();
        struct.setCompany_nameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.is_new = iprot.readBool();
        struct.setIs_newIsSet(true);
      }
      if (incoming.get(14)) {
        struct.remain = iprot.readI32();
        struct.setRemainIsSet(true);
      }
      if (incoming.get(15)) {
        struct.employee_only = iprot.readBool();
        struct.setEmployee_onlyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(17)) {
        struct.candidate_source = iprot.readI32();
        struct.setCandidate_sourceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.requirement = iprot.readString();
        struct.setRequirementIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

