/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.candidatedb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-20")
public class CandidatePositionShareRecordDO implements org.apache.thrift.TBase<CandidatePositionShareRecordDO, CandidatePositionShareRecordDO._Fields>, java.io.Serializable, Cloneable, Comparable<CandidatePositionShareRecordDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CandidatePositionShareRecordDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField RECOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recomId", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SYSUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sysuserId", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VIEWER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VIEWER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerIp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PRESENTEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeId", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CLICK_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("clickFrom", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PRESENTEE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeUserId", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CandidatePositionShareRecordDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CandidatePositionShareRecordDOTupleSchemeFactory();

  public int id; // optional
  public double wechatId; // optional
  public double positionId; // optional
  public double recomId; // optional
  public double sysuserId; // optional
  public java.lang.String viewerId; // optional
  public double viewerIp; // optional
  public double source; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional
  public double presenteeId; // optional
  public double clickFrom; // optional
  public int presenteeUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    WECHAT_ID((short)2, "wechatId"),
    POSITION_ID((short)3, "positionId"),
    RECOM_ID((short)4, "recomId"),
    SYSUSER_ID((short)5, "sysuserId"),
    VIEWER_ID((short)6, "viewerId"),
    VIEWER_IP((short)7, "viewerIp"),
    SOURCE((short)8, "source"),
    CREATE_TIME((short)9, "createTime"),
    UPDATE_TIME((short)10, "updateTime"),
    PRESENTEE_ID((short)11, "presenteeId"),
    CLICK_FROM((short)12, "clickFrom"),
    PRESENTEE_USER_ID((short)13, "presenteeUserId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // WECHAT_ID
          return WECHAT_ID;
        case 3: // POSITION_ID
          return POSITION_ID;
        case 4: // RECOM_ID
          return RECOM_ID;
        case 5: // SYSUSER_ID
          return SYSUSER_ID;
        case 6: // VIEWER_ID
          return VIEWER_ID;
        case 7: // VIEWER_IP
          return VIEWER_IP;
        case 8: // SOURCE
          return SOURCE;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // UPDATE_TIME
          return UPDATE_TIME;
        case 11: // PRESENTEE_ID
          return PRESENTEE_ID;
        case 12: // CLICK_FROM
          return CLICK_FROM;
        case 13: // PRESENTEE_USER_ID
          return PRESENTEE_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WECHATID_ISSET_ID = 1;
  private static final int __POSITIONID_ISSET_ID = 2;
  private static final int __RECOMID_ISSET_ID = 3;
  private static final int __SYSUSERID_ISSET_ID = 4;
  private static final int __VIEWERIP_ISSET_ID = 5;
  private static final int __SOURCE_ISSET_ID = 6;
  private static final int __PRESENTEEID_ISSET_ID = 7;
  private static final int __CLICKFROM_ISSET_ID = 8;
  private static final int __PRESENTEEUSERID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.WECHAT_ID,_Fields.POSITION_ID,_Fields.RECOM_ID,_Fields.SYSUSER_ID,_Fields.VIEWER_ID,_Fields.VIEWER_IP,_Fields.SOURCE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.PRESENTEE_ID,_Fields.CLICK_FROM,_Fields.PRESENTEE_USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECOM_ID, new org.apache.thrift.meta_data.FieldMetaData("recomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SYSUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("sysuserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIEWER_ID, new org.apache.thrift.meta_data.FieldMetaData("viewerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEWER_IP, new org.apache.thrift.meta_data.FieldMetaData("viewerIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESENTEE_ID, new org.apache.thrift.meta_data.FieldMetaData("presenteeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLICK_FROM, new org.apache.thrift.meta_data.FieldMetaData("clickFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRESENTEE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("presenteeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CandidatePositionShareRecordDO.class, metaDataMap);
  }

  public CandidatePositionShareRecordDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CandidatePositionShareRecordDO(CandidatePositionShareRecordDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.wechatId = other.wechatId;
    this.positionId = other.positionId;
    this.recomId = other.recomId;
    this.sysuserId = other.sysuserId;
    if (other.isSetViewerId()) {
      this.viewerId = other.viewerId;
    }
    this.viewerIp = other.viewerIp;
    this.source = other.source;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.presenteeId = other.presenteeId;
    this.clickFrom = other.clickFrom;
    this.presenteeUserId = other.presenteeUserId;
  }

  public CandidatePositionShareRecordDO deepCopy() {
    return new CandidatePositionShareRecordDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0.0;
    setPositionIdIsSet(false);
    this.positionId = 0.0;
    setRecomIdIsSet(false);
    this.recomId = 0.0;
    setSysuserIdIsSet(false);
    this.sysuserId = 0.0;
    this.viewerId = null;
    setViewerIpIsSet(false);
    this.viewerIp = 0.0;
    setSourceIsSet(false);
    this.source = 0.0;
    this.createTime = null;
    this.updateTime = null;
    setPresenteeIdIsSet(false);
    this.presenteeId = 0.0;
    setClickFromIsSet(false);
    this.clickFrom = 0.0;
    setPresenteeUserIdIsSet(false);
    this.presenteeUserId = 0;
  }

  public int getId() {
    return this.id;
  }

  public CandidatePositionShareRecordDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getWechatId() {
    return this.wechatId;
  }

  public CandidatePositionShareRecordDO setWechatId(double wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public double getPositionId() {
    return this.positionId;
  }

  public CandidatePositionShareRecordDO setPositionId(double positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public double getRecomId() {
    return this.recomId;
  }

  public CandidatePositionShareRecordDO setRecomId(double recomId) {
    this.recomId = recomId;
    setRecomIdIsSet(true);
    return this;
  }

  public void unsetRecomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMID_ISSET_ID);
  }

  /** Returns true if field recomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMID_ISSET_ID);
  }

  public void setRecomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMID_ISSET_ID, value);
  }

  public double getSysuserId() {
    return this.sysuserId;
  }

  public CandidatePositionShareRecordDO setSysuserId(double sysuserId) {
    this.sysuserId = sysuserId;
    setSysuserIdIsSet(true);
    return this;
  }

  public void unsetSysuserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYSUSERID_ISSET_ID);
  }

  /** Returns true if field sysuserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSysuserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYSUSERID_ISSET_ID);
  }

  public void setSysuserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYSUSERID_ISSET_ID, value);
  }

  public java.lang.String getViewerId() {
    return this.viewerId;
  }

  public CandidatePositionShareRecordDO setViewerId(java.lang.String viewerId) {
    this.viewerId = viewerId;
    return this;
  }

  public void unsetViewerId() {
    this.viewerId = null;
  }

  /** Returns true if field viewerId is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerId() {
    return this.viewerId != null;
  }

  public void setViewerIdIsSet(boolean value) {
    if (!value) {
      this.viewerId = null;
    }
  }

  public double getViewerIp() {
    return this.viewerIp;
  }

  public CandidatePositionShareRecordDO setViewerIp(double viewerIp) {
    this.viewerIp = viewerIp;
    setViewerIpIsSet(true);
    return this;
  }

  public void unsetViewerIp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWERIP_ISSET_ID);
  }

  /** Returns true if field viewerIp is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerIp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWERIP_ISSET_ID);
  }

  public void setViewerIpIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWERIP_ISSET_ID, value);
  }

  public double getSource() {
    return this.source;
  }

  public CandidatePositionShareRecordDO setSource(double source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public CandidatePositionShareRecordDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public CandidatePositionShareRecordDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public double getPresenteeId() {
    return this.presenteeId;
  }

  public CandidatePositionShareRecordDO setPresenteeId(double presenteeId) {
    this.presenteeId = presenteeId;
    setPresenteeIdIsSet(true);
    return this;
  }

  public void unsetPresenteeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
  }

  /** Returns true if field presenteeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPresenteeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
  }

  public void setPresenteeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESENTEEID_ISSET_ID, value);
  }

  public double getClickFrom() {
    return this.clickFrom;
  }

  public CandidatePositionShareRecordDO setClickFrom(double clickFrom) {
    this.clickFrom = clickFrom;
    setClickFromIsSet(true);
    return this;
  }

  public void unsetClickFrom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICKFROM_ISSET_ID);
  }

  /** Returns true if field clickFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetClickFrom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICKFROM_ISSET_ID);
  }

  public void setClickFromIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICKFROM_ISSET_ID, value);
  }

  public int getPresenteeUserId() {
    return this.presenteeUserId;
  }

  public CandidatePositionShareRecordDO setPresenteeUserId(int presenteeUserId) {
    this.presenteeUserId = presenteeUserId;
    setPresenteeUserIdIsSet(true);
    return this;
  }

  public void unsetPresenteeUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESENTEEUSERID_ISSET_ID);
  }

  /** Returns true if field presenteeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPresenteeUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESENTEEUSERID_ISSET_ID);
  }

  public void setPresenteeUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESENTEEUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((java.lang.Double)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((java.lang.Double)value);
      }
      break;

    case RECOM_ID:
      if (value == null) {
        unsetRecomId();
      } else {
        setRecomId((java.lang.Double)value);
      }
      break;

    case SYSUSER_ID:
      if (value == null) {
        unsetSysuserId();
      } else {
        setSysuserId((java.lang.Double)value);
      }
      break;

    case VIEWER_ID:
      if (value == null) {
        unsetViewerId();
      } else {
        setViewerId((java.lang.String)value);
      }
      break;

    case VIEWER_IP:
      if (value == null) {
        unsetViewerIp();
      } else {
        setViewerIp((java.lang.Double)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case PRESENTEE_ID:
      if (value == null) {
        unsetPresenteeId();
      } else {
        setPresenteeId((java.lang.Double)value);
      }
      break;

    case CLICK_FROM:
      if (value == null) {
        unsetClickFrom();
      } else {
        setClickFrom((java.lang.Double)value);
      }
      break;

    case PRESENTEE_USER_ID:
      if (value == null) {
        unsetPresenteeUserId();
      } else {
        setPresenteeUserId((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case WECHAT_ID:
      return getWechatId();

    case POSITION_ID:
      return getPositionId();

    case RECOM_ID:
      return getRecomId();

    case SYSUSER_ID:
      return getSysuserId();

    case VIEWER_ID:
      return getViewerId();

    case VIEWER_IP:
      return getViewerIp();

    case SOURCE:
      return getSource();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case PRESENTEE_ID:
      return getPresenteeId();

    case CLICK_FROM:
      return getClickFrom();

    case PRESENTEE_USER_ID:
      return getPresenteeUserId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case WECHAT_ID:
      return isSetWechatId();
    case POSITION_ID:
      return isSetPositionId();
    case RECOM_ID:
      return isSetRecomId();
    case SYSUSER_ID:
      return isSetSysuserId();
    case VIEWER_ID:
      return isSetViewerId();
    case VIEWER_IP:
      return isSetViewerIp();
    case SOURCE:
      return isSetSource();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case PRESENTEE_ID:
      return isSetPresenteeId();
    case CLICK_FROM:
      return isSetClickFrom();
    case PRESENTEE_USER_ID:
      return isSetPresenteeUserId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CandidatePositionShareRecordDO)
      return this.equals((CandidatePositionShareRecordDO)that);
    return false;
  }

  public boolean equals(CandidatePositionShareRecordDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_recomId = true && this.isSetRecomId();
    boolean that_present_recomId = true && that.isSetRecomId();
    if (this_present_recomId || that_present_recomId) {
      if (!(this_present_recomId && that_present_recomId))
        return false;
      if (this.recomId != that.recomId)
        return false;
    }

    boolean this_present_sysuserId = true && this.isSetSysuserId();
    boolean that_present_sysuserId = true && that.isSetSysuserId();
    if (this_present_sysuserId || that_present_sysuserId) {
      if (!(this_present_sysuserId && that_present_sysuserId))
        return false;
      if (this.sysuserId != that.sysuserId)
        return false;
    }

    boolean this_present_viewerId = true && this.isSetViewerId();
    boolean that_present_viewerId = true && that.isSetViewerId();
    if (this_present_viewerId || that_present_viewerId) {
      if (!(this_present_viewerId && that_present_viewerId))
        return false;
      if (!this.viewerId.equals(that.viewerId))
        return false;
    }

    boolean this_present_viewerIp = true && this.isSetViewerIp();
    boolean that_present_viewerIp = true && that.isSetViewerIp();
    if (this_present_viewerIp || that_present_viewerIp) {
      if (!(this_present_viewerIp && that_present_viewerIp))
        return false;
      if (this.viewerIp != that.viewerIp)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_presenteeId = true && this.isSetPresenteeId();
    boolean that_present_presenteeId = true && that.isSetPresenteeId();
    if (this_present_presenteeId || that_present_presenteeId) {
      if (!(this_present_presenteeId && that_present_presenteeId))
        return false;
      if (this.presenteeId != that.presenteeId)
        return false;
    }

    boolean this_present_clickFrom = true && this.isSetClickFrom();
    boolean that_present_clickFrom = true && that.isSetClickFrom();
    if (this_present_clickFrom || that_present_clickFrom) {
      if (!(this_present_clickFrom && that_present_clickFrom))
        return false;
      if (this.clickFrom != that.clickFrom)
        return false;
    }

    boolean this_present_presenteeUserId = true && this.isSetPresenteeUserId();
    boolean that_present_presenteeUserId = true && that.isSetPresenteeUserId();
    if (this_present_presenteeUserId || that_present_presenteeUserId) {
      if (!(this_present_presenteeUserId && that_present_presenteeUserId))
        return false;
      if (this.presenteeUserId != that.presenteeUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(wechatId);

    hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
    if (isSetPositionId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(positionId);

    hashCode = hashCode * 8191 + ((isSetRecomId()) ? 131071 : 524287);
    if (isSetRecomId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recomId);

    hashCode = hashCode * 8191 + ((isSetSysuserId()) ? 131071 : 524287);
    if (isSetSysuserId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sysuserId);

    hashCode = hashCode * 8191 + ((isSetViewerId()) ? 131071 : 524287);
    if (isSetViewerId())
      hashCode = hashCode * 8191 + viewerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetViewerIp()) ? 131071 : 524287);
    if (isSetViewerIp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(viewerIp);

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPresenteeId()) ? 131071 : 524287);
    if (isSetPresenteeId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(presenteeId);

    hashCode = hashCode * 8191 + ((isSetClickFrom()) ? 131071 : 524287);
    if (isSetClickFrom())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clickFrom);

    hashCode = hashCode * 8191 + ((isSetPresenteeUserId()) ? 131071 : 524287);
    if (isSetPresenteeUserId())
      hashCode = hashCode * 8191 + presenteeUserId;

    return hashCode;
  }

  @Override
  public int compareTo(CandidatePositionShareRecordDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomId()).compareTo(other.isSetRecomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomId, other.recomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysuserId()).compareTo(other.isSetSysuserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysuserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysuserId, other.sysuserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerId()).compareTo(other.isSetViewerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerId, other.viewerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerIp()).compareTo(other.isSetViewerIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerIp, other.viewerIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPresenteeId()).compareTo(other.isSetPresenteeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresenteeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeId, other.presenteeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClickFrom()).compareTo(other.isSetClickFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickFrom, other.clickFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPresenteeUserId()).compareTo(other.isSetPresenteeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresenteeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeUserId, other.presenteeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CandidatePositionShareRecordDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetRecomId()) {
      if (!first) sb.append(", ");
      sb.append("recomId:");
      sb.append(this.recomId);
      first = false;
    }
    if (isSetSysuserId()) {
      if (!first) sb.append(", ");
      sb.append("sysuserId:");
      sb.append(this.sysuserId);
      first = false;
    }
    if (isSetViewerId()) {
      if (!first) sb.append(", ");
      sb.append("viewerId:");
      if (this.viewerId == null) {
        sb.append("null");
      } else {
        sb.append(this.viewerId);
      }
      first = false;
    }
    if (isSetViewerIp()) {
      if (!first) sb.append(", ");
      sb.append("viewerIp:");
      sb.append(this.viewerIp);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetPresenteeId()) {
      if (!first) sb.append(", ");
      sb.append("presenteeId:");
      sb.append(this.presenteeId);
      first = false;
    }
    if (isSetClickFrom()) {
      if (!first) sb.append(", ");
      sb.append("clickFrom:");
      sb.append(this.clickFrom);
      first = false;
    }
    if (isSetPresenteeUserId()) {
      if (!first) sb.append(", ");
      sb.append("presenteeUserId:");
      sb.append(this.presenteeUserId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CandidatePositionShareRecordDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidatePositionShareRecordDOStandardScheme getScheme() {
      return new CandidatePositionShareRecordDOStandardScheme();
    }
  }

  private static class CandidatePositionShareRecordDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CandidatePositionShareRecordDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CandidatePositionShareRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.wechatId = iprot.readDouble();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionId = iprot.readDouble();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recomId = iprot.readDouble();
              struct.setRecomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYSUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sysuserId = iprot.readDouble();
              struct.setSysuserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIEWER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewerId = iprot.readString();
              struct.setViewerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIEWER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.viewerIp = iprot.readDouble();
              struct.setViewerIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.source = iprot.readDouble();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRESENTEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.presenteeId = iprot.readDouble();
              struct.setPresenteeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLICK_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.clickFrom = iprot.readDouble();
              struct.setClickFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRESENTEE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.presenteeUserId = iprot.readI32();
              struct.setPresenteeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CandidatePositionShareRecordDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeDouble(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeDouble(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomId()) {
        oprot.writeFieldBegin(RECOM_ID_FIELD_DESC);
        oprot.writeDouble(struct.recomId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSysuserId()) {
        oprot.writeFieldBegin(SYSUSER_ID_FIELD_DESC);
        oprot.writeDouble(struct.sysuserId);
        oprot.writeFieldEnd();
      }
      if (struct.viewerId != null) {
        if (struct.isSetViewerId()) {
          oprot.writeFieldBegin(VIEWER_ID_FIELD_DESC);
          oprot.writeString(struct.viewerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetViewerIp()) {
        oprot.writeFieldBegin(VIEWER_IP_FIELD_DESC);
        oprot.writeDouble(struct.viewerIp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeDouble(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPresenteeId()) {
        oprot.writeFieldBegin(PRESENTEE_ID_FIELD_DESC);
        oprot.writeDouble(struct.presenteeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClickFrom()) {
        oprot.writeFieldBegin(CLICK_FROM_FIELD_DESC);
        oprot.writeDouble(struct.clickFrom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPresenteeUserId()) {
        oprot.writeFieldBegin(PRESENTEE_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.presenteeUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CandidatePositionShareRecordDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidatePositionShareRecordDOTupleScheme getScheme() {
      return new CandidatePositionShareRecordDOTupleScheme();
    }
  }

  private static class CandidatePositionShareRecordDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CandidatePositionShareRecordDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CandidatePositionShareRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetWechatId()) {
        optionals.set(1);
      }
      if (struct.isSetPositionId()) {
        optionals.set(2);
      }
      if (struct.isSetRecomId()) {
        optionals.set(3);
      }
      if (struct.isSetSysuserId()) {
        optionals.set(4);
      }
      if (struct.isSetViewerId()) {
        optionals.set(5);
      }
      if (struct.isSetViewerIp()) {
        optionals.set(6);
      }
      if (struct.isSetSource()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(9);
      }
      if (struct.isSetPresenteeId()) {
        optionals.set(10);
      }
      if (struct.isSetClickFrom()) {
        optionals.set(11);
      }
      if (struct.isSetPresenteeUserId()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWechatId()) {
        oprot.writeDouble(struct.wechatId);
      }
      if (struct.isSetPositionId()) {
        oprot.writeDouble(struct.positionId);
      }
      if (struct.isSetRecomId()) {
        oprot.writeDouble(struct.recomId);
      }
      if (struct.isSetSysuserId()) {
        oprot.writeDouble(struct.sysuserId);
      }
      if (struct.isSetViewerId()) {
        oprot.writeString(struct.viewerId);
      }
      if (struct.isSetViewerIp()) {
        oprot.writeDouble(struct.viewerIp);
      }
      if (struct.isSetSource()) {
        oprot.writeDouble(struct.source);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetPresenteeId()) {
        oprot.writeDouble(struct.presenteeId);
      }
      if (struct.isSetClickFrom()) {
        oprot.writeDouble(struct.clickFrom);
      }
      if (struct.isSetPresenteeUserId()) {
        oprot.writeI32(struct.presenteeUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CandidatePositionShareRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wechatId = iprot.readDouble();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.positionId = iprot.readDouble();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recomId = iprot.readDouble();
        struct.setRecomIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sysuserId = iprot.readDouble();
        struct.setSysuserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.viewerId = iprot.readString();
        struct.setViewerIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.viewerIp = iprot.readDouble();
        struct.setViewerIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.source = iprot.readDouble();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.presenteeId = iprot.readDouble();
        struct.setPresenteeIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.clickFrom = iprot.readDouble();
        struct.setClickFromIsSet(true);
      }
      if (incoming.get(12)) {
        struct.presenteeUserId = iprot.readI32();
        struct.setPresenteeUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

