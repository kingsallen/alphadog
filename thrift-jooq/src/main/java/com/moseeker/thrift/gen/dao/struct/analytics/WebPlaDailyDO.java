/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class WebPlaDailyDO implements org.apache.thrift.TBase<WebPlaDailyDO, WebPlaDailyDO._Fields>, java.io.Serializable, Cloneable, Comparable<WebPlaDailyDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebPlaDailyDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField P_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("pPv", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField P_UV_FIELD_DESC = new org.apache.thrift.protocol.TField("pUv", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField P_SPV_FIELD_DESC = new org.apache.thrift.protocol.TField("pSPv", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField P_SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("pSUv", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField L_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("lPv", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField L_UV_FIELD_DESC = new org.apache.thrift.protocol.TField("lUv", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField L_SPV_FIELD_DESC = new org.apache.thrift.protocol.TField("lSPv", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField L_SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("lSUv", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField A_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("aCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField A_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("aUser", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField A_SCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("aSCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField A_SUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("aSUser", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WebPlaDailyDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WebPlaDailyDOTupleSchemeFactory();

  public int id; // optional
  public int cid; // optional
  public java.lang.String createTime; // optional
  public int pPv; // optional
  public int pUv; // optional
  public int pSPv; // optional
  public int pSUv; // optional
  public int lPv; // optional
  public int lUv; // optional
  public int lSPv; // optional
  public int lSUv; // optional
  public int aCount; // optional
  public int aUser; // optional
  public int aSCount; // optional
  public int aSUser; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CID((short)2, "cid"),
    CREATE_TIME((short)3, "createTime"),
    P_PV((short)4, "pPv"),
    P_UV((short)5, "pUv"),
    P_SPV((short)6, "pSPv"),
    P_SUV((short)7, "pSUv"),
    L_PV((short)8, "lPv"),
    L_UV((short)9, "lUv"),
    L_SPV((short)10, "lSPv"),
    L_SUV((short)11, "lSUv"),
    A_COUNT((short)12, "aCount"),
    A_USER((short)13, "aUser"),
    A_SCOUNT((short)14, "aSCount"),
    A_SUSER((short)15, "aSUser");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CID
          return CID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // P_PV
          return P_PV;
        case 5: // P_UV
          return P_UV;
        case 6: // P_SPV
          return P_SPV;
        case 7: // P_SUV
          return P_SUV;
        case 8: // L_PV
          return L_PV;
        case 9: // L_UV
          return L_UV;
        case 10: // L_SPV
          return L_SPV;
        case 11: // L_SUV
          return L_SUV;
        case 12: // A_COUNT
          return A_COUNT;
        case 13: // A_USER
          return A_USER;
        case 14: // A_SCOUNT
          return A_SCOUNT;
        case 15: // A_SUSER
          return A_SUSER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __PPV_ISSET_ID = 2;
  private static final int __PUV_ISSET_ID = 3;
  private static final int __PSPV_ISSET_ID = 4;
  private static final int __PSUV_ISSET_ID = 5;
  private static final int __LPV_ISSET_ID = 6;
  private static final int __LUV_ISSET_ID = 7;
  private static final int __LSPV_ISSET_ID = 8;
  private static final int __LSUV_ISSET_ID = 9;
  private static final int __ACOUNT_ISSET_ID = 10;
  private static final int __AUSER_ISSET_ID = 11;
  private static final int __ASCOUNT_ISSET_ID = 12;
  private static final int __ASUSER_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CID,_Fields.CREATE_TIME,_Fields.P_PV,_Fields.P_UV,_Fields.P_SPV,_Fields.P_SUV,_Fields.L_PV,_Fields.L_UV,_Fields.L_SPV,_Fields.L_SUV,_Fields.A_COUNT,_Fields.A_USER,_Fields.A_SCOUNT,_Fields.A_SUSER};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_PV, new org.apache.thrift.meta_data.FieldMetaData("pPv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_UV, new org.apache.thrift.meta_data.FieldMetaData("pUv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_SPV, new org.apache.thrift.meta_data.FieldMetaData("pSPv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_SUV, new org.apache.thrift.meta_data.FieldMetaData("pSUv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L_PV, new org.apache.thrift.meta_data.FieldMetaData("lPv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L_UV, new org.apache.thrift.meta_data.FieldMetaData("lUv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L_SPV, new org.apache.thrift.meta_data.FieldMetaData("lSPv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L_SUV, new org.apache.thrift.meta_data.FieldMetaData("lSUv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_COUNT, new org.apache.thrift.meta_data.FieldMetaData("aCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_USER, new org.apache.thrift.meta_data.FieldMetaData("aUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_SCOUNT, new org.apache.thrift.meta_data.FieldMetaData("aSCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_SUSER, new org.apache.thrift.meta_data.FieldMetaData("aSUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WebPlaDailyDO.class, metaDataMap);
  }

  public WebPlaDailyDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WebPlaDailyDO(WebPlaDailyDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cid = other.cid;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.pPv = other.pPv;
    this.pUv = other.pUv;
    this.pSPv = other.pSPv;
    this.pSUv = other.pSUv;
    this.lPv = other.lPv;
    this.lUv = other.lUv;
    this.lSPv = other.lSPv;
    this.lSUv = other.lSUv;
    this.aCount = other.aCount;
    this.aUser = other.aUser;
    this.aSCount = other.aSCount;
    this.aSUser = other.aSUser;
  }

  public WebPlaDailyDO deepCopy() {
    return new WebPlaDailyDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.createTime = null;
    setPPvIsSet(false);
    this.pPv = 0;
    setPUvIsSet(false);
    this.pUv = 0;
    setPSPvIsSet(false);
    this.pSPv = 0;
    setPSUvIsSet(false);
    this.pSUv = 0;
    setLPvIsSet(false);
    this.lPv = 0;
    setLUvIsSet(false);
    this.lUv = 0;
    setLSPvIsSet(false);
    this.lSPv = 0;
    setLSUvIsSet(false);
    this.lSUv = 0;
    setACountIsSet(false);
    this.aCount = 0;
    setAUserIsSet(false);
    this.aUser = 0;
    setASCountIsSet(false);
    this.aSCount = 0;
    setASUserIsSet(false);
    this.aSUser = 0;
  }

  public int getId() {
    return this.id;
  }

  public WebPlaDailyDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCid() {
    return this.cid;
  }

  public WebPlaDailyDO setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public WebPlaDailyDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getPPv() {
    return this.pPv;
  }

  public WebPlaDailyDO setPPv(int pPv) {
    this.pPv = pPv;
    setPPvIsSet(true);
    return this;
  }

  public void unsetPPv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PPV_ISSET_ID);
  }

  /** Returns true if field pPv is set (has been assigned a value) and false otherwise */
  public boolean isSetPPv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PPV_ISSET_ID);
  }

  public void setPPvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PPV_ISSET_ID, value);
  }

  public int getPUv() {
    return this.pUv;
  }

  public WebPlaDailyDO setPUv(int pUv) {
    this.pUv = pUv;
    setPUvIsSet(true);
    return this;
  }

  public void unsetPUv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUV_ISSET_ID);
  }

  /** Returns true if field pUv is set (has been assigned a value) and false otherwise */
  public boolean isSetPUv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUV_ISSET_ID);
  }

  public void setPUvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUV_ISSET_ID, value);
  }

  public int getPSPv() {
    return this.pSPv;
  }

  public WebPlaDailyDO setPSPv(int pSPv) {
    this.pSPv = pSPv;
    setPSPvIsSet(true);
    return this;
  }

  public void unsetPSPv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PSPV_ISSET_ID);
  }

  /** Returns true if field pSPv is set (has been assigned a value) and false otherwise */
  public boolean isSetPSPv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PSPV_ISSET_ID);
  }

  public void setPSPvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PSPV_ISSET_ID, value);
  }

  public int getPSUv() {
    return this.pSUv;
  }

  public WebPlaDailyDO setPSUv(int pSUv) {
    this.pSUv = pSUv;
    setPSUvIsSet(true);
    return this;
  }

  public void unsetPSUv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PSUV_ISSET_ID);
  }

  /** Returns true if field pSUv is set (has been assigned a value) and false otherwise */
  public boolean isSetPSUv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PSUV_ISSET_ID);
  }

  public void setPSUvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PSUV_ISSET_ID, value);
  }

  public int getLPv() {
    return this.lPv;
  }

  public WebPlaDailyDO setLPv(int lPv) {
    this.lPv = lPv;
    setLPvIsSet(true);
    return this;
  }

  public void unsetLPv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LPV_ISSET_ID);
  }

  /** Returns true if field lPv is set (has been assigned a value) and false otherwise */
  public boolean isSetLPv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LPV_ISSET_ID);
  }

  public void setLPvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LPV_ISSET_ID, value);
  }

  public int getLUv() {
    return this.lUv;
  }

  public WebPlaDailyDO setLUv(int lUv) {
    this.lUv = lUv;
    setLUvIsSet(true);
    return this;
  }

  public void unsetLUv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LUV_ISSET_ID);
  }

  /** Returns true if field lUv is set (has been assigned a value) and false otherwise */
  public boolean isSetLUv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LUV_ISSET_ID);
  }

  public void setLUvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LUV_ISSET_ID, value);
  }

  public int getLSPv() {
    return this.lSPv;
  }

  public WebPlaDailyDO setLSPv(int lSPv) {
    this.lSPv = lSPv;
    setLSPvIsSet(true);
    return this;
  }

  public void unsetLSPv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LSPV_ISSET_ID);
  }

  /** Returns true if field lSPv is set (has been assigned a value) and false otherwise */
  public boolean isSetLSPv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LSPV_ISSET_ID);
  }

  public void setLSPvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LSPV_ISSET_ID, value);
  }

  public int getLSUv() {
    return this.lSUv;
  }

  public WebPlaDailyDO setLSUv(int lSUv) {
    this.lSUv = lSUv;
    setLSUvIsSet(true);
    return this;
  }

  public void unsetLSUv() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LSUV_ISSET_ID);
  }

  /** Returns true if field lSUv is set (has been assigned a value) and false otherwise */
  public boolean isSetLSUv() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LSUV_ISSET_ID);
  }

  public void setLSUvIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LSUV_ISSET_ID, value);
  }

  public int getACount() {
    return this.aCount;
  }

  public WebPlaDailyDO setACount(int aCount) {
    this.aCount = aCount;
    setACountIsSet(true);
    return this;
  }

  public void unsetACount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACOUNT_ISSET_ID);
  }

  /** Returns true if field aCount is set (has been assigned a value) and false otherwise */
  public boolean isSetACount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACOUNT_ISSET_ID);
  }

  public void setACountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACOUNT_ISSET_ID, value);
  }

  public int getAUser() {
    return this.aUser;
  }

  public WebPlaDailyDO setAUser(int aUser) {
    this.aUser = aUser;
    setAUserIsSet(true);
    return this;
  }

  public void unsetAUser() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUSER_ISSET_ID);
  }

  /** Returns true if field aUser is set (has been assigned a value) and false otherwise */
  public boolean isSetAUser() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUSER_ISSET_ID);
  }

  public void setAUserIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUSER_ISSET_ID, value);
  }

  public int getASCount() {
    return this.aSCount;
  }

  public WebPlaDailyDO setASCount(int aSCount) {
    this.aSCount = aSCount;
    setASCountIsSet(true);
    return this;
  }

  public void unsetASCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASCOUNT_ISSET_ID);
  }

  /** Returns true if field aSCount is set (has been assigned a value) and false otherwise */
  public boolean isSetASCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASCOUNT_ISSET_ID);
  }

  public void setASCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASCOUNT_ISSET_ID, value);
  }

  public int getASUser() {
    return this.aSUser;
  }

  public WebPlaDailyDO setASUser(int aSUser) {
    this.aSUser = aSUser;
    setASUserIsSet(true);
    return this;
  }

  public void unsetASUser() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASUSER_ISSET_ID);
  }

  /** Returns true if field aSUser is set (has been assigned a value) and false otherwise */
  public boolean isSetASUser() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASUSER_ISSET_ID);
  }

  public void setASUserIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASUSER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case P_PV:
      if (value == null) {
        unsetPPv();
      } else {
        setPPv((java.lang.Integer)value);
      }
      break;

    case P_UV:
      if (value == null) {
        unsetPUv();
      } else {
        setPUv((java.lang.Integer)value);
      }
      break;

    case P_SPV:
      if (value == null) {
        unsetPSPv();
      } else {
        setPSPv((java.lang.Integer)value);
      }
      break;

    case P_SUV:
      if (value == null) {
        unsetPSUv();
      } else {
        setPSUv((java.lang.Integer)value);
      }
      break;

    case L_PV:
      if (value == null) {
        unsetLPv();
      } else {
        setLPv((java.lang.Integer)value);
      }
      break;

    case L_UV:
      if (value == null) {
        unsetLUv();
      } else {
        setLUv((java.lang.Integer)value);
      }
      break;

    case L_SPV:
      if (value == null) {
        unsetLSPv();
      } else {
        setLSPv((java.lang.Integer)value);
      }
      break;

    case L_SUV:
      if (value == null) {
        unsetLSUv();
      } else {
        setLSUv((java.lang.Integer)value);
      }
      break;

    case A_COUNT:
      if (value == null) {
        unsetACount();
      } else {
        setACount((java.lang.Integer)value);
      }
      break;

    case A_USER:
      if (value == null) {
        unsetAUser();
      } else {
        setAUser((java.lang.Integer)value);
      }
      break;

    case A_SCOUNT:
      if (value == null) {
        unsetASCount();
      } else {
        setASCount((java.lang.Integer)value);
      }
      break;

    case A_SUSER:
      if (value == null) {
        unsetASUser();
      } else {
        setASUser((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CID:
      return getCid();

    case CREATE_TIME:
      return getCreateTime();

    case P_PV:
      return getPPv();

    case P_UV:
      return getPUv();

    case P_SPV:
      return getPSPv();

    case P_SUV:
      return getPSUv();

    case L_PV:
      return getLPv();

    case L_UV:
      return getLUv();

    case L_SPV:
      return getLSPv();

    case L_SUV:
      return getLSUv();

    case A_COUNT:
      return getACount();

    case A_USER:
      return getAUser();

    case A_SCOUNT:
      return getASCount();

    case A_SUSER:
      return getASUser();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CID:
      return isSetCid();
    case CREATE_TIME:
      return isSetCreateTime();
    case P_PV:
      return isSetPPv();
    case P_UV:
      return isSetPUv();
    case P_SPV:
      return isSetPSPv();
    case P_SUV:
      return isSetPSUv();
    case L_PV:
      return isSetLPv();
    case L_UV:
      return isSetLUv();
    case L_SPV:
      return isSetLSPv();
    case L_SUV:
      return isSetLSUv();
    case A_COUNT:
      return isSetACount();
    case A_USER:
      return isSetAUser();
    case A_SCOUNT:
      return isSetASCount();
    case A_SUSER:
      return isSetASUser();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WebPlaDailyDO)
      return this.equals((WebPlaDailyDO)that);
    return false;
  }

  public boolean equals(WebPlaDailyDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_pPv = true && this.isSetPPv();
    boolean that_present_pPv = true && that.isSetPPv();
    if (this_present_pPv || that_present_pPv) {
      if (!(this_present_pPv && that_present_pPv))
        return false;
      if (this.pPv != that.pPv)
        return false;
    }

    boolean this_present_pUv = true && this.isSetPUv();
    boolean that_present_pUv = true && that.isSetPUv();
    if (this_present_pUv || that_present_pUv) {
      if (!(this_present_pUv && that_present_pUv))
        return false;
      if (this.pUv != that.pUv)
        return false;
    }

    boolean this_present_pSPv = true && this.isSetPSPv();
    boolean that_present_pSPv = true && that.isSetPSPv();
    if (this_present_pSPv || that_present_pSPv) {
      if (!(this_present_pSPv && that_present_pSPv))
        return false;
      if (this.pSPv != that.pSPv)
        return false;
    }

    boolean this_present_pSUv = true && this.isSetPSUv();
    boolean that_present_pSUv = true && that.isSetPSUv();
    if (this_present_pSUv || that_present_pSUv) {
      if (!(this_present_pSUv && that_present_pSUv))
        return false;
      if (this.pSUv != that.pSUv)
        return false;
    }

    boolean this_present_lPv = true && this.isSetLPv();
    boolean that_present_lPv = true && that.isSetLPv();
    if (this_present_lPv || that_present_lPv) {
      if (!(this_present_lPv && that_present_lPv))
        return false;
      if (this.lPv != that.lPv)
        return false;
    }

    boolean this_present_lUv = true && this.isSetLUv();
    boolean that_present_lUv = true && that.isSetLUv();
    if (this_present_lUv || that_present_lUv) {
      if (!(this_present_lUv && that_present_lUv))
        return false;
      if (this.lUv != that.lUv)
        return false;
    }

    boolean this_present_lSPv = true && this.isSetLSPv();
    boolean that_present_lSPv = true && that.isSetLSPv();
    if (this_present_lSPv || that_present_lSPv) {
      if (!(this_present_lSPv && that_present_lSPv))
        return false;
      if (this.lSPv != that.lSPv)
        return false;
    }

    boolean this_present_lSUv = true && this.isSetLSUv();
    boolean that_present_lSUv = true && that.isSetLSUv();
    if (this_present_lSUv || that_present_lSUv) {
      if (!(this_present_lSUv && that_present_lSUv))
        return false;
      if (this.lSUv != that.lSUv)
        return false;
    }

    boolean this_present_aCount = true && this.isSetACount();
    boolean that_present_aCount = true && that.isSetACount();
    if (this_present_aCount || that_present_aCount) {
      if (!(this_present_aCount && that_present_aCount))
        return false;
      if (this.aCount != that.aCount)
        return false;
    }

    boolean this_present_aUser = true && this.isSetAUser();
    boolean that_present_aUser = true && that.isSetAUser();
    if (this_present_aUser || that_present_aUser) {
      if (!(this_present_aUser && that_present_aUser))
        return false;
      if (this.aUser != that.aUser)
        return false;
    }

    boolean this_present_aSCount = true && this.isSetASCount();
    boolean that_present_aSCount = true && that.isSetASCount();
    if (this_present_aSCount || that_present_aSCount) {
      if (!(this_present_aSCount && that_present_aSCount))
        return false;
      if (this.aSCount != that.aSCount)
        return false;
    }

    boolean this_present_aSUser = true && this.isSetASUser();
    boolean that_present_aSUser = true && that.isSetASUser();
    if (this_present_aSUser || that_present_aSUser) {
      if (!(this_present_aSUser && that_present_aSUser))
        return false;
      if (this.aSUser != that.aSUser)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
    if (isSetCid())
      hashCode = hashCode * 8191 + cid;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPPv()) ? 131071 : 524287);
    if (isSetPPv())
      hashCode = hashCode * 8191 + pPv;

    hashCode = hashCode * 8191 + ((isSetPUv()) ? 131071 : 524287);
    if (isSetPUv())
      hashCode = hashCode * 8191 + pUv;

    hashCode = hashCode * 8191 + ((isSetPSPv()) ? 131071 : 524287);
    if (isSetPSPv())
      hashCode = hashCode * 8191 + pSPv;

    hashCode = hashCode * 8191 + ((isSetPSUv()) ? 131071 : 524287);
    if (isSetPSUv())
      hashCode = hashCode * 8191 + pSUv;

    hashCode = hashCode * 8191 + ((isSetLPv()) ? 131071 : 524287);
    if (isSetLPv())
      hashCode = hashCode * 8191 + lPv;

    hashCode = hashCode * 8191 + ((isSetLUv()) ? 131071 : 524287);
    if (isSetLUv())
      hashCode = hashCode * 8191 + lUv;

    hashCode = hashCode * 8191 + ((isSetLSPv()) ? 131071 : 524287);
    if (isSetLSPv())
      hashCode = hashCode * 8191 + lSPv;

    hashCode = hashCode * 8191 + ((isSetLSUv()) ? 131071 : 524287);
    if (isSetLSUv())
      hashCode = hashCode * 8191 + lSUv;

    hashCode = hashCode * 8191 + ((isSetACount()) ? 131071 : 524287);
    if (isSetACount())
      hashCode = hashCode * 8191 + aCount;

    hashCode = hashCode * 8191 + ((isSetAUser()) ? 131071 : 524287);
    if (isSetAUser())
      hashCode = hashCode * 8191 + aUser;

    hashCode = hashCode * 8191 + ((isSetASCount()) ? 131071 : 524287);
    if (isSetASCount())
      hashCode = hashCode * 8191 + aSCount;

    hashCode = hashCode * 8191 + ((isSetASUser()) ? 131071 : 524287);
    if (isSetASUser())
      hashCode = hashCode * 8191 + aSUser;

    return hashCode;
  }

  @Override
  public int compareTo(WebPlaDailyDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPPv()).compareTo(other.isSetPPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pPv, other.pPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPUv()).compareTo(other.isSetPUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pUv, other.pUv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPSPv()).compareTo(other.isSetPSPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPSPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pSPv, other.pSPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPSUv()).compareTo(other.isSetPSUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPSUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pSUv, other.pSUv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLPv()).compareTo(other.isSetLPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lPv, other.lPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLUv()).compareTo(other.isSetLUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lUv, other.lUv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLSPv()).compareTo(other.isSetLSPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLSPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lSPv, other.lSPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLSUv()).compareTo(other.isSetLSUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLSUv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lSUv, other.lSUv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetACount()).compareTo(other.isSetACount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetACount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aCount, other.aCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAUser()).compareTo(other.isSetAUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aUser, other.aUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetASCount()).compareTo(other.isSetASCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetASCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aSCount, other.aSCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetASUser()).compareTo(other.isSetASUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetASUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aSUser, other.aSUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WebPlaDailyDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetPPv()) {
      if (!first) sb.append(", ");
      sb.append("pPv:");
      sb.append(this.pPv);
      first = false;
    }
    if (isSetPUv()) {
      if (!first) sb.append(", ");
      sb.append("pUv:");
      sb.append(this.pUv);
      first = false;
    }
    if (isSetPSPv()) {
      if (!first) sb.append(", ");
      sb.append("pSPv:");
      sb.append(this.pSPv);
      first = false;
    }
    if (isSetPSUv()) {
      if (!first) sb.append(", ");
      sb.append("pSUv:");
      sb.append(this.pSUv);
      first = false;
    }
    if (isSetLPv()) {
      if (!first) sb.append(", ");
      sb.append("lPv:");
      sb.append(this.lPv);
      first = false;
    }
    if (isSetLUv()) {
      if (!first) sb.append(", ");
      sb.append("lUv:");
      sb.append(this.lUv);
      first = false;
    }
    if (isSetLSPv()) {
      if (!first) sb.append(", ");
      sb.append("lSPv:");
      sb.append(this.lSPv);
      first = false;
    }
    if (isSetLSUv()) {
      if (!first) sb.append(", ");
      sb.append("lSUv:");
      sb.append(this.lSUv);
      first = false;
    }
    if (isSetACount()) {
      if (!first) sb.append(", ");
      sb.append("aCount:");
      sb.append(this.aCount);
      first = false;
    }
    if (isSetAUser()) {
      if (!first) sb.append(", ");
      sb.append("aUser:");
      sb.append(this.aUser);
      first = false;
    }
    if (isSetASCount()) {
      if (!first) sb.append(", ");
      sb.append("aSCount:");
      sb.append(this.aSCount);
      first = false;
    }
    if (isSetASUser()) {
      if (!first) sb.append(", ");
      sb.append("aSUser:");
      sb.append(this.aSUser);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WebPlaDailyDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WebPlaDailyDOStandardScheme getScheme() {
      return new WebPlaDailyDOStandardScheme();
    }
  }

  private static class WebPlaDailyDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WebPlaDailyDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WebPlaDailyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pPv = iprot.readI32();
              struct.setPPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // P_UV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pUv = iprot.readI32();
              struct.setPUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // P_SPV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pSPv = iprot.readI32();
              struct.setPSPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // P_SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pSUv = iprot.readI32();
              struct.setPSUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // L_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lPv = iprot.readI32();
              struct.setLPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // L_UV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lUv = iprot.readI32();
              struct.setLUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // L_SPV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lSPv = iprot.readI32();
              struct.setLSPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // L_SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lSUv = iprot.readI32();
              struct.setLSUvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // A_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aCount = iprot.readI32();
              struct.setACountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // A_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aUser = iprot.readI32();
              struct.setAUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // A_SCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aSCount = iprot.readI32();
              struct.setASCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // A_SUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aSUser = iprot.readI32();
              struct.setASUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WebPlaDailyDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPPv()) {
        oprot.writeFieldBegin(P_PV_FIELD_DESC);
        oprot.writeI32(struct.pPv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPUv()) {
        oprot.writeFieldBegin(P_UV_FIELD_DESC);
        oprot.writeI32(struct.pUv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPSPv()) {
        oprot.writeFieldBegin(P_SPV_FIELD_DESC);
        oprot.writeI32(struct.pSPv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPSUv()) {
        oprot.writeFieldBegin(P_SUV_FIELD_DESC);
        oprot.writeI32(struct.pSUv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLPv()) {
        oprot.writeFieldBegin(L_PV_FIELD_DESC);
        oprot.writeI32(struct.lPv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLUv()) {
        oprot.writeFieldBegin(L_UV_FIELD_DESC);
        oprot.writeI32(struct.lUv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLSPv()) {
        oprot.writeFieldBegin(L_SPV_FIELD_DESC);
        oprot.writeI32(struct.lSPv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLSUv()) {
        oprot.writeFieldBegin(L_SUV_FIELD_DESC);
        oprot.writeI32(struct.lSUv);
        oprot.writeFieldEnd();
      }
      if (struct.isSetACount()) {
        oprot.writeFieldBegin(A_COUNT_FIELD_DESC);
        oprot.writeI32(struct.aCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAUser()) {
        oprot.writeFieldBegin(A_USER_FIELD_DESC);
        oprot.writeI32(struct.aUser);
        oprot.writeFieldEnd();
      }
      if (struct.isSetASCount()) {
        oprot.writeFieldBegin(A_SCOUNT_FIELD_DESC);
        oprot.writeI32(struct.aSCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetASUser()) {
        oprot.writeFieldBegin(A_SUSER_FIELD_DESC);
        oprot.writeI32(struct.aSUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WebPlaDailyDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WebPlaDailyDOTupleScheme getScheme() {
      return new WebPlaDailyDOTupleScheme();
    }
  }

  private static class WebPlaDailyDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WebPlaDailyDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WebPlaDailyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetPPv()) {
        optionals.set(3);
      }
      if (struct.isSetPUv()) {
        optionals.set(4);
      }
      if (struct.isSetPSPv()) {
        optionals.set(5);
      }
      if (struct.isSetPSUv()) {
        optionals.set(6);
      }
      if (struct.isSetLPv()) {
        optionals.set(7);
      }
      if (struct.isSetLUv()) {
        optionals.set(8);
      }
      if (struct.isSetLSPv()) {
        optionals.set(9);
      }
      if (struct.isSetLSUv()) {
        optionals.set(10);
      }
      if (struct.isSetACount()) {
        optionals.set(11);
      }
      if (struct.isSetAUser()) {
        optionals.set(12);
      }
      if (struct.isSetASCount()) {
        optionals.set(13);
      }
      if (struct.isSetASUser()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPPv()) {
        oprot.writeI32(struct.pPv);
      }
      if (struct.isSetPUv()) {
        oprot.writeI32(struct.pUv);
      }
      if (struct.isSetPSPv()) {
        oprot.writeI32(struct.pSPv);
      }
      if (struct.isSetPSUv()) {
        oprot.writeI32(struct.pSUv);
      }
      if (struct.isSetLPv()) {
        oprot.writeI32(struct.lPv);
      }
      if (struct.isSetLUv()) {
        oprot.writeI32(struct.lUv);
      }
      if (struct.isSetLSPv()) {
        oprot.writeI32(struct.lSPv);
      }
      if (struct.isSetLSUv()) {
        oprot.writeI32(struct.lSUv);
      }
      if (struct.isSetACount()) {
        oprot.writeI32(struct.aCount);
      }
      if (struct.isSetAUser()) {
        oprot.writeI32(struct.aUser);
      }
      if (struct.isSetASCount()) {
        oprot.writeI32(struct.aSCount);
      }
      if (struct.isSetASUser()) {
        oprot.writeI32(struct.aSUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WebPlaDailyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pPv = iprot.readI32();
        struct.setPPvIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pUv = iprot.readI32();
        struct.setPUvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pSPv = iprot.readI32();
        struct.setPSPvIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pSUv = iprot.readI32();
        struct.setPSUvIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lPv = iprot.readI32();
        struct.setLPvIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lUv = iprot.readI32();
        struct.setLUvIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lSPv = iprot.readI32();
        struct.setLSPvIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lSUv = iprot.readI32();
        struct.setLSUvIsSet(true);
      }
      if (incoming.get(11)) {
        struct.aCount = iprot.readI32();
        struct.setACountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.aUser = iprot.readI32();
        struct.setAUserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.aSCount = iprot.readI32();
        struct.setASCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.aSUser = iprot.readI32();
        struct.setASUserIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

