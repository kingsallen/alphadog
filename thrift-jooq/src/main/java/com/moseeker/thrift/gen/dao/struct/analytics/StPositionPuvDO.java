/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class StPositionPuvDO implements org.apache.thrift.TBase<StPositionPuvDO, StPositionPuvDO._Fields>, java.io.Serializable, Cloneable, Comparable<StPositionPuvDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StPositionPuvDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ipCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IP_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipUnique", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IP_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("ipTop", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ipFreq", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VIEWER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VIEWER_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerUnique", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VIEWER_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerTop", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VIEWER_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerFreq", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RECOM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField RECOM_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("recomUnique", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField RECOM_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("recomTop", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RECOM_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("recomFreq", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StPositionPuvDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StPositionPuvDOTupleSchemeFactory();

  public int id; // optional
  public int pid; // optional
  public java.lang.String createTime; // optional
  public int ipCount; // optional
  public int ipUnique; // optional
  public java.lang.String ipTop; // optional
  public int ipFreq; // optional
  public int viewerCount; // optional
  public int viewerUnique; // optional
  public java.lang.String viewerTop; // optional
  public int viewerFreq; // optional
  public int recomCount; // optional
  public int recomUnique; // optional
  public java.lang.String recomTop; // optional
  public int recomFreq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PID((short)2, "pid"),
    CREATE_TIME((short)3, "createTime"),
    IP_COUNT((short)4, "ipCount"),
    IP_UNIQUE((short)5, "ipUnique"),
    IP_TOP((short)6, "ipTop"),
    IP_FREQ((short)7, "ipFreq"),
    VIEWER_COUNT((short)8, "viewerCount"),
    VIEWER_UNIQUE((short)9, "viewerUnique"),
    VIEWER_TOP((short)10, "viewerTop"),
    VIEWER_FREQ((short)11, "viewerFreq"),
    RECOM_COUNT((short)12, "recomCount"),
    RECOM_UNIQUE((short)13, "recomUnique"),
    RECOM_TOP((short)14, "recomTop"),
    RECOM_FREQ((short)15, "recomFreq");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PID
          return PID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // IP_COUNT
          return IP_COUNT;
        case 5: // IP_UNIQUE
          return IP_UNIQUE;
        case 6: // IP_TOP
          return IP_TOP;
        case 7: // IP_FREQ
          return IP_FREQ;
        case 8: // VIEWER_COUNT
          return VIEWER_COUNT;
        case 9: // VIEWER_UNIQUE
          return VIEWER_UNIQUE;
        case 10: // VIEWER_TOP
          return VIEWER_TOP;
        case 11: // VIEWER_FREQ
          return VIEWER_FREQ;
        case 12: // RECOM_COUNT
          return RECOM_COUNT;
        case 13: // RECOM_UNIQUE
          return RECOM_UNIQUE;
        case 14: // RECOM_TOP
          return RECOM_TOP;
        case 15: // RECOM_FREQ
          return RECOM_FREQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __IPCOUNT_ISSET_ID = 2;
  private static final int __IPUNIQUE_ISSET_ID = 3;
  private static final int __IPFREQ_ISSET_ID = 4;
  private static final int __VIEWERCOUNT_ISSET_ID = 5;
  private static final int __VIEWERUNIQUE_ISSET_ID = 6;
  private static final int __VIEWERFREQ_ISSET_ID = 7;
  private static final int __RECOMCOUNT_ISSET_ID = 8;
  private static final int __RECOMUNIQUE_ISSET_ID = 9;
  private static final int __RECOMFREQ_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PID,_Fields.CREATE_TIME,_Fields.IP_COUNT,_Fields.IP_UNIQUE,_Fields.IP_TOP,_Fields.IP_FREQ,_Fields.VIEWER_COUNT,_Fields.VIEWER_UNIQUE,_Fields.VIEWER_TOP,_Fields.VIEWER_FREQ,_Fields.RECOM_COUNT,_Fields.RECOM_UNIQUE,_Fields.RECOM_TOP,_Fields.RECOM_FREQ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ipCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_UNIQUE, new org.apache.thrift.meta_data.FieldMetaData("ipUnique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_TOP, new org.apache.thrift.meta_data.FieldMetaData("ipTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_FREQ, new org.apache.thrift.meta_data.FieldMetaData("ipFreq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("viewerCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWER_UNIQUE, new org.apache.thrift.meta_data.FieldMetaData("viewerUnique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWER_TOP, new org.apache.thrift.meta_data.FieldMetaData("viewerTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEWER_FREQ, new org.apache.thrift.meta_data.FieldMetaData("viewerFreq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("recomCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM_UNIQUE, new org.apache.thrift.meta_data.FieldMetaData("recomUnique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM_TOP, new org.apache.thrift.meta_data.FieldMetaData("recomTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOM_FREQ, new org.apache.thrift.meta_data.FieldMetaData("recomFreq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StPositionPuvDO.class, metaDataMap);
  }

  public StPositionPuvDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StPositionPuvDO(StPositionPuvDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.pid = other.pid;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.ipCount = other.ipCount;
    this.ipUnique = other.ipUnique;
    if (other.isSetIpTop()) {
      this.ipTop = other.ipTop;
    }
    this.ipFreq = other.ipFreq;
    this.viewerCount = other.viewerCount;
    this.viewerUnique = other.viewerUnique;
    if (other.isSetViewerTop()) {
      this.viewerTop = other.viewerTop;
    }
    this.viewerFreq = other.viewerFreq;
    this.recomCount = other.recomCount;
    this.recomUnique = other.recomUnique;
    if (other.isSetRecomTop()) {
      this.recomTop = other.recomTop;
    }
    this.recomFreq = other.recomFreq;
  }

  public StPositionPuvDO deepCopy() {
    return new StPositionPuvDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.createTime = null;
    setIpCountIsSet(false);
    this.ipCount = 0;
    setIpUniqueIsSet(false);
    this.ipUnique = 0;
    this.ipTop = null;
    setIpFreqIsSet(false);
    this.ipFreq = 0;
    setViewerCountIsSet(false);
    this.viewerCount = 0;
    setViewerUniqueIsSet(false);
    this.viewerUnique = 0;
    this.viewerTop = null;
    setViewerFreqIsSet(false);
    this.viewerFreq = 0;
    setRecomCountIsSet(false);
    this.recomCount = 0;
    setRecomUniqueIsSet(false);
    this.recomUnique = 0;
    this.recomTop = null;
    setRecomFreqIsSet(false);
    this.recomFreq = 0;
  }

  public int getId() {
    return this.id;
  }

  public StPositionPuvDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public StPositionPuvDO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public StPositionPuvDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getIpCount() {
    return this.ipCount;
  }

  public StPositionPuvDO setIpCount(int ipCount) {
    this.ipCount = ipCount;
    setIpCountIsSet(true);
    return this;
  }

  public void unsetIpCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  /** Returns true if field ipCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIpCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  public void setIpCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPCOUNT_ISSET_ID, value);
  }

  public int getIpUnique() {
    return this.ipUnique;
  }

  public StPositionPuvDO setIpUnique(int ipUnique) {
    this.ipUnique = ipUnique;
    setIpUniqueIsSet(true);
    return this;
  }

  public void unsetIpUnique() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPUNIQUE_ISSET_ID);
  }

  /** Returns true if field ipUnique is set (has been assigned a value) and false otherwise */
  public boolean isSetIpUnique() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPUNIQUE_ISSET_ID);
  }

  public void setIpUniqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPUNIQUE_ISSET_ID, value);
  }

  public java.lang.String getIpTop() {
    return this.ipTop;
  }

  public StPositionPuvDO setIpTop(java.lang.String ipTop) {
    this.ipTop = ipTop;
    return this;
  }

  public void unsetIpTop() {
    this.ipTop = null;
  }

  /** Returns true if field ipTop is set (has been assigned a value) and false otherwise */
  public boolean isSetIpTop() {
    return this.ipTop != null;
  }

  public void setIpTopIsSet(boolean value) {
    if (!value) {
      this.ipTop = null;
    }
  }

  public int getIpFreq() {
    return this.ipFreq;
  }

  public StPositionPuvDO setIpFreq(int ipFreq) {
    this.ipFreq = ipFreq;
    setIpFreqIsSet(true);
    return this;
  }

  public void unsetIpFreq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPFREQ_ISSET_ID);
  }

  /** Returns true if field ipFreq is set (has been assigned a value) and false otherwise */
  public boolean isSetIpFreq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPFREQ_ISSET_ID);
  }

  public void setIpFreqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPFREQ_ISSET_ID, value);
  }

  public int getViewerCount() {
    return this.viewerCount;
  }

  public StPositionPuvDO setViewerCount(int viewerCount) {
    this.viewerCount = viewerCount;
    setViewerCountIsSet(true);
    return this;
  }

  public void unsetViewerCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWERCOUNT_ISSET_ID);
  }

  /** Returns true if field viewerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWERCOUNT_ISSET_ID);
  }

  public void setViewerCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWERCOUNT_ISSET_ID, value);
  }

  public int getViewerUnique() {
    return this.viewerUnique;
  }

  public StPositionPuvDO setViewerUnique(int viewerUnique) {
    this.viewerUnique = viewerUnique;
    setViewerUniqueIsSet(true);
    return this;
  }

  public void unsetViewerUnique() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWERUNIQUE_ISSET_ID);
  }

  /** Returns true if field viewerUnique is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerUnique() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWERUNIQUE_ISSET_ID);
  }

  public void setViewerUniqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWERUNIQUE_ISSET_ID, value);
  }

  public java.lang.String getViewerTop() {
    return this.viewerTop;
  }

  public StPositionPuvDO setViewerTop(java.lang.String viewerTop) {
    this.viewerTop = viewerTop;
    return this;
  }

  public void unsetViewerTop() {
    this.viewerTop = null;
  }

  /** Returns true if field viewerTop is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerTop() {
    return this.viewerTop != null;
  }

  public void setViewerTopIsSet(boolean value) {
    if (!value) {
      this.viewerTop = null;
    }
  }

  public int getViewerFreq() {
    return this.viewerFreq;
  }

  public StPositionPuvDO setViewerFreq(int viewerFreq) {
    this.viewerFreq = viewerFreq;
    setViewerFreqIsSet(true);
    return this;
  }

  public void unsetViewerFreq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWERFREQ_ISSET_ID);
  }

  /** Returns true if field viewerFreq is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerFreq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWERFREQ_ISSET_ID);
  }

  public void setViewerFreqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWERFREQ_ISSET_ID, value);
  }

  public int getRecomCount() {
    return this.recomCount;
  }

  public StPositionPuvDO setRecomCount(int recomCount) {
    this.recomCount = recomCount;
    setRecomCountIsSet(true);
    return this;
  }

  public void unsetRecomCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMCOUNT_ISSET_ID);
  }

  /** Returns true if field recomCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMCOUNT_ISSET_ID);
  }

  public void setRecomCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMCOUNT_ISSET_ID, value);
  }

  public int getRecomUnique() {
    return this.recomUnique;
  }

  public StPositionPuvDO setRecomUnique(int recomUnique) {
    this.recomUnique = recomUnique;
    setRecomUniqueIsSet(true);
    return this;
  }

  public void unsetRecomUnique() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMUNIQUE_ISSET_ID);
  }

  /** Returns true if field recomUnique is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomUnique() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMUNIQUE_ISSET_ID);
  }

  public void setRecomUniqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMUNIQUE_ISSET_ID, value);
  }

  public java.lang.String getRecomTop() {
    return this.recomTop;
  }

  public StPositionPuvDO setRecomTop(java.lang.String recomTop) {
    this.recomTop = recomTop;
    return this;
  }

  public void unsetRecomTop() {
    this.recomTop = null;
  }

  /** Returns true if field recomTop is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomTop() {
    return this.recomTop != null;
  }

  public void setRecomTopIsSet(boolean value) {
    if (!value) {
      this.recomTop = null;
    }
  }

  public int getRecomFreq() {
    return this.recomFreq;
  }

  public StPositionPuvDO setRecomFreq(int recomFreq) {
    this.recomFreq = recomFreq;
    setRecomFreqIsSet(true);
    return this;
  }

  public void unsetRecomFreq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMFREQ_ISSET_ID);
  }

  /** Returns true if field recomFreq is set (has been assigned a value) and false otherwise */
  public boolean isSetRecomFreq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMFREQ_ISSET_ID);
  }

  public void setRecomFreqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMFREQ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case IP_COUNT:
      if (value == null) {
        unsetIpCount();
      } else {
        setIpCount((java.lang.Integer)value);
      }
      break;

    case IP_UNIQUE:
      if (value == null) {
        unsetIpUnique();
      } else {
        setIpUnique((java.lang.Integer)value);
      }
      break;

    case IP_TOP:
      if (value == null) {
        unsetIpTop();
      } else {
        setIpTop((java.lang.String)value);
      }
      break;

    case IP_FREQ:
      if (value == null) {
        unsetIpFreq();
      } else {
        setIpFreq((java.lang.Integer)value);
      }
      break;

    case VIEWER_COUNT:
      if (value == null) {
        unsetViewerCount();
      } else {
        setViewerCount((java.lang.Integer)value);
      }
      break;

    case VIEWER_UNIQUE:
      if (value == null) {
        unsetViewerUnique();
      } else {
        setViewerUnique((java.lang.Integer)value);
      }
      break;

    case VIEWER_TOP:
      if (value == null) {
        unsetViewerTop();
      } else {
        setViewerTop((java.lang.String)value);
      }
      break;

    case VIEWER_FREQ:
      if (value == null) {
        unsetViewerFreq();
      } else {
        setViewerFreq((java.lang.Integer)value);
      }
      break;

    case RECOM_COUNT:
      if (value == null) {
        unsetRecomCount();
      } else {
        setRecomCount((java.lang.Integer)value);
      }
      break;

    case RECOM_UNIQUE:
      if (value == null) {
        unsetRecomUnique();
      } else {
        setRecomUnique((java.lang.Integer)value);
      }
      break;

    case RECOM_TOP:
      if (value == null) {
        unsetRecomTop();
      } else {
        setRecomTop((java.lang.String)value);
      }
      break;

    case RECOM_FREQ:
      if (value == null) {
        unsetRecomFreq();
      } else {
        setRecomFreq((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PID:
      return getPid();

    case CREATE_TIME:
      return getCreateTime();

    case IP_COUNT:
      return getIpCount();

    case IP_UNIQUE:
      return getIpUnique();

    case IP_TOP:
      return getIpTop();

    case IP_FREQ:
      return getIpFreq();

    case VIEWER_COUNT:
      return getViewerCount();

    case VIEWER_UNIQUE:
      return getViewerUnique();

    case VIEWER_TOP:
      return getViewerTop();

    case VIEWER_FREQ:
      return getViewerFreq();

    case RECOM_COUNT:
      return getRecomCount();

    case RECOM_UNIQUE:
      return getRecomUnique();

    case RECOM_TOP:
      return getRecomTop();

    case RECOM_FREQ:
      return getRecomFreq();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PID:
      return isSetPid();
    case CREATE_TIME:
      return isSetCreateTime();
    case IP_COUNT:
      return isSetIpCount();
    case IP_UNIQUE:
      return isSetIpUnique();
    case IP_TOP:
      return isSetIpTop();
    case IP_FREQ:
      return isSetIpFreq();
    case VIEWER_COUNT:
      return isSetViewerCount();
    case VIEWER_UNIQUE:
      return isSetViewerUnique();
    case VIEWER_TOP:
      return isSetViewerTop();
    case VIEWER_FREQ:
      return isSetViewerFreq();
    case RECOM_COUNT:
      return isSetRecomCount();
    case RECOM_UNIQUE:
      return isSetRecomUnique();
    case RECOM_TOP:
      return isSetRecomTop();
    case RECOM_FREQ:
      return isSetRecomFreq();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StPositionPuvDO)
      return this.equals((StPositionPuvDO)that);
    return false;
  }

  public boolean equals(StPositionPuvDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_ipCount = true && this.isSetIpCount();
    boolean that_present_ipCount = true && that.isSetIpCount();
    if (this_present_ipCount || that_present_ipCount) {
      if (!(this_present_ipCount && that_present_ipCount))
        return false;
      if (this.ipCount != that.ipCount)
        return false;
    }

    boolean this_present_ipUnique = true && this.isSetIpUnique();
    boolean that_present_ipUnique = true && that.isSetIpUnique();
    if (this_present_ipUnique || that_present_ipUnique) {
      if (!(this_present_ipUnique && that_present_ipUnique))
        return false;
      if (this.ipUnique != that.ipUnique)
        return false;
    }

    boolean this_present_ipTop = true && this.isSetIpTop();
    boolean that_present_ipTop = true && that.isSetIpTop();
    if (this_present_ipTop || that_present_ipTop) {
      if (!(this_present_ipTop && that_present_ipTop))
        return false;
      if (!this.ipTop.equals(that.ipTop))
        return false;
    }

    boolean this_present_ipFreq = true && this.isSetIpFreq();
    boolean that_present_ipFreq = true && that.isSetIpFreq();
    if (this_present_ipFreq || that_present_ipFreq) {
      if (!(this_present_ipFreq && that_present_ipFreq))
        return false;
      if (this.ipFreq != that.ipFreq)
        return false;
    }

    boolean this_present_viewerCount = true && this.isSetViewerCount();
    boolean that_present_viewerCount = true && that.isSetViewerCount();
    if (this_present_viewerCount || that_present_viewerCount) {
      if (!(this_present_viewerCount && that_present_viewerCount))
        return false;
      if (this.viewerCount != that.viewerCount)
        return false;
    }

    boolean this_present_viewerUnique = true && this.isSetViewerUnique();
    boolean that_present_viewerUnique = true && that.isSetViewerUnique();
    if (this_present_viewerUnique || that_present_viewerUnique) {
      if (!(this_present_viewerUnique && that_present_viewerUnique))
        return false;
      if (this.viewerUnique != that.viewerUnique)
        return false;
    }

    boolean this_present_viewerTop = true && this.isSetViewerTop();
    boolean that_present_viewerTop = true && that.isSetViewerTop();
    if (this_present_viewerTop || that_present_viewerTop) {
      if (!(this_present_viewerTop && that_present_viewerTop))
        return false;
      if (!this.viewerTop.equals(that.viewerTop))
        return false;
    }

    boolean this_present_viewerFreq = true && this.isSetViewerFreq();
    boolean that_present_viewerFreq = true && that.isSetViewerFreq();
    if (this_present_viewerFreq || that_present_viewerFreq) {
      if (!(this_present_viewerFreq && that_present_viewerFreq))
        return false;
      if (this.viewerFreq != that.viewerFreq)
        return false;
    }

    boolean this_present_recomCount = true && this.isSetRecomCount();
    boolean that_present_recomCount = true && that.isSetRecomCount();
    if (this_present_recomCount || that_present_recomCount) {
      if (!(this_present_recomCount && that_present_recomCount))
        return false;
      if (this.recomCount != that.recomCount)
        return false;
    }

    boolean this_present_recomUnique = true && this.isSetRecomUnique();
    boolean that_present_recomUnique = true && that.isSetRecomUnique();
    if (this_present_recomUnique || that_present_recomUnique) {
      if (!(this_present_recomUnique && that_present_recomUnique))
        return false;
      if (this.recomUnique != that.recomUnique)
        return false;
    }

    boolean this_present_recomTop = true && this.isSetRecomTop();
    boolean that_present_recomTop = true && that.isSetRecomTop();
    if (this_present_recomTop || that_present_recomTop) {
      if (!(this_present_recomTop && that_present_recomTop))
        return false;
      if (!this.recomTop.equals(that.recomTop))
        return false;
    }

    boolean this_present_recomFreq = true && this.isSetRecomFreq();
    boolean that_present_recomFreq = true && that.isSetRecomFreq();
    if (this_present_recomFreq || that_present_recomFreq) {
      if (!(this_present_recomFreq && that_present_recomFreq))
        return false;
      if (this.recomFreq != that.recomFreq)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
    if (isSetPid())
      hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpCount()) ? 131071 : 524287);
    if (isSetIpCount())
      hashCode = hashCode * 8191 + ipCount;

    hashCode = hashCode * 8191 + ((isSetIpUnique()) ? 131071 : 524287);
    if (isSetIpUnique())
      hashCode = hashCode * 8191 + ipUnique;

    hashCode = hashCode * 8191 + ((isSetIpTop()) ? 131071 : 524287);
    if (isSetIpTop())
      hashCode = hashCode * 8191 + ipTop.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpFreq()) ? 131071 : 524287);
    if (isSetIpFreq())
      hashCode = hashCode * 8191 + ipFreq;

    hashCode = hashCode * 8191 + ((isSetViewerCount()) ? 131071 : 524287);
    if (isSetViewerCount())
      hashCode = hashCode * 8191 + viewerCount;

    hashCode = hashCode * 8191 + ((isSetViewerUnique()) ? 131071 : 524287);
    if (isSetViewerUnique())
      hashCode = hashCode * 8191 + viewerUnique;

    hashCode = hashCode * 8191 + ((isSetViewerTop()) ? 131071 : 524287);
    if (isSetViewerTop())
      hashCode = hashCode * 8191 + viewerTop.hashCode();

    hashCode = hashCode * 8191 + ((isSetViewerFreq()) ? 131071 : 524287);
    if (isSetViewerFreq())
      hashCode = hashCode * 8191 + viewerFreq;

    hashCode = hashCode * 8191 + ((isSetRecomCount()) ? 131071 : 524287);
    if (isSetRecomCount())
      hashCode = hashCode * 8191 + recomCount;

    hashCode = hashCode * 8191 + ((isSetRecomUnique()) ? 131071 : 524287);
    if (isSetRecomUnique())
      hashCode = hashCode * 8191 + recomUnique;

    hashCode = hashCode * 8191 + ((isSetRecomTop()) ? 131071 : 524287);
    if (isSetRecomTop())
      hashCode = hashCode * 8191 + recomTop.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecomFreq()) ? 131071 : 524287);
    if (isSetRecomFreq())
      hashCode = hashCode * 8191 + recomFreq;

    return hashCode;
  }

  @Override
  public int compareTo(StPositionPuvDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpCount()).compareTo(other.isSetIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipCount, other.ipCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpUnique()).compareTo(other.isSetIpUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpUnique()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipUnique, other.ipUnique);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpTop()).compareTo(other.isSetIpTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipTop, other.ipTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpFreq()).compareTo(other.isSetIpFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipFreq, other.ipFreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerCount()).compareTo(other.isSetViewerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerCount, other.viewerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerUnique()).compareTo(other.isSetViewerUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerUnique()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerUnique, other.viewerUnique);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerTop()).compareTo(other.isSetViewerTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerTop, other.viewerTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerFreq()).compareTo(other.isSetViewerFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerFreq, other.viewerFreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomCount()).compareTo(other.isSetRecomCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomCount, other.recomCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomUnique()).compareTo(other.isSetRecomUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomUnique()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomUnique, other.recomUnique);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomTop()).compareTo(other.isSetRecomTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomTop, other.recomTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecomFreq()).compareTo(other.isSetRecomFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecomFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomFreq, other.recomFreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StPositionPuvDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetIpCount()) {
      if (!first) sb.append(", ");
      sb.append("ipCount:");
      sb.append(this.ipCount);
      first = false;
    }
    if (isSetIpUnique()) {
      if (!first) sb.append(", ");
      sb.append("ipUnique:");
      sb.append(this.ipUnique);
      first = false;
    }
    if (isSetIpTop()) {
      if (!first) sb.append(", ");
      sb.append("ipTop:");
      if (this.ipTop == null) {
        sb.append("null");
      } else {
        sb.append(this.ipTop);
      }
      first = false;
    }
    if (isSetIpFreq()) {
      if (!first) sb.append(", ");
      sb.append("ipFreq:");
      sb.append(this.ipFreq);
      first = false;
    }
    if (isSetViewerCount()) {
      if (!first) sb.append(", ");
      sb.append("viewerCount:");
      sb.append(this.viewerCount);
      first = false;
    }
    if (isSetViewerUnique()) {
      if (!first) sb.append(", ");
      sb.append("viewerUnique:");
      sb.append(this.viewerUnique);
      first = false;
    }
    if (isSetViewerTop()) {
      if (!first) sb.append(", ");
      sb.append("viewerTop:");
      if (this.viewerTop == null) {
        sb.append("null");
      } else {
        sb.append(this.viewerTop);
      }
      first = false;
    }
    if (isSetViewerFreq()) {
      if (!first) sb.append(", ");
      sb.append("viewerFreq:");
      sb.append(this.viewerFreq);
      first = false;
    }
    if (isSetRecomCount()) {
      if (!first) sb.append(", ");
      sb.append("recomCount:");
      sb.append(this.recomCount);
      first = false;
    }
    if (isSetRecomUnique()) {
      if (!first) sb.append(", ");
      sb.append("recomUnique:");
      sb.append(this.recomUnique);
      first = false;
    }
    if (isSetRecomTop()) {
      if (!first) sb.append(", ");
      sb.append("recomTop:");
      if (this.recomTop == null) {
        sb.append("null");
      } else {
        sb.append(this.recomTop);
      }
      first = false;
    }
    if (isSetRecomFreq()) {
      if (!first) sb.append(", ");
      sb.append("recomFreq:");
      sb.append(this.recomFreq);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StPositionPuvDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StPositionPuvDOStandardScheme getScheme() {
      return new StPositionPuvDOStandardScheme();
    }
  }

  private static class StPositionPuvDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<StPositionPuvDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StPositionPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipCount = iprot.readI32();
              struct.setIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP_UNIQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipUnique = iprot.readI32();
              struct.setIpUniqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipTop = iprot.readString();
              struct.setIpTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipFreq = iprot.readI32();
              struct.setIpFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIEWER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewerCount = iprot.readI32();
              struct.setViewerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIEWER_UNIQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewerUnique = iprot.readI32();
              struct.setViewerUniqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIEWER_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewerTop = iprot.readString();
              struct.setViewerTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VIEWER_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewerFreq = iprot.readI32();
              struct.setViewerFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RECOM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomCount = iprot.readI32();
              struct.setRecomCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECOM_UNIQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomUnique = iprot.readI32();
              struct.setRecomUniqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RECOM_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recomTop = iprot.readString();
              struct.setRecomTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RECOM_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recomFreq = iprot.readI32();
              struct.setRecomFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StPositionPuvDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIpCount()) {
        oprot.writeFieldBegin(IP_COUNT_FIELD_DESC);
        oprot.writeI32(struct.ipCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIpUnique()) {
        oprot.writeFieldBegin(IP_UNIQUE_FIELD_DESC);
        oprot.writeI32(struct.ipUnique);
        oprot.writeFieldEnd();
      }
      if (struct.ipTop != null) {
        if (struct.isSetIpTop()) {
          oprot.writeFieldBegin(IP_TOP_FIELD_DESC);
          oprot.writeString(struct.ipTop);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIpFreq()) {
        oprot.writeFieldBegin(IP_FREQ_FIELD_DESC);
        oprot.writeI32(struct.ipFreq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetViewerCount()) {
        oprot.writeFieldBegin(VIEWER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.viewerCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetViewerUnique()) {
        oprot.writeFieldBegin(VIEWER_UNIQUE_FIELD_DESC);
        oprot.writeI32(struct.viewerUnique);
        oprot.writeFieldEnd();
      }
      if (struct.viewerTop != null) {
        if (struct.isSetViewerTop()) {
          oprot.writeFieldBegin(VIEWER_TOP_FIELD_DESC);
          oprot.writeString(struct.viewerTop);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetViewerFreq()) {
        oprot.writeFieldBegin(VIEWER_FREQ_FIELD_DESC);
        oprot.writeI32(struct.viewerFreq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomCount()) {
        oprot.writeFieldBegin(RECOM_COUNT_FIELD_DESC);
        oprot.writeI32(struct.recomCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecomUnique()) {
        oprot.writeFieldBegin(RECOM_UNIQUE_FIELD_DESC);
        oprot.writeI32(struct.recomUnique);
        oprot.writeFieldEnd();
      }
      if (struct.recomTop != null) {
        if (struct.isSetRecomTop()) {
          oprot.writeFieldBegin(RECOM_TOP_FIELD_DESC);
          oprot.writeString(struct.recomTop);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecomFreq()) {
        oprot.writeFieldBegin(RECOM_FREQ_FIELD_DESC);
        oprot.writeI32(struct.recomFreq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StPositionPuvDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StPositionPuvDOTupleScheme getScheme() {
      return new StPositionPuvDOTupleScheme();
    }
  }

  private static class StPositionPuvDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<StPositionPuvDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StPositionPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPid()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetIpCount()) {
        optionals.set(3);
      }
      if (struct.isSetIpUnique()) {
        optionals.set(4);
      }
      if (struct.isSetIpTop()) {
        optionals.set(5);
      }
      if (struct.isSetIpFreq()) {
        optionals.set(6);
      }
      if (struct.isSetViewerCount()) {
        optionals.set(7);
      }
      if (struct.isSetViewerUnique()) {
        optionals.set(8);
      }
      if (struct.isSetViewerTop()) {
        optionals.set(9);
      }
      if (struct.isSetViewerFreq()) {
        optionals.set(10);
      }
      if (struct.isSetRecomCount()) {
        optionals.set(11);
      }
      if (struct.isSetRecomUnique()) {
        optionals.set(12);
      }
      if (struct.isSetRecomTop()) {
        optionals.set(13);
      }
      if (struct.isSetRecomFreq()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetIpCount()) {
        oprot.writeI32(struct.ipCount);
      }
      if (struct.isSetIpUnique()) {
        oprot.writeI32(struct.ipUnique);
      }
      if (struct.isSetIpTop()) {
        oprot.writeString(struct.ipTop);
      }
      if (struct.isSetIpFreq()) {
        oprot.writeI32(struct.ipFreq);
      }
      if (struct.isSetViewerCount()) {
        oprot.writeI32(struct.viewerCount);
      }
      if (struct.isSetViewerUnique()) {
        oprot.writeI32(struct.viewerUnique);
      }
      if (struct.isSetViewerTop()) {
        oprot.writeString(struct.viewerTop);
      }
      if (struct.isSetViewerFreq()) {
        oprot.writeI32(struct.viewerFreq);
      }
      if (struct.isSetRecomCount()) {
        oprot.writeI32(struct.recomCount);
      }
      if (struct.isSetRecomUnique()) {
        oprot.writeI32(struct.recomUnique);
      }
      if (struct.isSetRecomTop()) {
        oprot.writeString(struct.recomTop);
      }
      if (struct.isSetRecomFreq()) {
        oprot.writeI32(struct.recomFreq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StPositionPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ipCount = iprot.readI32();
        struct.setIpCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ipUnique = iprot.readI32();
        struct.setIpUniqueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipTop = iprot.readString();
        struct.setIpTopIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ipFreq = iprot.readI32();
        struct.setIpFreqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.viewerCount = iprot.readI32();
        struct.setViewerCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.viewerUnique = iprot.readI32();
        struct.setViewerUniqueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.viewerTop = iprot.readString();
        struct.setViewerTopIsSet(true);
      }
      if (incoming.get(10)) {
        struct.viewerFreq = iprot.readI32();
        struct.setViewerFreqIsSet(true);
      }
      if (incoming.get(11)) {
        struct.recomCount = iprot.readI32();
        struct.setRecomCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.recomUnique = iprot.readI32();
        struct.setRecomUniqueIsSet(true);
      }
      if (incoming.get(13)) {
        struct.recomTop = iprot.readString();
        struct.setRecomTopIsSet(true);
      }
      if (incoming.get(14)) {
        struct.recomFreq = iprot.readI32();
        struct.setRecomFreqIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

