/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-31")
public class HrNpsUpdate implements org.apache.thrift.TBase<HrNpsUpdate, HrNpsUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<HrNpsUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrNpsUpdate");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("intention", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ACCEPT_CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("accept_contact", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrNpsUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrNpsUpdateTupleSchemeFactory();

  public int user_id; // optional
  public java.lang.String start_date; // optional
  public java.lang.String end_date; // optional
  public byte intention; // optional
  public byte accept_contact; // optional
  public java.lang.String username; // optional
  public java.lang.String mobile; // optional
  public java.lang.String company; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "user_id"),
    START_DATE((short)2, "start_date"),
    END_DATE((short)3, "end_date"),
    INTENTION((short)4, "intention"),
    ACCEPT_CONTACT((short)5, "accept_contact"),
    USERNAME((short)6, "username"),
    MOBILE((short)7, "mobile"),
    COMPANY((short)8, "company");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // START_DATE
          return START_DATE;
        case 3: // END_DATE
          return END_DATE;
        case 4: // INTENTION
          return INTENTION;
        case 5: // ACCEPT_CONTACT
          return ACCEPT_CONTACT;
        case 6: // USERNAME
          return USERNAME;
        case 7: // MOBILE
          return MOBILE;
        case 8: // COMPANY
          return COMPANY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ID_ISSET_ID = 0;
  private static final int __INTENTION_ISSET_ID = 1;
  private static final int __ACCEPT_CONTACT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.START_DATE,_Fields.END_DATE,_Fields.INTENTION,_Fields.ACCEPT_CONTACT,_Fields.USERNAME,_Fields.MOBILE,_Fields.COMPANY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTENTION, new org.apache.thrift.meta_data.FieldMetaData("intention", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACCEPT_CONTACT, new org.apache.thrift.meta_data.FieldMetaData("accept_contact", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrNpsUpdate.class, metaDataMap);
  }

  public HrNpsUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrNpsUpdate(HrNpsUpdate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user_id = other.user_id;
    if (other.isSetStart_date()) {
      this.start_date = other.start_date;
    }
    if (other.isSetEnd_date()) {
      this.end_date = other.end_date;
    }
    this.intention = other.intention;
    this.accept_contact = other.accept_contact;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCompany()) {
      this.company = other.company;
    }
  }

  public HrNpsUpdate deepCopy() {
    return new HrNpsUpdate(this);
  }

  @Override
  public void clear() {
    setUser_idIsSet(false);
    this.user_id = 0;
    this.start_date = null;
    this.end_date = null;
    setIntentionIsSet(false);
    this.intention = 0;
    setAccept_contactIsSet(false);
    this.accept_contact = 0;
    this.username = null;
    this.mobile = null;
    this.company = null;
  }

  public int getUser_id() {
    return this.user_id;
  }

  public HrNpsUpdate setUser_id(int user_id) {
    this.user_id = user_id;
    setUser_idIsSet(true);
    return this;
  }

  public void unsetUser_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  public void setUser_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
  }

  public java.lang.String getStart_date() {
    return this.start_date;
  }

  public HrNpsUpdate setStart_date(java.lang.String start_date) {
    this.start_date = start_date;
    return this;
  }

  public void unsetStart_date() {
    this.start_date = null;
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return this.start_date != null;
  }

  public void setStart_dateIsSet(boolean value) {
    if (!value) {
      this.start_date = null;
    }
  }

  public java.lang.String getEnd_date() {
    return this.end_date;
  }

  public HrNpsUpdate setEnd_date(java.lang.String end_date) {
    this.end_date = end_date;
    return this;
  }

  public void unsetEnd_date() {
    this.end_date = null;
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return this.end_date != null;
  }

  public void setEnd_dateIsSet(boolean value) {
    if (!value) {
      this.end_date = null;
    }
  }

  public byte getIntention() {
    return this.intention;
  }

  public HrNpsUpdate setIntention(byte intention) {
    this.intention = intention;
    setIntentionIsSet(true);
    return this;
  }

  public void unsetIntention() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTENTION_ISSET_ID);
  }

  /** Returns true if field intention is set (has been assigned a value) and false otherwise */
  public boolean isSetIntention() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTENTION_ISSET_ID);
  }

  public void setIntentionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTENTION_ISSET_ID, value);
  }

  public byte getAccept_contact() {
    return this.accept_contact;
  }

  public HrNpsUpdate setAccept_contact(byte accept_contact) {
    this.accept_contact = accept_contact;
    setAccept_contactIsSet(true);
    return this;
  }

  public void unsetAccept_contact() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID);
  }

  /** Returns true if field accept_contact is set (has been assigned a value) and false otherwise */
  public boolean isSetAccept_contact() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID);
  }

  public void setAccept_contactIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID, value);
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public HrNpsUpdate setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public java.lang.String getMobile() {
    return this.mobile;
  }

  public HrNpsUpdate setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public java.lang.String getCompany() {
    return this.company;
  }

  public HrNpsUpdate setCompany(java.lang.String company) {
    this.company = company;
    return this;
  }

  public void unsetCompany() {
    this.company = null;
  }

  /** Returns true if field company is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany() {
    return this.company != null;
  }

  public void setCompanyIsSet(boolean value) {
    if (!value) {
      this.company = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((java.lang.Integer)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStart_date();
        } else {
          setStart_date((java.lang.String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEnd_date();
        } else {
          setEnd_date((java.lang.String)value);
        }
        break;

      case INTENTION:
        if (value == null) {
          unsetIntention();
        } else {
          setIntention((java.lang.Byte)value);
        }
        break;

      case ACCEPT_CONTACT:
        if (value == null) {
          unsetAccept_contact();
        } else {
          setAccept_contact((java.lang.Byte)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      case COMPANY:
        if (value == null) {
          unsetCompany();
        } else {
          setCompany((java.lang.String)value);
        }
        break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case USER_ID:
        return getUser_id();

      case START_DATE:
        return getStart_date();

      case END_DATE:
        return getEnd_date();

      case INTENTION:
        return getIntention();

      case ACCEPT_CONTACT:
        return getAccept_contact();

      case USERNAME:
        return getUsername();

      case MOBILE:
        return getMobile();

      case COMPANY:
        return getCompany();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case USER_ID:
        return isSetUser_id();
      case START_DATE:
        return isSetStart_date();
      case END_DATE:
        return isSetEnd_date();
      case INTENTION:
        return isSetIntention();
      case ACCEPT_CONTACT:
        return isSetAccept_contact();
      case USERNAME:
        return isSetUsername();
      case MOBILE:
        return isSetMobile();
      case COMPANY:
        return isSetCompany();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrNpsUpdate)
      return this.equals((HrNpsUpdate)that);
    return false;
  }

  public boolean equals(HrNpsUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (this.user_id != that.user_id)
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (!this.start_date.equals(that.start_date))
        return false;
    }

    boolean this_present_end_date = true && this.isSetEnd_date();
    boolean that_present_end_date = true && that.isSetEnd_date();
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (!this.end_date.equals(that.end_date))
        return false;
    }

    boolean this_present_intention = true && this.isSetIntention();
    boolean that_present_intention = true && that.isSetIntention();
    if (this_present_intention || that_present_intention) {
      if (!(this_present_intention && that_present_intention))
        return false;
      if (this.intention != that.intention)
        return false;
    }

    boolean this_present_accept_contact = true && this.isSetAccept_contact();
    boolean that_present_accept_contact = true && that.isSetAccept_contact();
    if (this_present_accept_contact || that_present_accept_contact) {
      if (!(this_present_accept_contact && that_present_accept_contact))
        return false;
      if (this.accept_contact != that.accept_contact)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_company = true && this.isSetCompany();
    boolean that_present_company = true && that.isSetCompany();
    if (this_present_company || that_present_company) {
      if (!(this_present_company && that_present_company))
        return false;
      if (!this.company.equals(that.company))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser_id()) ? 131071 : 524287);
    if (isSetUser_id())
      hashCode = hashCode * 8191 + user_id;

    hashCode = hashCode * 8191 + ((isSetStart_date()) ? 131071 : 524287);
    if (isSetStart_date())
      hashCode = hashCode * 8191 + start_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_date()) ? 131071 : 524287);
    if (isSetEnd_date())
      hashCode = hashCode * 8191 + end_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntention()) ? 131071 : 524287);
    if (isSetIntention())
      hashCode = hashCode * 8191 + (int) (intention);

    hashCode = hashCode * 8191 + ((isSetAccept_contact()) ? 131071 : 524287);
    if (isSetAccept_contact())
      hashCode = hashCode * 8191 + (int) (accept_contact);

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
    if (isSetCompany())
      hashCode = hashCode * 8191 + company.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrNpsUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntention()).compareTo(other.isSetIntention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intention, other.intention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccept_contact()).compareTo(other.isSetAccept_contact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccept_contact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accept_contact, other.accept_contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrNpsUpdate(");
    boolean first = true;

    if (isSetUser_id()) {
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
    }
    if (isSetStart_date()) {
      if (!first) sb.append(", ");
      sb.append("start_date:");
      if (this.start_date == null) {
        sb.append("null");
      } else {
        sb.append(this.start_date);
      }
      first = false;
    }
    if (isSetEnd_date()) {
      if (!first) sb.append(", ");
      sb.append("end_date:");
      if (this.end_date == null) {
        sb.append("null");
      } else {
        sb.append(this.end_date);
      }
      first = false;
    }
    if (isSetIntention()) {
      if (!first) sb.append(", ");
      sb.append("intention:");
      sb.append(this.intention);
      first = false;
    }
    if (isSetAccept_contact()) {
      if (!first) sb.append(", ");
      sb.append("accept_contact:");
      sb.append(this.accept_contact);
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetCompany()) {
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrNpsUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsUpdateStandardScheme getScheme() {
      return new HrNpsUpdateStandardScheme();
    }
  }

  private static class HrNpsUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrNpsUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrNpsUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_id = iprot.readI32();
              struct.setUser_idIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_date = iprot.readString();
              struct.setStart_dateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_date = iprot.readString();
              struct.setEnd_dateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.intention = iprot.readByte();
              struct.setIntentionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCEPT_CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.accept_contact = iprot.readByte();
              struct.setAccept_contactIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company = iprot.readString();
              struct.setCompanyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrNpsUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUser_id()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.start_date != null) {
        if (struct.isSetStart_date()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.start_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_date != null) {
        if (struct.isSetEnd_date()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.end_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntention()) {
        oprot.writeFieldBegin(INTENTION_FIELD_DESC);
        oprot.writeByte(struct.intention);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccept_contact()) {
        oprot.writeFieldBegin(ACCEPT_CONTACT_FIELD_DESC);
        oprot.writeByte(struct.accept_contact);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.company != null) {
        if (struct.isSetCompany()) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrNpsUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsUpdateTupleScheme getScheme() {
      return new HrNpsUpdateTupleScheme();
    }
  }

  private static class HrNpsUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrNpsUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrNpsUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser_id()) {
        optionals.set(0);
      }
      if (struct.isSetStart_date()) {
        optionals.set(1);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(2);
      }
      if (struct.isSetIntention()) {
        optionals.set(3);
      }
      if (struct.isSetAccept_contact()) {
        optionals.set(4);
      }
      if (struct.isSetUsername()) {
        optionals.set(5);
      }
      if (struct.isSetMobile()) {
        optionals.set(6);
      }
      if (struct.isSetCompany()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUser_id()) {
        oprot.writeI32(struct.user_id);
      }
      if (struct.isSetStart_date()) {
        oprot.writeString(struct.start_date);
      }
      if (struct.isSetEnd_date()) {
        oprot.writeString(struct.end_date);
      }
      if (struct.isSetIntention()) {
        oprot.writeByte(struct.intention);
      }
      if (struct.isSetAccept_contact()) {
        oprot.writeByte(struct.accept_contact);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCompany()) {
        oprot.writeString(struct.company);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrNpsUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.user_id = iprot.readI32();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.start_date = iprot.readString();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.end_date = iprot.readString();
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intention = iprot.readByte();
        struct.setIntentionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accept_contact = iprot.readByte();
        struct.setAccept_contactIsSet(true);
      }
      if (incoming.get(5)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(7)) {
        struct.company = iprot.readString();
        struct.setCompanyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

