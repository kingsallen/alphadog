/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-04")
public class HrHbScratchCardDO implements org.apache.thrift.TBase<HrHbScratchCardDO, HrHbScratchCardDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbScratchCardDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbScratchCardDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CARDNO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardno", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_config_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BAGGING_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("bagging_openid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HB_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_item_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("tips", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbScratchCardPojoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbScratchCardPojoTupleSchemeFactory();

  public int id; // optional
  public int wechat_id; // optional
  public java.lang.String cardno; // optional
  public int status; // optional
  public double amount; // optional
  public int hb_config_id; // optional
  public java.lang.String bagging_openid; // optional
  public java.lang.String create_time; // optional
  public int hb_item_id; // optional
  public int tips; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    WECHAT_ID((short)2, "wechat_id"),
    CARDNO((short)3, "cardno"),
    STATUS((short)4, "status"),
    AMOUNT((short)5, "amount"),
    HB_CONFIG_ID((short)6, "hb_config_id"),
    BAGGING_OPENID((short)7, "bagging_openid"),
    CREATE_TIME((short)8, "create_time"),
    HB_ITEM_ID((short)9, "hb_item_id"),
    TIPS((short)10, "tips");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // WECHAT_ID
          return WECHAT_ID;
        case 3: // CARDNO
          return CARDNO;
        case 4: // STATUS
          return STATUS;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // HB_CONFIG_ID
          return HB_CONFIG_ID;
        case 7: // BAGGING_OPENID
          return BAGGING_OPENID;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // HB_ITEM_ID
          return HB_ITEM_ID;
        case 10: // TIPS
          return TIPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WECHAT_ID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __AMOUNT_ISSET_ID = 3;
  private static final int __HB_CONFIG_ID_ISSET_ID = 4;
  private static final int __HB_ITEM_ID_ISSET_ID = 5;
  private static final int __TIPS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.WECHAT_ID,_Fields.CARDNO,_Fields.STATUS,_Fields.AMOUNT,_Fields.HB_CONFIG_ID,_Fields.BAGGING_OPENID,_Fields.CREATE_TIME,_Fields.HB_ITEM_ID,_Fields.TIPS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechat_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARDNO, new org.apache.thrift.meta_data.FieldMetaData("cardno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hb_config_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAGGING_OPENID, new org.apache.thrift.meta_data.FieldMetaData("bagging_openid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.HB_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("hb_item_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIPS, new org.apache.thrift.meta_data.FieldMetaData("tips", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbScratchCardDO.class, metaDataMap);
  }

  public HrHbScratchCardDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbScratchCardDO(HrHbScratchCardDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.wechat_id = other.wechat_id;
    if (other.isSetCardno()) {
      this.cardno = other.cardno;
    }
    this.status = other.status;
    this.amount = other.amount;
    this.hb_config_id = other.hb_config_id;
    if (other.isSetBagging_openid()) {
      this.bagging_openid = other.bagging_openid;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    this.hb_item_id = other.hb_item_id;
    this.tips = other.tips;
  }

  public HrHbScratchCardDO deepCopy() {
    return new HrHbScratchCardDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setWechat_idIsSet(false);
    this.wechat_id = 0;
    this.cardno = null;
    setStatusIsSet(false);
    this.status = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setHb_config_idIsSet(false);
    this.hb_config_id = 0;
    this.bagging_openid = null;
    this.create_time = null;
    setHb_item_idIsSet(false);
    this.hb_item_id = 0;
    setTipsIsSet(false);
    this.tips = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbScratchCardDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getWechat_id() {
    return this.wechat_id;
  }

  public HrHbScratchCardDO setWechat_id(int wechat_id) {
    this.wechat_id = wechat_id;
    setWechat_idIsSet(true);
    return this;
  }

  public void unsetWechat_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  /** Returns true if field wechat_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  public void setWechat_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHAT_ID_ISSET_ID, value);
  }

  public java.lang.String getCardno() {
    return this.cardno;
  }

  public HrHbScratchCardDO setCardno(java.lang.String cardno) {
    this.cardno = cardno;
    return this;
  }

  public void unsetCardno() {
    this.cardno = null;
  }

  /** Returns true if field cardno is set (has been assigned a value) and false otherwise */
  public boolean isSetCardno() {
    return this.cardno != null;
  }

  public void setCardnoIsSet(boolean value) {
    if (!value) {
      this.cardno = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public HrHbScratchCardDO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public HrHbScratchCardDO setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getHb_config_id() {
    return this.hb_config_id;
  }

  public HrHbScratchCardDO setHb_config_id(int hb_config_id) {
    this.hb_config_id = hb_config_id;
    setHb_config_idIsSet(true);
    return this;
  }

  public void unsetHb_config_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
  }

  /** Returns true if field hb_config_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHb_config_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
  }

  public void setHb_config_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID, value);
  }

  public java.lang.String getBagging_openid() {
    return this.bagging_openid;
  }

  public HrHbScratchCardDO setBagging_openid(java.lang.String bagging_openid) {
    this.bagging_openid = bagging_openid;
    return this;
  }

  public void unsetBagging_openid() {
    this.bagging_openid = null;
  }

  /** Returns true if field bagging_openid is set (has been assigned a value) and false otherwise */
  public boolean isSetBagging_openid() {
    return this.bagging_openid != null;
  }

  public void setBagging_openidIsSet(boolean value) {
    if (!value) {
      this.bagging_openid = null;
    }
  }

  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public HrHbScratchCardDO setCreate_time(java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public int getHb_item_id() {
    return this.hb_item_id;
  }

  public HrHbScratchCardDO setHb_item_id(int hb_item_id) {
    this.hb_item_id = hb_item_id;
    setHb_item_idIsSet(true);
    return this;
  }

  public void unsetHb_item_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_ITEM_ID_ISSET_ID);
  }

  /** Returns true if field hb_item_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHb_item_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_ITEM_ID_ISSET_ID);
  }

  public void setHb_item_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_ITEM_ID_ISSET_ID, value);
  }

  public int getTips() {
    return this.tips;
  }

  public HrHbScratchCardDO setTips(int tips) {
    this.tips = tips;
    setTipsIsSet(true);
    return this;
  }

  public void unsetTips() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIPS_ISSET_ID);
  }

  /** Returns true if field tips is set (has been assigned a value) and false otherwise */
  public boolean isSetTips() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIPS_ISSET_ID);
  }

  public void setTipsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechat_id();
      } else {
        setWechat_id((java.lang.Integer)value);
      }
      break;

    case CARDNO:
      if (value == null) {
        unsetCardno();
      } else {
        setCardno((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((java.lang.Double)value);
      }
      break;

    case HB_CONFIG_ID:
      if (value == null) {
        unsetHb_config_id();
      } else {
        setHb_config_id((java.lang.Integer)value);
      }
      break;

    case BAGGING_OPENID:
      if (value == null) {
        unsetBagging_openid();
      } else {
        setBagging_openid((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case HB_ITEM_ID:
      if (value == null) {
        unsetHb_item_id();
      } else {
        setHb_item_id((java.lang.Integer)value);
      }
      break;

    case TIPS:
      if (value == null) {
        unsetTips();
      } else {
        setTips((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case WECHAT_ID:
      return getWechat_id();

    case CARDNO:
      return getCardno();

    case STATUS:
      return getStatus();

    case AMOUNT:
      return getAmount();

    case HB_CONFIG_ID:
      return getHb_config_id();

    case BAGGING_OPENID:
      return getBagging_openid();

    case CREATE_TIME:
      return getCreate_time();

    case HB_ITEM_ID:
      return getHb_item_id();

    case TIPS:
      return getTips();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case WECHAT_ID:
      return isSetWechat_id();
    case CARDNO:
      return isSetCardno();
    case STATUS:
      return isSetStatus();
    case AMOUNT:
      return isSetAmount();
    case HB_CONFIG_ID:
      return isSetHb_config_id();
    case BAGGING_OPENID:
      return isSetBagging_openid();
    case CREATE_TIME:
      return isSetCreate_time();
    case HB_ITEM_ID:
      return isSetHb_item_id();
    case TIPS:
      return isSetTips();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbScratchCardDO)
      return this.equals((HrHbScratchCardDO)that);
    return false;
  }

  public boolean equals(HrHbScratchCardDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_wechat_id = true && this.isSetWechat_id();
    boolean that_present_wechat_id = true && that.isSetWechat_id();
    if (this_present_wechat_id || that_present_wechat_id) {
      if (!(this_present_wechat_id && that_present_wechat_id))
        return false;
      if (this.wechat_id != that.wechat_id)
        return false;
    }

    boolean this_present_cardno = true && this.isSetCardno();
    boolean that_present_cardno = true && that.isSetCardno();
    if (this_present_cardno || that_present_cardno) {
      if (!(this_present_cardno && that_present_cardno))
        return false;
      if (!this.cardno.equals(that.cardno))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_hb_config_id = true && this.isSetHb_config_id();
    boolean that_present_hb_config_id = true && that.isSetHb_config_id();
    if (this_present_hb_config_id || that_present_hb_config_id) {
      if (!(this_present_hb_config_id && that_present_hb_config_id))
        return false;
      if (this.hb_config_id != that.hb_config_id)
        return false;
    }

    boolean this_present_bagging_openid = true && this.isSetBagging_openid();
    boolean that_present_bagging_openid = true && that.isSetBagging_openid();
    if (this_present_bagging_openid || that_present_bagging_openid) {
      if (!(this_present_bagging_openid && that_present_bagging_openid))
        return false;
      if (!this.bagging_openid.equals(that.bagging_openid))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_hb_item_id = true && this.isSetHb_item_id();
    boolean that_present_hb_item_id = true && that.isSetHb_item_id();
    if (this_present_hb_item_id || that_present_hb_item_id) {
      if (!(this_present_hb_item_id && that_present_hb_item_id))
        return false;
      if (this.hb_item_id != that.hb_item_id)
        return false;
    }

    boolean this_present_tips = true && this.isSetTips();
    boolean that_present_tips = true && that.isSetTips();
    if (this_present_tips || that_present_tips) {
      if (!(this_present_tips && that_present_tips))
        return false;
      if (this.tips != that.tips)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetWechat_id()) ? 131071 : 524287);
    if (isSetWechat_id())
      hashCode = hashCode * 8191 + wechat_id;

    hashCode = hashCode * 8191 + ((isSetCardno()) ? 131071 : 524287);
    if (isSetCardno())
      hashCode = hashCode * 8191 + cardno.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    hashCode = hashCode * 8191 + ((isSetHb_config_id()) ? 131071 : 524287);
    if (isSetHb_config_id())
      hashCode = hashCode * 8191 + hb_config_id;

    hashCode = hashCode * 8191 + ((isSetBagging_openid()) ? 131071 : 524287);
    if (isSetBagging_openid())
      hashCode = hashCode * 8191 + bagging_openid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetHb_item_id()) ? 131071 : 524287);
    if (isSetHb_item_id())
      hashCode = hashCode * 8191 + hb_item_id;

    hashCode = hashCode * 8191 + ((isSetTips()) ? 131071 : 524287);
    if (isSetTips())
      hashCode = hashCode * 8191 + tips;

    return hashCode;
  }

  @Override
  public int compareTo(HrHbScratchCardDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechat_id()).compareTo(other.isSetWechat_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat_id, other.wechat_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardno()).compareTo(other.isSetCardno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardno, other.cardno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHb_config_id()).compareTo(other.isSetHb_config_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHb_config_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_config_id, other.hb_config_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBagging_openid()).compareTo(other.isSetBagging_openid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBagging_openid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bagging_openid, other.bagging_openid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHb_item_id()).compareTo(other.isSetHb_item_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHb_item_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_item_id, other.hb_item_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTips()).compareTo(other.isSetTips());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTips()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tips, other.tips);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrHbScratchCardDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetWechat_id()) {
      if (!first) sb.append(", ");
      sb.append("wechat_id:");
      sb.append(this.wechat_id);
      first = false;
    }
    if (isSetCardno()) {
      if (!first) sb.append(", ");
      sb.append("cardno:");
      if (this.cardno == null) {
        sb.append("null");
      } else {
        sb.append(this.cardno);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetHb_config_id()) {
      if (!first) sb.append(", ");
      sb.append("hb_config_id:");
      sb.append(this.hb_config_id);
      first = false;
    }
    if (isSetBagging_openid()) {
      if (!first) sb.append(", ");
      sb.append("bagging_openid:");
      if (this.bagging_openid == null) {
        sb.append("null");
      } else {
        sb.append(this.bagging_openid);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetHb_item_id()) {
      if (!first) sb.append(", ");
      sb.append("hb_item_id:");
      sb.append(this.hb_item_id);
      first = false;
    }
    if (isSetTips()) {
      if (!first) sb.append(", ");
      sb.append("tips:");
      sb.append(this.tips);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbScratchCardPojoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbScratchCardPojoStandardScheme getScheme() {
      return new HrHbScratchCardPojoStandardScheme();
    }
  }

  private static class HrHbScratchCardPojoStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbScratchCardDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechat_id = iprot.readI32();
              struct.setWechat_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CARDNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardno = iprot.readString();
              struct.setCardnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HB_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hb_config_id = iprot.readI32();
              struct.setHb_config_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BAGGING_OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bagging_openid = iprot.readString();
              struct.setBagging_openidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HB_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hb_item_id = iprot.readI32();
              struct.setHb_item_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tips = iprot.readI32();
              struct.setTipsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechat_id()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechat_id);
        oprot.writeFieldEnd();
      }
      if (struct.cardno != null) {
        if (struct.isSetCardno()) {
          oprot.writeFieldBegin(CARDNO_FIELD_DESC);
          oprot.writeString(struct.cardno);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHb_config_id()) {
        oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.hb_config_id);
        oprot.writeFieldEnd();
      }
      if (struct.bagging_openid != null) {
        if (struct.isSetBagging_openid()) {
          oprot.writeFieldBegin(BAGGING_OPENID_FIELD_DESC);
          oprot.writeString(struct.bagging_openid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHb_item_id()) {
        oprot.writeFieldBegin(HB_ITEM_ID_FIELD_DESC);
        oprot.writeI32(struct.hb_item_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTips()) {
        oprot.writeFieldBegin(TIPS_FIELD_DESC);
        oprot.writeI32(struct.tips);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbScratchCardPojoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbScratchCardPojoTupleScheme getScheme() {
      return new HrHbScratchCardPojoTupleScheme();
    }
  }

  private static class HrHbScratchCardPojoTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbScratchCardDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetWechat_id()) {
        optionals.set(1);
      }
      if (struct.isSetCardno()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetHb_config_id()) {
        optionals.set(5);
      }
      if (struct.isSetBagging_openid()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(7);
      }
      if (struct.isSetHb_item_id()) {
        optionals.set(8);
      }
      if (struct.isSetTips()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWechat_id()) {
        oprot.writeI32(struct.wechat_id);
      }
      if (struct.isSetCardno()) {
        oprot.writeString(struct.cardno);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetHb_config_id()) {
        oprot.writeI32(struct.hb_config_id);
      }
      if (struct.isSetBagging_openid()) {
        oprot.writeString(struct.bagging_openid);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetHb_item_id()) {
        oprot.writeI32(struct.hb_item_id);
      }
      if (struct.isSetTips()) {
        oprot.writeI32(struct.tips);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wechat_id = iprot.readI32();
        struct.setWechat_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cardno = iprot.readString();
        struct.setCardnoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hb_config_id = iprot.readI32();
        struct.setHb_config_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bagging_openid = iprot.readString();
        struct.setBagging_openidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hb_item_id = iprot.readI32();
        struct.setHb_item_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tips = iprot.readI32();
        struct.setTipsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

