/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.referral.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-22")
public class ReferralService {

    public interface Iface {

        public com.moseeker.thrift.gen.referral.struct.RedPackets getRedPackets(int userId, int companyId, int pageNum, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.referral.struct.BonusList getBonus(int userId, int companyId, int pageNum, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> getReferralProfileList(int userId, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void updateActivity(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> getReferralReason(int userId, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void handerKeyInformationStatus(int companyId, int keyInformation) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public int fetchKeyInformationStatus(int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String getRadarCards(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String inviteApplication(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String ignoreCurrentViewer(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String connectRadar(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void addUserSeekRecommend(int companyId, int userId, int postUserId, int positionId, int origin) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void employeeReferralReason(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.referral.struct.ContactPushInfo fetchSeekRecommend(int companyId, int referralId, int postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String checkEmployee(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void saveTenMinuteCandidateShareChain(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String getProgressByOne(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String getProgressBatch(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public java.lang.String progressQueryKeyword(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void employeeReferralRecomEvaluation(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public int checkSeekReferral(int userId, int presenteeId, int positionId, int companyId, int parentChainId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getRedPackets(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets> resultHandler) throws org.apache.thrift.TException;

        public void getBonus(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList> resultHandler) throws org.apache.thrift.TException;

        public void getReferralProfileList(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> resultHandler) throws org.apache.thrift.TException;

        public void updateActivity(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void getReferralReason(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> resultHandler) throws org.apache.thrift.TException;

        public void handerKeyInformationStatus(int companyId, int keyInformation, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void fetchKeyInformationStatus(int companyId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void getRadarCards(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void inviteApplication(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void ignoreCurrentViewer(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void connectRadar(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void addUserSeekRecommend(int companyId, int userId, int postUserId, int positionId, int origin, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void employeeReferralReason(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void fetchSeekRecommend(int companyId, int referralId, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> resultHandler) throws org.apache.thrift.TException;

        public void checkEmployee(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void saveTenMinuteCandidateShareChain(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void getProgressByOne(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void getProgressBatch(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void progressQueryKeyword(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void employeeReferralRecomEvaluation(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void checkSeekReferral(int userId, int presenteeId, int positionId, int companyId, int parentChainId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.referral.struct.RedPackets getRedPackets(int userId, int companyId, int pageNum, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRedPackets(userId, companyId, pageNum, pageSize);
            return recv_getRedPackets();
        }

        public void send_getRedPackets(int userId, int companyId, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            getRedPackets_args args = new getRedPackets_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setPageNum(pageNum);
            args.setPageSize(pageSize);
            sendBase("getRedPackets", args);
        }

        public com.moseeker.thrift.gen.referral.struct.RedPackets recv_getRedPackets() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRedPackets_result result = new getRedPackets_result();
            receiveBase(result, "getRedPackets");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRedPackets failed: unknown result");
        }

        public com.moseeker.thrift.gen.referral.struct.BonusList getBonus(int userId, int companyId, int pageNum, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getBonus(userId, companyId, pageNum, pageSize);
            return recv_getBonus();
        }

        public void send_getBonus(int userId, int companyId, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            getBonus_args args = new getBonus_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setPageNum(pageNum);
            args.setPageSize(pageSize);
            sendBase("getBonus", args);
        }

        public com.moseeker.thrift.gen.referral.struct.BonusList recv_getBonus() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getBonus_result result = new getBonus_result();
            receiveBase(result, "getBonus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBonus failed: unknown result");
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> getReferralProfileList(int userId, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getReferralProfileList(userId, companyId, hrId);
            return recv_getReferralProfileList();
        }

        public void send_getReferralProfileList(int userId, int companyId, int hrId) throws org.apache.thrift.TException
        {
            getReferralProfileList_args args = new getReferralProfileList_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setHrId(hrId);
            sendBase("getReferralProfileList", args);
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> recv_getReferralProfileList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getReferralProfileList_result result = new getReferralProfileList_result();
            receiveBase(result, "getReferralProfileList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReferralProfileList failed: unknown result");
        }

        public void updateActivity(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateActivity(activityDTO);
            recv_updateActivity();
        }

        public void send_updateActivity(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO) throws org.apache.thrift.TException
        {
            updateActivity_args args = new updateActivity_args();
            args.setActivityDTO(activityDTO);
            sendBase("updateActivity", args);
        }

        public void recv_updateActivity() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateActivity_result result = new updateActivity_result();
            receiveBase(result, "updateActivity");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> getReferralReason(int userId, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getReferralReason(userId, companyId, hrId);
            return recv_getReferralReason();
        }

        public void send_getReferralReason(int userId, int companyId, int hrId) throws org.apache.thrift.TException
        {
            getReferralReason_args args = new getReferralReason_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setHrId(hrId);
            sendBase("getReferralReason", args);
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> recv_getReferralReason() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getReferralReason_result result = new getReferralReason_result();
            receiveBase(result, "getReferralReason");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReferralReason failed: unknown result");
        }

        public void handerKeyInformationStatus(int companyId, int keyInformation) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handerKeyInformationStatus(companyId, keyInformation);
            recv_handerKeyInformationStatus();
        }

        public void send_handerKeyInformationStatus(int companyId, int keyInformation) throws org.apache.thrift.TException
        {
            handerKeyInformationStatus_args args = new handerKeyInformationStatus_args();
            args.setCompanyId(companyId);
            args.setKeyInformation(keyInformation);
            sendBase("handerKeyInformationStatus", args);
        }

        public void recv_handerKeyInformationStatus() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handerKeyInformationStatus_result result = new handerKeyInformationStatus_result();
            receiveBase(result, "handerKeyInformationStatus");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public int fetchKeyInformationStatus(int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_fetchKeyInformationStatus(companyId);
            return recv_fetchKeyInformationStatus();
        }

        public void send_fetchKeyInformationStatus(int companyId) throws org.apache.thrift.TException
        {
            fetchKeyInformationStatus_args args = new fetchKeyInformationStatus_args();
            args.setCompanyId(companyId);
            sendBase("fetchKeyInformationStatus", args);
        }

        public int recv_fetchKeyInformationStatus() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            fetchKeyInformationStatus_result result = new fetchKeyInformationStatus_result();
            receiveBase(result, "fetchKeyInformationStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchKeyInformationStatus failed: unknown result");
        }

        public java.lang.String getRadarCards(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRadarCards(cardInfo);
            return recv_getRadarCards();
        }

        public void send_getRadarCards(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws org.apache.thrift.TException
        {
            getRadarCards_args args = new getRadarCards_args();
            args.setCardInfo(cardInfo);
            sendBase("getRadarCards", args);
        }

        public java.lang.String recv_getRadarCards() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRadarCards_result result = new getRadarCards_result();
            receiveBase(result, "getRadarCards");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRadarCards failed: unknown result");
        }

        public java.lang.String inviteApplication(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_inviteApplication(inviteInfo);
            return recv_inviteApplication();
        }

        public void send_inviteApplication(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo) throws org.apache.thrift.TException
        {
            inviteApplication_args args = new inviteApplication_args();
            args.setInviteInfo(inviteInfo);
            sendBase("inviteApplication", args);
        }

        public java.lang.String recv_inviteApplication() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            inviteApplication_result result = new inviteApplication_result();
            receiveBase(result, "inviteApplication");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inviteApplication failed: unknown result");
        }

        public java.lang.String ignoreCurrentViewer(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_ignoreCurrentViewer(ignoreInfo);
            return recv_ignoreCurrentViewer();
        }

        public void send_ignoreCurrentViewer(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo) throws org.apache.thrift.TException
        {
            ignoreCurrentViewer_args args = new ignoreCurrentViewer_args();
            args.setIgnoreInfo(ignoreInfo);
            sendBase("ignoreCurrentViewer", args);
        }

        public java.lang.String recv_ignoreCurrentViewer() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            ignoreCurrentViewer_result result = new ignoreCurrentViewer_result();
            receiveBase(result, "ignoreCurrentViewer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ignoreCurrentViewer failed: unknown result");
        }

        public java.lang.String connectRadar(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_connectRadar(radarInfo);
            return recv_connectRadar();
        }

        public void send_connectRadar(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo) throws org.apache.thrift.TException
        {
            connectRadar_args args = new connectRadar_args();
            args.setRadarInfo(radarInfo);
            sendBase("connectRadar", args);
        }

        public java.lang.String recv_connectRadar() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            connectRadar_result result = new connectRadar_result();
            receiveBase(result, "connectRadar");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connectRadar failed: unknown result");
        }

        public void addUserSeekRecommend(int companyId, int userId, int postUserId, int positionId, int origin) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addUserSeekRecommend(companyId, userId, postUserId, positionId, origin);
            recv_addUserSeekRecommend();
        }

        public void send_addUserSeekRecommend(int companyId, int userId, int postUserId, int positionId, int origin) throws org.apache.thrift.TException
        {
            addUserSeekRecommend_args args = new addUserSeekRecommend_args();
            args.setCompanyId(companyId);
            args.setUserId(userId);
            args.setPostUserId(postUserId);
            args.setPositionId(positionId);
            args.setOrigin(origin);
            sendBase("addUserSeekRecommend", args);
        }

        public void recv_addUserSeekRecommend() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addUserSeekRecommend_result result = new addUserSeekRecommend_result();
            receiveBase(result, "addUserSeekRecommend");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void employeeReferralReason(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_employeeReferralReason(companyId, postUserId, positionId, referralId, referralReasons, relationship, recomReasonText);
            recv_employeeReferralReason();
        }

        public void send_employeeReferralReason(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws org.apache.thrift.TException
        {
            employeeReferralReason_args args = new employeeReferralReason_args();
            args.setCompanyId(companyId);
            args.setPostUserId(postUserId);
            args.setPositionId(positionId);
            args.setReferralId(referralId);
            args.setReferralReasons(referralReasons);
            args.setRelationship(relationship);
            args.setRecomReasonText(recomReasonText);
            sendBase("employeeReferralReason", args);
        }

        public void recv_employeeReferralReason() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            employeeReferralReason_result result = new employeeReferralReason_result();
            receiveBase(result, "employeeReferralReason");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public com.moseeker.thrift.gen.referral.struct.ContactPushInfo fetchSeekRecommend(int companyId, int referralId, int postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_fetchSeekRecommend(companyId, referralId, postUserId);
            return recv_fetchSeekRecommend();
        }

        public void send_fetchSeekRecommend(int companyId, int referralId, int postUserId) throws org.apache.thrift.TException
        {
            fetchSeekRecommend_args args = new fetchSeekRecommend_args();
            args.setCompanyId(companyId);
            args.setReferralId(referralId);
            args.setPostUserId(postUserId);
            sendBase("fetchSeekRecommend", args);
        }

        public com.moseeker.thrift.gen.referral.struct.ContactPushInfo recv_fetchSeekRecommend() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            fetchSeekRecommend_result result = new fetchSeekRecommend_result();
            receiveBase(result, "fetchSeekRecommend");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchSeekRecommend failed: unknown result");
        }

        public java.lang.String checkEmployee(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_checkEmployee(checkInfo);
            return recv_checkEmployee();
        }

        public void send_checkEmployee(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo) throws org.apache.thrift.TException
        {
            checkEmployee_args args = new checkEmployee_args();
            args.setCheckInfo(checkInfo);
            sendBase("checkEmployee", args);
        }

        public java.lang.String recv_checkEmployee() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            checkEmployee_result result = new checkEmployee_result();
            receiveBase(result, "checkEmployee");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkEmployee failed: unknown result");
        }

        public void saveTenMinuteCandidateShareChain(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_saveTenMinuteCandidateShareChain(cardInfo);
            recv_saveTenMinuteCandidateShareChain();
        }

        public void send_saveTenMinuteCandidateShareChain(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) throws org.apache.thrift.TException
        {
            saveTenMinuteCandidateShareChain_args args = new saveTenMinuteCandidateShareChain_args();
            args.setCardInfo(cardInfo);
            sendBase("saveTenMinuteCandidateShareChain", args);
        }

        public void recv_saveTenMinuteCandidateShareChain() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            saveTenMinuteCandidateShareChain_result result = new saveTenMinuteCandidateShareChain_result();
            receiveBase(result, "saveTenMinuteCandidateShareChain");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public java.lang.String getProgressByOne(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProgressByOne(progressQuery);
            return recv_getProgressByOne();
        }

        public void send_getProgressByOne(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery) throws org.apache.thrift.TException
        {
            getProgressByOne_args args = new getProgressByOne_args();
            args.setProgressQuery(progressQuery);
            sendBase("getProgressByOne", args);
        }

        public java.lang.String recv_getProgressByOne() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProgressByOne_result result = new getProgressByOne_result();
            receiveBase(result, "getProgressByOne");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProgressByOne failed: unknown result");
        }

        public java.lang.String getProgressBatch(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProgressBatch(progressInfo);
            return recv_getProgressBatch();
        }

        public void send_getProgressBatch(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws org.apache.thrift.TException
        {
            getProgressBatch_args args = new getProgressBatch_args();
            args.setProgressInfo(progressInfo);
            sendBase("getProgressBatch", args);
        }

        public java.lang.String recv_getProgressBatch() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProgressBatch_result result = new getProgressBatch_result();
            receiveBase(result, "getProgressBatch");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProgressBatch failed: unknown result");
        }

        public java.lang.String progressQueryKeyword(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_progressQueryKeyword(progressInfo);
            return recv_progressQueryKeyword();
        }

        public void send_progressQueryKeyword(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) throws org.apache.thrift.TException
        {
            progressQueryKeyword_args args = new progressQueryKeyword_args();
            args.setProgressInfo(progressInfo);
            sendBase("progressQueryKeyword", args);
        }

        public java.lang.String recv_progressQueryKeyword() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            progressQueryKeyword_result result = new progressQueryKeyword_result();
            receiveBase(result, "progressQueryKeyword");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "progressQueryKeyword failed: unknown result");
        }

        public void employeeReferralRecomEvaluation(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_employeeReferralRecomEvaluation(companyId, postUserId, positionId, presenteeId, referralReasons, relationship, recomReasonText);
            recv_employeeReferralRecomEvaluation();
        }

        public void send_employeeReferralRecomEvaluation(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText) throws org.apache.thrift.TException
        {
            employeeReferralRecomEvaluation_args args = new employeeReferralRecomEvaluation_args();
            args.setCompanyId(companyId);
            args.setPostUserId(postUserId);
            args.setPositionId(positionId);
            args.setPresenteeId(presenteeId);
            args.setReferralReasons(referralReasons);
            args.setRelationship(relationship);
            args.setRecomReasonText(recomReasonText);
            sendBase("employeeReferralRecomEvaluation", args);
        }

        public void recv_employeeReferralRecomEvaluation() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            employeeReferralRecomEvaluation_result result = new employeeReferralRecomEvaluation_result();
            receiveBase(result, "employeeReferralRecomEvaluation");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public int checkSeekReferral(int userId, int presenteeId, int positionId, int companyId, int parentChainId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_checkSeekReferral(userId, presenteeId, positionId, companyId, parentChainId);
            return recv_checkSeekReferral();
        }

        public void send_checkSeekReferral(int userId, int presenteeId, int positionId, int companyId, int parentChainId) throws org.apache.thrift.TException
        {
            checkSeekReferral_args args = new checkSeekReferral_args();
            args.setUserId(userId);
            args.setPresenteeId(presenteeId);
            args.setPositionId(positionId);
            args.setCompanyId(companyId);
            args.setParentChainId(parentChainId);
            sendBase("checkSeekReferral", args);
        }

        public int recv_checkSeekReferral() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            checkSeekReferral_result result = new checkSeekReferral_result();
            receiveBase(result, "checkSeekReferral");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkSeekReferral failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getRedPackets(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRedPackets_call method_call = new getRedPackets_call(userId, companyId, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRedPackets_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.referral.struct.RedPackets> {
            private int userId;
            private int companyId;
            private int pageNum;
            private int pageSize;
            public getRedPackets_call(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.pageNum = pageNum;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRedPackets", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRedPackets_args args = new getRedPackets_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setPageNum(pageNum);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.referral.struct.RedPackets getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRedPackets();
            }
        }

        public void getBonus(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getBonus_call method_call = new getBonus_call(userId, companyId, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getBonus_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.referral.struct.BonusList> {
            private int userId;
            private int companyId;
            private int pageNum;
            private int pageSize;
            public getBonus_call(int userId, int companyId, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.pageNum = pageNum;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBonus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getBonus_args args = new getBonus_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setPageNum(pageNum);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.referral.struct.BonusList getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBonus();
            }
        }

        public void getReferralProfileList(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getReferralProfileList_call method_call = new getReferralProfileList_call(userId, companyId, hrId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getReferralProfileList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> {
            private int userId;
            private int companyId;
            private int hrId;
            public getReferralProfileList_call(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.hrId = hrId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReferralProfileList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getReferralProfileList_args args = new getReferralProfileList_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setHrId(hrId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getReferralProfileList();
            }
        }

        public void updateActivity(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateActivity_call method_call = new updateActivity_call(activityDTO, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateActivity_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO;
            public updateActivity_call(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.activityDTO = activityDTO;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActivity", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateActivity_args args = new updateActivity_args();
                args.setActivityDTO(activityDTO);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void getReferralReason(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getReferralReason_call method_call = new getReferralReason_call(userId, companyId, hrId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getReferralReason_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> {
            private int userId;
            private int companyId;
            private int hrId;
            public getReferralReason_call(int userId, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.hrId = hrId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReferralReason", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getReferralReason_args args = new getReferralReason_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setHrId(hrId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getReferralReason();
            }
        }

        public void handerKeyInformationStatus(int companyId, int keyInformation, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handerKeyInformationStatus_call method_call = new handerKeyInformationStatus_call(companyId, keyInformation, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handerKeyInformationStatus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int companyId;
            private int keyInformation;
            public handerKeyInformationStatus_call(int companyId, int keyInformation, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.keyInformation = keyInformation;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handerKeyInformationStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handerKeyInformationStatus_args args = new handerKeyInformationStatus_args();
                args.setCompanyId(companyId);
                args.setKeyInformation(keyInformation);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void fetchKeyInformationStatus(int companyId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fetchKeyInformationStatus_call method_call = new fetchKeyInformationStatus_call(companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class fetchKeyInformationStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private int companyId;
            public fetchKeyInformationStatus_call(int companyId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchKeyInformationStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fetchKeyInformationStatus_args args = new fetchKeyInformationStatus_args();
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_fetchKeyInformationStatus();
            }
        }

        public void getRadarCards(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRadarCards_call method_call = new getRadarCards_call(cardInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRadarCards_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo;
            public getRadarCards_call(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cardInfo = cardInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRadarCards", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRadarCards_args args = new getRadarCards_args();
                args.setCardInfo(cardInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRadarCards();
            }
        }

        public void inviteApplication(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            inviteApplication_call method_call = new inviteApplication_call(inviteInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class inviteApplication_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo;
            public inviteApplication_call(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.inviteInfo = inviteInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inviteApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
                inviteApplication_args args = new inviteApplication_args();
                args.setInviteInfo(inviteInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_inviteApplication();
            }
        }

        public void ignoreCurrentViewer(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ignoreCurrentViewer_call method_call = new ignoreCurrentViewer_call(ignoreInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ignoreCurrentViewer_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo;
            public ignoreCurrentViewer_call(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ignoreInfo = ignoreInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ignoreCurrentViewer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ignoreCurrentViewer_args args = new ignoreCurrentViewer_args();
                args.setIgnoreInfo(ignoreInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ignoreCurrentViewer();
            }
        }

        public void connectRadar(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            connectRadar_call method_call = new connectRadar_call(radarInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class connectRadar_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo;
            public connectRadar_call(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.radarInfo = radarInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connectRadar", org.apache.thrift.protocol.TMessageType.CALL, 0));
                connectRadar_args args = new connectRadar_args();
                args.setRadarInfo(radarInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_connectRadar();
            }
        }

        public void addUserSeekRecommend(int companyId, int userId, int postUserId, int positionId, int origin, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addUserSeekRecommend_call method_call = new addUserSeekRecommend_call(companyId, userId, postUserId, positionId, origin, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addUserSeekRecommend_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int companyId;
            private int userId;
            private int postUserId;
            private int positionId;
            private int origin;
            public addUserSeekRecommend_call(int companyId, int userId, int postUserId, int positionId, int origin, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.userId = userId;
                this.postUserId = postUserId;
                this.positionId = positionId;
                this.origin = origin;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserSeekRecommend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addUserSeekRecommend_args args = new addUserSeekRecommend_args();
                args.setCompanyId(companyId);
                args.setUserId(userId);
                args.setPostUserId(postUserId);
                args.setPositionId(positionId);
                args.setOrigin(origin);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void employeeReferralReason(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            employeeReferralReason_call method_call = new employeeReferralReason_call(companyId, postUserId, positionId, referralId, referralReasons, relationship, recomReasonText, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class employeeReferralReason_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int companyId;
            private int postUserId;
            private int positionId;
            private int referralId;
            private java.util.List<java.lang.String> referralReasons;
            private byte relationship;
            private java.lang.String recomReasonText;
            public employeeReferralReason_call(int companyId, int postUserId, int positionId, int referralId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.postUserId = postUserId;
                this.positionId = positionId;
                this.referralId = referralId;
                this.referralReasons = referralReasons;
                this.relationship = relationship;
                this.recomReasonText = recomReasonText;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("employeeReferralReason", org.apache.thrift.protocol.TMessageType.CALL, 0));
                employeeReferralReason_args args = new employeeReferralReason_args();
                args.setCompanyId(companyId);
                args.setPostUserId(postUserId);
                args.setPositionId(positionId);
                args.setReferralId(referralId);
                args.setReferralReasons(referralReasons);
                args.setRelationship(relationship);
                args.setRecomReasonText(recomReasonText);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void fetchSeekRecommend(int companyId, int referralId, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fetchSeekRecommend_call method_call = new fetchSeekRecommend_call(companyId, referralId, postUserId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class fetchSeekRecommend_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> {
            private int companyId;
            private int referralId;
            private int postUserId;
            public fetchSeekRecommend_call(int companyId, int referralId, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.referralId = referralId;
                this.postUserId = postUserId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchSeekRecommend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fetchSeekRecommend_args args = new fetchSeekRecommend_args();
                args.setCompanyId(companyId);
                args.setReferralId(referralId);
                args.setPostUserId(postUserId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.referral.struct.ContactPushInfo getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_fetchSeekRecommend();
            }
        }

        public void checkEmployee(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            checkEmployee_call method_call = new checkEmployee_call(checkInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo;
            public checkEmployee_call(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.checkInfo = checkInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkEmployee_args args = new checkEmployee_args();
                args.setCheckInfo(checkInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_checkEmployee();
            }
        }

        public void saveTenMinuteCandidateShareChain(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            saveTenMinuteCandidateShareChain_call method_call = new saveTenMinuteCandidateShareChain_call(cardInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class saveTenMinuteCandidateShareChain_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo;
            public saveTenMinuteCandidateShareChain_call(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cardInfo = cardInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTenMinuteCandidateShareChain", org.apache.thrift.protocol.TMessageType.CALL, 0));
                saveTenMinuteCandidateShareChain_args args = new saveTenMinuteCandidateShareChain_args();
                args.setCardInfo(cardInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void getProgressByOne(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProgressByOne_call method_call = new getProgressByOne_call(progressQuery, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProgressByOne_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery;
            public getProgressByOne_call(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.progressQuery = progressQuery;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProgressByOne", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProgressByOne_args args = new getProgressByOne_args();
                args.setProgressQuery(progressQuery);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProgressByOne();
            }
        }

        public void getProgressBatch(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProgressBatch_call method_call = new getProgressBatch_call(progressInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProgressBatch_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo;
            public getProgressBatch_call(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.progressInfo = progressInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProgressBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProgressBatch_args args = new getProgressBatch_args();
                args.setProgressInfo(progressInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProgressBatch();
            }
        }

        public void progressQueryKeyword(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            progressQueryKeyword_call method_call = new progressQueryKeyword_call(progressInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class progressQueryKeyword_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo;
            public progressQueryKeyword_call(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.progressInfo = progressInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("progressQueryKeyword", org.apache.thrift.protocol.TMessageType.CALL, 0));
                progressQueryKeyword_args args = new progressQueryKeyword_args();
                args.setProgressInfo(progressInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_progressQueryKeyword();
            }
        }

        public void employeeReferralRecomEvaluation(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            employeeReferralRecomEvaluation_call method_call = new employeeReferralRecomEvaluation_call(companyId, postUserId, positionId, presenteeId, referralReasons, relationship, recomReasonText, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class employeeReferralRecomEvaluation_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int companyId;
            private int postUserId;
            private int positionId;
            private int presenteeId;
            private java.util.List<java.lang.String> referralReasons;
            private byte relationship;
            private java.lang.String recomReasonText;
            public employeeReferralRecomEvaluation_call(int companyId, int postUserId, int positionId, int presenteeId, java.util.List<java.lang.String> referralReasons, byte relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.postUserId = postUserId;
                this.positionId = positionId;
                this.presenteeId = presenteeId;
                this.referralReasons = referralReasons;
                this.relationship = relationship;
                this.recomReasonText = recomReasonText;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("employeeReferralRecomEvaluation", org.apache.thrift.protocol.TMessageType.CALL, 0));
                employeeReferralRecomEvaluation_args args = new employeeReferralRecomEvaluation_args();
                args.setCompanyId(companyId);
                args.setPostUserId(postUserId);
                args.setPositionId(positionId);
                args.setPresenteeId(presenteeId);
                args.setReferralReasons(referralReasons);
                args.setRelationship(relationship);
                args.setRecomReasonText(recomReasonText);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void checkSeekReferral(int userId, int presenteeId, int positionId, int companyId, int parentChainId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            checkSeekReferral_call method_call = new checkSeekReferral_call(userId, presenteeId, positionId, companyId, parentChainId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkSeekReferral_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private int userId;
            private int presenteeId;
            private int positionId;
            private int companyId;
            private int parentChainId;
            public checkSeekReferral_call(int userId, int presenteeId, int positionId, int companyId, int parentChainId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.presenteeId = presenteeId;
                this.positionId = positionId;
                this.companyId = companyId;
                this.parentChainId = parentChainId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkSeekReferral", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkSeekReferral_args args = new checkSeekReferral_args();
                args.setUserId(userId);
                args.setPresenteeId(presenteeId);
                args.setPositionId(positionId);
                args.setCompanyId(companyId);
                args.setParentChainId(parentChainId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_checkSeekReferral();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("getRedPackets", new getRedPackets());
            processMap.put("getBonus", new getBonus());
            processMap.put("getReferralProfileList", new getReferralProfileList());
            processMap.put("updateActivity", new updateActivity());
            processMap.put("getReferralReason", new getReferralReason());
            processMap.put("handerKeyInformationStatus", new handerKeyInformationStatus());
            processMap.put("fetchKeyInformationStatus", new fetchKeyInformationStatus());
            processMap.put("getRadarCards", new getRadarCards());
            processMap.put("inviteApplication", new inviteApplication());
            processMap.put("ignoreCurrentViewer", new ignoreCurrentViewer());
            processMap.put("connectRadar", new connectRadar());
            processMap.put("addUserSeekRecommend", new addUserSeekRecommend());
            processMap.put("employeeReferralReason", new employeeReferralReason());
            processMap.put("fetchSeekRecommend", new fetchSeekRecommend());
            processMap.put("checkEmployee", new checkEmployee());
            processMap.put("saveTenMinuteCandidateShareChain", new saveTenMinuteCandidateShareChain());
            processMap.put("getProgressByOne", new getProgressByOne());
            processMap.put("getProgressBatch", new getProgressBatch());
            processMap.put("progressQueryKeyword", new progressQueryKeyword());
            processMap.put("employeeReferralRecomEvaluation", new employeeReferralRecomEvaluation());
            processMap.put("checkSeekReferral", new checkSeekReferral());
            return processMap;
        }

        public static class getRedPackets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRedPackets_args> {
            public getRedPackets() {
                super("getRedPackets");
            }

            public getRedPackets_args getEmptyArgsInstance() {
                return new getRedPackets_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRedPackets_result getResult(I iface, getRedPackets_args args) throws org.apache.thrift.TException {
                getRedPackets_result result = new getRedPackets_result();
                try {
                    result.success = iface.getRedPackets(args.userId, args.companyId, args.pageNum, args.pageSize);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getBonus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBonus_args> {
            public getBonus() {
                super("getBonus");
            }

            public getBonus_args getEmptyArgsInstance() {
                return new getBonus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getBonus_result getResult(I iface, getBonus_args args) throws org.apache.thrift.TException {
                getBonus_result result = new getBonus_result();
                try {
                    result.success = iface.getBonus(args.userId, args.companyId, args.pageNum, args.pageSize);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getReferralProfileList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReferralProfileList_args> {
            public getReferralProfileList() {
                super("getReferralProfileList");
            }

            public getReferralProfileList_args getEmptyArgsInstance() {
                return new getReferralProfileList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getReferralProfileList_result getResult(I iface, getReferralProfileList_args args) throws org.apache.thrift.TException {
                getReferralProfileList_result result = new getReferralProfileList_result();
                try {
                    result.success = iface.getReferralProfileList(args.userId, args.companyId, args.hrId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateActivity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActivity_args> {
            public updateActivity() {
                super("updateActivity");
            }

            public updateActivity_args getEmptyArgsInstance() {
                return new updateActivity_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateActivity_result getResult(I iface, updateActivity_args args) throws org.apache.thrift.TException {
                updateActivity_result result = new updateActivity_result();
                try {
                    iface.updateActivity(args.activityDTO);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getReferralReason<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReferralReason_args> {
            public getReferralReason() {
                super("getReferralReason");
            }

            public getReferralReason_args getEmptyArgsInstance() {
                return new getReferralReason_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getReferralReason_result getResult(I iface, getReferralReason_args args) throws org.apache.thrift.TException {
                getReferralReason_result result = new getReferralReason_result();
                try {
                    result.success = iface.getReferralReason(args.userId, args.companyId, args.hrId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handerKeyInformationStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handerKeyInformationStatus_args> {
            public handerKeyInformationStatus() {
                super("handerKeyInformationStatus");
            }

            public handerKeyInformationStatus_args getEmptyArgsInstance() {
                return new handerKeyInformationStatus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handerKeyInformationStatus_result getResult(I iface, handerKeyInformationStatus_args args) throws org.apache.thrift.TException {
                handerKeyInformationStatus_result result = new handerKeyInformationStatus_result();
                try {
                    iface.handerKeyInformationStatus(args.companyId, args.keyInformation);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class fetchKeyInformationStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchKeyInformationStatus_args> {
            public fetchKeyInformationStatus() {
                super("fetchKeyInformationStatus");
            }

            public fetchKeyInformationStatus_args getEmptyArgsInstance() {
                return new fetchKeyInformationStatus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public fetchKeyInformationStatus_result getResult(I iface, fetchKeyInformationStatus_args args) throws org.apache.thrift.TException {
                fetchKeyInformationStatus_result result = new fetchKeyInformationStatus_result();
                try {
                    result.success = iface.fetchKeyInformationStatus(args.companyId);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getRadarCards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRadarCards_args> {
            public getRadarCards() {
                super("getRadarCards");
            }

            public getRadarCards_args getEmptyArgsInstance() {
                return new getRadarCards_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRadarCards_result getResult(I iface, getRadarCards_args args) throws org.apache.thrift.TException {
                getRadarCards_result result = new getRadarCards_result();
                try {
                    result.success = iface.getRadarCards(args.cardInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class inviteApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inviteApplication_args> {
            public inviteApplication() {
                super("inviteApplication");
            }

            public inviteApplication_args getEmptyArgsInstance() {
                return new inviteApplication_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public inviteApplication_result getResult(I iface, inviteApplication_args args) throws org.apache.thrift.TException {
                inviteApplication_result result = new inviteApplication_result();
                try {
                    result.success = iface.inviteApplication(args.inviteInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class ignoreCurrentViewer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ignoreCurrentViewer_args> {
            public ignoreCurrentViewer() {
                super("ignoreCurrentViewer");
            }

            public ignoreCurrentViewer_args getEmptyArgsInstance() {
                return new ignoreCurrentViewer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public ignoreCurrentViewer_result getResult(I iface, ignoreCurrentViewer_args args) throws org.apache.thrift.TException {
                ignoreCurrentViewer_result result = new ignoreCurrentViewer_result();
                try {
                    result.success = iface.ignoreCurrentViewer(args.ignoreInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class connectRadar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connectRadar_args> {
            public connectRadar() {
                super("connectRadar");
            }

            public connectRadar_args getEmptyArgsInstance() {
                return new connectRadar_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public connectRadar_result getResult(I iface, connectRadar_args args) throws org.apache.thrift.TException {
                connectRadar_result result = new connectRadar_result();
                try {
                    result.success = iface.connectRadar(args.radarInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addUserSeekRecommend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserSeekRecommend_args> {
            public addUserSeekRecommend() {
                super("addUserSeekRecommend");
            }

            public addUserSeekRecommend_args getEmptyArgsInstance() {
                return new addUserSeekRecommend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addUserSeekRecommend_result getResult(I iface, addUserSeekRecommend_args args) throws org.apache.thrift.TException {
                addUserSeekRecommend_result result = new addUserSeekRecommend_result();
                try {
                    iface.addUserSeekRecommend(args.companyId, args.userId, args.postUserId, args.positionId, args.origin);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class employeeReferralReason<I extends Iface> extends org.apache.thrift.ProcessFunction<I, employeeReferralReason_args> {
            public employeeReferralReason() {
                super("employeeReferralReason");
            }

            public employeeReferralReason_args getEmptyArgsInstance() {
                return new employeeReferralReason_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public employeeReferralReason_result getResult(I iface, employeeReferralReason_args args) throws org.apache.thrift.TException {
                employeeReferralReason_result result = new employeeReferralReason_result();
                try {
                    iface.employeeReferralReason(args.companyId, args.postUserId, args.positionId, args.referralId, args.referralReasons, args.relationship, args.recomReasonText);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class fetchSeekRecommend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchSeekRecommend_args> {
            public fetchSeekRecommend() {
                super("fetchSeekRecommend");
            }

            public fetchSeekRecommend_args getEmptyArgsInstance() {
                return new fetchSeekRecommend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public fetchSeekRecommend_result getResult(I iface, fetchSeekRecommend_args args) throws org.apache.thrift.TException {
                fetchSeekRecommend_result result = new fetchSeekRecommend_result();
                try {
                    result.success = iface.fetchSeekRecommend(args.companyId, args.referralId, args.postUserId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class checkEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkEmployee_args> {
            public checkEmployee() {
                super("checkEmployee");
            }

            public checkEmployee_args getEmptyArgsInstance() {
                return new checkEmployee_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public checkEmployee_result getResult(I iface, checkEmployee_args args) throws org.apache.thrift.TException {
                checkEmployee_result result = new checkEmployee_result();
                try {
                    result.success = iface.checkEmployee(args.checkInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class saveTenMinuteCandidateShareChain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveTenMinuteCandidateShareChain_args> {
            public saveTenMinuteCandidateShareChain() {
                super("saveTenMinuteCandidateShareChain");
            }

            public saveTenMinuteCandidateShareChain_args getEmptyArgsInstance() {
                return new saveTenMinuteCandidateShareChain_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public saveTenMinuteCandidateShareChain_result getResult(I iface, saveTenMinuteCandidateShareChain_args args) throws org.apache.thrift.TException {
                saveTenMinuteCandidateShareChain_result result = new saveTenMinuteCandidateShareChain_result();
                try {
                    iface.saveTenMinuteCandidateShareChain(args.cardInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProgressByOne<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProgressByOne_args> {
            public getProgressByOne() {
                super("getProgressByOne");
            }

            public getProgressByOne_args getEmptyArgsInstance() {
                return new getProgressByOne_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProgressByOne_result getResult(I iface, getProgressByOne_args args) throws org.apache.thrift.TException {
                getProgressByOne_result result = new getProgressByOne_result();
                try {
                    result.success = iface.getProgressByOne(args.progressQuery);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProgressBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProgressBatch_args> {
            public getProgressBatch() {
                super("getProgressBatch");
            }

            public getProgressBatch_args getEmptyArgsInstance() {
                return new getProgressBatch_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProgressBatch_result getResult(I iface, getProgressBatch_args args) throws org.apache.thrift.TException {
                getProgressBatch_result result = new getProgressBatch_result();
                try {
                    result.success = iface.getProgressBatch(args.progressInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class progressQueryKeyword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, progressQueryKeyword_args> {
            public progressQueryKeyword() {
                super("progressQueryKeyword");
            }

            public progressQueryKeyword_args getEmptyArgsInstance() {
                return new progressQueryKeyword_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public progressQueryKeyword_result getResult(I iface, progressQueryKeyword_args args) throws org.apache.thrift.TException {
                progressQueryKeyword_result result = new progressQueryKeyword_result();
                try {
                    result.success = iface.progressQueryKeyword(args.progressInfo);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class employeeReferralRecomEvaluation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, employeeReferralRecomEvaluation_args> {
            public employeeReferralRecomEvaluation() {
                super("employeeReferralRecomEvaluation");
            }

            public employeeReferralRecomEvaluation_args getEmptyArgsInstance() {
                return new employeeReferralRecomEvaluation_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public employeeReferralRecomEvaluation_result getResult(I iface, employeeReferralRecomEvaluation_args args) throws org.apache.thrift.TException {
                employeeReferralRecomEvaluation_result result = new employeeReferralRecomEvaluation_result();
                try {
                    iface.employeeReferralRecomEvaluation(args.companyId, args.postUserId, args.positionId, args.presenteeId, args.referralReasons, args.relationship, args.recomReasonText);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class checkSeekReferral<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkSeekReferral_args> {
            public checkSeekReferral() {
                super("checkSeekReferral");
            }

            public checkSeekReferral_args getEmptyArgsInstance() {
                return new checkSeekReferral_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public checkSeekReferral_result getResult(I iface, checkSeekReferral_args args) throws org.apache.thrift.TException {
                checkSeekReferral_result result = new checkSeekReferral_result();
                try {
                    result.success = iface.checkSeekReferral(args.userId, args.presenteeId, args.positionId, args.companyId, args.parentChainId);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getRedPackets", new getRedPackets());
            processMap.put("getBonus", new getBonus());
            processMap.put("getReferralProfileList", new getReferralProfileList());
            processMap.put("updateActivity", new updateActivity());
            processMap.put("getReferralReason", new getReferralReason());
            processMap.put("handerKeyInformationStatus", new handerKeyInformationStatus());
            processMap.put("fetchKeyInformationStatus", new fetchKeyInformationStatus());
            processMap.put("getRadarCards", new getRadarCards());
            processMap.put("inviteApplication", new inviteApplication());
            processMap.put("ignoreCurrentViewer", new ignoreCurrentViewer());
            processMap.put("connectRadar", new connectRadar());
            processMap.put("addUserSeekRecommend", new addUserSeekRecommend());
            processMap.put("employeeReferralReason", new employeeReferralReason());
            processMap.put("fetchSeekRecommend", new fetchSeekRecommend());
            processMap.put("checkEmployee", new checkEmployee());
            processMap.put("saveTenMinuteCandidateShareChain", new saveTenMinuteCandidateShareChain());
            processMap.put("getProgressByOne", new getProgressByOne());
            processMap.put("getProgressBatch", new getProgressBatch());
            processMap.put("progressQueryKeyword", new progressQueryKeyword());
            processMap.put("employeeReferralRecomEvaluation", new employeeReferralRecomEvaluation());
            processMap.put("checkSeekReferral", new checkSeekReferral());
            return processMap;
        }

        public static class getRedPackets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRedPackets_args, com.moseeker.thrift.gen.referral.struct.RedPackets> {
            public getRedPackets() {
                super("getRedPackets");
            }

            public getRedPackets_args getEmptyArgsInstance() {
                return new getRedPackets_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets>() {
                    public void onComplete(com.moseeker.thrift.gen.referral.struct.RedPackets o) {
                        getRedPackets_result result = new getRedPackets_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRedPackets_result result = new getRedPackets_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRedPackets_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.RedPackets> resultHandler) throws org.apache.thrift.TException {
                iface.getRedPackets(args.userId, args.companyId, args.pageNum, args.pageSize,resultHandler);
            }
        }

        public static class getBonus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBonus_args, com.moseeker.thrift.gen.referral.struct.BonusList> {
            public getBonus() {
                super("getBonus");
            }

            public getBonus_args getEmptyArgsInstance() {
                return new getBonus_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList>() {
                    public void onComplete(com.moseeker.thrift.gen.referral.struct.BonusList o) {
                        getBonus_result result = new getBonus_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getBonus_result result = new getBonus_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getBonus_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.BonusList> resultHandler) throws org.apache.thrift.TException {
                iface.getBonus(args.userId, args.companyId, args.pageNum, args.pageSize,resultHandler);
            }
        }

        public static class getReferralProfileList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReferralProfileList_args, java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> {
            public getReferralProfileList() {
                super("getReferralProfileList");
            }

            public getReferralProfileList_args getEmptyArgsInstance() {
                return new getReferralProfileList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> o) {
                        getReferralProfileList_result result = new getReferralProfileList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getReferralProfileList_result result = new getReferralProfileList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getReferralProfileList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>> resultHandler) throws org.apache.thrift.TException {
                iface.getReferralProfileList(args.userId, args.companyId, args.hrId,resultHandler);
            }
        }

        public static class updateActivity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateActivity_args, Void> {
            public updateActivity() {
                super("updateActivity");
            }

            public updateActivity_args getEmptyArgsInstance() {
                return new updateActivity_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        updateActivity_result result = new updateActivity_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateActivity_result result = new updateActivity_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateActivity_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.updateActivity(args.activityDTO,resultHandler);
            }
        }

        public static class getReferralReason<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReferralReason_args, java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> {
            public getReferralReason() {
                super("getReferralReason");
            }

            public getReferralReason_args getEmptyArgsInstance() {
                return new getReferralReason_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> o) {
                        getReferralReason_result result = new getReferralReason_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getReferralReason_result result = new getReferralReason_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getReferralReason_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>> resultHandler) throws org.apache.thrift.TException {
                iface.getReferralReason(args.userId, args.companyId, args.hrId,resultHandler);
            }
        }

        public static class handerKeyInformationStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handerKeyInformationStatus_args, Void> {
            public handerKeyInformationStatus() {
                super("handerKeyInformationStatus");
            }

            public handerKeyInformationStatus_args getEmptyArgsInstance() {
                return new handerKeyInformationStatus_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        handerKeyInformationStatus_result result = new handerKeyInformationStatus_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handerKeyInformationStatus_result result = new handerKeyInformationStatus_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handerKeyInformationStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.handerKeyInformationStatus(args.companyId, args.keyInformation,resultHandler);
            }
        }

        public static class fetchKeyInformationStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchKeyInformationStatus_args, java.lang.Integer> {
            public fetchKeyInformationStatus() {
                super("fetchKeyInformationStatus");
            }

            public fetchKeyInformationStatus_args getEmptyArgsInstance() {
                return new fetchKeyInformationStatus_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        fetchKeyInformationStatus_result result = new fetchKeyInformationStatus_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        fetchKeyInformationStatus_result result = new fetchKeyInformationStatus_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fetchKeyInformationStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.fetchKeyInformationStatus(args.companyId,resultHandler);
            }
        }

        public static class getRadarCards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRadarCards_args, java.lang.String> {
            public getRadarCards() {
                super("getRadarCards");
            }

            public getRadarCards_args getEmptyArgsInstance() {
                return new getRadarCards_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        getRadarCards_result result = new getRadarCards_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRadarCards_result result = new getRadarCards_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRadarCards_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.getRadarCards(args.cardInfo,resultHandler);
            }
        }

        public static class inviteApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inviteApplication_args, java.lang.String> {
            public inviteApplication() {
                super("inviteApplication");
            }

            public inviteApplication_args getEmptyArgsInstance() {
                return new inviteApplication_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        inviteApplication_result result = new inviteApplication_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        inviteApplication_result result = new inviteApplication_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, inviteApplication_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.inviteApplication(args.inviteInfo,resultHandler);
            }
        }

        public static class ignoreCurrentViewer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ignoreCurrentViewer_args, java.lang.String> {
            public ignoreCurrentViewer() {
                super("ignoreCurrentViewer");
            }

            public ignoreCurrentViewer_args getEmptyArgsInstance() {
                return new ignoreCurrentViewer_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        ignoreCurrentViewer_result result = new ignoreCurrentViewer_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ignoreCurrentViewer_result result = new ignoreCurrentViewer_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ignoreCurrentViewer_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.ignoreCurrentViewer(args.ignoreInfo,resultHandler);
            }
        }

        public static class connectRadar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connectRadar_args, java.lang.String> {
            public connectRadar() {
                super("connectRadar");
            }

            public connectRadar_args getEmptyArgsInstance() {
                return new connectRadar_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        connectRadar_result result = new connectRadar_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        connectRadar_result result = new connectRadar_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, connectRadar_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.connectRadar(args.radarInfo,resultHandler);
            }
        }

        public static class addUserSeekRecommend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserSeekRecommend_args, Void> {
            public addUserSeekRecommend() {
                super("addUserSeekRecommend");
            }

            public addUserSeekRecommend_args getEmptyArgsInstance() {
                return new addUserSeekRecommend_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addUserSeekRecommend_result result = new addUserSeekRecommend_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addUserSeekRecommend_result result = new addUserSeekRecommend_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addUserSeekRecommend_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addUserSeekRecommend(args.companyId, args.userId, args.postUserId, args.positionId, args.origin,resultHandler);
            }
        }

        public static class employeeReferralReason<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, employeeReferralReason_args, Void> {
            public employeeReferralReason() {
                super("employeeReferralReason");
            }

            public employeeReferralReason_args getEmptyArgsInstance() {
                return new employeeReferralReason_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        employeeReferralReason_result result = new employeeReferralReason_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        employeeReferralReason_result result = new employeeReferralReason_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, employeeReferralReason_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.employeeReferralReason(args.companyId, args.postUserId, args.positionId, args.referralId, args.referralReasons, args.relationship, args.recomReasonText,resultHandler);
            }
        }

        public static class fetchSeekRecommend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchSeekRecommend_args, com.moseeker.thrift.gen.referral.struct.ContactPushInfo> {
            public fetchSeekRecommend() {
                super("fetchSeekRecommend");
            }

            public fetchSeekRecommend_args getEmptyArgsInstance() {
                return new fetchSeekRecommend_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo>() {
                    public void onComplete(com.moseeker.thrift.gen.referral.struct.ContactPushInfo o) {
                        fetchSeekRecommend_result result = new fetchSeekRecommend_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        fetchSeekRecommend_result result = new fetchSeekRecommend_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fetchSeekRecommend_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.referral.struct.ContactPushInfo> resultHandler) throws org.apache.thrift.TException {
                iface.fetchSeekRecommend(args.companyId, args.referralId, args.postUserId,resultHandler);
            }
        }

        public static class checkEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkEmployee_args, java.lang.String> {
            public checkEmployee() {
                super("checkEmployee");
            }

            public checkEmployee_args getEmptyArgsInstance() {
                return new checkEmployee_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        checkEmployee_result result = new checkEmployee_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        checkEmployee_result result = new checkEmployee_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, checkEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.checkEmployee(args.checkInfo,resultHandler);
            }
        }

        public static class saveTenMinuteCandidateShareChain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveTenMinuteCandidateShareChain_args, Void> {
            public saveTenMinuteCandidateShareChain() {
                super("saveTenMinuteCandidateShareChain");
            }

            public saveTenMinuteCandidateShareChain_args getEmptyArgsInstance() {
                return new saveTenMinuteCandidateShareChain_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        saveTenMinuteCandidateShareChain_result result = new saveTenMinuteCandidateShareChain_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        saveTenMinuteCandidateShareChain_result result = new saveTenMinuteCandidateShareChain_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, saveTenMinuteCandidateShareChain_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.saveTenMinuteCandidateShareChain(args.cardInfo,resultHandler);
            }
        }

        public static class getProgressByOne<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProgressByOne_args, java.lang.String> {
            public getProgressByOne() {
                super("getProgressByOne");
            }

            public getProgressByOne_args getEmptyArgsInstance() {
                return new getProgressByOne_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        getProgressByOne_result result = new getProgressByOne_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProgressByOne_result result = new getProgressByOne_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProgressByOne_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.getProgressByOne(args.progressQuery,resultHandler);
            }
        }

        public static class getProgressBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProgressBatch_args, java.lang.String> {
            public getProgressBatch() {
                super("getProgressBatch");
            }

            public getProgressBatch_args getEmptyArgsInstance() {
                return new getProgressBatch_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        getProgressBatch_result result = new getProgressBatch_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProgressBatch_result result = new getProgressBatch_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProgressBatch_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.getProgressBatch(args.progressInfo,resultHandler);
            }
        }

        public static class progressQueryKeyword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, progressQueryKeyword_args, java.lang.String> {
            public progressQueryKeyword() {
                super("progressQueryKeyword");
            }

            public progressQueryKeyword_args getEmptyArgsInstance() {
                return new progressQueryKeyword_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        progressQueryKeyword_result result = new progressQueryKeyword_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        progressQueryKeyword_result result = new progressQueryKeyword_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, progressQueryKeyword_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.progressQueryKeyword(args.progressInfo,resultHandler);
            }
        }

        public static class employeeReferralRecomEvaluation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, employeeReferralRecomEvaluation_args, Void> {
            public employeeReferralRecomEvaluation() {
                super("employeeReferralRecomEvaluation");
            }

            public employeeReferralRecomEvaluation_args getEmptyArgsInstance() {
                return new employeeReferralRecomEvaluation_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        employeeReferralRecomEvaluation_result result = new employeeReferralRecomEvaluation_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        employeeReferralRecomEvaluation_result result = new employeeReferralRecomEvaluation_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, employeeReferralRecomEvaluation_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.employeeReferralRecomEvaluation(args.companyId, args.postUserId, args.positionId, args.presenteeId, args.referralReasons, args.relationship, args.recomReasonText,resultHandler);
            }
        }

        public static class checkSeekReferral<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkSeekReferral_args, java.lang.Integer> {
            public checkSeekReferral() {
                super("checkSeekReferral");
            }

            public checkSeekReferral_args getEmptyArgsInstance() {
                return new checkSeekReferral_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        checkSeekReferral_result result = new checkSeekReferral_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        checkSeekReferral_result result = new checkSeekReferral_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, checkSeekReferral_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.checkSeekReferral(args.userId, args.presenteeId, args.positionId, args.companyId, args.parentChainId,resultHandler);
            }
        }

    }

    public static class getRedPackets_args implements org.apache.thrift.TBase<getRedPackets_args, getRedPackets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRedPackets_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRedPackets_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRedPackets_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRedPackets_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int pageNum; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            PAGE_NUM((short)3, "pageNum"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUM
                        return PAGE_NUM;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __PAGENUM_ISSET_ID = 2;
        private static final int __PAGESIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedPackets_args.class, metaDataMap);
        }

        public getRedPackets_args() {
        }

        public getRedPackets_args(
                int userId,
                int companyId,
                int pageNum,
                int pageSize)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRedPackets_args(getRedPackets_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.pageNum = other.pageNum;
            this.pageSize = other.pageSize;
        }

        public getRedPackets_args deepCopy() {
            return new getRedPackets_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPageNumIsSet(false);
            this.pageNum = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getRedPackets_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getRedPackets_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPageNum() {
            return this.pageNum;
        }

        public getRedPackets_args setPageNum(int pageNum) {
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            return this;
        }

        public void unsetPageNum() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNum() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        public void setPageNumIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getRedPackets_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUM:
                    if (value == null) {
                        unsetPageNum();
                    } else {
                        setPageNum((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case PAGE_NUM:
                    return getPageNum();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case PAGE_NUM:
                    return isSetPageNum();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRedPackets_args)
                return this.equals((getRedPackets_args)that);
            return false;
        }

        public boolean equals(getRedPackets_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_pageNum = true;
            boolean that_present_pageNum = true;
            if (this_present_pageNum || that_present_pageNum) {
                if (!(this_present_pageNum && that_present_pageNum))
                    return false;
                if (this.pageNum != that.pageNum)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + pageNum;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getRedPackets_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRedPackets_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNum:");
            sb.append(this.pageNum);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRedPackets_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRedPackets_argsStandardScheme getScheme() {
                return new getRedPackets_argsStandardScheme();
            }
        }

        private static class getRedPackets_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRedPackets_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRedPackets_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNum = iprot.readI32();
                                struct.setPageNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRedPackets_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
                oprot.writeI32(struct.pageNum);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRedPackets_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRedPackets_argsTupleScheme getScheme() {
                return new getRedPackets_argsTupleScheme();
            }
        }

        private static class getRedPackets_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRedPackets_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRedPackets_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetPageNum()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPageNum()) {
                    oprot.writeI32(struct.pageNum);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRedPackets_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageNum = iprot.readI32();
                    struct.setPageNumIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRedPackets_result implements org.apache.thrift.TBase<getRedPackets_result, getRedPackets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRedPackets_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRedPackets_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRedPackets_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRedPackets_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.RedPackets success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.RedPackets.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedPackets_result.class, metaDataMap);
        }

        public getRedPackets_result() {
        }

        public getRedPackets_result(
                com.moseeker.thrift.gen.referral.struct.RedPackets success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRedPackets_result(getRedPackets_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.referral.struct.RedPackets(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRedPackets_result deepCopy() {
            return new getRedPackets_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.referral.struct.RedPackets getSuccess() {
            return this.success;
        }

        public getRedPackets_result setSuccess(com.moseeker.thrift.gen.referral.struct.RedPackets success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRedPackets_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.referral.struct.RedPackets)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRedPackets_result)
                return this.equals((getRedPackets_result)that);
            return false;
        }

        public boolean equals(getRedPackets_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRedPackets_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRedPackets_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRedPackets_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRedPackets_resultStandardScheme getScheme() {
                return new getRedPackets_resultStandardScheme();
            }
        }

        private static class getRedPackets_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRedPackets_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRedPackets_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.referral.struct.RedPackets();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRedPackets_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRedPackets_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRedPackets_resultTupleScheme getScheme() {
                return new getRedPackets_resultTupleScheme();
            }
        }

        private static class getRedPackets_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRedPackets_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRedPackets_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRedPackets_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.referral.struct.RedPackets();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBonus_args implements org.apache.thrift.TBase<getBonus_args, getBonus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBonus_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBonus_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBonus_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBonus_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int pageNum; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            PAGE_NUM((short)3, "pageNum"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUM
                        return PAGE_NUM;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __PAGENUM_ISSET_ID = 2;
        private static final int __PAGESIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBonus_args.class, metaDataMap);
        }

        public getBonus_args() {
        }

        public getBonus_args(
                int userId,
                int companyId,
                int pageNum,
                int pageSize)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBonus_args(getBonus_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.pageNum = other.pageNum;
            this.pageSize = other.pageSize;
        }

        public getBonus_args deepCopy() {
            return new getBonus_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPageNumIsSet(false);
            this.pageNum = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getBonus_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getBonus_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPageNum() {
            return this.pageNum;
        }

        public getBonus_args setPageNum(int pageNum) {
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            return this;
        }

        public void unsetPageNum() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNum() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        public void setPageNumIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getBonus_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUM:
                    if (value == null) {
                        unsetPageNum();
                    } else {
                        setPageNum((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case PAGE_NUM:
                    return getPageNum();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case PAGE_NUM:
                    return isSetPageNum();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getBonus_args)
                return this.equals((getBonus_args)that);
            return false;
        }

        public boolean equals(getBonus_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_pageNum = true;
            boolean that_present_pageNum = true;
            if (this_present_pageNum || that_present_pageNum) {
                if (!(this_present_pageNum && that_present_pageNum))
                    return false;
                if (this.pageNum != that.pageNum)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + pageNum;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getBonus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getBonus_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNum:");
            sb.append(this.pageNum);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBonus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBonus_argsStandardScheme getScheme() {
                return new getBonus_argsStandardScheme();
            }
        }

        private static class getBonus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBonus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBonus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNum = iprot.readI32();
                                struct.setPageNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBonus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
                oprot.writeI32(struct.pageNum);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBonus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBonus_argsTupleScheme getScheme() {
                return new getBonus_argsTupleScheme();
            }
        }

        private static class getBonus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBonus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBonus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetPageNum()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPageNum()) {
                    oprot.writeI32(struct.pageNum);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBonus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageNum = iprot.readI32();
                    struct.setPageNumIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBonus_result implements org.apache.thrift.TBase<getBonus_result, getBonus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBonus_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBonus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBonus_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBonus_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.BonusList success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.BonusList.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBonus_result.class, metaDataMap);
        }

        public getBonus_result() {
        }

        public getBonus_result(
                com.moseeker.thrift.gen.referral.struct.BonusList success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBonus_result(getBonus_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.referral.struct.BonusList(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getBonus_result deepCopy() {
            return new getBonus_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.referral.struct.BonusList getSuccess() {
            return this.success;
        }

        public getBonus_result setSuccess(com.moseeker.thrift.gen.referral.struct.BonusList success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getBonus_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.referral.struct.BonusList)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getBonus_result)
                return this.equals((getBonus_result)that);
            return false;
        }

        public boolean equals(getBonus_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getBonus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getBonus_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBonus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBonus_resultStandardScheme getScheme() {
                return new getBonus_resultStandardScheme();
            }
        }

        private static class getBonus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBonus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBonus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.referral.struct.BonusList();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBonus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBonus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBonus_resultTupleScheme getScheme() {
                return new getBonus_resultTupleScheme();
            }
        }

        private static class getBonus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBonus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBonus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBonus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.referral.struct.BonusList();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReferralProfileList_args implements org.apache.thrift.TBase<getReferralProfileList_args, getReferralProfileList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReferralProfileList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReferralProfileList_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReferralProfileList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReferralProfileList_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int hrId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            HR_ID((short)3, "hrId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // HR_ID
                        return HR_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __HRID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReferralProfileList_args.class, metaDataMap);
        }

        public getReferralProfileList_args() {
        }

        public getReferralProfileList_args(
                int userId,
                int companyId,
                int hrId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.hrId = hrId;
            setHrIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReferralProfileList_args(getReferralProfileList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.hrId = other.hrId;
        }

        public getReferralProfileList_args deepCopy() {
            return new getReferralProfileList_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setHrIdIsSet(false);
            this.hrId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getReferralProfileList_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getReferralProfileList_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getHrId() {
            return this.hrId;
        }

        public getReferralProfileList_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case HR_ID:
                    return getHrId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case HR_ID:
                    return isSetHrId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReferralProfileList_args)
                return this.equals((getReferralProfileList_args)that);
            return false;
        }

        public boolean equals(getReferralProfileList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + hrId;

            return hashCode;
        }

        @Override
        public int compareTo(getReferralProfileList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReferralProfileList_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReferralProfileList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralProfileList_argsStandardScheme getScheme() {
                return new getReferralProfileList_argsStandardScheme();
            }
        }

        private static class getReferralProfileList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReferralProfileList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReferralProfileList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReferralProfileList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReferralProfileList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralProfileList_argsTupleScheme getScheme() {
                return new getReferralProfileList_argsTupleScheme();
            }
        }

        private static class getReferralProfileList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReferralProfileList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReferralProfileList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetHrId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReferralProfileList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReferralProfileList_result implements org.apache.thrift.TBase<getReferralProfileList_result, getReferralProfileList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReferralProfileList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReferralProfileList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReferralProfileList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReferralProfileList_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralProfileTab.class))));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReferralProfileList_result.class, metaDataMap);
        }

        public getReferralProfileList_result() {
        }

        public getReferralProfileList_result(
                java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReferralProfileList_result(getReferralProfileList_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>(other.success.size());
                for (com.moseeker.thrift.gen.referral.struct.ReferralProfileTab other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.referral.struct.ReferralProfileTab(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getReferralProfileList_result deepCopy() {
            return new getReferralProfileList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.referral.struct.ReferralProfileTab elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> getSuccess() {
            return this.success;
        }

        public getReferralProfileList_result setSuccess(java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getReferralProfileList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReferralProfileList_result)
                return this.equals((getReferralProfileList_result)that);
            return false;
        }

        public boolean equals(getReferralProfileList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getReferralProfileList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReferralProfileList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReferralProfileList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralProfileList_resultStandardScheme getScheme() {
                return new getReferralProfileList_resultStandardScheme();
            }
        }

        private static class getReferralProfileList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReferralProfileList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReferralProfileList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>(_list0.size);
                                    com.moseeker.thrift.gen.referral.struct.ReferralProfileTab _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = new com.moseeker.thrift.gen.referral.struct.ReferralProfileTab();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReferralProfileList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.referral.struct.ReferralProfileTab _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReferralProfileList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralProfileList_resultTupleScheme getScheme() {
                return new getReferralProfileList_resultTupleScheme();
            }
        }

        private static class getReferralProfileList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReferralProfileList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReferralProfileList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.referral.struct.ReferralProfileTab _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReferralProfileList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralProfileTab>(_list5.size);
                        com.moseeker.thrift.gen.referral.struct.ReferralProfileTab _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = new com.moseeker.thrift.gen.referral.struct.ReferralProfileTab();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateActivity_args implements org.apache.thrift.TBase<updateActivity_args, updateActivity_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateActivity_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivity_args");

        private static final org.apache.thrift.protocol.TField ACTIVITY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("activityDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateActivity_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateActivity_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ACTIVITY_DTO((short)1, "activityDTO");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ACTIVITY_DTO
                        return ACTIVITY_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ACTIVITY_DTO, new org.apache.thrift.meta_data.FieldMetaData("activityDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ActivityDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivity_args.class, metaDataMap);
        }

        public updateActivity_args() {
        }

        public updateActivity_args(
                com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO)
        {
            this();
            this.activityDTO = activityDTO;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateActivity_args(updateActivity_args other) {
            if (other.isSetActivityDTO()) {
                this.activityDTO = new com.moseeker.thrift.gen.referral.struct.ActivityDTO(other.activityDTO);
            }
        }

        public updateActivity_args deepCopy() {
            return new updateActivity_args(this);
        }

        @Override
        public void clear() {
            this.activityDTO = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ActivityDTO getActivityDTO() {
            return this.activityDTO;
        }

        public updateActivity_args setActivityDTO(com.moseeker.thrift.gen.referral.struct.ActivityDTO activityDTO) {
            this.activityDTO = activityDTO;
            return this;
        }

        public void unsetActivityDTO() {
            this.activityDTO = null;
        }

        /** Returns true if field activityDTO is set (has been assigned a value) and false otherwise */
        public boolean isSetActivityDTO() {
            return this.activityDTO != null;
        }

        public void setActivityDTOIsSet(boolean value) {
            if (!value) {
                this.activityDTO = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ACTIVITY_DTO:
                    if (value == null) {
                        unsetActivityDTO();
                    } else {
                        setActivityDTO((com.moseeker.thrift.gen.referral.struct.ActivityDTO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ACTIVITY_DTO:
                    return getActivityDTO();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ACTIVITY_DTO:
                    return isSetActivityDTO();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateActivity_args)
                return this.equals((updateActivity_args)that);
            return false;
        }

        public boolean equals(updateActivity_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_activityDTO = true && this.isSetActivityDTO();
            boolean that_present_activityDTO = true && that.isSetActivityDTO();
            if (this_present_activityDTO || that_present_activityDTO) {
                if (!(this_present_activityDTO && that_present_activityDTO))
                    return false;
                if (!this.activityDTO.equals(that.activityDTO))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetActivityDTO()) ? 131071 : 524287);
            if (isSetActivityDTO())
                hashCode = hashCode * 8191 + activityDTO.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateActivity_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetActivityDTO()).compareTo(other.isSetActivityDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetActivityDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityDTO, other.activityDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateActivity_args(");
            boolean first = true;

            sb.append("activityDTO:");
            if (this.activityDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.activityDTO);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (activityDTO != null) {
                activityDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateActivity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateActivity_argsStandardScheme getScheme() {
                return new updateActivity_argsStandardScheme();
            }
        }

        private static class updateActivity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateActivity_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivity_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ACTIVITY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.activityDTO = new com.moseeker.thrift.gen.referral.struct.ActivityDTO();
                                struct.activityDTO.read(iprot);
                                struct.setActivityDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivity_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.activityDTO != null) {
                    oprot.writeFieldBegin(ACTIVITY_DTO_FIELD_DESC);
                    struct.activityDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateActivity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateActivity_argsTupleScheme getScheme() {
                return new updateActivity_argsTupleScheme();
            }
        }

        private static class updateActivity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateActivity_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateActivity_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetActivityDTO()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetActivityDTO()) {
                    struct.activityDTO.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateActivity_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.activityDTO = new com.moseeker.thrift.gen.referral.struct.ActivityDTO();
                    struct.activityDTO.read(iprot);
                    struct.setActivityDTOIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateActivity_result implements org.apache.thrift.TBase<updateActivity_result, updateActivity_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateActivity_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivity_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateActivity_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateActivity_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivity_result.class, metaDataMap);
        }

        public updateActivity_result() {
        }

        public updateActivity_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateActivity_result(updateActivity_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateActivity_result deepCopy() {
            return new updateActivity_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateActivity_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateActivity_result)
                return this.equals((updateActivity_result)that);
            return false;
        }

        public boolean equals(updateActivity_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateActivity_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateActivity_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateActivity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateActivity_resultStandardScheme getScheme() {
                return new updateActivity_resultStandardScheme();
            }
        }

        private static class updateActivity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateActivity_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivity_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivity_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateActivity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateActivity_resultTupleScheme getScheme() {
                return new updateActivity_resultTupleScheme();
            }
        }

        private static class updateActivity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateActivity_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateActivity_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateActivity_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReferralReason_args implements org.apache.thrift.TBase<getReferralReason_args, getReferralReason_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReferralReason_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReferralReason_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReferralReason_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReferralReason_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int hrId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            HR_ID((short)3, "hrId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // HR_ID
                        return HR_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __HRID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReferralReason_args.class, metaDataMap);
        }

        public getReferralReason_args() {
        }

        public getReferralReason_args(
                int userId,
                int companyId,
                int hrId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.hrId = hrId;
            setHrIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReferralReason_args(getReferralReason_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.hrId = other.hrId;
        }

        public getReferralReason_args deepCopy() {
            return new getReferralReason_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setHrIdIsSet(false);
            this.hrId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getReferralReason_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getReferralReason_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getHrId() {
            return this.hrId;
        }

        public getReferralReason_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case HR_ID:
                    return getHrId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case HR_ID:
                    return isSetHrId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReferralReason_args)
                return this.equals((getReferralReason_args)that);
            return false;
        }

        public boolean equals(getReferralReason_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + hrId;

            return hashCode;
        }

        @Override
        public int compareTo(getReferralReason_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReferralReason_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReferralReason_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralReason_argsStandardScheme getScheme() {
                return new getReferralReason_argsStandardScheme();
            }
        }

        private static class getReferralReason_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReferralReason_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReferralReason_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReferralReason_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralReason_argsTupleScheme getScheme() {
                return new getReferralReason_argsTupleScheme();
            }
        }

        private static class getReferralReason_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReferralReason_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetHrId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReferralReason_result implements org.apache.thrift.TBase<getReferralReason_result, getReferralReason_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReferralReason_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReferralReason_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReferralReason_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReferralReason_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo.class))));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReferralReason_result.class, metaDataMap);
        }

        public getReferralReason_result() {
        }

        public getReferralReason_result(
                java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReferralReason_result(getReferralReason_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>(other.success.size());
                for (com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getReferralReason_result deepCopy() {
            return new getReferralReason_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> getSuccess() {
            return this.success;
        }

        public getReferralReason_result setSuccess(java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getReferralReason_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReferralReason_result)
                return this.equals((getReferralReason_result)that);
            return false;
        }

        public boolean equals(getReferralReason_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getReferralReason_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReferralReason_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReferralReason_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralReason_resultStandardScheme getScheme() {
                return new getReferralReason_resultStandardScheme();
            }
        }

        private static class getReferralReason_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReferralReason_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>(_list8.size);
                                    com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                                    {
                                        _elem9 = new com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo();
                                        _elem9.read(iprot);
                                        struct.success.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReferralReason_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo _iter11 : struct.success)
                        {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReferralReason_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReferralReason_resultTupleScheme getScheme() {
                return new getReferralReason_resultTupleScheme();
            }
        }

        private static class getReferralReason_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReferralReason_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo _iter12 : struct.success)
                        {
                            _iter12.write(oprot);
                        }
                    }
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo>(_list13.size);
                        com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                        {
                            _elem14 = new com.moseeker.thrift.gen.referral.struct.ReferralReasonInfo();
                            _elem14.read(iprot);
                            struct.success.add(_elem14);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerKeyInformationStatus_args implements org.apache.thrift.TBase<handerKeyInformationStatus_args, handerKeyInformationStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<handerKeyInformationStatus_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerKeyInformationStatus_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField KEY_INFORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("keyInformation", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerKeyInformationStatus_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerKeyInformationStatus_argsTupleSchemeFactory();

        public int companyId; // required
        public int keyInformation; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            KEY_INFORMATION((short)2, "keyInformation");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // KEY_INFORMATION
                        return KEY_INFORMATION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __KEYINFORMATION_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.KEY_INFORMATION, new org.apache.thrift.meta_data.FieldMetaData("keyInformation", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerKeyInformationStatus_args.class, metaDataMap);
        }

        public handerKeyInformationStatus_args() {
        }

        public handerKeyInformationStatus_args(
                int companyId,
                int keyInformation)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.keyInformation = keyInformation;
            setKeyInformationIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerKeyInformationStatus_args(handerKeyInformationStatus_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.keyInformation = other.keyInformation;
        }

        public handerKeyInformationStatus_args deepCopy() {
            return new handerKeyInformationStatus_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setKeyInformationIsSet(false);
            this.keyInformation = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public handerKeyInformationStatus_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getKeyInformation() {
            return this.keyInformation;
        }

        public handerKeyInformationStatus_args setKeyInformation(int keyInformation) {
            this.keyInformation = keyInformation;
            setKeyInformationIsSet(true);
            return this;
        }

        public void unsetKeyInformation() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEYINFORMATION_ISSET_ID);
        }

        /** Returns true if field keyInformation is set (has been assigned a value) and false otherwise */
        public boolean isSetKeyInformation() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEYINFORMATION_ISSET_ID);
        }

        public void setKeyInformationIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEYINFORMATION_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case KEY_INFORMATION:
                    if (value == null) {
                        unsetKeyInformation();
                    } else {
                        setKeyInformation((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case KEY_INFORMATION:
                    return getKeyInformation();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case KEY_INFORMATION:
                    return isSetKeyInformation();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerKeyInformationStatus_args)
                return this.equals((handerKeyInformationStatus_args)that);
            return false;
        }

        public boolean equals(handerKeyInformationStatus_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_keyInformation = true;
            boolean that_present_keyInformation = true;
            if (this_present_keyInformation || that_present_keyInformation) {
                if (!(this_present_keyInformation && that_present_keyInformation))
                    return false;
                if (this.keyInformation != that.keyInformation)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + keyInformation;

            return hashCode;
        }

        @Override
        public int compareTo(handerKeyInformationStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetKeyInformation()).compareTo(other.isSetKeyInformation());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKeyInformation()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyInformation, other.keyInformation);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerKeyInformationStatus_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("keyInformation:");
            sb.append(this.keyInformation);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerKeyInformationStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerKeyInformationStatus_argsStandardScheme getScheme() {
                return new handerKeyInformationStatus_argsStandardScheme();
            }
        }

        private static class handerKeyInformationStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerKeyInformationStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEY_INFORMATION
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.keyInformation = iprot.readI32();
                                struct.setKeyInformationIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(KEY_INFORMATION_FIELD_DESC);
                oprot.writeI32(struct.keyInformation);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerKeyInformationStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerKeyInformationStatus_argsTupleScheme getScheme() {
                return new handerKeyInformationStatus_argsTupleScheme();
            }
        }

        private static class handerKeyInformationStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerKeyInformationStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetKeyInformation()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetKeyInformation()) {
                    oprot.writeI32(struct.keyInformation);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.keyInformation = iprot.readI32();
                    struct.setKeyInformationIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerKeyInformationStatus_result implements org.apache.thrift.TBase<handerKeyInformationStatus_result, handerKeyInformationStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<handerKeyInformationStatus_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerKeyInformationStatus_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerKeyInformationStatus_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerKeyInformationStatus_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerKeyInformationStatus_result.class, metaDataMap);
        }

        public handerKeyInformationStatus_result() {
        }

        public handerKeyInformationStatus_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerKeyInformationStatus_result(handerKeyInformationStatus_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handerKeyInformationStatus_result deepCopy() {
            return new handerKeyInformationStatus_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handerKeyInformationStatus_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerKeyInformationStatus_result)
                return this.equals((handerKeyInformationStatus_result)that);
            return false;
        }

        public boolean equals(handerKeyInformationStatus_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerKeyInformationStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerKeyInformationStatus_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerKeyInformationStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerKeyInformationStatus_resultStandardScheme getScheme() {
                return new handerKeyInformationStatus_resultStandardScheme();
            }
        }

        private static class handerKeyInformationStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerKeyInformationStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerKeyInformationStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerKeyInformationStatus_resultTupleScheme getScheme() {
                return new handerKeyInformationStatus_resultTupleScheme();
            }
        }

        private static class handerKeyInformationStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerKeyInformationStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchKeyInformationStatus_args implements org.apache.thrift.TBase<fetchKeyInformationStatus_args, fetchKeyInformationStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchKeyInformationStatus_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchKeyInformationStatus_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchKeyInformationStatus_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchKeyInformationStatus_argsTupleSchemeFactory();

        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchKeyInformationStatus_args.class, metaDataMap);
        }

        public fetchKeyInformationStatus_args() {
        }

        public fetchKeyInformationStatus_args(
                int companyId)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchKeyInformationStatus_args(fetchKeyInformationStatus_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
        }

        public fetchKeyInformationStatus_args deepCopy() {
            return new fetchKeyInformationStatus_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public fetchKeyInformationStatus_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchKeyInformationStatus_args)
                return this.equals((fetchKeyInformationStatus_args)that);
            return false;
        }

        public boolean equals(fetchKeyInformationStatus_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(fetchKeyInformationStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchKeyInformationStatus_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchKeyInformationStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchKeyInformationStatus_argsStandardScheme getScheme() {
                return new fetchKeyInformationStatus_argsStandardScheme();
            }
        }

        private static class fetchKeyInformationStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchKeyInformationStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchKeyInformationStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchKeyInformationStatus_argsTupleScheme getScheme() {
                return new fetchKeyInformationStatus_argsTupleScheme();
            }
        }

        private static class fetchKeyInformationStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchKeyInformationStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchKeyInformationStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchKeyInformationStatus_result implements org.apache.thrift.TBase<fetchKeyInformationStatus_result, fetchKeyInformationStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchKeyInformationStatus_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchKeyInformationStatus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchKeyInformationStatus_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchKeyInformationStatus_resultTupleSchemeFactory();

        public int success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchKeyInformationStatus_result.class, metaDataMap);
        }

        public fetchKeyInformationStatus_result() {
        }

        public fetchKeyInformationStatus_result(
                int success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchKeyInformationStatus_result(fetchKeyInformationStatus_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public fetchKeyInformationStatus_result deepCopy() {
            return new fetchKeyInformationStatus_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.e = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public fetchKeyInformationStatus_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public fetchKeyInformationStatus_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchKeyInformationStatus_result)
                return this.equals((fetchKeyInformationStatus_result)that);
            return false;
        }

        public boolean equals(fetchKeyInformationStatus_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fetchKeyInformationStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchKeyInformationStatus_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchKeyInformationStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchKeyInformationStatus_resultStandardScheme getScheme() {
                return new fetchKeyInformationStatus_resultStandardScheme();
            }
        }

        private static class fetchKeyInformationStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchKeyInformationStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchKeyInformationStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchKeyInformationStatus_resultTupleScheme getScheme() {
                return new fetchKeyInformationStatus_resultTupleScheme();
            }
        }

        private static class fetchKeyInformationStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchKeyInformationStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchKeyInformationStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRadarCards_args implements org.apache.thrift.TBase<getRadarCards_args, getRadarCards_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRadarCards_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRadarCards_args");

        private static final org.apache.thrift.protocol.TField CARD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRadarCards_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRadarCards_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CARD_INFO((short)1, "cardInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CARD_INFO
                        return CARD_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CARD_INFO, new org.apache.thrift.meta_data.FieldMetaData("cardInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralCardInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRadarCards_args.class, metaDataMap);
        }

        public getRadarCards_args() {
        }

        public getRadarCards_args(
                com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo)
        {
            this();
            this.cardInfo = cardInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRadarCards_args(getRadarCards_args other) {
            if (other.isSetCardInfo()) {
                this.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo(other.cardInfo);
            }
        }

        public getRadarCards_args deepCopy() {
            return new getRadarCards_args(this);
        }

        @Override
        public void clear() {
            this.cardInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralCardInfo getCardInfo() {
            return this.cardInfo;
        }

        public getRadarCards_args setCardInfo(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) {
            this.cardInfo = cardInfo;
            return this;
        }

        public void unsetCardInfo() {
            this.cardInfo = null;
        }

        /** Returns true if field cardInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetCardInfo() {
            return this.cardInfo != null;
        }

        public void setCardInfoIsSet(boolean value) {
            if (!value) {
                this.cardInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CARD_INFO:
                    if (value == null) {
                        unsetCardInfo();
                    } else {
                        setCardInfo((com.moseeker.thrift.gen.referral.struct.ReferralCardInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CARD_INFO:
                    return getCardInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CARD_INFO:
                    return isSetCardInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRadarCards_args)
                return this.equals((getRadarCards_args)that);
            return false;
        }

        public boolean equals(getRadarCards_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_cardInfo = true && this.isSetCardInfo();
            boolean that_present_cardInfo = true && that.isSetCardInfo();
            if (this_present_cardInfo || that_present_cardInfo) {
                if (!(this_present_cardInfo && that_present_cardInfo))
                    return false;
                if (!this.cardInfo.equals(that.cardInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCardInfo()) ? 131071 : 524287);
            if (isSetCardInfo())
                hashCode = hashCode * 8191 + cardInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRadarCards_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCardInfo()).compareTo(other.isSetCardInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCardInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardInfo, other.cardInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRadarCards_args(");
            boolean first = true;

            sb.append("cardInfo:");
            if (this.cardInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.cardInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (cardInfo != null) {
                cardInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRadarCards_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRadarCards_argsStandardScheme getScheme() {
                return new getRadarCards_argsStandardScheme();
            }
        }

        private static class getRadarCards_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRadarCards_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRadarCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CARD_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo();
                                struct.cardInfo.read(iprot);
                                struct.setCardInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRadarCards_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cardInfo != null) {
                    oprot.writeFieldBegin(CARD_INFO_FIELD_DESC);
                    struct.cardInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRadarCards_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRadarCards_argsTupleScheme getScheme() {
                return new getRadarCards_argsTupleScheme();
            }
        }

        private static class getRadarCards_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRadarCards_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRadarCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCardInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCardInfo()) {
                    struct.cardInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRadarCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo();
                    struct.cardInfo.read(iprot);
                    struct.setCardInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRadarCards_result implements org.apache.thrift.TBase<getRadarCards_result, getRadarCards_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRadarCards_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRadarCards_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRadarCards_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRadarCards_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRadarCards_result.class, metaDataMap);
        }

        public getRadarCards_result() {
        }

        public getRadarCards_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRadarCards_result(getRadarCards_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRadarCards_result deepCopy() {
            return new getRadarCards_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public getRadarCards_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRadarCards_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRadarCards_result)
                return this.equals((getRadarCards_result)that);
            return false;
        }

        public boolean equals(getRadarCards_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRadarCards_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRadarCards_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRadarCards_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRadarCards_resultStandardScheme getScheme() {
                return new getRadarCards_resultStandardScheme();
            }
        }

        private static class getRadarCards_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRadarCards_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRadarCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRadarCards_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRadarCards_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRadarCards_resultTupleScheme getScheme() {
                return new getRadarCards_resultTupleScheme();
            }
        }

        private static class getRadarCards_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRadarCards_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRadarCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRadarCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class inviteApplication_args implements org.apache.thrift.TBase<inviteApplication_args, inviteApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<inviteApplication_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteApplication_args");

        private static final org.apache.thrift.protocol.TField INVITE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inviteApplication_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inviteApplication_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            INVITE_INFO((short)1, "inviteInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // INVITE_INFO
                        return INVITE_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.INVITE_INFO, new org.apache.thrift.meta_data.FieldMetaData("inviteInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteApplication_args.class, metaDataMap);
        }

        public inviteApplication_args() {
        }

        public inviteApplication_args(
                com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo)
        {
            this();
            this.inviteInfo = inviteInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public inviteApplication_args(inviteApplication_args other) {
            if (other.isSetInviteInfo()) {
                this.inviteInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo(other.inviteInfo);
            }
        }

        public inviteApplication_args deepCopy() {
            return new inviteApplication_args(this);
        }

        @Override
        public void clear() {
            this.inviteInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo getInviteInfo() {
            return this.inviteInfo;
        }

        public inviteApplication_args setInviteInfo(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo inviteInfo) {
            this.inviteInfo = inviteInfo;
            return this;
        }

        public void unsetInviteInfo() {
            this.inviteInfo = null;
        }

        /** Returns true if field inviteInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetInviteInfo() {
            return this.inviteInfo != null;
        }

        public void setInviteInfoIsSet(boolean value) {
            if (!value) {
                this.inviteInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case INVITE_INFO:
                    if (value == null) {
                        unsetInviteInfo();
                    } else {
                        setInviteInfo((com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case INVITE_INFO:
                    return getInviteInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case INVITE_INFO:
                    return isSetInviteInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof inviteApplication_args)
                return this.equals((inviteApplication_args)that);
            return false;
        }

        public boolean equals(inviteApplication_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_inviteInfo = true && this.isSetInviteInfo();
            boolean that_present_inviteInfo = true && that.isSetInviteInfo();
            if (this_present_inviteInfo || that_present_inviteInfo) {
                if (!(this_present_inviteInfo && that_present_inviteInfo))
                    return false;
                if (!this.inviteInfo.equals(that.inviteInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetInviteInfo()) ? 131071 : 524287);
            if (isSetInviteInfo())
                hashCode = hashCode * 8191 + inviteInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(inviteApplication_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetInviteInfo()).compareTo(other.isSetInviteInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInviteInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteInfo, other.inviteInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("inviteApplication_args(");
            boolean first = true;

            sb.append("inviteInfo:");
            if (this.inviteInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.inviteInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (inviteInfo != null) {
                inviteInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class inviteApplication_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public inviteApplication_argsStandardScheme getScheme() {
                return new inviteApplication_argsStandardScheme();
            }
        }

        private static class inviteApplication_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<inviteApplication_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, inviteApplication_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // INVITE_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.inviteInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo();
                                struct.inviteInfo.read(iprot);
                                struct.setInviteInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, inviteApplication_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.inviteInfo != null) {
                    oprot.writeFieldBegin(INVITE_INFO_FIELD_DESC);
                    struct.inviteInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class inviteApplication_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public inviteApplication_argsTupleScheme getScheme() {
                return new inviteApplication_argsTupleScheme();
            }
        }

        private static class inviteApplication_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<inviteApplication_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, inviteApplication_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetInviteInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetInviteInfo()) {
                    struct.inviteInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, inviteApplication_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.inviteInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo();
                    struct.inviteInfo.read(iprot);
                    struct.setInviteInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class inviteApplication_result implements org.apache.thrift.TBase<inviteApplication_result, inviteApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<inviteApplication_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteApplication_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inviteApplication_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inviteApplication_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteApplication_result.class, metaDataMap);
        }

        public inviteApplication_result() {
        }

        public inviteApplication_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public inviteApplication_result(inviteApplication_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public inviteApplication_result deepCopy() {
            return new inviteApplication_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public inviteApplication_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public inviteApplication_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof inviteApplication_result)
                return this.equals((inviteApplication_result)that);
            return false;
        }

        public boolean equals(inviteApplication_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(inviteApplication_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("inviteApplication_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class inviteApplication_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public inviteApplication_resultStandardScheme getScheme() {
                return new inviteApplication_resultStandardScheme();
            }
        }

        private static class inviteApplication_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<inviteApplication_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, inviteApplication_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, inviteApplication_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class inviteApplication_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public inviteApplication_resultTupleScheme getScheme() {
                return new inviteApplication_resultTupleScheme();
            }
        }

        private static class inviteApplication_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<inviteApplication_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, inviteApplication_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, inviteApplication_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ignoreCurrentViewer_args implements org.apache.thrift.TBase<ignoreCurrentViewer_args, ignoreCurrentViewer_args._Fields>, java.io.Serializable, Cloneable, Comparable<ignoreCurrentViewer_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ignoreCurrentViewer_args");

        private static final org.apache.thrift.protocol.TField IGNORE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoreInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ignoreCurrentViewer_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ignoreCurrentViewer_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            IGNORE_INFO((short)1, "ignoreInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // IGNORE_INFO
                        return IGNORE_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.IGNORE_INFO, new org.apache.thrift.meta_data.FieldMetaData("ignoreInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ignoreCurrentViewer_args.class, metaDataMap);
        }

        public ignoreCurrentViewer_args() {
        }

        public ignoreCurrentViewer_args(
                com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo)
        {
            this();
            this.ignoreInfo = ignoreInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ignoreCurrentViewer_args(ignoreCurrentViewer_args other) {
            if (other.isSetIgnoreInfo()) {
                this.ignoreInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo(other.ignoreInfo);
            }
        }

        public ignoreCurrentViewer_args deepCopy() {
            return new ignoreCurrentViewer_args(this);
        }

        @Override
        public void clear() {
            this.ignoreInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo getIgnoreInfo() {
            return this.ignoreInfo;
        }

        public ignoreCurrentViewer_args setIgnoreInfo(com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo ignoreInfo) {
            this.ignoreInfo = ignoreInfo;
            return this;
        }

        public void unsetIgnoreInfo() {
            this.ignoreInfo = null;
        }

        /** Returns true if field ignoreInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetIgnoreInfo() {
            return this.ignoreInfo != null;
        }

        public void setIgnoreInfoIsSet(boolean value) {
            if (!value) {
                this.ignoreInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case IGNORE_INFO:
                    if (value == null) {
                        unsetIgnoreInfo();
                    } else {
                        setIgnoreInfo((com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case IGNORE_INFO:
                    return getIgnoreInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case IGNORE_INFO:
                    return isSetIgnoreInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ignoreCurrentViewer_args)
                return this.equals((ignoreCurrentViewer_args)that);
            return false;
        }

        public boolean equals(ignoreCurrentViewer_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ignoreInfo = true && this.isSetIgnoreInfo();
            boolean that_present_ignoreInfo = true && that.isSetIgnoreInfo();
            if (this_present_ignoreInfo || that_present_ignoreInfo) {
                if (!(this_present_ignoreInfo && that_present_ignoreInfo))
                    return false;
                if (!this.ignoreInfo.equals(that.ignoreInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetIgnoreInfo()) ? 131071 : 524287);
            if (isSetIgnoreInfo())
                hashCode = hashCode * 8191 + ignoreInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ignoreCurrentViewer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetIgnoreInfo()).compareTo(other.isSetIgnoreInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIgnoreInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoreInfo, other.ignoreInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ignoreCurrentViewer_args(");
            boolean first = true;

            sb.append("ignoreInfo:");
            if (this.ignoreInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.ignoreInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (ignoreInfo != null) {
                ignoreInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ignoreCurrentViewer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignoreCurrentViewer_argsStandardScheme getScheme() {
                return new ignoreCurrentViewer_argsStandardScheme();
            }
        }

        private static class ignoreCurrentViewer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ignoreCurrentViewer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ignoreCurrentViewer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // IGNORE_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ignoreInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo();
                                struct.ignoreInfo.read(iprot);
                                struct.setIgnoreInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ignoreCurrentViewer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ignoreInfo != null) {
                    oprot.writeFieldBegin(IGNORE_INFO_FIELD_DESC);
                    struct.ignoreInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ignoreCurrentViewer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignoreCurrentViewer_argsTupleScheme getScheme() {
                return new ignoreCurrentViewer_argsTupleScheme();
            }
        }

        private static class ignoreCurrentViewer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ignoreCurrentViewer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ignoreCurrentViewer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetIgnoreInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetIgnoreInfo()) {
                    struct.ignoreInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ignoreCurrentViewer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ignoreInfo = new com.moseeker.thrift.gen.referral.struct.ReferralInviteInfo();
                    struct.ignoreInfo.read(iprot);
                    struct.setIgnoreInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ignoreCurrentViewer_result implements org.apache.thrift.TBase<ignoreCurrentViewer_result, ignoreCurrentViewer_result._Fields>, java.io.Serializable, Cloneable, Comparable<ignoreCurrentViewer_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ignoreCurrentViewer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ignoreCurrentViewer_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ignoreCurrentViewer_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ignoreCurrentViewer_result.class, metaDataMap);
        }

        public ignoreCurrentViewer_result() {
        }

        public ignoreCurrentViewer_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ignoreCurrentViewer_result(ignoreCurrentViewer_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public ignoreCurrentViewer_result deepCopy() {
            return new ignoreCurrentViewer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public ignoreCurrentViewer_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public ignoreCurrentViewer_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ignoreCurrentViewer_result)
                return this.equals((ignoreCurrentViewer_result)that);
            return false;
        }

        public boolean equals(ignoreCurrentViewer_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ignoreCurrentViewer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ignoreCurrentViewer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ignoreCurrentViewer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignoreCurrentViewer_resultStandardScheme getScheme() {
                return new ignoreCurrentViewer_resultStandardScheme();
            }
        }

        private static class ignoreCurrentViewer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ignoreCurrentViewer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ignoreCurrentViewer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ignoreCurrentViewer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ignoreCurrentViewer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignoreCurrentViewer_resultTupleScheme getScheme() {
                return new ignoreCurrentViewer_resultTupleScheme();
            }
        }

        private static class ignoreCurrentViewer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ignoreCurrentViewer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ignoreCurrentViewer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ignoreCurrentViewer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class connectRadar_args implements org.apache.thrift.TBase<connectRadar_args, connectRadar_args._Fields>, java.io.Serializable, Cloneable, Comparable<connectRadar_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectRadar_args");

        private static final org.apache.thrift.protocol.TField RADAR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("radarInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectRadar_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectRadar_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RADAR_INFO((short)1, "radarInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // RADAR_INFO
                        return RADAR_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RADAR_INFO, new org.apache.thrift.meta_data.FieldMetaData("radarInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectRadar_args.class, metaDataMap);
        }

        public connectRadar_args() {
        }

        public connectRadar_args(
                com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo)
        {
            this();
            this.radarInfo = radarInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public connectRadar_args(connectRadar_args other) {
            if (other.isSetRadarInfo()) {
                this.radarInfo = new com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo(other.radarInfo);
            }
        }

        public connectRadar_args deepCopy() {
            return new connectRadar_args(this);
        }

        @Override
        public void clear() {
            this.radarInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo getRadarInfo() {
            return this.radarInfo;
        }

        public connectRadar_args setRadarInfo(com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo radarInfo) {
            this.radarInfo = radarInfo;
            return this;
        }

        public void unsetRadarInfo() {
            this.radarInfo = null;
        }

        /** Returns true if field radarInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetRadarInfo() {
            return this.radarInfo != null;
        }

        public void setRadarInfoIsSet(boolean value) {
            if (!value) {
                this.radarInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case RADAR_INFO:
                    if (value == null) {
                        unsetRadarInfo();
                    } else {
                        setRadarInfo((com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case RADAR_INFO:
                    return getRadarInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case RADAR_INFO:
                    return isSetRadarInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof connectRadar_args)
                return this.equals((connectRadar_args)that);
            return false;
        }

        public boolean equals(connectRadar_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_radarInfo = true && this.isSetRadarInfo();
            boolean that_present_radarInfo = true && that.isSetRadarInfo();
            if (this_present_radarInfo || that_present_radarInfo) {
                if (!(this_present_radarInfo && that_present_radarInfo))
                    return false;
                if (!this.radarInfo.equals(that.radarInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetRadarInfo()) ? 131071 : 524287);
            if (isSetRadarInfo())
                hashCode = hashCode * 8191 + radarInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(connectRadar_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetRadarInfo()).compareTo(other.isSetRadarInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRadarInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radarInfo, other.radarInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("connectRadar_args(");
            boolean first = true;

            sb.append("radarInfo:");
            if (this.radarInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.radarInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (radarInfo != null) {
                radarInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class connectRadar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connectRadar_argsStandardScheme getScheme() {
                return new connectRadar_argsStandardScheme();
            }
        }

        private static class connectRadar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectRadar_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, connectRadar_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RADAR_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.radarInfo = new com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo();
                                struct.radarInfo.read(iprot);
                                struct.setRadarInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, connectRadar_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.radarInfo != null) {
                    oprot.writeFieldBegin(RADAR_INFO_FIELD_DESC);
                    struct.radarInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class connectRadar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connectRadar_argsTupleScheme getScheme() {
                return new connectRadar_argsTupleScheme();
            }
        }

        private static class connectRadar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectRadar_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, connectRadar_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetRadarInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRadarInfo()) {
                    struct.radarInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, connectRadar_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.radarInfo = new com.moseeker.thrift.gen.referral.struct.ConnectRadarInfo();
                    struct.radarInfo.read(iprot);
                    struct.setRadarInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class connectRadar_result implements org.apache.thrift.TBase<connectRadar_result, connectRadar_result._Fields>, java.io.Serializable, Cloneable, Comparable<connectRadar_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectRadar_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectRadar_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectRadar_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectRadar_result.class, metaDataMap);
        }

        public connectRadar_result() {
        }

        public connectRadar_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public connectRadar_result(connectRadar_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public connectRadar_result deepCopy() {
            return new connectRadar_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public connectRadar_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public connectRadar_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof connectRadar_result)
                return this.equals((connectRadar_result)that);
            return false;
        }

        public boolean equals(connectRadar_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(connectRadar_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("connectRadar_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class connectRadar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connectRadar_resultStandardScheme getScheme() {
                return new connectRadar_resultStandardScheme();
            }
        }

        private static class connectRadar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectRadar_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, connectRadar_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, connectRadar_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class connectRadar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connectRadar_resultTupleScheme getScheme() {
                return new connectRadar_resultTupleScheme();
            }
        }

        private static class connectRadar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectRadar_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, connectRadar_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, connectRadar_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addUserSeekRecommend_args implements org.apache.thrift.TBase<addUserSeekRecommend_args, addUserSeekRecommend_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserSeekRecommend_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserSeekRecommend_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUserSeekRecommend_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUserSeekRecommend_argsTupleSchemeFactory();

        public int companyId; // required
        public int userId; // required
        public int postUserId; // required
        public int positionId; // required
        public int origin; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            USER_ID((short)2, "userId"),
            POST_USER_ID((short)3, "postUserId"),
            POSITION_ID((short)4, "positionId"),
            ORIGIN((short)5, "origin");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // USER_ID
                        return USER_ID;
                    case 3: // POST_USER_ID
                        return POST_USER_ID;
                    case 4: // POSITION_ID
                        return POSITION_ID;
                    case 5: // ORIGIN
                        return ORIGIN;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __USERID_ISSET_ID = 1;
        private static final int __POSTUSERID_ISSET_ID = 2;
        private static final int __POSITIONID_ISSET_ID = 3;
        private static final int __ORIGIN_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserSeekRecommend_args.class, metaDataMap);
        }

        public addUserSeekRecommend_args() {
        }

        public addUserSeekRecommend_args(
                int companyId,
                int userId,
                int postUserId,
                int positionId,
                int origin)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.userId = userId;
            setUserIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.origin = origin;
            setOriginIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUserSeekRecommend_args(addUserSeekRecommend_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.userId = other.userId;
            this.postUserId = other.postUserId;
            this.positionId = other.positionId;
            this.origin = other.origin;
        }

        public addUserSeekRecommend_args deepCopy() {
            return new addUserSeekRecommend_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setUserIdIsSet(false);
            this.userId = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setOriginIsSet(false);
            this.origin = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public addUserSeekRecommend_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getUserId() {
            return this.userId;
        }

        public addUserSeekRecommend_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public addUserSeekRecommend_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public addUserSeekRecommend_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getOrigin() {
            return this.origin;
        }

        public addUserSeekRecommend_args setOrigin(int origin) {
            this.origin = origin;
            setOriginIsSet(true);
            return this;
        }

        public void unsetOrigin() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGIN_ISSET_ID);
        }

        /** Returns true if field origin is set (has been assigned a value) and false otherwise */
        public boolean isSetOrigin() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGIN_ISSET_ID);
        }

        public void setOriginIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGIN_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case ORIGIN:
                    if (value == null) {
                        unsetOrigin();
                    } else {
                        setOrigin((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case USER_ID:
                    return getUserId();

                case POST_USER_ID:
                    return getPostUserId();

                case POSITION_ID:
                    return getPositionId();

                case ORIGIN:
                    return getOrigin();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case USER_ID:
                    return isSetUserId();
                case POST_USER_ID:
                    return isSetPostUserId();
                case POSITION_ID:
                    return isSetPositionId();
                case ORIGIN:
                    return isSetOrigin();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addUserSeekRecommend_args)
                return this.equals((addUserSeekRecommend_args)that);
            return false;
        }

        public boolean equals(addUserSeekRecommend_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_origin = true;
            boolean that_present_origin = true;
            if (this_present_origin || that_present_origin) {
                if (!(this_present_origin && that_present_origin))
                    return false;
                if (this.origin != that.origin)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + postUserId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + origin;

            return hashCode;
        }

        @Override
        public int compareTo(addUserSeekRecommend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrigin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addUserSeekRecommend_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("origin:");
            sb.append(this.origin);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addUserSeekRecommend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUserSeekRecommend_argsStandardScheme getScheme() {
                return new addUserSeekRecommend_argsStandardScheme();
            }
        }

        private static class addUserSeekRecommend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUserSeekRecommend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUserSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // ORIGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.origin = iprot.readI32();
                                struct.setOriginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUserSeekRecommend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
                oprot.writeI32(struct.origin);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUserSeekRecommend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUserSeekRecommend_argsTupleScheme getScheme() {
                return new addUserSeekRecommend_argsTupleScheme();
            }
        }

        private static class addUserSeekRecommend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUserSeekRecommend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUserSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetUserId()) {
                    optionals.set(1);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(2);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(3);
                }
                if (struct.isSetOrigin()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetOrigin()) {
                    oprot.writeI32(struct.origin);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUserSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.origin = iprot.readI32();
                    struct.setOriginIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addUserSeekRecommend_result implements org.apache.thrift.TBase<addUserSeekRecommend_result, addUserSeekRecommend_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserSeekRecommend_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserSeekRecommend_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUserSeekRecommend_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUserSeekRecommend_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserSeekRecommend_result.class, metaDataMap);
        }

        public addUserSeekRecommend_result() {
        }

        public addUserSeekRecommend_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUserSeekRecommend_result(addUserSeekRecommend_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addUserSeekRecommend_result deepCopy() {
            return new addUserSeekRecommend_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addUserSeekRecommend_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addUserSeekRecommend_result)
                return this.equals((addUserSeekRecommend_result)that);
            return false;
        }

        public boolean equals(addUserSeekRecommend_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addUserSeekRecommend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addUserSeekRecommend_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addUserSeekRecommend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUserSeekRecommend_resultStandardScheme getScheme() {
                return new addUserSeekRecommend_resultStandardScheme();
            }
        }

        private static class addUserSeekRecommend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUserSeekRecommend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUserSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUserSeekRecommend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUserSeekRecommend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUserSeekRecommend_resultTupleScheme getScheme() {
                return new addUserSeekRecommend_resultTupleScheme();
            }
        }

        private static class addUserSeekRecommend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUserSeekRecommend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUserSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUserSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class employeeReferralReason_args implements org.apache.thrift.TBase<employeeReferralReason_args, employeeReferralReason_args._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralReason_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralReason_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField REFERRAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("referralId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField REFERRAL_REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("referralReasons", org.apache.thrift.protocol.TType.LIST, (short)5);
        private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.BYTE, (short)6);
        private static final org.apache.thrift.protocol.TField RECOM_REASON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomReasonText", org.apache.thrift.protocol.TType.STRING, (short)7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralReason_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralReason_argsTupleSchemeFactory();

        public int companyId; // required
        public int postUserId; // required
        public int positionId; // required
        public int referralId; // required
        public java.util.List<java.lang.String> referralReasons; // required
        public byte relationship; // required
        public java.lang.String recomReasonText; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            POST_USER_ID((short)2, "postUserId"),
            POSITION_ID((short)3, "positionId"),
            REFERRAL_ID((short)4, "referralId"),
            REFERRAL_REASONS((short)5, "referralReasons"),
            RELATIONSHIP((short)6, "relationship"),
            RECOM_REASON_TEXT((short)7, "recomReasonText");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // POST_USER_ID
                        return POST_USER_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    case 4: // REFERRAL_ID
                        return REFERRAL_ID;
                    case 5: // REFERRAL_REASONS
                        return REFERRAL_REASONS;
                    case 6: // RELATIONSHIP
                        return RELATIONSHIP;
                    case 7: // RECOM_REASON_TEXT
                        return RECOM_REASON_TEXT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __POSTUSERID_ISSET_ID = 1;
        private static final int __POSITIONID_ISSET_ID = 2;
        private static final int __REFERRALID_ISSET_ID = 3;
        private static final int __RELATIONSHIP_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REFERRAL_ID, new org.apache.thrift.meta_data.FieldMetaData("referralId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REFERRAL_REASONS, new org.apache.thrift.meta_data.FieldMetaData("referralReasons", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            tmpMap.put(_Fields.RECOM_REASON_TEXT, new org.apache.thrift.meta_data.FieldMetaData("recomReasonText", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralReason_args.class, metaDataMap);
        }

        public employeeReferralReason_args() {
        }

        public employeeReferralReason_args(
                int companyId,
                int postUserId,
                int positionId,
                int referralId,
                java.util.List<java.lang.String> referralReasons,
                byte relationship,
                java.lang.String recomReasonText)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.referralId = referralId;
            setReferralIdIsSet(true);
            this.referralReasons = referralReasons;
            this.relationship = relationship;
            setRelationshipIsSet(true);
            this.recomReasonText = recomReasonText;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public employeeReferralReason_args(employeeReferralReason_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.postUserId = other.postUserId;
            this.positionId = other.positionId;
            this.referralId = other.referralId;
            if (other.isSetReferralReasons()) {
                java.util.List<java.lang.String> __this__referralReasons = new java.util.ArrayList<java.lang.String>(other.referralReasons);
                this.referralReasons = __this__referralReasons;
            }
            this.relationship = other.relationship;
            if (other.isSetRecomReasonText()) {
                this.recomReasonText = other.recomReasonText;
            }
        }

        public employeeReferralReason_args deepCopy() {
            return new employeeReferralReason_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setReferralIdIsSet(false);
            this.referralId = 0;
            this.referralReasons = null;
            setRelationshipIsSet(false);
            this.relationship = 0;
            this.recomReasonText = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public employeeReferralReason_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public employeeReferralReason_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public employeeReferralReason_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getReferralId() {
            return this.referralId;
        }

        public employeeReferralReason_args setReferralId(int referralId) {
            this.referralId = referralId;
            setReferralIdIsSet(true);
            return this;
        }

        public void unsetReferralId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALID_ISSET_ID);
        }

        /** Returns true if field referralId is set (has been assigned a value) and false otherwise */
        public boolean isSetReferralId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALID_ISSET_ID);
        }

        public void setReferralIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALID_ISSET_ID, value);
        }

        public int getReferralReasonsSize() {
            return (this.referralReasons == null) ? 0 : this.referralReasons.size();
        }

        public java.util.Iterator<java.lang.String> getReferralReasonsIterator() {
            return (this.referralReasons == null) ? null : this.referralReasons.iterator();
        }

        public void addToReferralReasons(java.lang.String elem) {
            if (this.referralReasons == null) {
                this.referralReasons = new java.util.ArrayList<java.lang.String>();
            }
            this.referralReasons.add(elem);
        }

        public java.util.List<java.lang.String> getReferralReasons() {
            return this.referralReasons;
        }

        public employeeReferralReason_args setReferralReasons(java.util.List<java.lang.String> referralReasons) {
            this.referralReasons = referralReasons;
            return this;
        }

        public void unsetReferralReasons() {
            this.referralReasons = null;
        }

        /** Returns true if field referralReasons is set (has been assigned a value) and false otherwise */
        public boolean isSetReferralReasons() {
            return this.referralReasons != null;
        }

        public void setReferralReasonsIsSet(boolean value) {
            if (!value) {
                this.referralReasons = null;
            }
        }

        public byte getRelationship() {
            return this.relationship;
        }

        public employeeReferralReason_args setRelationship(byte relationship) {
            this.relationship = relationship;
            setRelationshipIsSet(true);
            return this;
        }

        public void unsetRelationship() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
        }

        /** Returns true if field relationship is set (has been assigned a value) and false otherwise */
        public boolean isSetRelationship() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
        }

        public void setRelationshipIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID, value);
        }

        public java.lang.String getRecomReasonText() {
            return this.recomReasonText;
        }

        public employeeReferralReason_args setRecomReasonText(java.lang.String recomReasonText) {
            this.recomReasonText = recomReasonText;
            return this;
        }

        public void unsetRecomReasonText() {
            this.recomReasonText = null;
        }

        /** Returns true if field recomReasonText is set (has been assigned a value) and false otherwise */
        public boolean isSetRecomReasonText() {
            return this.recomReasonText != null;
        }

        public void setRecomReasonTextIsSet(boolean value) {
            if (!value) {
                this.recomReasonText = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case REFERRAL_ID:
                    if (value == null) {
                        unsetReferralId();
                    } else {
                        setReferralId((java.lang.Integer)value);
                    }
                    break;

                case REFERRAL_REASONS:
                    if (value == null) {
                        unsetReferralReasons();
                    } else {
                        setReferralReasons((java.util.List<java.lang.String>)value);
                    }
                    break;

                case RELATIONSHIP:
                    if (value == null) {
                        unsetRelationship();
                    } else {
                        setRelationship((java.lang.Byte)value);
                    }
                    break;

                case RECOM_REASON_TEXT:
                    if (value == null) {
                        unsetRecomReasonText();
                    } else {
                        setRecomReasonText((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case POST_USER_ID:
                    return getPostUserId();

                case POSITION_ID:
                    return getPositionId();

                case REFERRAL_ID:
                    return getReferralId();

                case REFERRAL_REASONS:
                    return getReferralReasons();

                case RELATIONSHIP:
                    return getRelationship();

                case RECOM_REASON_TEXT:
                    return getRecomReasonText();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case POST_USER_ID:
                    return isSetPostUserId();
                case POSITION_ID:
                    return isSetPositionId();
                case REFERRAL_ID:
                    return isSetReferralId();
                case REFERRAL_REASONS:
                    return isSetReferralReasons();
                case RELATIONSHIP:
                    return isSetRelationship();
                case RECOM_REASON_TEXT:
                    return isSetRecomReasonText();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof employeeReferralReason_args)
                return this.equals((employeeReferralReason_args)that);
            return false;
        }

        public boolean equals(employeeReferralReason_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_referralId = true;
            boolean that_present_referralId = true;
            if (this_present_referralId || that_present_referralId) {
                if (!(this_present_referralId && that_present_referralId))
                    return false;
                if (this.referralId != that.referralId)
                    return false;
            }

            boolean this_present_referralReasons = true && this.isSetReferralReasons();
            boolean that_present_referralReasons = true && that.isSetReferralReasons();
            if (this_present_referralReasons || that_present_referralReasons) {
                if (!(this_present_referralReasons && that_present_referralReasons))
                    return false;
                if (!this.referralReasons.equals(that.referralReasons))
                    return false;
            }

            boolean this_present_relationship = true;
            boolean that_present_relationship = true;
            if (this_present_relationship || that_present_relationship) {
                if (!(this_present_relationship && that_present_relationship))
                    return false;
                if (this.relationship != that.relationship)
                    return false;
            }

            boolean this_present_recomReasonText = true && this.isSetRecomReasonText();
            boolean that_present_recomReasonText = true && that.isSetRecomReasonText();
            if (this_present_recomReasonText || that_present_recomReasonText) {
                if (!(this_present_recomReasonText && that_present_recomReasonText))
                    return false;
                if (!this.recomReasonText.equals(that.recomReasonText))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + postUserId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + referralId;

            hashCode = hashCode * 8191 + ((isSetReferralReasons()) ? 131071 : 524287);
            if (isSetReferralReasons())
                hashCode = hashCode * 8191 + referralReasons.hashCode();

            hashCode = hashCode * 8191 + (int) (relationship);

            hashCode = hashCode * 8191 + ((isSetRecomReasonText()) ? 131071 : 524287);
            if (isSetRecomReasonText())
                hashCode = hashCode * 8191 + recomReasonText.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(employeeReferralReason_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReferralId()).compareTo(other.isSetReferralId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReferralId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralId, other.referralId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReferralReasons()).compareTo(other.isSetReferralReasons());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReferralReasons()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralReasons, other.referralReasons);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetRelationship()).compareTo(other.isSetRelationship());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRelationship()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationship, other.relationship);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetRecomReasonText()).compareTo(other.isSetRecomReasonText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRecomReasonText()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomReasonText, other.recomReasonText);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralReason_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("referralId:");
            sb.append(this.referralId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("referralReasons:");
            if (this.referralReasons == null) {
                sb.append("null");
            } else {
                sb.append(this.referralReasons);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("relationship:");
            sb.append(this.relationship);
            first = false;
            if (!first) sb.append(", ");
            sb.append("recomReasonText:");
            if (this.recomReasonText == null) {
                sb.append("null");
            } else {
                sb.append(this.recomReasonText);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class employeeReferralReason_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralReason_argsStandardScheme getScheme() {
                return new employeeReferralReason_argsStandardScheme();
            }
        }

        private static class employeeReferralReason_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralReason_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // REFERRAL_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.referralId = iprot.readI32();
                                struct.setReferralIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // REFERRAL_REASONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list16.size);
                                    java.lang.String _elem17;
                                    for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                                    {
                                        _elem17 = iprot.readString();
                                        struct.referralReasons.add(_elem17);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setReferralReasonsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // RELATIONSHIP
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.relationship = iprot.readByte();
                                struct.setRelationshipIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // RECOM_REASON_TEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.recomReasonText = iprot.readString();
                                struct.setRecomReasonTextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralReason_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(REFERRAL_ID_FIELD_DESC);
                oprot.writeI32(struct.referralId);
                oprot.writeFieldEnd();
                if (struct.referralReasons != null) {
                    oprot.writeFieldBegin(REFERRAL_REASONS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.referralReasons.size()));
                        for (java.lang.String _iter19 : struct.referralReasons)
                        {
                            oprot.writeString(_iter19);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(RELATIONSHIP_FIELD_DESC);
                oprot.writeByte(struct.relationship);
                oprot.writeFieldEnd();
                if (struct.recomReasonText != null) {
                    oprot.writeFieldBegin(RECOM_REASON_TEXT_FIELD_DESC);
                    oprot.writeString(struct.recomReasonText);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class employeeReferralReason_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralReason_argsTupleScheme getScheme() {
                return new employeeReferralReason_argsTupleScheme();
            }
        }

        private static class employeeReferralReason_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralReason_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(2);
                }
                if (struct.isSetReferralId()) {
                    optionals.set(3);
                }
                if (struct.isSetReferralReasons()) {
                    optionals.set(4);
                }
                if (struct.isSetRelationship()) {
                    optionals.set(5);
                }
                if (struct.isSetRecomReasonText()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetReferralId()) {
                    oprot.writeI32(struct.referralId);
                }
                if (struct.isSetReferralReasons()) {
                    {
                        oprot.writeI32(struct.referralReasons.size());
                        for (java.lang.String _iter20 : struct.referralReasons)
                        {
                            oprot.writeString(_iter20);
                        }
                    }
                }
                if (struct.isSetRelationship()) {
                    oprot.writeByte(struct.relationship);
                }
                if (struct.isSetRecomReasonText()) {
                    oprot.writeString(struct.recomReasonText);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralReason_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.referralId = iprot.readI32();
                    struct.setReferralIdIsSet(true);
                }
                if (incoming.get(4)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list21.size);
                        java.lang.String _elem22;
                        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                        {
                            _elem22 = iprot.readString();
                            struct.referralReasons.add(_elem22);
                        }
                    }
                    struct.setReferralReasonsIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.relationship = iprot.readByte();
                    struct.setRelationshipIsSet(true);
                }
                if (incoming.get(6)) {
                    struct.recomReasonText = iprot.readString();
                    struct.setRecomReasonTextIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class employeeReferralReason_result implements org.apache.thrift.TBase<employeeReferralReason_result, employeeReferralReason_result._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralReason_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralReason_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralReason_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralReason_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralReason_result.class, metaDataMap);
        }

        public employeeReferralReason_result() {
        }

        public employeeReferralReason_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public employeeReferralReason_result(employeeReferralReason_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public employeeReferralReason_result deepCopy() {
            return new employeeReferralReason_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public employeeReferralReason_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof employeeReferralReason_result)
                return this.equals((employeeReferralReason_result)that);
            return false;
        }

        public boolean equals(employeeReferralReason_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(employeeReferralReason_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralReason_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class employeeReferralReason_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralReason_resultStandardScheme getScheme() {
                return new employeeReferralReason_resultStandardScheme();
            }
        }

        private static class employeeReferralReason_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralReason_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralReason_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class employeeReferralReason_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralReason_resultTupleScheme getScheme() {
                return new employeeReferralReason_resultTupleScheme();
            }
        }

        private static class employeeReferralReason_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralReason_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralReason_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchSeekRecommend_args implements org.apache.thrift.TBase<fetchSeekRecommend_args, fetchSeekRecommend_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchSeekRecommend_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchSeekRecommend_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField REFERRAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("referralId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchSeekRecommend_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchSeekRecommend_argsTupleSchemeFactory();

        public int companyId; // required
        public int referralId; // required
        public int postUserId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            REFERRAL_ID((short)2, "referralId"),
            POST_USER_ID((short)3, "postUserId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // REFERRAL_ID
                        return REFERRAL_ID;
                    case 3: // POST_USER_ID
                        return POST_USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __REFERRALID_ISSET_ID = 1;
        private static final int __POSTUSERID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REFERRAL_ID, new org.apache.thrift.meta_data.FieldMetaData("referralId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchSeekRecommend_args.class, metaDataMap);
        }

        public fetchSeekRecommend_args() {
        }

        public fetchSeekRecommend_args(
                int companyId,
                int referralId,
                int postUserId)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.referralId = referralId;
            setReferralIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchSeekRecommend_args(fetchSeekRecommend_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.referralId = other.referralId;
            this.postUserId = other.postUserId;
        }

        public fetchSeekRecommend_args deepCopy() {
            return new fetchSeekRecommend_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setReferralIdIsSet(false);
            this.referralId = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public fetchSeekRecommend_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getReferralId() {
            return this.referralId;
        }

        public fetchSeekRecommend_args setReferralId(int referralId) {
            this.referralId = referralId;
            setReferralIdIsSet(true);
            return this;
        }

        public void unsetReferralId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALID_ISSET_ID);
        }

        /** Returns true if field referralId is set (has been assigned a value) and false otherwise */
        public boolean isSetReferralId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALID_ISSET_ID);
        }

        public void setReferralIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public fetchSeekRecommend_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case REFERRAL_ID:
                    if (value == null) {
                        unsetReferralId();
                    } else {
                        setReferralId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case REFERRAL_ID:
                    return getReferralId();

                case POST_USER_ID:
                    return getPostUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case REFERRAL_ID:
                    return isSetReferralId();
                case POST_USER_ID:
                    return isSetPostUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchSeekRecommend_args)
                return this.equals((fetchSeekRecommend_args)that);
            return false;
        }

        public boolean equals(fetchSeekRecommend_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_referralId = true;
            boolean that_present_referralId = true;
            if (this_present_referralId || that_present_referralId) {
                if (!(this_present_referralId && that_present_referralId))
                    return false;
                if (this.referralId != that.referralId)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + referralId;

            hashCode = hashCode * 8191 + postUserId;

            return hashCode;
        }

        @Override
        public int compareTo(fetchSeekRecommend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReferralId()).compareTo(other.isSetReferralId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReferralId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralId, other.referralId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchSeekRecommend_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("referralId:");
            sb.append(this.referralId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchSeekRecommend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchSeekRecommend_argsStandardScheme getScheme() {
                return new fetchSeekRecommend_argsStandardScheme();
            }
        }

        private static class fetchSeekRecommend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchSeekRecommend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REFERRAL_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.referralId = iprot.readI32();
                                struct.setReferralIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchSeekRecommend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(REFERRAL_ID_FIELD_DESC);
                oprot.writeI32(struct.referralId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchSeekRecommend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchSeekRecommend_argsTupleScheme getScheme() {
                return new fetchSeekRecommend_argsTupleScheme();
            }
        }

        private static class fetchSeekRecommend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchSeekRecommend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetReferralId()) {
                    optionals.set(1);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetReferralId()) {
                    oprot.writeI32(struct.referralId);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchSeekRecommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.referralId = iprot.readI32();
                    struct.setReferralIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchSeekRecommend_result implements org.apache.thrift.TBase<fetchSeekRecommend_result, fetchSeekRecommend_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchSeekRecommend_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchSeekRecommend_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchSeekRecommend_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchSeekRecommend_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ContactPushInfo success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ContactPushInfo.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchSeekRecommend_result.class, metaDataMap);
        }

        public fetchSeekRecommend_result() {
        }

        public fetchSeekRecommend_result(
                com.moseeker.thrift.gen.referral.struct.ContactPushInfo success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchSeekRecommend_result(fetchSeekRecommend_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.referral.struct.ContactPushInfo(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public fetchSeekRecommend_result deepCopy() {
            return new fetchSeekRecommend_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ContactPushInfo getSuccess() {
            return this.success;
        }

        public fetchSeekRecommend_result setSuccess(com.moseeker.thrift.gen.referral.struct.ContactPushInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public fetchSeekRecommend_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.referral.struct.ContactPushInfo)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchSeekRecommend_result)
                return this.equals((fetchSeekRecommend_result)that);
            return false;
        }

        public boolean equals(fetchSeekRecommend_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fetchSeekRecommend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchSeekRecommend_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchSeekRecommend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchSeekRecommend_resultStandardScheme getScheme() {
                return new fetchSeekRecommend_resultStandardScheme();
            }
        }

        private static class fetchSeekRecommend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchSeekRecommend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.referral.struct.ContactPushInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchSeekRecommend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchSeekRecommend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchSeekRecommend_resultTupleScheme getScheme() {
                return new fetchSeekRecommend_resultTupleScheme();
            }
        }

        private static class fetchSeekRecommend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchSeekRecommend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchSeekRecommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.referral.struct.ContactPushInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class checkEmployee_args implements org.apache.thrift.TBase<checkEmployee_args, checkEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmployee_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmployee_args");

        private static final org.apache.thrift.protocol.TField CHECK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmployee_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmployee_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHECK_INFO((short)1, "checkInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHECK_INFO
                        return CHECK_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHECK_INFO, new org.apache.thrift.meta_data.FieldMetaData("checkInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmployee_args.class, metaDataMap);
        }

        public checkEmployee_args() {
        }

        public checkEmployee_args(
                com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo)
        {
            this();
            this.checkInfo = checkInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkEmployee_args(checkEmployee_args other) {
            if (other.isSetCheckInfo()) {
                this.checkInfo = new com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo(other.checkInfo);
            }
        }

        public checkEmployee_args deepCopy() {
            return new checkEmployee_args(this);
        }

        @Override
        public void clear() {
            this.checkInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo getCheckInfo() {
            return this.checkInfo;
        }

        public checkEmployee_args setCheckInfo(com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo checkInfo) {
            this.checkInfo = checkInfo;
            return this;
        }

        public void unsetCheckInfo() {
            this.checkInfo = null;
        }

        /** Returns true if field checkInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetCheckInfo() {
            return this.checkInfo != null;
        }

        public void setCheckInfoIsSet(boolean value) {
            if (!value) {
                this.checkInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CHECK_INFO:
                    if (value == null) {
                        unsetCheckInfo();
                    } else {
                        setCheckInfo((com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHECK_INFO:
                    return getCheckInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHECK_INFO:
                    return isSetCheckInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof checkEmployee_args)
                return this.equals((checkEmployee_args)that);
            return false;
        }

        public boolean equals(checkEmployee_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_checkInfo = true && this.isSetCheckInfo();
            boolean that_present_checkInfo = true && that.isSetCheckInfo();
            if (this_present_checkInfo || that_present_checkInfo) {
                if (!(this_present_checkInfo && that_present_checkInfo))
                    return false;
                if (!this.checkInfo.equals(that.checkInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCheckInfo()) ? 131071 : 524287);
            if (isSetCheckInfo())
                hashCode = hashCode * 8191 + checkInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(checkEmployee_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCheckInfo()).compareTo(other.isSetCheckInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCheckInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkInfo, other.checkInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmployee_args(");
            boolean first = true;

            sb.append("checkInfo:");
            if (this.checkInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.checkInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (checkInfo != null) {
                checkInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkEmployee_argsStandardScheme getScheme() {
                return new checkEmployee_argsStandardScheme();
            }
        }

        private static class checkEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmployee_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmployee_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHECK_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.checkInfo = new com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo();
                                struct.checkInfo.read(iprot);
                                struct.setCheckInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmployee_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.checkInfo != null) {
                    oprot.writeFieldBegin(CHECK_INFO_FIELD_DESC);
                    struct.checkInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkEmployee_argsTupleScheme getScheme() {
                return new checkEmployee_argsTupleScheme();
            }
        }

        private static class checkEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmployee_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkEmployee_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCheckInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCheckInfo()) {
                    struct.checkInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkEmployee_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.checkInfo = new com.moseeker.thrift.gen.referral.struct.CheckEmployeeInfo();
                    struct.checkInfo.read(iprot);
                    struct.setCheckInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class checkEmployee_result implements org.apache.thrift.TBase<checkEmployee_result, checkEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmployee_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmployee_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmployee_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmployee_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmployee_result.class, metaDataMap);
        }

        public checkEmployee_result() {
        }

        public checkEmployee_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkEmployee_result(checkEmployee_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public checkEmployee_result deepCopy() {
            return new checkEmployee_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public checkEmployee_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public checkEmployee_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof checkEmployee_result)
                return this.equals((checkEmployee_result)that);
            return false;
        }

        public boolean equals(checkEmployee_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(checkEmployee_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmployee_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkEmployee_resultStandardScheme getScheme() {
                return new checkEmployee_resultStandardScheme();
            }
        }

        private static class checkEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmployee_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmployee_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmployee_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkEmployee_resultTupleScheme getScheme() {
                return new checkEmployee_resultTupleScheme();
            }
        }

        private static class checkEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmployee_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkEmployee_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkEmployee_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class saveTenMinuteCandidateShareChain_args implements org.apache.thrift.TBase<saveTenMinuteCandidateShareChain_args, saveTenMinuteCandidateShareChain_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveTenMinuteCandidateShareChain_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTenMinuteCandidateShareChain_args");

        private static final org.apache.thrift.protocol.TField CARD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveTenMinuteCandidateShareChain_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveTenMinuteCandidateShareChain_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CARD_INFO((short)1, "cardInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CARD_INFO
                        return CARD_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CARD_INFO, new org.apache.thrift.meta_data.FieldMetaData("cardInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralCardInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTenMinuteCandidateShareChain_args.class, metaDataMap);
        }

        public saveTenMinuteCandidateShareChain_args() {
        }

        public saveTenMinuteCandidateShareChain_args(
                com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo)
        {
            this();
            this.cardInfo = cardInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public saveTenMinuteCandidateShareChain_args(saveTenMinuteCandidateShareChain_args other) {
            if (other.isSetCardInfo()) {
                this.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo(other.cardInfo);
            }
        }

        public saveTenMinuteCandidateShareChain_args deepCopy() {
            return new saveTenMinuteCandidateShareChain_args(this);
        }

        @Override
        public void clear() {
            this.cardInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralCardInfo getCardInfo() {
            return this.cardInfo;
        }

        public saveTenMinuteCandidateShareChain_args setCardInfo(com.moseeker.thrift.gen.referral.struct.ReferralCardInfo cardInfo) {
            this.cardInfo = cardInfo;
            return this;
        }

        public void unsetCardInfo() {
            this.cardInfo = null;
        }

        /** Returns true if field cardInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetCardInfo() {
            return this.cardInfo != null;
        }

        public void setCardInfoIsSet(boolean value) {
            if (!value) {
                this.cardInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CARD_INFO:
                    if (value == null) {
                        unsetCardInfo();
                    } else {
                        setCardInfo((com.moseeker.thrift.gen.referral.struct.ReferralCardInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CARD_INFO:
                    return getCardInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CARD_INFO:
                    return isSetCardInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof saveTenMinuteCandidateShareChain_args)
                return this.equals((saveTenMinuteCandidateShareChain_args)that);
            return false;
        }

        public boolean equals(saveTenMinuteCandidateShareChain_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_cardInfo = true && this.isSetCardInfo();
            boolean that_present_cardInfo = true && that.isSetCardInfo();
            if (this_present_cardInfo || that_present_cardInfo) {
                if (!(this_present_cardInfo && that_present_cardInfo))
                    return false;
                if (!this.cardInfo.equals(that.cardInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCardInfo()) ? 131071 : 524287);
            if (isSetCardInfo())
                hashCode = hashCode * 8191 + cardInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(saveTenMinuteCandidateShareChain_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCardInfo()).compareTo(other.isSetCardInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCardInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardInfo, other.cardInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("saveTenMinuteCandidateShareChain_args(");
            boolean first = true;

            sb.append("cardInfo:");
            if (this.cardInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.cardInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (cardInfo != null) {
                cardInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class saveTenMinuteCandidateShareChain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveTenMinuteCandidateShareChain_argsStandardScheme getScheme() {
                return new saveTenMinuteCandidateShareChain_argsStandardScheme();
            }
        }

        private static class saveTenMinuteCandidateShareChain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveTenMinuteCandidateShareChain_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, saveTenMinuteCandidateShareChain_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CARD_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo();
                                struct.cardInfo.read(iprot);
                                struct.setCardInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, saveTenMinuteCandidateShareChain_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cardInfo != null) {
                    oprot.writeFieldBegin(CARD_INFO_FIELD_DESC);
                    struct.cardInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class saveTenMinuteCandidateShareChain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveTenMinuteCandidateShareChain_argsTupleScheme getScheme() {
                return new saveTenMinuteCandidateShareChain_argsTupleScheme();
            }
        }

        private static class saveTenMinuteCandidateShareChain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveTenMinuteCandidateShareChain_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, saveTenMinuteCandidateShareChain_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCardInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCardInfo()) {
                    struct.cardInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, saveTenMinuteCandidateShareChain_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.cardInfo = new com.moseeker.thrift.gen.referral.struct.ReferralCardInfo();
                    struct.cardInfo.read(iprot);
                    struct.setCardInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class saveTenMinuteCandidateShareChain_result implements org.apache.thrift.TBase<saveTenMinuteCandidateShareChain_result, saveTenMinuteCandidateShareChain_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveTenMinuteCandidateShareChain_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTenMinuteCandidateShareChain_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveTenMinuteCandidateShareChain_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveTenMinuteCandidateShareChain_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTenMinuteCandidateShareChain_result.class, metaDataMap);
        }

        public saveTenMinuteCandidateShareChain_result() {
        }

        public saveTenMinuteCandidateShareChain_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public saveTenMinuteCandidateShareChain_result(saveTenMinuteCandidateShareChain_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public saveTenMinuteCandidateShareChain_result deepCopy() {
            return new saveTenMinuteCandidateShareChain_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public saveTenMinuteCandidateShareChain_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof saveTenMinuteCandidateShareChain_result)
                return this.equals((saveTenMinuteCandidateShareChain_result)that);
            return false;
        }

        public boolean equals(saveTenMinuteCandidateShareChain_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(saveTenMinuteCandidateShareChain_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("saveTenMinuteCandidateShareChain_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class saveTenMinuteCandidateShareChain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveTenMinuteCandidateShareChain_resultStandardScheme getScheme() {
                return new saveTenMinuteCandidateShareChain_resultStandardScheme();
            }
        }

        private static class saveTenMinuteCandidateShareChain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveTenMinuteCandidateShareChain_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, saveTenMinuteCandidateShareChain_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, saveTenMinuteCandidateShareChain_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class saveTenMinuteCandidateShareChain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveTenMinuteCandidateShareChain_resultTupleScheme getScheme() {
                return new saveTenMinuteCandidateShareChain_resultTupleScheme();
            }
        }

        private static class saveTenMinuteCandidateShareChain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveTenMinuteCandidateShareChain_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, saveTenMinuteCandidateShareChain_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, saveTenMinuteCandidateShareChain_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProgressByOne_args implements org.apache.thrift.TBase<getProgressByOne_args, getProgressByOne_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProgressByOne_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgressByOne_args");

        private static final org.apache.thrift.protocol.TField PROGRESS_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("progressQuery", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgressByOne_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgressByOne_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROGRESS_QUERY((short)1, "progressQuery");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROGRESS_QUERY
                        return PROGRESS_QUERY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROGRESS_QUERY, new org.apache.thrift.meta_data.FieldMetaData("progressQuery", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgressByOne_args.class, metaDataMap);
        }

        public getProgressByOne_args() {
        }

        public getProgressByOne_args(
                com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery)
        {
            this();
            this.progressQuery = progressQuery;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProgressByOne_args(getProgressByOne_args other) {
            if (other.isSetProgressQuery()) {
                this.progressQuery = new com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo(other.progressQuery);
            }
        }

        public getProgressByOne_args deepCopy() {
            return new getProgressByOne_args(this);
        }

        @Override
        public void clear() {
            this.progressQuery = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo getProgressQuery() {
            return this.progressQuery;
        }

        public getProgressByOne_args setProgressQuery(com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo progressQuery) {
            this.progressQuery = progressQuery;
            return this;
        }

        public void unsetProgressQuery() {
            this.progressQuery = null;
        }

        /** Returns true if field progressQuery is set (has been assigned a value) and false otherwise */
        public boolean isSetProgressQuery() {
            return this.progressQuery != null;
        }

        public void setProgressQueryIsSet(boolean value) {
            if (!value) {
                this.progressQuery = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROGRESS_QUERY:
                    if (value == null) {
                        unsetProgressQuery();
                    } else {
                        setProgressQuery((com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROGRESS_QUERY:
                    return getProgressQuery();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROGRESS_QUERY:
                    return isSetProgressQuery();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProgressByOne_args)
                return this.equals((getProgressByOne_args)that);
            return false;
        }

        public boolean equals(getProgressByOne_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_progressQuery = true && this.isSetProgressQuery();
            boolean that_present_progressQuery = true && that.isSetProgressQuery();
            if (this_present_progressQuery || that_present_progressQuery) {
                if (!(this_present_progressQuery && that_present_progressQuery))
                    return false;
                if (!this.progressQuery.equals(that.progressQuery))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProgressQuery()) ? 131071 : 524287);
            if (isSetProgressQuery())
                hashCode = hashCode * 8191 + progressQuery.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProgressByOne_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProgressQuery()).compareTo(other.isSetProgressQuery());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProgressQuery()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressQuery, other.progressQuery);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgressByOne_args(");
            boolean first = true;

            sb.append("progressQuery:");
            if (this.progressQuery == null) {
                sb.append("null");
            } else {
                sb.append(this.progressQuery);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (progressQuery != null) {
                progressQuery.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProgressByOne_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressByOne_argsStandardScheme getScheme() {
                return new getProgressByOne_argsStandardScheme();
            }
        }

        private static class getProgressByOne_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgressByOne_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProgressByOne_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROGRESS_QUERY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.progressQuery = new com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo();
                                struct.progressQuery.read(iprot);
                                struct.setProgressQueryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProgressByOne_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.progressQuery != null) {
                    oprot.writeFieldBegin(PROGRESS_QUERY_FIELD_DESC);
                    struct.progressQuery.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProgressByOne_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressByOne_argsTupleScheme getScheme() {
                return new getProgressByOne_argsTupleScheme();
            }
        }

        private static class getProgressByOne_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgressByOne_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProgressByOne_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProgressQuery()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetProgressQuery()) {
                    struct.progressQuery.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProgressByOne_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.progressQuery = new com.moseeker.thrift.gen.referral.struct.ReferralProgressQueryInfo();
                    struct.progressQuery.read(iprot);
                    struct.setProgressQueryIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProgressByOne_result implements org.apache.thrift.TBase<getProgressByOne_result, getProgressByOne_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProgressByOne_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgressByOne_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgressByOne_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgressByOne_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgressByOne_result.class, metaDataMap);
        }

        public getProgressByOne_result() {
        }

        public getProgressByOne_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProgressByOne_result(getProgressByOne_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProgressByOne_result deepCopy() {
            return new getProgressByOne_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public getProgressByOne_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProgressByOne_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProgressByOne_result)
                return this.equals((getProgressByOne_result)that);
            return false;
        }

        public boolean equals(getProgressByOne_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProgressByOne_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgressByOne_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProgressByOne_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressByOne_resultStandardScheme getScheme() {
                return new getProgressByOne_resultStandardScheme();
            }
        }

        private static class getProgressByOne_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgressByOne_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProgressByOne_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProgressByOne_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProgressByOne_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressByOne_resultTupleScheme getScheme() {
                return new getProgressByOne_resultTupleScheme();
            }
        }

        private static class getProgressByOne_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgressByOne_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProgressByOne_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProgressByOne_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProgressBatch_args implements org.apache.thrift.TBase<getProgressBatch_args, getProgressBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProgressBatch_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgressBatch_args");

        private static final org.apache.thrift.protocol.TField PROGRESS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("progressInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgressBatch_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgressBatch_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROGRESS_INFO((short)1, "progressInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROGRESS_INFO
                        return PROGRESS_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROGRESS_INFO, new org.apache.thrift.meta_data.FieldMetaData("progressInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgressBatch_args.class, metaDataMap);
        }

        public getProgressBatch_args() {
        }

        public getProgressBatch_args(
                com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo)
        {
            this();
            this.progressInfo = progressInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProgressBatch_args(getProgressBatch_args other) {
            if (other.isSetProgressInfo()) {
                this.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo(other.progressInfo);
            }
        }

        public getProgressBatch_args deepCopy() {
            return new getProgressBatch_args(this);
        }

        @Override
        public void clear() {
            this.progressInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo getProgressInfo() {
            return this.progressInfo;
        }

        public getProgressBatch_args setProgressInfo(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) {
            this.progressInfo = progressInfo;
            return this;
        }

        public void unsetProgressInfo() {
            this.progressInfo = null;
        }

        /** Returns true if field progressInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetProgressInfo() {
            return this.progressInfo != null;
        }

        public void setProgressInfoIsSet(boolean value) {
            if (!value) {
                this.progressInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROGRESS_INFO:
                    if (value == null) {
                        unsetProgressInfo();
                    } else {
                        setProgressInfo((com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROGRESS_INFO:
                    return getProgressInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROGRESS_INFO:
                    return isSetProgressInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProgressBatch_args)
                return this.equals((getProgressBatch_args)that);
            return false;
        }

        public boolean equals(getProgressBatch_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_progressInfo = true && this.isSetProgressInfo();
            boolean that_present_progressInfo = true && that.isSetProgressInfo();
            if (this_present_progressInfo || that_present_progressInfo) {
                if (!(this_present_progressInfo && that_present_progressInfo))
                    return false;
                if (!this.progressInfo.equals(that.progressInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProgressInfo()) ? 131071 : 524287);
            if (isSetProgressInfo())
                hashCode = hashCode * 8191 + progressInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProgressBatch_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProgressInfo()).compareTo(other.isSetProgressInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProgressInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressInfo, other.progressInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgressBatch_args(");
            boolean first = true;

            sb.append("progressInfo:");
            if (this.progressInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.progressInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (progressInfo != null) {
                progressInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProgressBatch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressBatch_argsStandardScheme getScheme() {
                return new getProgressBatch_argsStandardScheme();
            }
        }

        private static class getProgressBatch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgressBatch_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProgressBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROGRESS_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo();
                                struct.progressInfo.read(iprot);
                                struct.setProgressInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProgressBatch_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.progressInfo != null) {
                    oprot.writeFieldBegin(PROGRESS_INFO_FIELD_DESC);
                    struct.progressInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProgressBatch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressBatch_argsTupleScheme getScheme() {
                return new getProgressBatch_argsTupleScheme();
            }
        }

        private static class getProgressBatch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgressBatch_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProgressBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProgressInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetProgressInfo()) {
                    struct.progressInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProgressBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo();
                    struct.progressInfo.read(iprot);
                    struct.setProgressInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProgressBatch_result implements org.apache.thrift.TBase<getProgressBatch_result, getProgressBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProgressBatch_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgressBatch_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgressBatch_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgressBatch_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgressBatch_result.class, metaDataMap);
        }

        public getProgressBatch_result() {
        }

        public getProgressBatch_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProgressBatch_result(getProgressBatch_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProgressBatch_result deepCopy() {
            return new getProgressBatch_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public getProgressBatch_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProgressBatch_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProgressBatch_result)
                return this.equals((getProgressBatch_result)that);
            return false;
        }

        public boolean equals(getProgressBatch_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProgressBatch_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgressBatch_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProgressBatch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressBatch_resultStandardScheme getScheme() {
                return new getProgressBatch_resultStandardScheme();
            }
        }

        private static class getProgressBatch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgressBatch_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProgressBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProgressBatch_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProgressBatch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProgressBatch_resultTupleScheme getScheme() {
                return new getProgressBatch_resultTupleScheme();
            }
        }

        private static class getProgressBatch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgressBatch_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProgressBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProgressBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class progressQueryKeyword_args implements org.apache.thrift.TBase<progressQueryKeyword_args, progressQueryKeyword_args._Fields>, java.io.Serializable, Cloneable, Comparable<progressQueryKeyword_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("progressQueryKeyword_args");

        private static final org.apache.thrift.protocol.TField PROGRESS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("progressInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new progressQueryKeyword_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new progressQueryKeyword_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROGRESS_INFO((short)1, "progressInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROGRESS_INFO
                        return PROGRESS_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROGRESS_INFO, new org.apache.thrift.meta_data.FieldMetaData("progressInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(progressQueryKeyword_args.class, metaDataMap);
        }

        public progressQueryKeyword_args() {
        }

        public progressQueryKeyword_args(
                com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo)
        {
            this();
            this.progressInfo = progressInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public progressQueryKeyword_args(progressQueryKeyword_args other) {
            if (other.isSetProgressInfo()) {
                this.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo(other.progressInfo);
            }
        }

        public progressQueryKeyword_args deepCopy() {
            return new progressQueryKeyword_args(this);
        }

        @Override
        public void clear() {
            this.progressInfo = null;
        }

        public com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo getProgressInfo() {
            return this.progressInfo;
        }

        public progressQueryKeyword_args setProgressInfo(com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo progressInfo) {
            this.progressInfo = progressInfo;
            return this;
        }

        public void unsetProgressInfo() {
            this.progressInfo = null;
        }

        /** Returns true if field progressInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetProgressInfo() {
            return this.progressInfo != null;
        }

        public void setProgressInfoIsSet(boolean value) {
            if (!value) {
                this.progressInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROGRESS_INFO:
                    if (value == null) {
                        unsetProgressInfo();
                    } else {
                        setProgressInfo((com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROGRESS_INFO:
                    return getProgressInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROGRESS_INFO:
                    return isSetProgressInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof progressQueryKeyword_args)
                return this.equals((progressQueryKeyword_args)that);
            return false;
        }

        public boolean equals(progressQueryKeyword_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_progressInfo = true && this.isSetProgressInfo();
            boolean that_present_progressInfo = true && that.isSetProgressInfo();
            if (this_present_progressInfo || that_present_progressInfo) {
                if (!(this_present_progressInfo && that_present_progressInfo))
                    return false;
                if (!this.progressInfo.equals(that.progressInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProgressInfo()) ? 131071 : 524287);
            if (isSetProgressInfo())
                hashCode = hashCode * 8191 + progressInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(progressQueryKeyword_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProgressInfo()).compareTo(other.isSetProgressInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProgressInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressInfo, other.progressInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("progressQueryKeyword_args(");
            boolean first = true;

            sb.append("progressInfo:");
            if (this.progressInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.progressInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (progressInfo != null) {
                progressInfo.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class progressQueryKeyword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public progressQueryKeyword_argsStandardScheme getScheme() {
                return new progressQueryKeyword_argsStandardScheme();
            }
        }

        private static class progressQueryKeyword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<progressQueryKeyword_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, progressQueryKeyword_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROGRESS_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo();
                                struct.progressInfo.read(iprot);
                                struct.setProgressInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, progressQueryKeyword_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.progressInfo != null) {
                    oprot.writeFieldBegin(PROGRESS_INFO_FIELD_DESC);
                    struct.progressInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class progressQueryKeyword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public progressQueryKeyword_argsTupleScheme getScheme() {
                return new progressQueryKeyword_argsTupleScheme();
            }
        }

        private static class progressQueryKeyword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<progressQueryKeyword_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, progressQueryKeyword_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProgressInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetProgressInfo()) {
                    struct.progressInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, progressQueryKeyword_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.progressInfo = new com.moseeker.thrift.gen.referral.struct.ReferralProgressInfo();
                    struct.progressInfo.read(iprot);
                    struct.setProgressInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class progressQueryKeyword_result implements org.apache.thrift.TBase<progressQueryKeyword_result, progressQueryKeyword_result._Fields>, java.io.Serializable, Cloneable, Comparable<progressQueryKeyword_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("progressQueryKeyword_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new progressQueryKeyword_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new progressQueryKeyword_resultTupleSchemeFactory();

        public java.lang.String success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(progressQueryKeyword_result.class, metaDataMap);
        }

        public progressQueryKeyword_result() {
        }

        public progressQueryKeyword_result(
                java.lang.String success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public progressQueryKeyword_result(progressQueryKeyword_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public progressQueryKeyword_result deepCopy() {
            return new progressQueryKeyword_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public java.lang.String getSuccess() {
            return this.success;
        }

        public progressQueryKeyword_result setSuccess(java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public progressQueryKeyword_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof progressQueryKeyword_result)
                return this.equals((progressQueryKeyword_result)that);
            return false;
        }

        public boolean equals(progressQueryKeyword_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(progressQueryKeyword_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("progressQueryKeyword_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class progressQueryKeyword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public progressQueryKeyword_resultStandardScheme getScheme() {
                return new progressQueryKeyword_resultStandardScheme();
            }
        }

        private static class progressQueryKeyword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<progressQueryKeyword_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, progressQueryKeyword_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, progressQueryKeyword_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class progressQueryKeyword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public progressQueryKeyword_resultTupleScheme getScheme() {
                return new progressQueryKeyword_resultTupleScheme();
            }
        }

        private static class progressQueryKeyword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<progressQueryKeyword_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, progressQueryKeyword_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, progressQueryKeyword_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class employeeReferralRecomEvaluation_args implements org.apache.thrift.TBase<employeeReferralRecomEvaluation_args, employeeReferralRecomEvaluation_args._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralRecomEvaluation_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralRecomEvaluation_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PRESENTEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField REFERRAL_REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("referralReasons", org.apache.thrift.protocol.TType.LIST, (short)5);
        private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.BYTE, (short)6);
        private static final org.apache.thrift.protocol.TField RECOM_REASON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomReasonText", org.apache.thrift.protocol.TType.STRING, (short)7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralRecomEvaluation_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralRecomEvaluation_argsTupleSchemeFactory();

        public int companyId; // required
        public int postUserId; // required
        public int positionId; // required
        public int presenteeId; // required
        public java.util.List<java.lang.String> referralReasons; // required
        public byte relationship; // required
        public java.lang.String recomReasonText; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            POST_USER_ID((short)2, "postUserId"),
            POSITION_ID((short)3, "positionId"),
            PRESENTEE_ID((short)4, "presenteeId"),
            REFERRAL_REASONS((short)5, "referralReasons"),
            RELATIONSHIP((short)6, "relationship"),
            RECOM_REASON_TEXT((short)7, "recomReasonText");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // POST_USER_ID
                        return POST_USER_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    case 4: // PRESENTEE_ID
                        return PRESENTEE_ID;
                    case 5: // REFERRAL_REASONS
                        return REFERRAL_REASONS;
                    case 6: // RELATIONSHIP
                        return RELATIONSHIP;
                    case 7: // RECOM_REASON_TEXT
                        return RECOM_REASON_TEXT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __POSTUSERID_ISSET_ID = 1;
        private static final int __POSITIONID_ISSET_ID = 2;
        private static final int __PRESENTEEID_ISSET_ID = 3;
        private static final int __RELATIONSHIP_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PRESENTEE_ID, new org.apache.thrift.meta_data.FieldMetaData("presenteeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REFERRAL_REASONS, new org.apache.thrift.meta_data.FieldMetaData("referralReasons", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            tmpMap.put(_Fields.RECOM_REASON_TEXT, new org.apache.thrift.meta_data.FieldMetaData("recomReasonText", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralRecomEvaluation_args.class, metaDataMap);
        }

        public employeeReferralRecomEvaluation_args() {
        }

        public employeeReferralRecomEvaluation_args(
                int companyId,
                int postUserId,
                int positionId,
                int presenteeId,
                java.util.List<java.lang.String> referralReasons,
                byte relationship,
                java.lang.String recomReasonText)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.presenteeId = presenteeId;
            setPresenteeIdIsSet(true);
            this.referralReasons = referralReasons;
            this.relationship = relationship;
            setRelationshipIsSet(true);
            this.recomReasonText = recomReasonText;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public employeeReferralRecomEvaluation_args(employeeReferralRecomEvaluation_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.postUserId = other.postUserId;
            this.positionId = other.positionId;
            this.presenteeId = other.presenteeId;
            if (other.isSetReferralReasons()) {
                java.util.List<java.lang.String> __this__referralReasons = new java.util.ArrayList<java.lang.String>(other.referralReasons);
                this.referralReasons = __this__referralReasons;
            }
            this.relationship = other.relationship;
            if (other.isSetRecomReasonText()) {
                this.recomReasonText = other.recomReasonText;
            }
        }

        public employeeReferralRecomEvaluation_args deepCopy() {
            return new employeeReferralRecomEvaluation_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setPresenteeIdIsSet(false);
            this.presenteeId = 0;
            this.referralReasons = null;
            setRelationshipIsSet(false);
            this.relationship = 0;
            this.recomReasonText = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public employeeReferralRecomEvaluation_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public employeeReferralRecomEvaluation_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public employeeReferralRecomEvaluation_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getPresenteeId() {
            return this.presenteeId;
        }

        public employeeReferralRecomEvaluation_args setPresenteeId(int presenteeId) {
            this.presenteeId = presenteeId;
            setPresenteeIdIsSet(true);
            return this;
        }

        public void unsetPresenteeId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
        }

        /** Returns true if field presenteeId is set (has been assigned a value) and false otherwise */
        public boolean isSetPresenteeId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
        }

        public void setPresenteeIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESENTEEID_ISSET_ID, value);
        }

        public int getReferralReasonsSize() {
            return (this.referralReasons == null) ? 0 : this.referralReasons.size();
        }

        public java.util.Iterator<java.lang.String> getReferralReasonsIterator() {
            return (this.referralReasons == null) ? null : this.referralReasons.iterator();
        }

        public void addToReferralReasons(java.lang.String elem) {
            if (this.referralReasons == null) {
                this.referralReasons = new java.util.ArrayList<java.lang.String>();
            }
            this.referralReasons.add(elem);
        }

        public java.util.List<java.lang.String> getReferralReasons() {
            return this.referralReasons;
        }

        public employeeReferralRecomEvaluation_args setReferralReasons(java.util.List<java.lang.String> referralReasons) {
            this.referralReasons = referralReasons;
            return this;
        }

        public void unsetReferralReasons() {
            this.referralReasons = null;
        }

        /** Returns true if field referralReasons is set (has been assigned a value) and false otherwise */
        public boolean isSetReferralReasons() {
            return this.referralReasons != null;
        }

        public void setReferralReasonsIsSet(boolean value) {
            if (!value) {
                this.referralReasons = null;
            }
        }

        public byte getRelationship() {
            return this.relationship;
        }

        public employeeReferralRecomEvaluation_args setRelationship(byte relationship) {
            this.relationship = relationship;
            setRelationshipIsSet(true);
            return this;
        }

        public void unsetRelationship() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
        }

        /** Returns true if field relationship is set (has been assigned a value) and false otherwise */
        public boolean isSetRelationship() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
        }

        public void setRelationshipIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID, value);
        }

        public java.lang.String getRecomReasonText() {
            return this.recomReasonText;
        }

        public employeeReferralRecomEvaluation_args setRecomReasonText(java.lang.String recomReasonText) {
            this.recomReasonText = recomReasonText;
            return this;
        }

        public void unsetRecomReasonText() {
            this.recomReasonText = null;
        }

        /** Returns true if field recomReasonText is set (has been assigned a value) and false otherwise */
        public boolean isSetRecomReasonText() {
            return this.recomReasonText != null;
        }

        public void setRecomReasonTextIsSet(boolean value) {
            if (!value) {
                this.recomReasonText = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case PRESENTEE_ID:
                    if (value == null) {
                        unsetPresenteeId();
                    } else {
                        setPresenteeId((java.lang.Integer)value);
                    }
                    break;

                case REFERRAL_REASONS:
                    if (value == null) {
                        unsetReferralReasons();
                    } else {
                        setReferralReasons((java.util.List<java.lang.String>)value);
                    }
                    break;

                case RELATIONSHIP:
                    if (value == null) {
                        unsetRelationship();
                    } else {
                        setRelationship((java.lang.Byte)value);
                    }
                    break;

                case RECOM_REASON_TEXT:
                    if (value == null) {
                        unsetRecomReasonText();
                    } else {
                        setRecomReasonText((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case POST_USER_ID:
                    return getPostUserId();

                case POSITION_ID:
                    return getPositionId();

                case PRESENTEE_ID:
                    return getPresenteeId();

                case REFERRAL_REASONS:
                    return getReferralReasons();

                case RELATIONSHIP:
                    return getRelationship();

                case RECOM_REASON_TEXT:
                    return getRecomReasonText();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case POST_USER_ID:
                    return isSetPostUserId();
                case POSITION_ID:
                    return isSetPositionId();
                case PRESENTEE_ID:
                    return isSetPresenteeId();
                case REFERRAL_REASONS:
                    return isSetReferralReasons();
                case RELATIONSHIP:
                    return isSetRelationship();
                case RECOM_REASON_TEXT:
                    return isSetRecomReasonText();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof employeeReferralRecomEvaluation_args)
                return this.equals((employeeReferralRecomEvaluation_args)that);
            return false;
        }

        public boolean equals(employeeReferralRecomEvaluation_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_presenteeId = true;
            boolean that_present_presenteeId = true;
            if (this_present_presenteeId || that_present_presenteeId) {
                if (!(this_present_presenteeId && that_present_presenteeId))
                    return false;
                if (this.presenteeId != that.presenteeId)
                    return false;
            }

            boolean this_present_referralReasons = true && this.isSetReferralReasons();
            boolean that_present_referralReasons = true && that.isSetReferralReasons();
            if (this_present_referralReasons || that_present_referralReasons) {
                if (!(this_present_referralReasons && that_present_referralReasons))
                    return false;
                if (!this.referralReasons.equals(that.referralReasons))
                    return false;
            }

            boolean this_present_relationship = true;
            boolean that_present_relationship = true;
            if (this_present_relationship || that_present_relationship) {
                if (!(this_present_relationship && that_present_relationship))
                    return false;
                if (this.relationship != that.relationship)
                    return false;
            }

            boolean this_present_recomReasonText = true && this.isSetRecomReasonText();
            boolean that_present_recomReasonText = true && that.isSetRecomReasonText();
            if (this_present_recomReasonText || that_present_recomReasonText) {
                if (!(this_present_recomReasonText && that_present_recomReasonText))
                    return false;
                if (!this.recomReasonText.equals(that.recomReasonText))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + postUserId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + presenteeId;

            hashCode = hashCode * 8191 + ((isSetReferralReasons()) ? 131071 : 524287);
            if (isSetReferralReasons())
                hashCode = hashCode * 8191 + referralReasons.hashCode();

            hashCode = hashCode * 8191 + (int) (relationship);

            hashCode = hashCode * 8191 + ((isSetRecomReasonText()) ? 131071 : 524287);
            if (isSetRecomReasonText())
                hashCode = hashCode * 8191 + recomReasonText.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(employeeReferralRecomEvaluation_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPresenteeId()).compareTo(other.isSetPresenteeId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPresenteeId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeId, other.presenteeId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReferralReasons()).compareTo(other.isSetReferralReasons());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReferralReasons()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralReasons, other.referralReasons);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetRelationship()).compareTo(other.isSetRelationship());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRelationship()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationship, other.relationship);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetRecomReasonText()).compareTo(other.isSetRecomReasonText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRecomReasonText()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomReasonText, other.recomReasonText);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralRecomEvaluation_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("presenteeId:");
            sb.append(this.presenteeId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("referralReasons:");
            if (this.referralReasons == null) {
                sb.append("null");
            } else {
                sb.append(this.referralReasons);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("relationship:");
            sb.append(this.relationship);
            first = false;
            if (!first) sb.append(", ");
            sb.append("recomReasonText:");
            if (this.recomReasonText == null) {
                sb.append("null");
            } else {
                sb.append(this.recomReasonText);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class employeeReferralRecomEvaluation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralRecomEvaluation_argsStandardScheme getScheme() {
                return new employeeReferralRecomEvaluation_argsStandardScheme();
            }
        }

        private static class employeeReferralRecomEvaluation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralRecomEvaluation_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralRecomEvaluation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PRESENTEE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.presenteeId = iprot.readI32();
                                struct.setPresenteeIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // REFERRAL_REASONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                    struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list24.size);
                                    java.lang.String _elem25;
                                    for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                                    {
                                        _elem25 = iprot.readString();
                                        struct.referralReasons.add(_elem25);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setReferralReasonsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // RELATIONSHIP
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.relationship = iprot.readByte();
                                struct.setRelationshipIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // RECOM_REASON_TEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.recomReasonText = iprot.readString();
                                struct.setRecomReasonTextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralRecomEvaluation_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PRESENTEE_ID_FIELD_DESC);
                oprot.writeI32(struct.presenteeId);
                oprot.writeFieldEnd();
                if (struct.referralReasons != null) {
                    oprot.writeFieldBegin(REFERRAL_REASONS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.referralReasons.size()));
                        for (java.lang.String _iter27 : struct.referralReasons)
                        {
                            oprot.writeString(_iter27);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(RELATIONSHIP_FIELD_DESC);
                oprot.writeByte(struct.relationship);
                oprot.writeFieldEnd();
                if (struct.recomReasonText != null) {
                    oprot.writeFieldBegin(RECOM_REASON_TEXT_FIELD_DESC);
                    oprot.writeString(struct.recomReasonText);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class employeeReferralRecomEvaluation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralRecomEvaluation_argsTupleScheme getScheme() {
                return new employeeReferralRecomEvaluation_argsTupleScheme();
            }
        }

        private static class employeeReferralRecomEvaluation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralRecomEvaluation_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralRecomEvaluation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(2);
                }
                if (struct.isSetPresenteeId()) {
                    optionals.set(3);
                }
                if (struct.isSetReferralReasons()) {
                    optionals.set(4);
                }
                if (struct.isSetRelationship()) {
                    optionals.set(5);
                }
                if (struct.isSetRecomReasonText()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetPresenteeId()) {
                    oprot.writeI32(struct.presenteeId);
                }
                if (struct.isSetReferralReasons()) {
                    {
                        oprot.writeI32(struct.referralReasons.size());
                        for (java.lang.String _iter28 : struct.referralReasons)
                        {
                            oprot.writeString(_iter28);
                        }
                    }
                }
                if (struct.isSetRelationship()) {
                    oprot.writeByte(struct.relationship);
                }
                if (struct.isSetRecomReasonText()) {
                    oprot.writeString(struct.recomReasonText);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralRecomEvaluation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.presenteeId = iprot.readI32();
                    struct.setPresenteeIdIsSet(true);
                }
                if (incoming.get(4)) {
                    {
                        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list29.size);
                        java.lang.String _elem30;
                        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                        {
                            _elem30 = iprot.readString();
                            struct.referralReasons.add(_elem30);
                        }
                    }
                    struct.setReferralReasonsIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.relationship = iprot.readByte();
                    struct.setRelationshipIsSet(true);
                }
                if (incoming.get(6)) {
                    struct.recomReasonText = iprot.readString();
                    struct.setRecomReasonTextIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class employeeReferralRecomEvaluation_result implements org.apache.thrift.TBase<employeeReferralRecomEvaluation_result, employeeReferralRecomEvaluation_result._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralRecomEvaluation_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralRecomEvaluation_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralRecomEvaluation_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralRecomEvaluation_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralRecomEvaluation_result.class, metaDataMap);
        }

        public employeeReferralRecomEvaluation_result() {
        }

        public employeeReferralRecomEvaluation_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public employeeReferralRecomEvaluation_result(employeeReferralRecomEvaluation_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public employeeReferralRecomEvaluation_result deepCopy() {
            return new employeeReferralRecomEvaluation_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public employeeReferralRecomEvaluation_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof employeeReferralRecomEvaluation_result)
                return this.equals((employeeReferralRecomEvaluation_result)that);
            return false;
        }

        public boolean equals(employeeReferralRecomEvaluation_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(employeeReferralRecomEvaluation_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralRecomEvaluation_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class employeeReferralRecomEvaluation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralRecomEvaluation_resultStandardScheme getScheme() {
                return new employeeReferralRecomEvaluation_resultStandardScheme();
            }
        }

        private static class employeeReferralRecomEvaluation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralRecomEvaluation_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralRecomEvaluation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralRecomEvaluation_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class employeeReferralRecomEvaluation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public employeeReferralRecomEvaluation_resultTupleScheme getScheme() {
                return new employeeReferralRecomEvaluation_resultTupleScheme();
            }
        }

        private static class employeeReferralRecomEvaluation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralRecomEvaluation_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralRecomEvaluation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralRecomEvaluation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class checkSeekReferral_args implements org.apache.thrift.TBase<checkSeekReferral_args, checkSeekReferral_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkSeekReferral_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSeekReferral_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PRESENTEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PARENT_CHAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentChainId", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkSeekReferral_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkSeekReferral_argsTupleSchemeFactory();

        public int userId; // required
        public int presenteeId; // required
        public int positionId; // required
        public int companyId; // required
        public int parentChainId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            PRESENTEE_ID((short)2, "presenteeId"),
            POSITION_ID((short)3, "positionId"),
            COMPANY_ID((short)4, "companyId"),
            PARENT_CHAIN_ID((short)5, "parentChainId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // PRESENTEE_ID
                        return PRESENTEE_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    case 5: // PARENT_CHAIN_ID
                        return PARENT_CHAIN_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __PRESENTEEID_ISSET_ID = 1;
        private static final int __POSITIONID_ISSET_ID = 2;
        private static final int __COMPANYID_ISSET_ID = 3;
        private static final int __PARENTCHAINID_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PRESENTEE_ID, new org.apache.thrift.meta_data.FieldMetaData("presenteeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARENT_CHAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentChainId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSeekReferral_args.class, metaDataMap);
        }

        public checkSeekReferral_args() {
        }

        public checkSeekReferral_args(
                int userId,
                int presenteeId,
                int positionId,
                int companyId,
                int parentChainId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.presenteeId = presenteeId;
            setPresenteeIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.parentChainId = parentChainId;
            setParentChainIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkSeekReferral_args(checkSeekReferral_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.presenteeId = other.presenteeId;
            this.positionId = other.positionId;
            this.companyId = other.companyId;
            this.parentChainId = other.parentChainId;
        }

        public checkSeekReferral_args deepCopy() {
            return new checkSeekReferral_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setPresenteeIdIsSet(false);
            this.presenteeId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setParentChainIdIsSet(false);
            this.parentChainId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public checkSeekReferral_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getPresenteeId() {
            return this.presenteeId;
        }

        public checkSeekReferral_args setPresenteeId(int presenteeId) {
            this.presenteeId = presenteeId;
            setPresenteeIdIsSet(true);
            return this;
        }

        public void unsetPresenteeId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
        }

        /** Returns true if field presenteeId is set (has been assigned a value) and false otherwise */
        public boolean isSetPresenteeId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
        }

        public void setPresenteeIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESENTEEID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public checkSeekReferral_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public checkSeekReferral_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getParentChainId() {
            return this.parentChainId;
        }

        public checkSeekReferral_args setParentChainId(int parentChainId) {
            this.parentChainId = parentChainId;
            setParentChainIdIsSet(true);
            return this;
        }

        public void unsetParentChainId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTCHAINID_ISSET_ID);
        }

        /** Returns true if field parentChainId is set (has been assigned a value) and false otherwise */
        public boolean isSetParentChainId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTCHAINID_ISSET_ID);
        }

        public void setParentChainIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTCHAINID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case PRESENTEE_ID:
                    if (value == null) {
                        unsetPresenteeId();
                    } else {
                        setPresenteeId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case PARENT_CHAIN_ID:
                    if (value == null) {
                        unsetParentChainId();
                    } else {
                        setParentChainId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case PRESENTEE_ID:
                    return getPresenteeId();

                case POSITION_ID:
                    return getPositionId();

                case COMPANY_ID:
                    return getCompanyId();

                case PARENT_CHAIN_ID:
                    return getParentChainId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case PRESENTEE_ID:
                    return isSetPresenteeId();
                case POSITION_ID:
                    return isSetPositionId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case PARENT_CHAIN_ID:
                    return isSetParentChainId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof checkSeekReferral_args)
                return this.equals((checkSeekReferral_args)that);
            return false;
        }

        public boolean equals(checkSeekReferral_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_presenteeId = true;
            boolean that_present_presenteeId = true;
            if (this_present_presenteeId || that_present_presenteeId) {
                if (!(this_present_presenteeId && that_present_presenteeId))
                    return false;
                if (this.presenteeId != that.presenteeId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_parentChainId = true;
            boolean that_present_parentChainId = true;
            if (this_present_parentChainId || that_present_parentChainId) {
                if (!(this_present_parentChainId && that_present_parentChainId))
                    return false;
                if (this.parentChainId != that.parentChainId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + presenteeId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + parentChainId;

            return hashCode;
        }

        @Override
        public int compareTo(checkSeekReferral_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPresenteeId()).compareTo(other.isSetPresenteeId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPresenteeId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeId, other.presenteeId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParentChainId()).compareTo(other.isSetParentChainId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParentChainId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentChainId, other.parentChainId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("checkSeekReferral_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("presenteeId:");
            sb.append(this.presenteeId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("parentChainId:");
            sb.append(this.parentChainId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkSeekReferral_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkSeekReferral_argsStandardScheme getScheme() {
                return new checkSeekReferral_argsStandardScheme();
            }
        }

        private static class checkSeekReferral_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkSeekReferral_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkSeekReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PRESENTEE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.presenteeId = iprot.readI32();
                                struct.setPresenteeIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PARENT_CHAIN_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.parentChainId = iprot.readI32();
                                struct.setParentChainIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkSeekReferral_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PRESENTEE_ID_FIELD_DESC);
                oprot.writeI32(struct.presenteeId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARENT_CHAIN_ID_FIELD_DESC);
                oprot.writeI32(struct.parentChainId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkSeekReferral_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkSeekReferral_argsTupleScheme getScheme() {
                return new checkSeekReferral_argsTupleScheme();
            }
        }

        private static class checkSeekReferral_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkSeekReferral_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkSeekReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetPresenteeId()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(2);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(3);
                }
                if (struct.isSetParentChainId()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetPresenteeId()) {
                    oprot.writeI32(struct.presenteeId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetParentChainId()) {
                    oprot.writeI32(struct.parentChainId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkSeekReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.presenteeId = iprot.readI32();
                    struct.setPresenteeIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.parentChainId = iprot.readI32();
                    struct.setParentChainIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class checkSeekReferral_result implements org.apache.thrift.TBase<checkSeekReferral_result, checkSeekReferral_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkSeekReferral_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSeekReferral_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkSeekReferral_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkSeekReferral_resultTupleSchemeFactory();

        public int success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSeekReferral_result.class, metaDataMap);
        }

        public checkSeekReferral_result() {
        }

        public checkSeekReferral_result(
                int success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkSeekReferral_result(checkSeekReferral_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public checkSeekReferral_result deepCopy() {
            return new checkSeekReferral_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.e = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public checkSeekReferral_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public checkSeekReferral_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof checkSeekReferral_result)
                return this.equals((checkSeekReferral_result)that);
            return false;
        }

        public boolean equals(checkSeekReferral_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(checkSeekReferral_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("checkSeekReferral_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkSeekReferral_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkSeekReferral_resultStandardScheme getScheme() {
                return new checkSeekReferral_resultStandardScheme();
            }
        }

        private static class checkSeekReferral_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkSeekReferral_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkSeekReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkSeekReferral_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkSeekReferral_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public checkSeekReferral_resultTupleScheme getScheme() {
                return new checkSeekReferral_resultTupleScheme();
            }
        }

        private static class checkSeekReferral_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkSeekReferral_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkSeekReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkSeekReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
