/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class StOfficialPuvDO implements org.apache.thrift.TBase<StOfficialPuvDO, StOfficialPuvDO._Fields>, java.io.Serializable, Cloneable, Comparable<StOfficialPuvDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StOfficialPuvDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ipCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IP_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipUnique", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IP_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("ipTop", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ipFreq", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BAIDU_IP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("baiduIpCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BAIDU_IP_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("baiduIpUnique", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField BAIDU_IP_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("baiduIpTop", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BAIDU_IP_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("baiduIpFreq", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StOfficialPuvDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StOfficialPuvDOTupleSchemeFactory();

  public int id; // optional
  public java.lang.String createTime; // optional
  public java.lang.String page; // optional
  public int ipCount; // optional
  public int ipUnique; // optional
  public java.lang.String ipTop; // optional
  public int ipFreq; // optional
  public int baiduIpCount; // optional
  public int baiduIpUnique; // optional
  public java.lang.String baiduIpTop; // optional
  public int baiduIpFreq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATE_TIME((short)2, "createTime"),
    PAGE((short)3, "page"),
    IP_COUNT((short)4, "ipCount"),
    IP_UNIQUE((short)5, "ipUnique"),
    IP_TOP((short)6, "ipTop"),
    IP_FREQ((short)7, "ipFreq"),
    BAIDU_IP_COUNT((short)8, "baiduIpCount"),
    BAIDU_IP_UNIQUE((short)9, "baiduIpUnique"),
    BAIDU_IP_TOP((short)10, "baiduIpTop"),
    BAIDU_IP_FREQ((short)11, "baiduIpFreq");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // PAGE
          return PAGE;
        case 4: // IP_COUNT
          return IP_COUNT;
        case 5: // IP_UNIQUE
          return IP_UNIQUE;
        case 6: // IP_TOP
          return IP_TOP;
        case 7: // IP_FREQ
          return IP_FREQ;
        case 8: // BAIDU_IP_COUNT
          return BAIDU_IP_COUNT;
        case 9: // BAIDU_IP_UNIQUE
          return BAIDU_IP_UNIQUE;
        case 10: // BAIDU_IP_TOP
          return BAIDU_IP_TOP;
        case 11: // BAIDU_IP_FREQ
          return BAIDU_IP_FREQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __IPCOUNT_ISSET_ID = 1;
  private static final int __IPUNIQUE_ISSET_ID = 2;
  private static final int __IPFREQ_ISSET_ID = 3;
  private static final int __BAIDUIPCOUNT_ISSET_ID = 4;
  private static final int __BAIDUIPUNIQUE_ISSET_ID = 5;
  private static final int __BAIDUIPFREQ_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CREATE_TIME,_Fields.PAGE,_Fields.IP_COUNT,_Fields.IP_UNIQUE,_Fields.IP_TOP,_Fields.IP_FREQ,_Fields.BAIDU_IP_COUNT,_Fields.BAIDU_IP_UNIQUE,_Fields.BAIDU_IP_TOP,_Fields.BAIDU_IP_FREQ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ipCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_UNIQUE, new org.apache.thrift.meta_data.FieldMetaData("ipUnique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_TOP, new org.apache.thrift.meta_data.FieldMetaData("ipTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_FREQ, new org.apache.thrift.meta_data.FieldMetaData("ipFreq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAIDU_IP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("baiduIpCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAIDU_IP_UNIQUE, new org.apache.thrift.meta_data.FieldMetaData("baiduIpUnique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAIDU_IP_TOP, new org.apache.thrift.meta_data.FieldMetaData("baiduIpTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAIDU_IP_FREQ, new org.apache.thrift.meta_data.FieldMetaData("baiduIpFreq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StOfficialPuvDO.class, metaDataMap);
  }

  public StOfficialPuvDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StOfficialPuvDO(StOfficialPuvDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetPage()) {
      this.page = other.page;
    }
    this.ipCount = other.ipCount;
    this.ipUnique = other.ipUnique;
    if (other.isSetIpTop()) {
      this.ipTop = other.ipTop;
    }
    this.ipFreq = other.ipFreq;
    this.baiduIpCount = other.baiduIpCount;
    this.baiduIpUnique = other.baiduIpUnique;
    if (other.isSetBaiduIpTop()) {
      this.baiduIpTop = other.baiduIpTop;
    }
    this.baiduIpFreq = other.baiduIpFreq;
  }

  public StOfficialPuvDO deepCopy() {
    return new StOfficialPuvDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.createTime = null;
    this.page = null;
    setIpCountIsSet(false);
    this.ipCount = 0;
    setIpUniqueIsSet(false);
    this.ipUnique = 0;
    this.ipTop = null;
    setIpFreqIsSet(false);
    this.ipFreq = 0;
    setBaiduIpCountIsSet(false);
    this.baiduIpCount = 0;
    setBaiduIpUniqueIsSet(false);
    this.baiduIpUnique = 0;
    this.baiduIpTop = null;
    setBaiduIpFreqIsSet(false);
    this.baiduIpFreq = 0;
  }

  public int getId() {
    return this.id;
  }

  public StOfficialPuvDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public StOfficialPuvDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getPage() {
    return this.page;
  }

  public StOfficialPuvDO setPage(java.lang.String page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public int getIpCount() {
    return this.ipCount;
  }

  public StOfficialPuvDO setIpCount(int ipCount) {
    this.ipCount = ipCount;
    setIpCountIsSet(true);
    return this;
  }

  public void unsetIpCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  /** Returns true if field ipCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIpCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPCOUNT_ISSET_ID);
  }

  public void setIpCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPCOUNT_ISSET_ID, value);
  }

  public int getIpUnique() {
    return this.ipUnique;
  }

  public StOfficialPuvDO setIpUnique(int ipUnique) {
    this.ipUnique = ipUnique;
    setIpUniqueIsSet(true);
    return this;
  }

  public void unsetIpUnique() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPUNIQUE_ISSET_ID);
  }

  /** Returns true if field ipUnique is set (has been assigned a value) and false otherwise */
  public boolean isSetIpUnique() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPUNIQUE_ISSET_ID);
  }

  public void setIpUniqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPUNIQUE_ISSET_ID, value);
  }

  public java.lang.String getIpTop() {
    return this.ipTop;
  }

  public StOfficialPuvDO setIpTop(java.lang.String ipTop) {
    this.ipTop = ipTop;
    return this;
  }

  public void unsetIpTop() {
    this.ipTop = null;
  }

  /** Returns true if field ipTop is set (has been assigned a value) and false otherwise */
  public boolean isSetIpTop() {
    return this.ipTop != null;
  }

  public void setIpTopIsSet(boolean value) {
    if (!value) {
      this.ipTop = null;
    }
  }

  public int getIpFreq() {
    return this.ipFreq;
  }

  public StOfficialPuvDO setIpFreq(int ipFreq) {
    this.ipFreq = ipFreq;
    setIpFreqIsSet(true);
    return this;
  }

  public void unsetIpFreq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPFREQ_ISSET_ID);
  }

  /** Returns true if field ipFreq is set (has been assigned a value) and false otherwise */
  public boolean isSetIpFreq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPFREQ_ISSET_ID);
  }

  public void setIpFreqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPFREQ_ISSET_ID, value);
  }

  public int getBaiduIpCount() {
    return this.baiduIpCount;
  }

  public StOfficialPuvDO setBaiduIpCount(int baiduIpCount) {
    this.baiduIpCount = baiduIpCount;
    setBaiduIpCountIsSet(true);
    return this;
  }

  public void unsetBaiduIpCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BAIDUIPCOUNT_ISSET_ID);
  }

  /** Returns true if field baiduIpCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBaiduIpCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BAIDUIPCOUNT_ISSET_ID);
  }

  public void setBaiduIpCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BAIDUIPCOUNT_ISSET_ID, value);
  }

  public int getBaiduIpUnique() {
    return this.baiduIpUnique;
  }

  public StOfficialPuvDO setBaiduIpUnique(int baiduIpUnique) {
    this.baiduIpUnique = baiduIpUnique;
    setBaiduIpUniqueIsSet(true);
    return this;
  }

  public void unsetBaiduIpUnique() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BAIDUIPUNIQUE_ISSET_ID);
  }

  /** Returns true if field baiduIpUnique is set (has been assigned a value) and false otherwise */
  public boolean isSetBaiduIpUnique() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BAIDUIPUNIQUE_ISSET_ID);
  }

  public void setBaiduIpUniqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BAIDUIPUNIQUE_ISSET_ID, value);
  }

  public java.lang.String getBaiduIpTop() {
    return this.baiduIpTop;
  }

  public StOfficialPuvDO setBaiduIpTop(java.lang.String baiduIpTop) {
    this.baiduIpTop = baiduIpTop;
    return this;
  }

  public void unsetBaiduIpTop() {
    this.baiduIpTop = null;
  }

  /** Returns true if field baiduIpTop is set (has been assigned a value) and false otherwise */
  public boolean isSetBaiduIpTop() {
    return this.baiduIpTop != null;
  }

  public void setBaiduIpTopIsSet(boolean value) {
    if (!value) {
      this.baiduIpTop = null;
    }
  }

  public int getBaiduIpFreq() {
    return this.baiduIpFreq;
  }

  public StOfficialPuvDO setBaiduIpFreq(int baiduIpFreq) {
    this.baiduIpFreq = baiduIpFreq;
    setBaiduIpFreqIsSet(true);
    return this;
  }

  public void unsetBaiduIpFreq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BAIDUIPFREQ_ISSET_ID);
  }

  /** Returns true if field baiduIpFreq is set (has been assigned a value) and false otherwise */
  public boolean isSetBaiduIpFreq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BAIDUIPFREQ_ISSET_ID);
  }

  public void setBaiduIpFreqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BAIDUIPFREQ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((java.lang.String)value);
      }
      break;

    case IP_COUNT:
      if (value == null) {
        unsetIpCount();
      } else {
        setIpCount((java.lang.Integer)value);
      }
      break;

    case IP_UNIQUE:
      if (value == null) {
        unsetIpUnique();
      } else {
        setIpUnique((java.lang.Integer)value);
      }
      break;

    case IP_TOP:
      if (value == null) {
        unsetIpTop();
      } else {
        setIpTop((java.lang.String)value);
      }
      break;

    case IP_FREQ:
      if (value == null) {
        unsetIpFreq();
      } else {
        setIpFreq((java.lang.Integer)value);
      }
      break;

    case BAIDU_IP_COUNT:
      if (value == null) {
        unsetBaiduIpCount();
      } else {
        setBaiduIpCount((java.lang.Integer)value);
      }
      break;

    case BAIDU_IP_UNIQUE:
      if (value == null) {
        unsetBaiduIpUnique();
      } else {
        setBaiduIpUnique((java.lang.Integer)value);
      }
      break;

    case BAIDU_IP_TOP:
      if (value == null) {
        unsetBaiduIpTop();
      } else {
        setBaiduIpTop((java.lang.String)value);
      }
      break;

    case BAIDU_IP_FREQ:
      if (value == null) {
        unsetBaiduIpFreq();
      } else {
        setBaiduIpFreq((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CREATE_TIME:
      return getCreateTime();

    case PAGE:
      return getPage();

    case IP_COUNT:
      return getIpCount();

    case IP_UNIQUE:
      return getIpUnique();

    case IP_TOP:
      return getIpTop();

    case IP_FREQ:
      return getIpFreq();

    case BAIDU_IP_COUNT:
      return getBaiduIpCount();

    case BAIDU_IP_UNIQUE:
      return getBaiduIpUnique();

    case BAIDU_IP_TOP:
      return getBaiduIpTop();

    case BAIDU_IP_FREQ:
      return getBaiduIpFreq();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATE_TIME:
      return isSetCreateTime();
    case PAGE:
      return isSetPage();
    case IP_COUNT:
      return isSetIpCount();
    case IP_UNIQUE:
      return isSetIpUnique();
    case IP_TOP:
      return isSetIpTop();
    case IP_FREQ:
      return isSetIpFreq();
    case BAIDU_IP_COUNT:
      return isSetBaiduIpCount();
    case BAIDU_IP_UNIQUE:
      return isSetBaiduIpUnique();
    case BAIDU_IP_TOP:
      return isSetBaiduIpTop();
    case BAIDU_IP_FREQ:
      return isSetBaiduIpFreq();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StOfficialPuvDO)
      return this.equals((StOfficialPuvDO)that);
    return false;
  }

  public boolean equals(StOfficialPuvDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_ipCount = true && this.isSetIpCount();
    boolean that_present_ipCount = true && that.isSetIpCount();
    if (this_present_ipCount || that_present_ipCount) {
      if (!(this_present_ipCount && that_present_ipCount))
        return false;
      if (this.ipCount != that.ipCount)
        return false;
    }

    boolean this_present_ipUnique = true && this.isSetIpUnique();
    boolean that_present_ipUnique = true && that.isSetIpUnique();
    if (this_present_ipUnique || that_present_ipUnique) {
      if (!(this_present_ipUnique && that_present_ipUnique))
        return false;
      if (this.ipUnique != that.ipUnique)
        return false;
    }

    boolean this_present_ipTop = true && this.isSetIpTop();
    boolean that_present_ipTop = true && that.isSetIpTop();
    if (this_present_ipTop || that_present_ipTop) {
      if (!(this_present_ipTop && that_present_ipTop))
        return false;
      if (!this.ipTop.equals(that.ipTop))
        return false;
    }

    boolean this_present_ipFreq = true && this.isSetIpFreq();
    boolean that_present_ipFreq = true && that.isSetIpFreq();
    if (this_present_ipFreq || that_present_ipFreq) {
      if (!(this_present_ipFreq && that_present_ipFreq))
        return false;
      if (this.ipFreq != that.ipFreq)
        return false;
    }

    boolean this_present_baiduIpCount = true && this.isSetBaiduIpCount();
    boolean that_present_baiduIpCount = true && that.isSetBaiduIpCount();
    if (this_present_baiduIpCount || that_present_baiduIpCount) {
      if (!(this_present_baiduIpCount && that_present_baiduIpCount))
        return false;
      if (this.baiduIpCount != that.baiduIpCount)
        return false;
    }

    boolean this_present_baiduIpUnique = true && this.isSetBaiduIpUnique();
    boolean that_present_baiduIpUnique = true && that.isSetBaiduIpUnique();
    if (this_present_baiduIpUnique || that_present_baiduIpUnique) {
      if (!(this_present_baiduIpUnique && that_present_baiduIpUnique))
        return false;
      if (this.baiduIpUnique != that.baiduIpUnique)
        return false;
    }

    boolean this_present_baiduIpTop = true && this.isSetBaiduIpTop();
    boolean that_present_baiduIpTop = true && that.isSetBaiduIpTop();
    if (this_present_baiduIpTop || that_present_baiduIpTop) {
      if (!(this_present_baiduIpTop && that_present_baiduIpTop))
        return false;
      if (!this.baiduIpTop.equals(that.baiduIpTop))
        return false;
    }

    boolean this_present_baiduIpFreq = true && this.isSetBaiduIpFreq();
    boolean that_present_baiduIpFreq = true && that.isSetBaiduIpFreq();
    if (this_present_baiduIpFreq || that_present_baiduIpFreq) {
      if (!(this_present_baiduIpFreq && that_present_baiduIpFreq))
        return false;
      if (this.baiduIpFreq != that.baiduIpFreq)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPage()) ? 131071 : 524287);
    if (isSetPage())
      hashCode = hashCode * 8191 + page.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpCount()) ? 131071 : 524287);
    if (isSetIpCount())
      hashCode = hashCode * 8191 + ipCount;

    hashCode = hashCode * 8191 + ((isSetIpUnique()) ? 131071 : 524287);
    if (isSetIpUnique())
      hashCode = hashCode * 8191 + ipUnique;

    hashCode = hashCode * 8191 + ((isSetIpTop()) ? 131071 : 524287);
    if (isSetIpTop())
      hashCode = hashCode * 8191 + ipTop.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpFreq()) ? 131071 : 524287);
    if (isSetIpFreq())
      hashCode = hashCode * 8191 + ipFreq;

    hashCode = hashCode * 8191 + ((isSetBaiduIpCount()) ? 131071 : 524287);
    if (isSetBaiduIpCount())
      hashCode = hashCode * 8191 + baiduIpCount;

    hashCode = hashCode * 8191 + ((isSetBaiduIpUnique()) ? 131071 : 524287);
    if (isSetBaiduIpUnique())
      hashCode = hashCode * 8191 + baiduIpUnique;

    hashCode = hashCode * 8191 + ((isSetBaiduIpTop()) ? 131071 : 524287);
    if (isSetBaiduIpTop())
      hashCode = hashCode * 8191 + baiduIpTop.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaiduIpFreq()) ? 131071 : 524287);
    if (isSetBaiduIpFreq())
      hashCode = hashCode * 8191 + baiduIpFreq;

    return hashCode;
  }

  @Override
  public int compareTo(StOfficialPuvDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpCount()).compareTo(other.isSetIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipCount, other.ipCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpUnique()).compareTo(other.isSetIpUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpUnique()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipUnique, other.ipUnique);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpTop()).compareTo(other.isSetIpTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipTop, other.ipTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpFreq()).compareTo(other.isSetIpFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipFreq, other.ipFreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaiduIpCount()).compareTo(other.isSetBaiduIpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaiduIpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baiduIpCount, other.baiduIpCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaiduIpUnique()).compareTo(other.isSetBaiduIpUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaiduIpUnique()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baiduIpUnique, other.baiduIpUnique);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaiduIpTop()).compareTo(other.isSetBaiduIpTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaiduIpTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baiduIpTop, other.baiduIpTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaiduIpFreq()).compareTo(other.isSetBaiduIpFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaiduIpFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baiduIpFreq, other.baiduIpFreq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StOfficialPuvDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetIpCount()) {
      if (!first) sb.append(", ");
      sb.append("ipCount:");
      sb.append(this.ipCount);
      first = false;
    }
    if (isSetIpUnique()) {
      if (!first) sb.append(", ");
      sb.append("ipUnique:");
      sb.append(this.ipUnique);
      first = false;
    }
    if (isSetIpTop()) {
      if (!first) sb.append(", ");
      sb.append("ipTop:");
      if (this.ipTop == null) {
        sb.append("null");
      } else {
        sb.append(this.ipTop);
      }
      first = false;
    }
    if (isSetIpFreq()) {
      if (!first) sb.append(", ");
      sb.append("ipFreq:");
      sb.append(this.ipFreq);
      first = false;
    }
    if (isSetBaiduIpCount()) {
      if (!first) sb.append(", ");
      sb.append("baiduIpCount:");
      sb.append(this.baiduIpCount);
      first = false;
    }
    if (isSetBaiduIpUnique()) {
      if (!first) sb.append(", ");
      sb.append("baiduIpUnique:");
      sb.append(this.baiduIpUnique);
      first = false;
    }
    if (isSetBaiduIpTop()) {
      if (!first) sb.append(", ");
      sb.append("baiduIpTop:");
      if (this.baiduIpTop == null) {
        sb.append("null");
      } else {
        sb.append(this.baiduIpTop);
      }
      first = false;
    }
    if (isSetBaiduIpFreq()) {
      if (!first) sb.append(", ");
      sb.append("baiduIpFreq:");
      sb.append(this.baiduIpFreq);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StOfficialPuvDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StOfficialPuvDOStandardScheme getScheme() {
      return new StOfficialPuvDOStandardScheme();
    }
  }

  private static class StOfficialPuvDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<StOfficialPuvDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StOfficialPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page = iprot.readString();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipCount = iprot.readI32();
              struct.setIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP_UNIQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipUnique = iprot.readI32();
              struct.setIpUniqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipTop = iprot.readString();
              struct.setIpTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipFreq = iprot.readI32();
              struct.setIpFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BAIDU_IP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baiduIpCount = iprot.readI32();
              struct.setBaiduIpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BAIDU_IP_UNIQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baiduIpUnique = iprot.readI32();
              struct.setBaiduIpUniqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BAIDU_IP_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baiduIpTop = iprot.readString();
              struct.setBaiduIpTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BAIDU_IP_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baiduIpFreq = iprot.readI32();
              struct.setBaiduIpFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StOfficialPuvDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          oprot.writeString(struct.page);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIpCount()) {
        oprot.writeFieldBegin(IP_COUNT_FIELD_DESC);
        oprot.writeI32(struct.ipCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIpUnique()) {
        oprot.writeFieldBegin(IP_UNIQUE_FIELD_DESC);
        oprot.writeI32(struct.ipUnique);
        oprot.writeFieldEnd();
      }
      if (struct.ipTop != null) {
        if (struct.isSetIpTop()) {
          oprot.writeFieldBegin(IP_TOP_FIELD_DESC);
          oprot.writeString(struct.ipTop);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIpFreq()) {
        oprot.writeFieldBegin(IP_FREQ_FIELD_DESC);
        oprot.writeI32(struct.ipFreq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBaiduIpCount()) {
        oprot.writeFieldBegin(BAIDU_IP_COUNT_FIELD_DESC);
        oprot.writeI32(struct.baiduIpCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBaiduIpUnique()) {
        oprot.writeFieldBegin(BAIDU_IP_UNIQUE_FIELD_DESC);
        oprot.writeI32(struct.baiduIpUnique);
        oprot.writeFieldEnd();
      }
      if (struct.baiduIpTop != null) {
        if (struct.isSetBaiduIpTop()) {
          oprot.writeFieldBegin(BAIDU_IP_TOP_FIELD_DESC);
          oprot.writeString(struct.baiduIpTop);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBaiduIpFreq()) {
        oprot.writeFieldBegin(BAIDU_IP_FREQ_FIELD_DESC);
        oprot.writeI32(struct.baiduIpFreq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StOfficialPuvDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StOfficialPuvDOTupleScheme getScheme() {
      return new StOfficialPuvDOTupleScheme();
    }
  }

  private static class StOfficialPuvDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<StOfficialPuvDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StOfficialPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetPage()) {
        optionals.set(2);
      }
      if (struct.isSetIpCount()) {
        optionals.set(3);
      }
      if (struct.isSetIpUnique()) {
        optionals.set(4);
      }
      if (struct.isSetIpTop()) {
        optionals.set(5);
      }
      if (struct.isSetIpFreq()) {
        optionals.set(6);
      }
      if (struct.isSetBaiduIpCount()) {
        optionals.set(7);
      }
      if (struct.isSetBaiduIpUnique()) {
        optionals.set(8);
      }
      if (struct.isSetBaiduIpTop()) {
        optionals.set(9);
      }
      if (struct.isSetBaiduIpFreq()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPage()) {
        oprot.writeString(struct.page);
      }
      if (struct.isSetIpCount()) {
        oprot.writeI32(struct.ipCount);
      }
      if (struct.isSetIpUnique()) {
        oprot.writeI32(struct.ipUnique);
      }
      if (struct.isSetIpTop()) {
        oprot.writeString(struct.ipTop);
      }
      if (struct.isSetIpFreq()) {
        oprot.writeI32(struct.ipFreq);
      }
      if (struct.isSetBaiduIpCount()) {
        oprot.writeI32(struct.baiduIpCount);
      }
      if (struct.isSetBaiduIpUnique()) {
        oprot.writeI32(struct.baiduIpUnique);
      }
      if (struct.isSetBaiduIpTop()) {
        oprot.writeString(struct.baiduIpTop);
      }
      if (struct.isSetBaiduIpFreq()) {
        oprot.writeI32(struct.baiduIpFreq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StOfficialPuvDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.page = iprot.readString();
        struct.setPageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ipCount = iprot.readI32();
        struct.setIpCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ipUnique = iprot.readI32();
        struct.setIpUniqueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipTop = iprot.readString();
        struct.setIpTopIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ipFreq = iprot.readI32();
        struct.setIpFreqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.baiduIpCount = iprot.readI32();
        struct.setBaiduIpCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.baiduIpUnique = iprot.readI32();
        struct.setBaiduIpUniqueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.baiduIpTop = iprot.readString();
        struct.setBaiduIpTopIsSet(true);
      }
      if (incoming.get(10)) {
        struct.baiduIpFreq = iprot.readI32();
        struct.setBaiduIpFreqIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

