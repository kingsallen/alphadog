/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class HrHbScratchCardDO implements org.apache.thrift.TBase<HrHbScratchCardDO, HrHbScratchCardDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbScratchCardDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbScratchCardDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CARDNO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardno", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hbConfigId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BAGGING_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("baggingOpenid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HB_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hbItemId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("tips", org.apache.thrift.protocol.TType.BYTE, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbScratchCardDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbScratchCardDOTupleSchemeFactory();

  public int id; // optional
  public int wechatId; // optional
  public String cardno; // optional
  public int status; // optional
  public double amount; // optional
  public int hbConfigId; // optional
  public String baggingOpenid; // optional
  public String createTime; // optional
  public int hbItemId; // optional
  public byte tips; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    WECHAT_ID((short)2, "wechatId"),
    CARDNO((short)3, "cardno"),
    STATUS((short)4, "status"),
    AMOUNT((short)5, "amount"),
    HB_CONFIG_ID((short)6, "hbConfigId"),
    BAGGING_OPENID((short)7, "baggingOpenid"),
    CREATE_TIME((short)8, "createTime"),
    HB_ITEM_ID((short)9, "hbItemId"),
    TIPS((short)10, "tips");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // WECHAT_ID
          return WECHAT_ID;
        case 3: // CARDNO
          return CARDNO;
        case 4: // STATUS
          return STATUS;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // HB_CONFIG_ID
          return HB_CONFIG_ID;
        case 7: // BAGGING_OPENID
          return BAGGING_OPENID;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // HB_ITEM_ID
          return HB_ITEM_ID;
        case 10: // TIPS
          return TIPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WECHATID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __AMOUNT_ISSET_ID = 3;
  private static final int __HBCONFIGID_ISSET_ID = 4;
  private static final int __HBITEMID_ISSET_ID = 5;
  private static final int __TIPS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.WECHAT_ID,_Fields.CARDNO,_Fields.STATUS,_Fields.AMOUNT,_Fields.HB_CONFIG_ID,_Fields.BAGGING_OPENID,_Fields.CREATE_TIME,_Fields.HB_ITEM_ID,_Fields.TIPS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARDNO, new org.apache.thrift.meta_data.FieldMetaData("cardno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hbConfigId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAGGING_OPENID, new org.apache.thrift.meta_data.FieldMetaData("baggingOpenid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HB_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("hbItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIPS, new org.apache.thrift.meta_data.FieldMetaData("tips", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbScratchCardDO.class, metaDataMap);
  }

  public HrHbScratchCardDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbScratchCardDO(HrHbScratchCardDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.wechatId = other.wechatId;
    if (other.isSetCardno()) {
      this.cardno = other.cardno;
    }
    this.status = other.status;
    this.amount = other.amount;
    this.hbConfigId = other.hbConfigId;
    if (other.isSetBaggingOpenid()) {
      this.baggingOpenid = other.baggingOpenid;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.hbItemId = other.hbItemId;
    this.tips = other.tips;
  }

  public HrHbScratchCardDO deepCopy() {
    return new HrHbScratchCardDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    this.cardno = null;
    setStatusIsSet(false);
    this.status = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setHbConfigIdIsSet(false);
    this.hbConfigId = 0;
    this.baggingOpenid = null;
    this.createTime = null;
    setHbItemIdIsSet(false);
    this.hbItemId = 0;
    setTipsIsSet(false);
    this.tips = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbScratchCardDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public HrHbScratchCardDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public String getCardno() {
    return this.cardno;
  }

  public HrHbScratchCardDO setCardno(String cardno) {
    this.cardno = cardno;
    return this;
  }

  public void unsetCardno() {
    this.cardno = null;
  }

  /** Returns true if field cardno is set (has been assigned a value) and false otherwise */
  public boolean isSetCardno() {
    return this.cardno != null;
  }

  public void setCardnoIsSet(boolean value) {
    if (!value) {
      this.cardno = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public HrHbScratchCardDO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public HrHbScratchCardDO setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getHbConfigId() {
    return this.hbConfigId;
  }

  public HrHbScratchCardDO setHbConfigId(int hbConfigId) {
    this.hbConfigId = hbConfigId;
    setHbConfigIdIsSet(true);
    return this;
  }

  public void unsetHbConfigId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HBCONFIGID_ISSET_ID);
  }

  /** Returns true if field hbConfigId is set (has been assigned a value) and false otherwise */
  public boolean isSetHbConfigId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HBCONFIGID_ISSET_ID);
  }

  public void setHbConfigIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HBCONFIGID_ISSET_ID, value);
  }

  public String getBaggingOpenid() {
    return this.baggingOpenid;
  }

  public HrHbScratchCardDO setBaggingOpenid(String baggingOpenid) {
    this.baggingOpenid = baggingOpenid;
    return this;
  }

  public void unsetBaggingOpenid() {
    this.baggingOpenid = null;
  }

  /** Returns true if field baggingOpenid is set (has been assigned a value) and false otherwise */
  public boolean isSetBaggingOpenid() {
    return this.baggingOpenid != null;
  }

  public void setBaggingOpenidIsSet(boolean value) {
    if (!value) {
      this.baggingOpenid = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HrHbScratchCardDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getHbItemId() {
    return this.hbItemId;
  }

  public HrHbScratchCardDO setHbItemId(int hbItemId) {
    this.hbItemId = hbItemId;
    setHbItemIdIsSet(true);
    return this;
  }

  public void unsetHbItemId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HBITEMID_ISSET_ID);
  }

  /** Returns true if field hbItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetHbItemId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HBITEMID_ISSET_ID);
  }

  public void setHbItemIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HBITEMID_ISSET_ID, value);
  }

  public byte getTips() {
    return this.tips;
  }

  public HrHbScratchCardDO setTips(byte tips) {
    this.tips = tips;
    setTipsIsSet(true);
    return this;
  }

  public void unsetTips() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIPS_ISSET_ID);
  }

  /** Returns true if field tips is set (has been assigned a value) and false otherwise */
  public boolean isSetTips() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIPS_ISSET_ID);
  }

  public void setTipsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((Integer)value);
      }
      break;

    case CARDNO:
      if (value == null) {
        unsetCardno();
      } else {
        setCardno((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case HB_CONFIG_ID:
      if (value == null) {
        unsetHbConfigId();
      } else {
        setHbConfigId((Integer)value);
      }
      break;

    case BAGGING_OPENID:
      if (value == null) {
        unsetBaggingOpenid();
      } else {
        setBaggingOpenid((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case HB_ITEM_ID:
      if (value == null) {
        unsetHbItemId();
      } else {
        setHbItemId((Integer)value);
      }
      break;

    case TIPS:
      if (value == null) {
        unsetTips();
      } else {
        setTips((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case WECHAT_ID:
      return getWechatId();

    case CARDNO:
      return getCardno();

    case STATUS:
      return getStatus();

    case AMOUNT:
      return getAmount();

    case HB_CONFIG_ID:
      return getHbConfigId();

    case BAGGING_OPENID:
      return getBaggingOpenid();

    case CREATE_TIME:
      return getCreateTime();

    case HB_ITEM_ID:
      return getHbItemId();

    case TIPS:
      return getTips();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case WECHAT_ID:
      return isSetWechatId();
    case CARDNO:
      return isSetCardno();
    case STATUS:
      return isSetStatus();
    case AMOUNT:
      return isSetAmount();
    case HB_CONFIG_ID:
      return isSetHbConfigId();
    case BAGGING_OPENID:
      return isSetBaggingOpenid();
    case CREATE_TIME:
      return isSetCreateTime();
    case HB_ITEM_ID:
      return isSetHbItemId();
    case TIPS:
      return isSetTips();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbScratchCardDO)
      return this.equals((HrHbScratchCardDO)that);
    return false;
  }

  public boolean equals(HrHbScratchCardDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_cardno = true && this.isSetCardno();
    boolean that_present_cardno = true && that.isSetCardno();
    if (this_present_cardno || that_present_cardno) {
      if (!(this_present_cardno && that_present_cardno))
        return false;
      if (!this.cardno.equals(that.cardno))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_hbConfigId = true && this.isSetHbConfigId();
    boolean that_present_hbConfigId = true && that.isSetHbConfigId();
    if (this_present_hbConfigId || that_present_hbConfigId) {
      if (!(this_present_hbConfigId && that_present_hbConfigId))
        return false;
      if (this.hbConfigId != that.hbConfigId)
        return false;
    }

    boolean this_present_baggingOpenid = true && this.isSetBaggingOpenid();
    boolean that_present_baggingOpenid = true && that.isSetBaggingOpenid();
    if (this_present_baggingOpenid || that_present_baggingOpenid) {
      if (!(this_present_baggingOpenid && that_present_baggingOpenid))
        return false;
      if (!this.baggingOpenid.equals(that.baggingOpenid))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_hbItemId = true && this.isSetHbItemId();
    boolean that_present_hbItemId = true && that.isSetHbItemId();
    if (this_present_hbItemId || that_present_hbItemId) {
      if (!(this_present_hbItemId && that_present_hbItemId))
        return false;
      if (this.hbItemId != that.hbItemId)
        return false;
    }

    boolean this_present_tips = true && this.isSetTips();
    boolean that_present_tips = true && that.isSetTips();
    if (this_present_tips || that_present_tips) {
      if (!(this_present_tips && that_present_tips))
        return false;
      if (this.tips != that.tips)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetCardno()) ? 131071 : 524287);
    if (isSetCardno())
      hashCode = hashCode * 8191 + cardno.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    hashCode = hashCode * 8191 + ((isSetHbConfigId()) ? 131071 : 524287);
    if (isSetHbConfigId())
      hashCode = hashCode * 8191 + hbConfigId;

    hashCode = hashCode * 8191 + ((isSetBaggingOpenid()) ? 131071 : 524287);
    if (isSetBaggingOpenid())
      hashCode = hashCode * 8191 + baggingOpenid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetHbItemId()) ? 131071 : 524287);
    if (isSetHbItemId())
      hashCode = hashCode * 8191 + hbItemId;

    hashCode = hashCode * 8191 + ((isSetTips()) ? 131071 : 524287);
    if (isSetTips())
      hashCode = hashCode * 8191 + (int) (tips);

    return hashCode;
  }

  @Override
  public int compareTo(HrHbScratchCardDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardno()).compareTo(other.isSetCardno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardno, other.cardno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbConfigId()).compareTo(other.isSetHbConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbConfigId, other.hbConfigId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaggingOpenid()).compareTo(other.isSetBaggingOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaggingOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baggingOpenid, other.baggingOpenid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbItemId()).compareTo(other.isSetHbItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbItemId, other.hbItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTips()).compareTo(other.isSetTips());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTips()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tips, other.tips);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrHbScratchCardDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetCardno()) {
      if (!first) sb.append(", ");
      sb.append("cardno:");
      if (this.cardno == null) {
        sb.append("null");
      } else {
        sb.append(this.cardno);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetHbConfigId()) {
      if (!first) sb.append(", ");
      sb.append("hbConfigId:");
      sb.append(this.hbConfigId);
      first = false;
    }
    if (isSetBaggingOpenid()) {
      if (!first) sb.append(", ");
      sb.append("baggingOpenid:");
      if (this.baggingOpenid == null) {
        sb.append("null");
      } else {
        sb.append(this.baggingOpenid);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetHbItemId()) {
      if (!first) sb.append(", ");
      sb.append("hbItemId:");
      sb.append(this.hbItemId);
      first = false;
    }
    if (isSetTips()) {
      if (!first) sb.append(", ");
      sb.append("tips:");
      sb.append(this.tips);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbScratchCardDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbScratchCardDOStandardScheme getScheme() {
      return new HrHbScratchCardDOStandardScheme();
    }
  }

  private static class HrHbScratchCardDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbScratchCardDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CARDNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardno = iprot.readString();
              struct.setCardnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HB_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hbConfigId = iprot.readI32();
              struct.setHbConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BAGGING_OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baggingOpenid = iprot.readString();
              struct.setBaggingOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HB_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hbItemId = iprot.readI32();
              struct.setHbItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.tips = iprot.readByte();
              struct.setTipsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.cardno != null) {
        if (struct.isSetCardno()) {
          oprot.writeFieldBegin(CARDNO_FIELD_DESC);
          oprot.writeString(struct.cardno);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHbConfigId()) {
        oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.hbConfigId);
        oprot.writeFieldEnd();
      }
      if (struct.baggingOpenid != null) {
        if (struct.isSetBaggingOpenid()) {
          oprot.writeFieldBegin(BAGGING_OPENID_FIELD_DESC);
          oprot.writeString(struct.baggingOpenid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHbItemId()) {
        oprot.writeFieldBegin(HB_ITEM_ID_FIELD_DESC);
        oprot.writeI32(struct.hbItemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTips()) {
        oprot.writeFieldBegin(TIPS_FIELD_DESC);
        oprot.writeByte(struct.tips);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbScratchCardDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbScratchCardDOTupleScheme getScheme() {
      return new HrHbScratchCardDOTupleScheme();
    }
  }

  private static class HrHbScratchCardDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbScratchCardDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetWechatId()) {
        optionals.set(1);
      }
      if (struct.isSetCardno()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetHbConfigId()) {
        optionals.set(5);
      }
      if (struct.isSetBaggingOpenid()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetHbItemId()) {
        optionals.set(8);
      }
      if (struct.isSetTips()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetCardno()) {
        oprot.writeString(struct.cardno);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetHbConfigId()) {
        oprot.writeI32(struct.hbConfigId);
      }
      if (struct.isSetBaggingOpenid()) {
        oprot.writeString(struct.baggingOpenid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetHbItemId()) {
        oprot.writeI32(struct.hbItemId);
      }
      if (struct.isSetTips()) {
        oprot.writeByte(struct.tips);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbScratchCardDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cardno = iprot.readString();
        struct.setCardnoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hbConfigId = iprot.readI32();
        struct.setHbConfigIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.baggingOpenid = iprot.readString();
        struct.setBaggingOpenidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hbItemId = iprot.readI32();
        struct.setHbItemIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tips = iprot.readByte();
        struct.setTipsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

