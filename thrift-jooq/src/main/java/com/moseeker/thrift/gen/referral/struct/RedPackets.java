/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.referral.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-04-25")
public class RedPackets implements org.apache.thrift.TBase<RedPackets, RedPackets._Fields>, java.io.Serializable, Cloneable, Comparable<RedPackets> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RedPackets");

  private static final org.apache.thrift.protocol.TField TOTAL_REDPACKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRedpackets", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBonus", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField REDPACKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("redpackets", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RedPacketsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RedPacketsTupleSchemeFactory();

  public double totalRedpackets; // optional
  public double totalBonus; // optional
  public java.util.List<RedPacket> redpackets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_REDPACKETS((short)1, "totalRedpackets"),
    TOTAL_BONUS((short)2, "totalBonus"),
    REDPACKETS((short)3, "redpackets");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_REDPACKETS
          return TOTAL_REDPACKETS;
        case 2: // TOTAL_BONUS
          return TOTAL_BONUS;
        case 3: // REDPACKETS
          return REDPACKETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALREDPACKETS_ISSET_ID = 0;
  private static final int __TOTALBONUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL_REDPACKETS,_Fields.TOTAL_BONUS,_Fields.REDPACKETS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_REDPACKETS, new org.apache.thrift.meta_data.FieldMetaData("totalRedpackets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_BONUS, new org.apache.thrift.meta_data.FieldMetaData("totalBonus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REDPACKETS, new org.apache.thrift.meta_data.FieldMetaData("redpackets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RedPacket.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RedPackets.class, metaDataMap);
  }

  public RedPackets() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RedPackets(RedPackets other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalRedpackets = other.totalRedpackets;
    this.totalBonus = other.totalBonus;
    if (other.isSetRedpackets()) {
      java.util.List<RedPacket> __this__redpackets = new java.util.ArrayList<RedPacket>(other.redpackets.size());
      for (RedPacket other_element : other.redpackets) {
        __this__redpackets.add(new RedPacket(other_element));
      }
      this.redpackets = __this__redpackets;
    }
  }

  public RedPackets deepCopy() {
    return new RedPackets(this);
  }

  @Override
  public void clear() {
    setTotalRedpacketsIsSet(false);
    this.totalRedpackets = 0.0;
    setTotalBonusIsSet(false);
    this.totalBonus = 0.0;
    this.redpackets = null;
  }

  public double getTotalRedpackets() {
    return this.totalRedpackets;
  }

  public RedPackets setTotalRedpackets(double totalRedpackets) {
    this.totalRedpackets = totalRedpackets;
    setTotalRedpacketsIsSet(true);
    return this;
  }

  public void unsetTotalRedpackets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALREDPACKETS_ISSET_ID);
  }

  /** Returns true if field totalRedpackets is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRedpackets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALREDPACKETS_ISSET_ID);
  }

  public void setTotalRedpacketsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALREDPACKETS_ISSET_ID, value);
  }

  public double getTotalBonus() {
    return this.totalBonus;
  }

  public RedPackets setTotalBonus(double totalBonus) {
    this.totalBonus = totalBonus;
    setTotalBonusIsSet(true);
    return this;
  }

  public void unsetTotalBonus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALBONUS_ISSET_ID);
  }

  /** Returns true if field totalBonus is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalBonus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALBONUS_ISSET_ID);
  }

  public void setTotalBonusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALBONUS_ISSET_ID, value);
  }

  public int getRedpacketsSize() {
    return (this.redpackets == null) ? 0 : this.redpackets.size();
  }

  public java.util.Iterator<RedPacket> getRedpacketsIterator() {
    return (this.redpackets == null) ? null : this.redpackets.iterator();
  }

  public void addToRedpackets(RedPacket elem) {
    if (this.redpackets == null) {
      this.redpackets = new java.util.ArrayList<RedPacket>();
    }
    this.redpackets.add(elem);
  }

  public java.util.List<RedPacket> getRedpackets() {
    return this.redpackets;
  }

  public RedPackets setRedpackets(java.util.List<RedPacket> redpackets) {
    this.redpackets = redpackets;
    return this;
  }

  public void unsetRedpackets() {
    this.redpackets = null;
  }

  /** Returns true if field redpackets is set (has been assigned a value) and false otherwise */
  public boolean isSetRedpackets() {
    return this.redpackets != null;
  }

  public void setRedpacketsIsSet(boolean value) {
    if (!value) {
      this.redpackets = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOTAL_REDPACKETS:
      if (value == null) {
        unsetTotalRedpackets();
      } else {
        setTotalRedpackets((java.lang.Double)value);
      }
      break;

    case TOTAL_BONUS:
      if (value == null) {
        unsetTotalBonus();
      } else {
        setTotalBonus((java.lang.Double)value);
      }
      break;

    case REDPACKETS:
      if (value == null) {
        unsetRedpackets();
      } else {
        setRedpackets((java.util.List<RedPacket>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_REDPACKETS:
      return getTotalRedpackets();

    case TOTAL_BONUS:
      return getTotalBonus();

    case REDPACKETS:
      return getRedpackets();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_REDPACKETS:
      return isSetTotalRedpackets();
    case TOTAL_BONUS:
      return isSetTotalBonus();
    case REDPACKETS:
      return isSetRedpackets();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RedPackets)
      return this.equals((RedPackets)that);
    return false;
  }

  public boolean equals(RedPackets that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalRedpackets = true && this.isSetTotalRedpackets();
    boolean that_present_totalRedpackets = true && that.isSetTotalRedpackets();
    if (this_present_totalRedpackets || that_present_totalRedpackets) {
      if (!(this_present_totalRedpackets && that_present_totalRedpackets))
        return false;
      if (this.totalRedpackets != that.totalRedpackets)
        return false;
    }

    boolean this_present_totalBonus = true && this.isSetTotalBonus();
    boolean that_present_totalBonus = true && that.isSetTotalBonus();
    if (this_present_totalBonus || that_present_totalBonus) {
      if (!(this_present_totalBonus && that_present_totalBonus))
        return false;
      if (this.totalBonus != that.totalBonus)
        return false;
    }

    boolean this_present_redpackets = true && this.isSetRedpackets();
    boolean that_present_redpackets = true && that.isSetRedpackets();
    if (this_present_redpackets || that_present_redpackets) {
      if (!(this_present_redpackets && that_present_redpackets))
        return false;
      if (!this.redpackets.equals(that.redpackets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTotalRedpackets()) ? 131071 : 524287);
    if (isSetTotalRedpackets())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalRedpackets);

    hashCode = hashCode * 8191 + ((isSetTotalBonus()) ? 131071 : 524287);
    if (isSetTotalBonus())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalBonus);

    hashCode = hashCode * 8191 + ((isSetRedpackets()) ? 131071 : 524287);
    if (isSetRedpackets())
      hashCode = hashCode * 8191 + redpackets.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RedPackets other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTotalRedpackets()).compareTo(other.isSetTotalRedpackets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRedpackets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRedpackets, other.totalRedpackets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalBonus()).compareTo(other.isSetTotalBonus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalBonus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBonus, other.totalBonus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRedpackets()).compareTo(other.isSetRedpackets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedpackets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redpackets, other.redpackets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RedPackets(");
    boolean first = true;

    if (isSetTotalRedpackets()) {
      sb.append("totalRedpackets:");
      sb.append(this.totalRedpackets);
      first = false;
    }
    if (isSetTotalBonus()) {
      if (!first) sb.append(", ");
      sb.append("totalBonus:");
      sb.append(this.totalBonus);
      first = false;
    }
    if (isSetRedpackets()) {
      if (!first) sb.append(", ");
      sb.append("redpackets:");
      if (this.redpackets == null) {
        sb.append("null");
      } else {
        sb.append(this.redpackets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RedPacketsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedPacketsStandardScheme getScheme() {
      return new RedPacketsStandardScheme();
    }
  }

  private static class RedPacketsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RedPackets> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RedPackets struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_REDPACKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalRedpackets = iprot.readDouble();
              struct.setTotalRedpacketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_BONUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalBonus = iprot.readDouble();
              struct.setTotalBonusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REDPACKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.redpackets = new java.util.ArrayList<RedPacket>(_list0.size);
                RedPacket _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RedPacket();
                  _elem1.read(iprot);
                  struct.redpackets.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRedpacketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RedPackets struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTotalRedpackets()) {
        oprot.writeFieldBegin(TOTAL_REDPACKETS_FIELD_DESC);
        oprot.writeDouble(struct.totalRedpackets);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalBonus()) {
        oprot.writeFieldBegin(TOTAL_BONUS_FIELD_DESC);
        oprot.writeDouble(struct.totalBonus);
        oprot.writeFieldEnd();
      }
      if (struct.redpackets != null) {
        if (struct.isSetRedpackets()) {
          oprot.writeFieldBegin(REDPACKETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.redpackets.size()));
            for (RedPacket _iter3 : struct.redpackets)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RedPacketsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RedPacketsTupleScheme getScheme() {
      return new RedPacketsTupleScheme();
    }
  }

  private static class RedPacketsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RedPackets> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RedPackets struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTotalRedpackets()) {
        optionals.set(0);
      }
      if (struct.isSetTotalBonus()) {
        optionals.set(1);
      }
      if (struct.isSetRedpackets()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTotalRedpackets()) {
        oprot.writeDouble(struct.totalRedpackets);
      }
      if (struct.isSetTotalBonus()) {
        oprot.writeDouble(struct.totalBonus);
      }
      if (struct.isSetRedpackets()) {
        {
          oprot.writeI32(struct.redpackets.size());
          for (RedPacket _iter4 : struct.redpackets)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RedPackets struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.totalRedpackets = iprot.readDouble();
        struct.setTotalRedpacketsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalBonus = iprot.readDouble();
        struct.setTotalBonusIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.redpackets = new java.util.ArrayList<RedPacket>(_list5.size);
          RedPacket _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new RedPacket();
            _elem6.read(iprot);
            struct.redpackets.add(_elem6);
          }
        }
        struct.setRedpacketsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

