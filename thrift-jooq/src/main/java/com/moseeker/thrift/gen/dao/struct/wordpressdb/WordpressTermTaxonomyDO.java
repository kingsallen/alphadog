/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.wordpressdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-21")
public class WordpressTermTaxonomyDO implements org.apache.thrift.TBase<WordpressTermTaxonomyDO, WordpressTermTaxonomyDO._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressTermTaxonomyDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressTermTaxonomyDO");

  private static final org.apache.thrift.protocol.TField TERM_TAXONOMY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("termTaxonomyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TERM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("termId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TAXONOMY_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonomy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WordpressTermTaxonomyDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WordpressTermTaxonomyDOTupleSchemeFactory();

  public int termTaxonomyId; // optional
  public int termId; // optional
  public java.lang.String taxonomy; // optional
  public java.lang.String description; // optional
  public int parent; // optional
  public int count; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERM_TAXONOMY_ID((short)1, "termTaxonomyId"),
    TERM_ID((short)2, "termId"),
    TAXONOMY((short)3, "taxonomy"),
    DESCRIPTION((short)4, "description"),
    PARENT((short)5, "parent"),
    COUNT((short)6, "count");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERM_TAXONOMY_ID
          return TERM_TAXONOMY_ID;
        case 2: // TERM_ID
          return TERM_ID;
        case 3: // TAXONOMY
          return TAXONOMY;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // PARENT
          return PARENT;
        case 6: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TERMTAXONOMYID_ISSET_ID = 0;
  private static final int __TERMID_ISSET_ID = 1;
  private static final int __PARENT_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TERM_TAXONOMY_ID,_Fields.TERM_ID,_Fields.TAXONOMY,_Fields.DESCRIPTION,_Fields.PARENT,_Fields.COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERM_TAXONOMY_ID, new org.apache.thrift.meta_data.FieldMetaData("termTaxonomyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TERM_ID, new org.apache.thrift.meta_data.FieldMetaData("termId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAXONOMY, new org.apache.thrift.meta_data.FieldMetaData("taxonomy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressTermTaxonomyDO.class, metaDataMap);
  }

  public WordpressTermTaxonomyDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressTermTaxonomyDO(WordpressTermTaxonomyDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.termTaxonomyId = other.termTaxonomyId;
    this.termId = other.termId;
    if (other.isSetTaxonomy()) {
      this.taxonomy = other.taxonomy;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.parent = other.parent;
    this.count = other.count;
  }

  public WordpressTermTaxonomyDO deepCopy() {
    return new WordpressTermTaxonomyDO(this);
  }

  @Override
  public void clear() {
    setTermTaxonomyIdIsSet(false);
    this.termTaxonomyId = 0;
    setTermIdIsSet(false);
    this.termId = 0;
    this.taxonomy = null;
    this.description = null;
    setParentIsSet(false);
    this.parent = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getTermTaxonomyId() {
    return this.termTaxonomyId;
  }

  public WordpressTermTaxonomyDO setTermTaxonomyId(int termTaxonomyId) {
    this.termTaxonomyId = termTaxonomyId;
    setTermTaxonomyIdIsSet(true);
    return this;
  }

  public void unsetTermTaxonomyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERMTAXONOMYID_ISSET_ID);
  }

  /** Returns true if field termTaxonomyId is set (has been assigned a value) and false otherwise */
  public boolean isSetTermTaxonomyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERMTAXONOMYID_ISSET_ID);
  }

  public void setTermTaxonomyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERMTAXONOMYID_ISSET_ID, value);
  }

  public int getTermId() {
    return this.termId;
  }

  public WordpressTermTaxonomyDO setTermId(int termId) {
    this.termId = termId;
    setTermIdIsSet(true);
    return this;
  }

  public void unsetTermId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERMID_ISSET_ID);
  }

  /** Returns true if field termId is set (has been assigned a value) and false otherwise */
  public boolean isSetTermId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERMID_ISSET_ID);
  }

  public void setTermIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERMID_ISSET_ID, value);
  }

  public java.lang.String getTaxonomy() {
    return this.taxonomy;
  }

  public WordpressTermTaxonomyDO setTaxonomy(java.lang.String taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  public void unsetTaxonomy() {
    this.taxonomy = null;
  }

  /** Returns true if field taxonomy is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonomy() {
    return this.taxonomy != null;
  }

  public void setTaxonomyIsSet(boolean value) {
    if (!value) {
      this.taxonomy = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public WordpressTermTaxonomyDO setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getParent() {
    return this.parent;
  }

  public WordpressTermTaxonomyDO setParent(int parent) {
    this.parent = parent;
    setParentIsSet(true);
    return this;
  }

  public void unsetParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  /** Returns true if field parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  public void setParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENT_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public WordpressTermTaxonomyDO setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TERM_TAXONOMY_ID:
      if (value == null) {
        unsetTermTaxonomyId();
      } else {
        setTermTaxonomyId((java.lang.Integer)value);
      }
      break;

    case TERM_ID:
      if (value == null) {
        unsetTermId();
      } else {
        setTermId((java.lang.Integer)value);
      }
      break;

    case TAXONOMY:
      if (value == null) {
        unsetTaxonomy();
      } else {
        setTaxonomy((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((java.lang.Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TERM_TAXONOMY_ID:
      return getTermTaxonomyId();

    case TERM_ID:
      return getTermId();

    case TAXONOMY:
      return getTaxonomy();

    case DESCRIPTION:
      return getDescription();

    case PARENT:
      return getParent();

    case COUNT:
      return getCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TERM_TAXONOMY_ID:
      return isSetTermTaxonomyId();
    case TERM_ID:
      return isSetTermId();
    case TAXONOMY:
      return isSetTaxonomy();
    case DESCRIPTION:
      return isSetDescription();
    case PARENT:
      return isSetParent();
    case COUNT:
      return isSetCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressTermTaxonomyDO)
      return this.equals((WordpressTermTaxonomyDO)that);
    return false;
  }

  public boolean equals(WordpressTermTaxonomyDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_termTaxonomyId = true && this.isSetTermTaxonomyId();
    boolean that_present_termTaxonomyId = true && that.isSetTermTaxonomyId();
    if (this_present_termTaxonomyId || that_present_termTaxonomyId) {
      if (!(this_present_termTaxonomyId && that_present_termTaxonomyId))
        return false;
      if (this.termTaxonomyId != that.termTaxonomyId)
        return false;
    }

    boolean this_present_termId = true && this.isSetTermId();
    boolean that_present_termId = true && that.isSetTermId();
    if (this_present_termId || that_present_termId) {
      if (!(this_present_termId && that_present_termId))
        return false;
      if (this.termId != that.termId)
        return false;
    }

    boolean this_present_taxonomy = true && this.isSetTaxonomy();
    boolean that_present_taxonomy = true && that.isSetTaxonomy();
    if (this_present_taxonomy || that_present_taxonomy) {
      if (!(this_present_taxonomy && that_present_taxonomy))
        return false;
      if (!this.taxonomy.equals(that.taxonomy))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_parent = true && this.isSetParent();
    boolean that_present_parent = true && that.isSetParent();
    if (this_present_parent || that_present_parent) {
      if (!(this_present_parent && that_present_parent))
        return false;
      if (this.parent != that.parent)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTermTaxonomyId()) ? 131071 : 524287);
    if (isSetTermTaxonomyId())
      hashCode = hashCode * 8191 + termTaxonomyId;

    hashCode = hashCode * 8191 + ((isSetTermId()) ? 131071 : 524287);
    if (isSetTermId())
      hashCode = hashCode * 8191 + termId;

    hashCode = hashCode * 8191 + ((isSetTaxonomy()) ? 131071 : 524287);
    if (isSetTaxonomy())
      hashCode = hashCode * 8191 + taxonomy.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetParent()) ? 131071 : 524287);
    if (isSetParent())
      hashCode = hashCode * 8191 + parent;

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    return hashCode;
  }

  @Override
  public int compareTo(WordpressTermTaxonomyDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTermTaxonomyId()).compareTo(other.isSetTermTaxonomyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermTaxonomyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termTaxonomyId, other.termTaxonomyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTermId()).compareTo(other.isSetTermId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termId, other.termId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaxonomy()).compareTo(other.isSetTaxonomy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonomy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonomy, other.taxonomy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WordpressTermTaxonomyDO(");
    boolean first = true;

    if (isSetTermTaxonomyId()) {
      sb.append("termTaxonomyId:");
      sb.append(this.termTaxonomyId);
      first = false;
    }
    if (isSetTermId()) {
      if (!first) sb.append(", ");
      sb.append("termId:");
      sb.append(this.termId);
      first = false;
    }
    if (isSetTaxonomy()) {
      if (!first) sb.append(", ");
      sb.append("taxonomy:");
      if (this.taxonomy == null) {
        sb.append("null");
      } else {
        sb.append(this.taxonomy);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetParent()) {
      if (!first) sb.append(", ");
      sb.append("parent:");
      sb.append(this.parent);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressTermTaxonomyDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressTermTaxonomyDOStandardScheme getScheme() {
      return new WordpressTermTaxonomyDOStandardScheme();
    }
  }

  private static class WordpressTermTaxonomyDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WordpressTermTaxonomyDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressTermTaxonomyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERM_TAXONOMY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.termTaxonomyId = iprot.readI32();
              struct.setTermTaxonomyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TERM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.termId = iprot.readI32();
              struct.setTermIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAXONOMY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxonomy = iprot.readString();
              struct.setTaxonomyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parent = iprot.readI32();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressTermTaxonomyDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTermTaxonomyId()) {
        oprot.writeFieldBegin(TERM_TAXONOMY_ID_FIELD_DESC);
        oprot.writeI32(struct.termTaxonomyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTermId()) {
        oprot.writeFieldBegin(TERM_ID_FIELD_DESC);
        oprot.writeI32(struct.termId);
        oprot.writeFieldEnd();
      }
      if (struct.taxonomy != null) {
        if (struct.isSetTaxonomy()) {
          oprot.writeFieldBegin(TAXONOMY_FIELD_DESC);
          oprot.writeString(struct.taxonomy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParent()) {
        oprot.writeFieldBegin(PARENT_FIELD_DESC);
        oprot.writeI32(struct.parent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressTermTaxonomyDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressTermTaxonomyDOTupleScheme getScheme() {
      return new WordpressTermTaxonomyDOTupleScheme();
    }
  }

  private static class WordpressTermTaxonomyDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WordpressTermTaxonomyDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressTermTaxonomyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTermTaxonomyId()) {
        optionals.set(0);
      }
      if (struct.isSetTermId()) {
        optionals.set(1);
      }
      if (struct.isSetTaxonomy()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetParent()) {
        optionals.set(4);
      }
      if (struct.isSetCount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTermTaxonomyId()) {
        oprot.writeI32(struct.termTaxonomyId);
      }
      if (struct.isSetTermId()) {
        oprot.writeI32(struct.termId);
      }
      if (struct.isSetTaxonomy()) {
        oprot.writeString(struct.taxonomy);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetParent()) {
        oprot.writeI32(struct.parent);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressTermTaxonomyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.termTaxonomyId = iprot.readI32();
        struct.setTermTaxonomyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.termId = iprot.readI32();
        struct.setTermIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taxonomy = iprot.readString();
        struct.setTaxonomyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parent = iprot.readI32();
        struct.setParentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

