/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.chat.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-14")
public class HRChatRoomsIndexVO implements org.apache.thrift.TBase<HRChatRoomsIndexVO, HRChatRoomsIndexVO._Fields>, java.io.Serializable, Cloneable, Comparable<HRChatRoomsIndexVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HRChatRoomsIndexVO");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRow", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("rooms", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HRChatRoomsIndexVOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HRChatRoomsIndexVOTupleSchemeFactory();

  public int userId; // optional
  public int pageSize; // optional
  public int totalRow; // optional
  public java.util.List<HRChatRoomVO> rooms; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    PAGE_SIZE((short)2, "pageSize"),
    TOTAL_ROW((short)3, "totalRow"),
    ROOMS((short)4, "rooms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // TOTAL_ROW
          return TOTAL_ROW;
        case 4: // ROOMS
          return ROOMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __TOTALROW_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.PAGE_SIZE,_Fields.TOTAL_ROW,_Fields.ROOMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_ROW, new org.apache.thrift.meta_data.FieldMetaData("totalRow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOMS, new org.apache.thrift.meta_data.FieldMetaData("rooms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HRChatRoomVO.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HRChatRoomsIndexVO.class, metaDataMap);
  }

  public HRChatRoomsIndexVO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HRChatRoomsIndexVO(HRChatRoomsIndexVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.pageSize = other.pageSize;
    this.totalRow = other.totalRow;
    if (other.isSetRooms()) {
      java.util.List<HRChatRoomVO> __this__rooms = new java.util.ArrayList<HRChatRoomVO>(other.rooms.size());
      for (HRChatRoomVO other_element : other.rooms) {
        __this__rooms.add(new HRChatRoomVO(other_element));
      }
      this.rooms = __this__rooms;
    }
  }

  public HRChatRoomsIndexVO deepCopy() {
    return new HRChatRoomsIndexVO(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setTotalRowIsSet(false);
    this.totalRow = 0;
    this.rooms = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public HRChatRoomsIndexVO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public HRChatRoomsIndexVO setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getTotalRow() {
    return this.totalRow;
  }

  public HRChatRoomsIndexVO setTotalRow(int totalRow) {
    this.totalRow = totalRow;
    setTotalRowIsSet(true);
    return this;
  }

  public void unsetTotalRow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALROW_ISSET_ID);
  }

  /** Returns true if field totalRow is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALROW_ISSET_ID);
  }

  public void setTotalRowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALROW_ISSET_ID, value);
  }

  public int getRoomsSize() {
    return (this.rooms == null) ? 0 : this.rooms.size();
  }

  public java.util.Iterator<HRChatRoomVO> getRoomsIterator() {
    return (this.rooms == null) ? null : this.rooms.iterator();
  }

  public void addToRooms(HRChatRoomVO elem) {
    if (this.rooms == null) {
      this.rooms = new java.util.ArrayList<HRChatRoomVO>();
    }
    this.rooms.add(elem);
  }

  public java.util.List<HRChatRoomVO> getRooms() {
    return this.rooms;
  }

  public HRChatRoomsIndexVO setRooms(java.util.List<HRChatRoomVO> rooms) {
    this.rooms = rooms;
    return this;
  }

  public void unsetRooms() {
    this.rooms = null;
  }

  /** Returns true if field rooms is set (has been assigned a value) and false otherwise */
  public boolean isSetRooms() {
    return this.rooms != null;
  }

  public void setRoomsIsSet(boolean value) {
    if (!value) {
      this.rooms = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((java.lang.Integer)value);
      }
      break;

    case TOTAL_ROW:
      if (value == null) {
        unsetTotalRow();
      } else {
        setTotalRow((java.lang.Integer)value);
      }
      break;

    case ROOMS:
      if (value == null) {
        unsetRooms();
      } else {
        setRooms((java.util.List<HRChatRoomVO>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case PAGE_SIZE:
      return getPageSize();

    case TOTAL_ROW:
      return getTotalRow();

    case ROOMS:
      return getRooms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case PAGE_SIZE:
      return isSetPageSize();
    case TOTAL_ROW:
      return isSetTotalRow();
    case ROOMS:
      return isSetRooms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HRChatRoomsIndexVO)
      return this.equals((HRChatRoomsIndexVO)that);
    return false;
  }

  public boolean equals(HRChatRoomsIndexVO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_totalRow = true && this.isSetTotalRow();
    boolean that_present_totalRow = true && that.isSetTotalRow();
    if (this_present_totalRow || that_present_totalRow) {
      if (!(this_present_totalRow && that_present_totalRow))
        return false;
      if (this.totalRow != that.totalRow)
        return false;
    }

    boolean this_present_rooms = true && this.isSetRooms();
    boolean that_present_rooms = true && that.isSetRooms();
    if (this_present_rooms || that_present_rooms) {
      if (!(this_present_rooms && that_present_rooms))
        return false;
      if (!this.rooms.equals(that.rooms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetPageSize()) ? 131071 : 524287);
    if (isSetPageSize())
      hashCode = hashCode * 8191 + pageSize;

    hashCode = hashCode * 8191 + ((isSetTotalRow()) ? 131071 : 524287);
    if (isSetTotalRow())
      hashCode = hashCode * 8191 + totalRow;

    hashCode = hashCode * 8191 + ((isSetRooms()) ? 131071 : 524287);
    if (isSetRooms())
      hashCode = hashCode * 8191 + rooms.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HRChatRoomsIndexVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalRow()).compareTo(other.isSetTotalRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRow, other.totalRow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRooms()).compareTo(other.isSetRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rooms, other.rooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HRChatRoomsIndexVO(");
    boolean first = true;

    if (isSetUserId()) {
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    if (isSetTotalRow()) {
      if (!first) sb.append(", ");
      sb.append("totalRow:");
      sb.append(this.totalRow);
      first = false;
    }
    if (isSetRooms()) {
      if (!first) sb.append(", ");
      sb.append("rooms:");
      if (this.rooms == null) {
        sb.append("null");
      } else {
        sb.append(this.rooms);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HRChatRoomsIndexVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HRChatRoomsIndexVOStandardScheme getScheme() {
      return new HRChatRoomsIndexVOStandardScheme();
    }
  }

  private static class HRChatRoomsIndexVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HRChatRoomsIndexVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HRChatRoomsIndexVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ROW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRow = iprot.readI32();
              struct.setTotalRowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROOMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.rooms = new java.util.ArrayList<HRChatRoomVO>(_list8.size);
                HRChatRoomVO _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new HRChatRoomVO();
                  _elem9.read(iprot);
                  struct.rooms.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRoomsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HRChatRoomsIndexVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalRow()) {
        oprot.writeFieldBegin(TOTAL_ROW_FIELD_DESC);
        oprot.writeI32(struct.totalRow);
        oprot.writeFieldEnd();
      }
      if (struct.rooms != null) {
        if (struct.isSetRooms()) {
          oprot.writeFieldBegin(ROOMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rooms.size()));
            for (HRChatRoomVO _iter11 : struct.rooms)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HRChatRoomsIndexVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HRChatRoomsIndexVOTupleScheme getScheme() {
      return new HRChatRoomsIndexVOTupleScheme();
    }
  }

  private static class HRChatRoomsIndexVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HRChatRoomsIndexVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HRChatRoomsIndexVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetTotalRow()) {
        optionals.set(2);
      }
      if (struct.isSetRooms()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetTotalRow()) {
        oprot.writeI32(struct.totalRow);
      }
      if (struct.isSetRooms()) {
        {
          oprot.writeI32(struct.rooms.size());
          for (HRChatRoomVO _iter12 : struct.rooms)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HRChatRoomsIndexVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalRow = iprot.readI32();
        struct.setTotalRowIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rooms = new java.util.ArrayList<HRChatRoomVO>(_list13.size);
          HRChatRoomVO _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new HRChatRoomVO();
            _elem14.read(iprot);
            struct.rooms.add(_elem14);
          }
        }
        struct.setRoomsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

