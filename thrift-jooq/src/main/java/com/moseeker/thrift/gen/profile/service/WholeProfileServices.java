/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-01")
public class WholeProfileServices {

    public interface Iface {

        public com.moseeker.thrift.gen.common.struct.Response getResource(int userId, int profileId, java.lang.String uuid) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response postResource(java.lang.String profile, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response importCV(java.lang.String profile, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response verifyRequires(int userId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response createProfile(java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response improveProfile(java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response moveProfile(int destUserId, int originUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public boolean retrieveProfile(java.lang.String parameter) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response combinationProfile(java.lang.String params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response preserveProfile(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response validateHrAndUploaduser(int hrId, int companyId, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getUploadProfile(int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileInfo(int userId, int accountId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileMiniList(java.util.Map<java.lang.String,java.lang.String> params) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getResource(int userId, int profileId, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void postResource(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void importCV(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void verifyRequires(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void createProfile(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void improveProfile(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void moveProfile(int destUserId, int originUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void retrieveProfile(java.lang.String parameter, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

        public void combinationProfile(java.lang.String params, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void preserveProfile(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void validateHrAndUploaduser(int hrId, int companyId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getUploadProfile(int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileInfo(int userId, int accountId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileMiniList(java.util.Map<java.lang.String,java.lang.String> params, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.common.struct.Response getResource(int userId, int profileId, java.lang.String uuid) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getResource(userId, profileId, uuid);
            return recv_getResource();
        }

        public void send_getResource(int userId, int profileId, java.lang.String uuid) throws org.apache.thrift.TException
        {
            getResource_args args = new getResource_args();
            args.setUserId(userId);
            args.setProfileId(profileId);
            args.setUuid(uuid);
            sendBase("getResource", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getResource() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getResource_result result = new getResource_result();
            receiveBase(result, "getResource");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResource failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response postResource(java.lang.String profile, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_postResource(profile, user_id);
            return recv_postResource();
        }

        public void send_postResource(java.lang.String profile, int user_id) throws org.apache.thrift.TException
        {
            postResource_args args = new postResource_args();
            args.setProfile(profile);
            args.setUser_id(user_id);
            sendBase("postResource", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_postResource() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            postResource_result result = new postResource_result();
            receiveBase(result, "postResource");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postResource failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response importCV(java.lang.String profile, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_importCV(profile, user_id);
            return recv_importCV();
        }

        public void send_importCV(java.lang.String profile, int user_id) throws org.apache.thrift.TException
        {
            importCV_args args = new importCV_args();
            args.setProfile(profile);
            args.setUser_id(user_id);
            sendBase("importCV", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_importCV() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            importCV_result result = new importCV_result();
            receiveBase(result, "importCV");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importCV failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response verifyRequires(int userId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_verifyRequires(userId, positionId);
            return recv_verifyRequires();
        }

        public void send_verifyRequires(int userId, int positionId) throws org.apache.thrift.TException
        {
            verifyRequires_args args = new verifyRequires_args();
            args.setUserId(userId);
            args.setPositionId(positionId);
            sendBase("verifyRequires", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_verifyRequires() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            verifyRequires_result result = new verifyRequires_result();
            receiveBase(result, "verifyRequires");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyRequires failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response createProfile(java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_createProfile(profile);
            return recv_createProfile();
        }

        public void send_createProfile(java.lang.String profile) throws org.apache.thrift.TException
        {
            createProfile_args args = new createProfile_args();
            args.setProfile(profile);
            sendBase("createProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_createProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            createProfile_result result = new createProfile_result();
            receiveBase(result, "createProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response improveProfile(java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_improveProfile(profile);
            return recv_improveProfile();
        }

        public void send_improveProfile(java.lang.String profile) throws org.apache.thrift.TException
        {
            improveProfile_args args = new improveProfile_args();
            args.setProfile(profile);
            sendBase("improveProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_improveProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            improveProfile_result result = new improveProfile_result();
            receiveBase(result, "improveProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "improveProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response moveProfile(int destUserId, int originUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_moveProfile(destUserId, originUserId);
            return recv_moveProfile();
        }

        public void send_moveProfile(int destUserId, int originUserId) throws org.apache.thrift.TException
        {
            moveProfile_args args = new moveProfile_args();
            args.setDestUserId(destUserId);
            args.setOriginUserId(originUserId);
            sendBase("moveProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_moveProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            moveProfile_result result = new moveProfile_result();
            receiveBase(result, "moveProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveProfile failed: unknown result");
        }

        public boolean retrieveProfile(java.lang.String parameter) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_retrieveProfile(parameter);
            return recv_retrieveProfile();
        }

        public void send_retrieveProfile(java.lang.String parameter) throws org.apache.thrift.TException
        {
            retrieveProfile_args args = new retrieveProfile_args();
            args.setParameter(parameter);
            sendBase("retrieveProfile", args);
        }

        public boolean recv_retrieveProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            retrieveProfile_result result = new retrieveProfile_result();
            receiveBase(result, "retrieveProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response combinationProfile(java.lang.String params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_combinationProfile(params, companyId);
            return recv_combinationProfile();
        }

        public void send_combinationProfile(java.lang.String params, int companyId) throws org.apache.thrift.TException
        {
            combinationProfile_args args = new combinationProfile_args();
            args.setParams(params);
            args.setCompanyId(companyId);
            sendBase("combinationProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_combinationProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            combinationProfile_result result = new combinationProfile_result();
            receiveBase(result, "combinationProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "combinationProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response preserveProfile(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_preserveProfile(params, hrId, companyId, fileName, userId);
            return recv_preserveProfile();
        }

        public void send_preserveProfile(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId) throws org.apache.thrift.TException
        {
            preserveProfile_args args = new preserveProfile_args();
            args.setParams(params);
            args.setHrId(hrId);
            args.setCompanyId(companyId);
            args.setFileName(fileName);
            args.setUserId(userId);
            sendBase("preserveProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_preserveProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            preserveProfile_result result = new preserveProfile_result();
            receiveBase(result, "preserveProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "preserveProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response validateHrAndUploaduser(int hrId, int companyId, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_validateHrAndUploaduser(hrId, companyId, userId);
            return recv_validateHrAndUploaduser();
        }

        public void send_validateHrAndUploaduser(int hrId, int companyId, int userId) throws org.apache.thrift.TException
        {
            validateHrAndUploaduser_args args = new validateHrAndUploaduser_args();
            args.setHrId(hrId);
            args.setCompanyId(companyId);
            args.setUserId(userId);
            sendBase("validateHrAndUploaduser", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_validateHrAndUploaduser() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            validateHrAndUploaduser_result result = new validateHrAndUploaduser_result();
            receiveBase(result, "validateHrAndUploaduser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateHrAndUploaduser failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getUploadProfile(int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getUploadProfile(userId);
            return recv_getUploadProfile();
        }

        public void send_getUploadProfile(int userId) throws org.apache.thrift.TException
        {
            getUploadProfile_args args = new getUploadProfile_args();
            args.setUserId(userId);
            sendBase("getUploadProfile", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getUploadProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getUploadProfile_result result = new getUploadProfile_result();
            receiveBase(result, "getUploadProfile");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUploadProfile failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileInfo(int userId, int accountId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProfileInfo(userId, accountId);
            return recv_getProfileInfo();
        }

        public void send_getProfileInfo(int userId, int accountId) throws org.apache.thrift.TException
        {
            getProfileInfo_args args = new getProfileInfo_args();
            args.setUserId(userId);
            args.setAccountId(accountId);
            sendBase("getProfileInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProfileInfo_result result = new getProfileInfo_result();
            receiveBase(result, "getProfileInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileMiniList(java.util.Map<java.lang.String,java.lang.String> params) throws org.apache.thrift.TException
        {
            send_getProfileMiniList(params);
            return recv_getProfileMiniList();
        }

        public void send_getProfileMiniList(java.util.Map<java.lang.String,java.lang.String> params) throws org.apache.thrift.TException
        {
            getProfileMiniList_args args = new getProfileMiniList_args();
            args.setParams(params);
            sendBase("getProfileMiniList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileMiniList() throws org.apache.thrift.TException
        {
            getProfileMiniList_result result = new getProfileMiniList_result();
            receiveBase(result, "getProfileMiniList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileMiniList failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getResource(int userId, int profileId, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getResource_call method_call = new getResource_call(userId, profileId, uuid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int profileId;
            private java.lang.String uuid;
            public getResource_call(int userId, int profileId, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.profileId = profileId;
                this.uuid = uuid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getResource_args args = new getResource_args();
                args.setUserId(userId);
                args.setProfileId(profileId);
                args.setUuid(uuid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getResource();
            }
        }

        public void postResource(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            postResource_call method_call = new postResource_call(profile, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class postResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String profile;
            private int user_id;
            public postResource_call(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.profile = profile;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
                postResource_args args = new postResource_args();
                args.setProfile(profile);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_postResource();
            }
        }

        public void importCV(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            importCV_call method_call = new importCV_call(profile, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class importCV_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String profile;
            private int user_id;
            public importCV_call(java.lang.String profile, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.profile = profile;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importCV", org.apache.thrift.protocol.TMessageType.CALL, 0));
                importCV_args args = new importCV_args();
                args.setProfile(profile);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_importCV();
            }
        }

        public void verifyRequires(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            verifyRequires_call method_call = new verifyRequires_call(userId, positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class verifyRequires_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int positionId;
            public verifyRequires_call(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyRequires", org.apache.thrift.protocol.TMessageType.CALL, 0));
                verifyRequires_args args = new verifyRequires_args();
                args.setUserId(userId);
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_verifyRequires();
            }
        }

        public void createProfile(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            createProfile_call method_call = new createProfile_call(profile, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String profile;
            public createProfile_call(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.profile = profile;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                createProfile_args args = new createProfile_args();
                args.setProfile(profile);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_createProfile();
            }
        }

        public void improveProfile(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            improveProfile_call method_call = new improveProfile_call(profile, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class improveProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String profile;
            public improveProfile_call(java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.profile = profile;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("improveProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                improveProfile_args args = new improveProfile_args();
                args.setProfile(profile);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_improveProfile();
            }
        }

        public void moveProfile(int destUserId, int originUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            moveProfile_call method_call = new moveProfile_call(destUserId, originUserId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class moveProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int destUserId;
            private int originUserId;
            public moveProfile_call(int destUserId, int originUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.destUserId = destUserId;
                this.originUserId = originUserId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                moveProfile_args args = new moveProfile_args();
                args.setDestUserId(destUserId);
                args.setOriginUserId(originUserId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_moveProfile();
            }
        }

        public void retrieveProfile(java.lang.String parameter, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            retrieveProfile_call method_call = new retrieveProfile_call(parameter, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class retrieveProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private java.lang.String parameter;
            public retrieveProfile_call(java.lang.String parameter, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.parameter = parameter;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                retrieveProfile_args args = new retrieveProfile_args();
                args.setParameter(parameter);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Boolean getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_retrieveProfile();
            }
        }

        public void combinationProfile(java.lang.String params, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            combinationProfile_call method_call = new combinationProfile_call(params, companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class combinationProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String params;
            private int companyId;
            public combinationProfile_call(java.lang.String params, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("combinationProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                combinationProfile_args args = new combinationProfile_args();
                args.setParams(params);
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_combinationProfile();
            }
        }

        public void preserveProfile(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            preserveProfile_call method_call = new preserveProfile_call(params, hrId, companyId, fileName, userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class preserveProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String params;
            private int hrId;
            private int companyId;
            private java.lang.String fileName;
            private int userId;
            public preserveProfile_call(java.lang.String params, int hrId, int companyId, java.lang.String fileName, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.hrId = hrId;
                this.companyId = companyId;
                this.fileName = fileName;
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("preserveProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                preserveProfile_args args = new preserveProfile_args();
                args.setParams(params);
                args.setHrId(hrId);
                args.setCompanyId(companyId);
                args.setFileName(fileName);
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_preserveProfile();
            }
        }

        public void validateHrAndUploaduser(int hrId, int companyId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            validateHrAndUploaduser_call method_call = new validateHrAndUploaduser_call(hrId, companyId, userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class validateHrAndUploaduser_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hrId;
            private int companyId;
            private int userId;
            public validateHrAndUploaduser_call(int hrId, int companyId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.companyId = companyId;
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateHrAndUploaduser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                validateHrAndUploaduser_args args = new validateHrAndUploaduser_args();
                args.setHrId(hrId);
                args.setCompanyId(companyId);
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_validateHrAndUploaduser();
            }
        }

        public void getUploadProfile(int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getUploadProfile_call method_call = new getUploadProfile_call(userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getUploadProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            public getUploadProfile_call(int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUploadProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getUploadProfile_args args = new getUploadProfile_args();
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getUploadProfile();
            }
        }

        public void getProfileInfo(int userId, int accountId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileInfo_call method_call = new getProfileInfo_call(userId, accountId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int accountId;
            public getProfileInfo_call(int userId, int accountId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.accountId = accountId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileInfo_args args = new getProfileInfo_args();
                args.setUserId(userId);
                args.setAccountId(accountId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileInfo();
            }
        }

        public void getProfileMiniList(java.util.Map<java.lang.String,java.lang.String> params, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileMiniList_call method_call = new getProfileMiniList_call(params, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileMiniList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.util.Map<java.lang.String,java.lang.String> params;
            public getProfileMiniList_call(java.util.Map<java.lang.String,java.lang.String> params, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileMiniList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileMiniList_args args = new getProfileMiniList_args();
                args.setParams(params);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileMiniList();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("getResource", new getResource());
            processMap.put("postResource", new postResource());
            processMap.put("importCV", new importCV());
            processMap.put("verifyRequires", new verifyRequires());
            processMap.put("createProfile", new createProfile());
            processMap.put("improveProfile", new improveProfile());
            processMap.put("moveProfile", new moveProfile());
            processMap.put("retrieveProfile", new retrieveProfile());
            processMap.put("combinationProfile", new combinationProfile());
            processMap.put("preserveProfile", new preserveProfile());
            processMap.put("validateHrAndUploaduser", new validateHrAndUploaduser());
            processMap.put("getUploadProfile", new getUploadProfile());
            processMap.put("getProfileInfo", new getProfileInfo());
            processMap.put("getProfileMiniList", new getProfileMiniList());
            return processMap;
        }

        public static class getResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResource_args> {
            public getResource() {
                super("getResource");
            }

            public getResource_args getEmptyArgsInstance() {
                return new getResource_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getResource_result getResult(I iface, getResource_args args) throws org.apache.thrift.TException {
                getResource_result result = new getResource_result();
                try {
                    result.success = iface.getResource(args.userId, args.profileId, args.uuid);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class postResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postResource_args> {
            public postResource() {
                super("postResource");
            }

            public postResource_args getEmptyArgsInstance() {
                return new postResource_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public postResource_result getResult(I iface, postResource_args args) throws org.apache.thrift.TException {
                postResource_result result = new postResource_result();
                try {
                    result.success = iface.postResource(args.profile, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class importCV<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importCV_args> {
            public importCV() {
                super("importCV");
            }

            public importCV_args getEmptyArgsInstance() {
                return new importCV_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public importCV_result getResult(I iface, importCV_args args) throws org.apache.thrift.TException {
                importCV_result result = new importCV_result();
                try {
                    result.success = iface.importCV(args.profile, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class verifyRequires<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyRequires_args> {
            public verifyRequires() {
                super("verifyRequires");
            }

            public verifyRequires_args getEmptyArgsInstance() {
                return new verifyRequires_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public verifyRequires_result getResult(I iface, verifyRequires_args args) throws org.apache.thrift.TException {
                verifyRequires_result result = new verifyRequires_result();
                try {
                    result.success = iface.verifyRequires(args.userId, args.positionId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class createProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createProfile_args> {
            public createProfile() {
                super("createProfile");
            }

            public createProfile_args getEmptyArgsInstance() {
                return new createProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public createProfile_result getResult(I iface, createProfile_args args) throws org.apache.thrift.TException {
                createProfile_result result = new createProfile_result();
                try {
                    result.success = iface.createProfile(args.profile);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class improveProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, improveProfile_args> {
            public improveProfile() {
                super("improveProfile");
            }

            public improveProfile_args getEmptyArgsInstance() {
                return new improveProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public improveProfile_result getResult(I iface, improveProfile_args args) throws org.apache.thrift.TException {
                improveProfile_result result = new improveProfile_result();
                try {
                    result.success = iface.improveProfile(args.profile);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class moveProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveProfile_args> {
            public moveProfile() {
                super("moveProfile");
            }

            public moveProfile_args getEmptyArgsInstance() {
                return new moveProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public moveProfile_result getResult(I iface, moveProfile_args args) throws org.apache.thrift.TException {
                moveProfile_result result = new moveProfile_result();
                try {
                    result.success = iface.moveProfile(args.destUserId, args.originUserId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class retrieveProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveProfile_args> {
            public retrieveProfile() {
                super("retrieveProfile");
            }

            public retrieveProfile_args getEmptyArgsInstance() {
                return new retrieveProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public retrieveProfile_result getResult(I iface, retrieveProfile_args args) throws org.apache.thrift.TException {
                retrieveProfile_result result = new retrieveProfile_result();
                try {
                    result.success = iface.retrieveProfile(args.parameter);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class combinationProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, combinationProfile_args> {
            public combinationProfile() {
                super("combinationProfile");
            }

            public combinationProfile_args getEmptyArgsInstance() {
                return new combinationProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public combinationProfile_result getResult(I iface, combinationProfile_args args) throws org.apache.thrift.TException {
                combinationProfile_result result = new combinationProfile_result();
                try {
                    result.success = iface.combinationProfile(args.params, args.companyId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class preserveProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, preserveProfile_args> {
            public preserveProfile() {
                super("preserveProfile");
            }

            public preserveProfile_args getEmptyArgsInstance() {
                return new preserveProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public preserveProfile_result getResult(I iface, preserveProfile_args args) throws org.apache.thrift.TException {
                preserveProfile_result result = new preserveProfile_result();
                try {
                    result.success = iface.preserveProfile(args.params, args.hrId, args.companyId, args.fileName, args.userId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class validateHrAndUploaduser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateHrAndUploaduser_args> {
            public validateHrAndUploaduser() {
                super("validateHrAndUploaduser");
            }

            public validateHrAndUploaduser_args getEmptyArgsInstance() {
                return new validateHrAndUploaduser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public validateHrAndUploaduser_result getResult(I iface, validateHrAndUploaduser_args args) throws org.apache.thrift.TException {
                validateHrAndUploaduser_result result = new validateHrAndUploaduser_result();
                try {
                    result.success = iface.validateHrAndUploaduser(args.hrId, args.companyId, args.userId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getUploadProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUploadProfile_args> {
            public getUploadProfile() {
                super("getUploadProfile");
            }

            public getUploadProfile_args getEmptyArgsInstance() {
                return new getUploadProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getUploadProfile_result getResult(I iface, getUploadProfile_args args) throws org.apache.thrift.TException {
                getUploadProfile_result result = new getUploadProfile_result();
                try {
                    result.success = iface.getUploadProfile(args.userId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileInfo_args> {
            public getProfileInfo() {
                super("getProfileInfo");
            }

            public getProfileInfo_args getEmptyArgsInstance() {
                return new getProfileInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileInfo_result getResult(I iface, getProfileInfo_args args) throws org.apache.thrift.TException {
                getProfileInfo_result result = new getProfileInfo_result();
                try {
                    result.success = iface.getProfileInfo(args.userId, args.accountId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileMiniList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileMiniList_args> {
            public getProfileMiniList() {
                super("getProfileMiniList");
            }

            public getProfileMiniList_args getEmptyArgsInstance() {
                return new getProfileMiniList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileMiniList_result getResult(I iface, getProfileMiniList_args args) throws org.apache.thrift.TException {
                getProfileMiniList_result result = new getProfileMiniList_result();
                result.success = iface.getProfileMiniList(args.params);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getResource", new getResource());
            processMap.put("postResource", new postResource());
            processMap.put("importCV", new importCV());
            processMap.put("verifyRequires", new verifyRequires());
            processMap.put("createProfile", new createProfile());
            processMap.put("improveProfile", new improveProfile());
            processMap.put("moveProfile", new moveProfile());
            processMap.put("retrieveProfile", new retrieveProfile());
            processMap.put("combinationProfile", new combinationProfile());
            processMap.put("preserveProfile", new preserveProfile());
            processMap.put("validateHrAndUploaduser", new validateHrAndUploaduser());
            processMap.put("getUploadProfile", new getUploadProfile());
            processMap.put("getProfileInfo", new getProfileInfo());
            processMap.put("getProfileMiniList", new getProfileMiniList());
            return processMap;
        }

        public static class getResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResource_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getResource() {
                super("getResource");
            }

            public getResource_args getEmptyArgsInstance() {
                return new getResource_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getResource_result result = new getResource_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getResource_result result = new getResource_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getResource(args.userId, args.profileId, args.uuid,resultHandler);
            }
        }

        public static class postResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postResource_args, com.moseeker.thrift.gen.common.struct.Response> {
            public postResource() {
                super("postResource");
            }

            public postResource_args getEmptyArgsInstance() {
                return new postResource_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        postResource_result result = new postResource_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        postResource_result result = new postResource_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, postResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.postResource(args.profile, args.user_id,resultHandler);
            }
        }

        public static class importCV<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importCV_args, com.moseeker.thrift.gen.common.struct.Response> {
            public importCV() {
                super("importCV");
            }

            public importCV_args getEmptyArgsInstance() {
                return new importCV_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        importCV_result result = new importCV_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        importCV_result result = new importCV_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, importCV_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.importCV(args.profile, args.user_id,resultHandler);
            }
        }

        public static class verifyRequires<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyRequires_args, com.moseeker.thrift.gen.common.struct.Response> {
            public verifyRequires() {
                super("verifyRequires");
            }

            public verifyRequires_args getEmptyArgsInstance() {
                return new verifyRequires_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        verifyRequires_result result = new verifyRequires_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        verifyRequires_result result = new verifyRequires_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, verifyRequires_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.verifyRequires(args.userId, args.positionId,resultHandler);
            }
        }

        public static class createProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public createProfile() {
                super("createProfile");
            }

            public createProfile_args getEmptyArgsInstance() {
                return new createProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        createProfile_result result = new createProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        createProfile_result result = new createProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, createProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.createProfile(args.profile,resultHandler);
            }
        }

        public static class improveProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, improveProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public improveProfile() {
                super("improveProfile");
            }

            public improveProfile_args getEmptyArgsInstance() {
                return new improveProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        improveProfile_result result = new improveProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        improveProfile_result result = new improveProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, improveProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.improveProfile(args.profile,resultHandler);
            }
        }

        public static class moveProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public moveProfile() {
                super("moveProfile");
            }

            public moveProfile_args getEmptyArgsInstance() {
                return new moveProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        moveProfile_result result = new moveProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        moveProfile_result result = new moveProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, moveProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.moveProfile(args.destUserId, args.originUserId,resultHandler);
            }
        }

        public static class retrieveProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveProfile_args, java.lang.Boolean> {
            public retrieveProfile() {
                super("retrieveProfile");
            }

            public retrieveProfile_args getEmptyArgsInstance() {
                return new retrieveProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    public void onComplete(java.lang.Boolean o) {
                        retrieveProfile_result result = new retrieveProfile_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        retrieveProfile_result result = new retrieveProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, retrieveProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.retrieveProfile(args.parameter,resultHandler);
            }
        }

        public static class combinationProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, combinationProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public combinationProfile() {
                super("combinationProfile");
            }

            public combinationProfile_args getEmptyArgsInstance() {
                return new combinationProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        combinationProfile_result result = new combinationProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        combinationProfile_result result = new combinationProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, combinationProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.combinationProfile(args.params, args.companyId,resultHandler);
            }
        }

        public static class preserveProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, preserveProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public preserveProfile() {
                super("preserveProfile");
            }

            public preserveProfile_args getEmptyArgsInstance() {
                return new preserveProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        preserveProfile_result result = new preserveProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        preserveProfile_result result = new preserveProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, preserveProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.preserveProfile(args.params, args.hrId, args.companyId, args.fileName, args.userId,resultHandler);
            }
        }

        public static class validateHrAndUploaduser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validateHrAndUploaduser_args, com.moseeker.thrift.gen.common.struct.Response> {
            public validateHrAndUploaduser() {
                super("validateHrAndUploaduser");
            }

            public validateHrAndUploaduser_args getEmptyArgsInstance() {
                return new validateHrAndUploaduser_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        validateHrAndUploaduser_result result = new validateHrAndUploaduser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        validateHrAndUploaduser_result result = new validateHrAndUploaduser_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, validateHrAndUploaduser_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.validateHrAndUploaduser(args.hrId, args.companyId, args.userId,resultHandler);
            }
        }

        public static class getUploadProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUploadProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getUploadProfile() {
                super("getUploadProfile");
            }

            public getUploadProfile_args getEmptyArgsInstance() {
                return new getUploadProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getUploadProfile_result result = new getUploadProfile_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getUploadProfile_result result = new getUploadProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getUploadProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getUploadProfile(args.userId,resultHandler);
            }
        }

        public static class getProfileInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileInfo() {
                super("getProfileInfo");
            }

            public getProfileInfo_args getEmptyArgsInstance() {
                return new getProfileInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileInfo_result result = new getProfileInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileInfo_result result = new getProfileInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileInfo(args.userId, args.accountId,resultHandler);
            }
        }

        public static class getProfileMiniList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileMiniList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileMiniList() {
                super("getProfileMiniList");
            }

            public getProfileMiniList_args getEmptyArgsInstance() {
                return new getProfileMiniList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileMiniList_result result = new getProfileMiniList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileMiniList_result result = new getProfileMiniList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileMiniList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileMiniList(args.params,resultHandler);
            }
        }

    }

    public static class getResource_args implements org.apache.thrift.TBase<getResource_args, getResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResource_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResource_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResource_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResource_argsTupleSchemeFactory();

        public int userId; // required
        public int profileId; // required
        public java.lang.String uuid; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            PROFILE_ID((short)2, "profileId"),
            UUID((short)3, "uuid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // PROFILE_ID
                        return PROFILE_ID;
                    case 3: // UUID
                        return UUID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __PROFILEID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResource_args.class, metaDataMap);
        }

        public getResource_args() {
        }

        public getResource_args(
                int userId,
                int profileId,
                java.lang.String uuid)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.profileId = profileId;
            setProfileIdIsSet(true);
            this.uuid = uuid;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResource_args(getResource_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.profileId = other.profileId;
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
        }

        public getResource_args deepCopy() {
            return new getResource_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setProfileIdIsSet(false);
            this.profileId = 0;
            this.uuid = null;
        }

        public int getUserId() {
            return this.userId;
        }

        public getResource_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getProfileId() {
            return this.profileId;
        }

        public getResource_args setProfileId(int profileId) {
            this.profileId = profileId;
            setProfileIdIsSet(true);
            return this;
        }

        public void unsetProfileId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
        }

        /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
        public boolean isSetProfileId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
        }

        public void setProfileIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
        }

        public java.lang.String getUuid() {
            return this.uuid;
        }

        public getResource_args setUuid(java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case PROFILE_ID:
                    if (value == null) {
                        unsetProfileId();
                    } else {
                        setProfileId((java.lang.Integer)value);
                    }
                    break;

                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case PROFILE_ID:
                    return getProfileId();

                case UUID:
                    return getUuid();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case PROFILE_ID:
                    return isSetProfileId();
                case UUID:
                    return isSetUuid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getResource_args)
                return this.equals((getResource_args)that);
            return false;
        }

        public boolean equals(getResource_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_profileId = true;
            boolean that_present_profileId = true;
            if (this_present_profileId || that_present_profileId) {
                if (!(this_present_profileId && that_present_profileId))
                    return false;
                if (this.profileId != that.profileId)
                    return false;
            }

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + profileId;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getResource_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProfileId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getResource_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("profileId:");
            sb.append(this.profileId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResource_argsStandardScheme getScheme() {
                return new getResource_argsStandardScheme();
            }
        }

        private static class getResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResource_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROFILE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.profileId = iprot.readI32();
                                struct.setProfileIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResource_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
                oprot.writeI32(struct.profileId);
                oprot.writeFieldEnd();
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResource_argsTupleScheme getScheme() {
                return new getResource_argsTupleScheme();
            }
        }

        private static class getResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResource_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetProfileId()) {
                    optionals.set(1);
                }
                if (struct.isSetUuid()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetProfileId()) {
                    oprot.writeI32(struct.profileId);
                }
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.profileId = iprot.readI32();
                    struct.setProfileIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getResource_result implements org.apache.thrift.TBase<getResource_result, getResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResource_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResource_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResource_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResource_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResource_result.class, metaDataMap);
        }

        public getResource_result() {
        }

        public getResource_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResource_result(getResource_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getResource_result deepCopy() {
            return new getResource_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getResource_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getResource_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getResource_result)
                return this.equals((getResource_result)that);
            return false;
        }

        public boolean equals(getResource_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getResource_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getResource_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResource_resultStandardScheme getScheme() {
                return new getResource_resultStandardScheme();
            }
        }

        private static class getResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResource_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResource_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResource_resultTupleScheme getScheme() {
                return new getResource_resultTupleScheme();
            }
        }

        private static class getResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResource_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class postResource_args implements org.apache.thrift.TBase<postResource_args, postResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_args");

        private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResource_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResource_argsTupleSchemeFactory();

        public java.lang.String profile; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROFILE((short)1, "profile"),
            USER_ID((short)2, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROFILE
                        return PROFILE;
                    case 2: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USER_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_args.class, metaDataMap);
        }

        public postResource_args() {
        }

        public postResource_args(
                java.lang.String profile,
                int user_id)
        {
            this();
            this.profile = profile;
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public postResource_args(postResource_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetProfile()) {
                this.profile = other.profile;
            }
            this.user_id = other.user_id;
        }

        public postResource_args deepCopy() {
            return new postResource_args(this);
        }

        @Override
        public void clear() {
            this.profile = null;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public java.lang.String getProfile() {
            return this.profile;
        }

        public postResource_args setProfile(java.lang.String profile) {
            this.profile = profile;
            return this;
        }

        public void unsetProfile() {
            this.profile = null;
        }

        /** Returns true if field profile is set (has been assigned a value) and false otherwise */
        public boolean isSetProfile() {
            return this.profile != null;
        }

        public void setProfileIsSet(boolean value) {
            if (!value) {
                this.profile = null;
            }
        }

        public int getUser_id() {
            return this.user_id;
        }

        public postResource_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROFILE:
                    if (value == null) {
                        unsetProfile();
                    } else {
                        setProfile((java.lang.String)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROFILE:
                    return getProfile();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROFILE:
                    return isSetProfile();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof postResource_args)
                return this.equals((postResource_args)that);
            return false;
        }

        public boolean equals(postResource_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_profile = true && this.isSetProfile();
            boolean that_present_profile = true && that.isSetProfile();
            if (this_present_profile || that_present_profile) {
                if (!(this_present_profile && that_present_profile))
                    return false;
                if (!this.profile.equals(that.profile))
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
            if (isSetProfile())
                hashCode = hashCode * 8191 + profile.hashCode();

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(postResource_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("postResource_args(");
            boolean first = true;

            sb.append("profile:");
            if (this.profile == null) {
                sb.append("null");
            } else {
                sb.append(this.profile);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class postResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public postResource_argsStandardScheme getScheme() {
                return new postResource_argsStandardScheme();
            }
        }

        private static class postResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResource_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.profile = iprot.readString();
                                struct.setProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.profile != null) {
                    oprot.writeFieldBegin(PROFILE_FIELD_DESC);
                    oprot.writeString(struct.profile);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class postResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public postResource_argsTupleScheme getScheme() {
                return new postResource_argsTupleScheme();
            }
        }

        private static class postResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResource_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProfile()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetProfile()) {
                    oprot.writeString(struct.profile);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.profile = iprot.readString();
                    struct.setProfileIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class postResource_result implements org.apache.thrift.TBase<postResource_result, postResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResource_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResource_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_result.class, metaDataMap);
        }

        public postResource_result() {
        }

        public postResource_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public postResource_result(postResource_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public postResource_result deepCopy() {
            return new postResource_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public postResource_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public postResource_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof postResource_result)
                return this.equals((postResource_result)that);
            return false;
        }

        public boolean equals(postResource_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(postResource_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("postResource_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class postResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public postResource_resultStandardScheme getScheme() {
                return new postResource_resultStandardScheme();
            }
        }

        private static class postResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResource_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class postResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public postResource_resultTupleScheme getScheme() {
                return new postResource_resultTupleScheme();
            }
        }

        private static class postResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResource_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importCV_args implements org.apache.thrift.TBase<importCV_args, importCV_args._Fields>, java.io.Serializable, Cloneable, Comparable<importCV_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importCV_args");

        private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importCV_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importCV_argsTupleSchemeFactory();

        public java.lang.String profile; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROFILE((short)1, "profile"),
            USER_ID((short)2, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROFILE
                        return PROFILE;
                    case 2: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USER_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importCV_args.class, metaDataMap);
        }

        public importCV_args() {
        }

        public importCV_args(
                java.lang.String profile,
                int user_id)
        {
            this();
            this.profile = profile;
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importCV_args(importCV_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetProfile()) {
                this.profile = other.profile;
            }
            this.user_id = other.user_id;
        }

        public importCV_args deepCopy() {
            return new importCV_args(this);
        }

        @Override
        public void clear() {
            this.profile = null;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public java.lang.String getProfile() {
            return this.profile;
        }

        public importCV_args setProfile(java.lang.String profile) {
            this.profile = profile;
            return this;
        }

        public void unsetProfile() {
            this.profile = null;
        }

        /** Returns true if field profile is set (has been assigned a value) and false otherwise */
        public boolean isSetProfile() {
            return this.profile != null;
        }

        public void setProfileIsSet(boolean value) {
            if (!value) {
                this.profile = null;
            }
        }

        public int getUser_id() {
            return this.user_id;
        }

        public importCV_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROFILE:
                    if (value == null) {
                        unsetProfile();
                    } else {
                        setProfile((java.lang.String)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROFILE:
                    return getProfile();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROFILE:
                    return isSetProfile();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof importCV_args)
                return this.equals((importCV_args)that);
            return false;
        }

        public boolean equals(importCV_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_profile = true && this.isSetProfile();
            boolean that_present_profile = true && that.isSetProfile();
            if (this_present_profile || that_present_profile) {
                if (!(this_present_profile && that_present_profile))
                    return false;
                if (!this.profile.equals(that.profile))
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
            if (isSetProfile())
                hashCode = hashCode * 8191 + profile.hashCode();

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(importCV_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importCV_args(");
            boolean first = true;

            sb.append("profile:");
            if (this.profile == null) {
                sb.append("null");
            } else {
                sb.append(this.profile);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importCV_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importCV_argsStandardScheme getScheme() {
                return new importCV_argsStandardScheme();
            }
        }

        private static class importCV_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<importCV_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importCV_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.profile = iprot.readString();
                                struct.setProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importCV_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.profile != null) {
                    oprot.writeFieldBegin(PROFILE_FIELD_DESC);
                    oprot.writeString(struct.profile);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importCV_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importCV_argsTupleScheme getScheme() {
                return new importCV_argsTupleScheme();
            }
        }

        private static class importCV_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<importCV_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importCV_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProfile()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetProfile()) {
                    oprot.writeString(struct.profile);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importCV_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.profile = iprot.readString();
                    struct.setProfileIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class importCV_result implements org.apache.thrift.TBase<importCV_result, importCV_result._Fields>, java.io.Serializable, Cloneable, Comparable<importCV_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importCV_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new importCV_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new importCV_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importCV_result.class, metaDataMap);
        }

        public importCV_result() {
        }

        public importCV_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public importCV_result(importCV_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public importCV_result deepCopy() {
            return new importCV_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public importCV_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public importCV_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof importCV_result)
                return this.equals((importCV_result)that);
            return false;
        }

        public boolean equals(importCV_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(importCV_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("importCV_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class importCV_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importCV_resultStandardScheme getScheme() {
                return new importCV_resultStandardScheme();
            }
        }

        private static class importCV_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<importCV_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, importCV_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, importCV_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class importCV_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public importCV_resultTupleScheme getScheme() {
                return new importCV_resultTupleScheme();
            }
        }

        private static class importCV_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<importCV_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, importCV_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, importCV_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class verifyRequires_args implements org.apache.thrift.TBase<verifyRequires_args, verifyRequires_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyRequires_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyRequires_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyRequires_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyRequires_argsTupleSchemeFactory();

        public int userId; // required
        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            POSITION_ID((short)2, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __POSITIONID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyRequires_args.class, metaDataMap);
        }

        public verifyRequires_args() {
        }

        public verifyRequires_args(
                int userId,
                int positionId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyRequires_args(verifyRequires_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.positionId = other.positionId;
        }

        public verifyRequires_args deepCopy() {
            return new verifyRequires_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public verifyRequires_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public verifyRequires_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyRequires_args)
                return this.equals((verifyRequires_args)that);
            return false;
        }

        public boolean equals(verifyRequires_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(verifyRequires_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyRequires_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class verifyRequires_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyRequires_argsStandardScheme getScheme() {
                return new verifyRequires_argsStandardScheme();
            }
        }

        private static class verifyRequires_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyRequires_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, verifyRequires_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, verifyRequires_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class verifyRequires_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyRequires_argsTupleScheme getScheme() {
                return new verifyRequires_argsTupleScheme();
            }
        }

        private static class verifyRequires_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyRequires_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, verifyRequires_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, verifyRequires_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class verifyRequires_result implements org.apache.thrift.TBase<verifyRequires_result, verifyRequires_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyRequires_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyRequires_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyRequires_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyRequires_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyRequires_result.class, metaDataMap);
        }

        public verifyRequires_result() {
        }

        public verifyRequires_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyRequires_result(verifyRequires_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public verifyRequires_result deepCopy() {
            return new verifyRequires_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public verifyRequires_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public verifyRequires_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyRequires_result)
                return this.equals((verifyRequires_result)that);
            return false;
        }

        public boolean equals(verifyRequires_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(verifyRequires_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyRequires_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class verifyRequires_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyRequires_resultStandardScheme getScheme() {
                return new verifyRequires_resultStandardScheme();
            }
        }

        private static class verifyRequires_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyRequires_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, verifyRequires_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, verifyRequires_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class verifyRequires_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyRequires_resultTupleScheme getScheme() {
                return new verifyRequires_resultTupleScheme();
            }
        }

        private static class verifyRequires_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyRequires_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, verifyRequires_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, verifyRequires_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class createProfile_args implements org.apache.thrift.TBase<createProfile_args, createProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<createProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProfile_args");

        private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createProfile_argsTupleSchemeFactory();

        public java.lang.String profile; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROFILE((short)1, "profile");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROFILE
                        return PROFILE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProfile_args.class, metaDataMap);
        }

        public createProfile_args() {
        }

        public createProfile_args(
                java.lang.String profile)
        {
            this();
            this.profile = profile;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createProfile_args(createProfile_args other) {
            if (other.isSetProfile()) {
                this.profile = other.profile;
            }
        }

        public createProfile_args deepCopy() {
            return new createProfile_args(this);
        }

        @Override
        public void clear() {
            this.profile = null;
        }

        public java.lang.String getProfile() {
            return this.profile;
        }

        public createProfile_args setProfile(java.lang.String profile) {
            this.profile = profile;
            return this;
        }

        public void unsetProfile() {
            this.profile = null;
        }

        /** Returns true if field profile is set (has been assigned a value) and false otherwise */
        public boolean isSetProfile() {
            return this.profile != null;
        }

        public void setProfileIsSet(boolean value) {
            if (!value) {
                this.profile = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROFILE:
                    if (value == null) {
                        unsetProfile();
                    } else {
                        setProfile((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROFILE:
                    return getProfile();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROFILE:
                    return isSetProfile();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof createProfile_args)
                return this.equals((createProfile_args)that);
            return false;
        }

        public boolean equals(createProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_profile = true && this.isSetProfile();
            boolean that_present_profile = true && that.isSetProfile();
            if (this_present_profile || that_present_profile) {
                if (!(this_present_profile && that_present_profile))
                    return false;
                if (!this.profile.equals(that.profile))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
            if (isSetProfile())
                hashCode = hashCode * 8191 + profile.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(createProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("createProfile_args(");
            boolean first = true;

            sb.append("profile:");
            if (this.profile == null) {
                sb.append("null");
            } else {
                sb.append(this.profile);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class createProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createProfile_argsStandardScheme getScheme() {
                return new createProfile_argsStandardScheme();
            }
        }

        private static class createProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.profile = iprot.readString();
                                struct.setProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.profile != null) {
                    oprot.writeFieldBegin(PROFILE_FIELD_DESC);
                    oprot.writeString(struct.profile);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createProfile_argsTupleScheme getScheme() {
                return new createProfile_argsTupleScheme();
            }
        }

        private static class createProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProfile()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetProfile()) {
                    oprot.writeString(struct.profile);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.profile = iprot.readString();
                    struct.setProfileIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class createProfile_result implements org.apache.thrift.TBase<createProfile_result, createProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<createProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProfile_result.class, metaDataMap);
        }

        public createProfile_result() {
        }

        public createProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createProfile_result(createProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public createProfile_result deepCopy() {
            return new createProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public createProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public createProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof createProfile_result)
                return this.equals((createProfile_result)that);
            return false;
        }

        public boolean equals(createProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(createProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("createProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class createProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createProfile_resultStandardScheme getScheme() {
                return new createProfile_resultStandardScheme();
            }
        }

        private static class createProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public createProfile_resultTupleScheme getScheme() {
                return new createProfile_resultTupleScheme();
            }
        }

        private static class createProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class improveProfile_args implements org.apache.thrift.TBase<improveProfile_args, improveProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<improveProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("improveProfile_args");

        private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new improveProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new improveProfile_argsTupleSchemeFactory();

        public java.lang.String profile; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PROFILE((short)1, "profile");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PROFILE
                        return PROFILE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(improveProfile_args.class, metaDataMap);
        }

        public improveProfile_args() {
        }

        public improveProfile_args(
                java.lang.String profile)
        {
            this();
            this.profile = profile;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public improveProfile_args(improveProfile_args other) {
            if (other.isSetProfile()) {
                this.profile = other.profile;
            }
        }

        public improveProfile_args deepCopy() {
            return new improveProfile_args(this);
        }

        @Override
        public void clear() {
            this.profile = null;
        }

        public java.lang.String getProfile() {
            return this.profile;
        }

        public improveProfile_args setProfile(java.lang.String profile) {
            this.profile = profile;
            return this;
        }

        public void unsetProfile() {
            this.profile = null;
        }

        /** Returns true if field profile is set (has been assigned a value) and false otherwise */
        public boolean isSetProfile() {
            return this.profile != null;
        }

        public void setProfileIsSet(boolean value) {
            if (!value) {
                this.profile = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PROFILE:
                    if (value == null) {
                        unsetProfile();
                    } else {
                        setProfile((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PROFILE:
                    return getProfile();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PROFILE:
                    return isSetProfile();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof improveProfile_args)
                return this.equals((improveProfile_args)that);
            return false;
        }

        public boolean equals(improveProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_profile = true && this.isSetProfile();
            boolean that_present_profile = true && that.isSetProfile();
            if (this_present_profile || that_present_profile) {
                if (!(this_present_profile && that_present_profile))
                    return false;
                if (!this.profile.equals(that.profile))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
            if (isSetProfile())
                hashCode = hashCode * 8191 + profile.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(improveProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("improveProfile_args(");
            boolean first = true;

            sb.append("profile:");
            if (this.profile == null) {
                sb.append("null");
            } else {
                sb.append(this.profile);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class improveProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public improveProfile_argsStandardScheme getScheme() {
                return new improveProfile_argsStandardScheme();
            }
        }

        private static class improveProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<improveProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, improveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.profile = iprot.readString();
                                struct.setProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, improveProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.profile != null) {
                    oprot.writeFieldBegin(PROFILE_FIELD_DESC);
                    oprot.writeString(struct.profile);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class improveProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public improveProfile_argsTupleScheme getScheme() {
                return new improveProfile_argsTupleScheme();
            }
        }

        private static class improveProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<improveProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, improveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetProfile()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetProfile()) {
                    oprot.writeString(struct.profile);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, improveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.profile = iprot.readString();
                    struct.setProfileIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class improveProfile_result implements org.apache.thrift.TBase<improveProfile_result, improveProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<improveProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("improveProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new improveProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new improveProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(improveProfile_result.class, metaDataMap);
        }

        public improveProfile_result() {
        }

        public improveProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public improveProfile_result(improveProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public improveProfile_result deepCopy() {
            return new improveProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public improveProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public improveProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof improveProfile_result)
                return this.equals((improveProfile_result)that);
            return false;
        }

        public boolean equals(improveProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(improveProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("improveProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class improveProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public improveProfile_resultStandardScheme getScheme() {
                return new improveProfile_resultStandardScheme();
            }
        }

        private static class improveProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<improveProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, improveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, improveProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class improveProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public improveProfile_resultTupleScheme getScheme() {
                return new improveProfile_resultTupleScheme();
            }
        }

        private static class improveProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<improveProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, improveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, improveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class moveProfile_args implements org.apache.thrift.TBase<moveProfile_args, moveProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveProfile_args");

        private static final org.apache.thrift.protocol.TField DEST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destUserId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField ORIGIN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("originUserId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new moveProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new moveProfile_argsTupleSchemeFactory();

        public int destUserId; // required
        public int originUserId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEST_USER_ID((short)1, "destUserId"),
            ORIGIN_USER_ID((short)2, "originUserId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DEST_USER_ID
                        return DEST_USER_ID;
                    case 2: // ORIGIN_USER_ID
                        return ORIGIN_USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __DESTUSERID_ISSET_ID = 0;
        private static final int __ORIGINUSERID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("destUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ORIGIN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("originUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveProfile_args.class, metaDataMap);
        }

        public moveProfile_args() {
        }

        public moveProfile_args(
                int destUserId,
                int originUserId)
        {
            this();
            this.destUserId = destUserId;
            setDestUserIdIsSet(true);
            this.originUserId = originUserId;
            setOriginUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public moveProfile_args(moveProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.destUserId = other.destUserId;
            this.originUserId = other.originUserId;
        }

        public moveProfile_args deepCopy() {
            return new moveProfile_args(this);
        }

        @Override
        public void clear() {
            setDestUserIdIsSet(false);
            this.destUserId = 0;
            setOriginUserIdIsSet(false);
            this.originUserId = 0;
        }

        public int getDestUserId() {
            return this.destUserId;
        }

        public moveProfile_args setDestUserId(int destUserId) {
            this.destUserId = destUserId;
            setDestUserIdIsSet(true);
            return this;
        }

        public void unsetDestUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DESTUSERID_ISSET_ID);
        }

        /** Returns true if field destUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetDestUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DESTUSERID_ISSET_ID);
        }

        public void setDestUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DESTUSERID_ISSET_ID, value);
        }

        public int getOriginUserId() {
            return this.originUserId;
        }

        public moveProfile_args setOriginUserId(int originUserId) {
            this.originUserId = originUserId;
            setOriginUserIdIsSet(true);
            return this;
        }

        public void unsetOriginUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINUSERID_ISSET_ID);
        }

        /** Returns true if field originUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetOriginUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINUSERID_ISSET_ID);
        }

        public void setOriginUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINUSERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case DEST_USER_ID:
                    if (value == null) {
                        unsetDestUserId();
                    } else {
                        setDestUserId((java.lang.Integer)value);
                    }
                    break;

                case ORIGIN_USER_ID:
                    if (value == null) {
                        unsetOriginUserId();
                    } else {
                        setOriginUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DEST_USER_ID:
                    return getDestUserId();

                case ORIGIN_USER_ID:
                    return getOriginUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DEST_USER_ID:
                    return isSetDestUserId();
                case ORIGIN_USER_ID:
                    return isSetOriginUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof moveProfile_args)
                return this.equals((moveProfile_args)that);
            return false;
        }

        public boolean equals(moveProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_destUserId = true;
            boolean that_present_destUserId = true;
            if (this_present_destUserId || that_present_destUserId) {
                if (!(this_present_destUserId && that_present_destUserId))
                    return false;
                if (this.destUserId != that.destUserId)
                    return false;
            }

            boolean this_present_originUserId = true;
            boolean that_present_originUserId = true;
            if (this_present_originUserId || that_present_originUserId) {
                if (!(this_present_originUserId && that_present_originUserId))
                    return false;
                if (this.originUserId != that.originUserId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + destUserId;

            hashCode = hashCode * 8191 + originUserId;

            return hashCode;
        }

        @Override
        public int compareTo(moveProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetDestUserId()).compareTo(other.isSetDestUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDestUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destUserId, other.destUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetOriginUserId()).compareTo(other.isSetOriginUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOriginUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originUserId, other.originUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("moveProfile_args(");
            boolean first = true;

            sb.append("destUserId:");
            sb.append(this.destUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("originUserId:");
            sb.append(this.originUserId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class moveProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public moveProfile_argsStandardScheme getScheme() {
                return new moveProfile_argsStandardScheme();
            }
        }

        private static class moveProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<moveProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, moveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DEST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.destUserId = iprot.readI32();
                                struct.setDestUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ORIGIN_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.originUserId = iprot.readI32();
                                struct.setOriginUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, moveProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(DEST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.destUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ORIGIN_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.originUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class moveProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public moveProfile_argsTupleScheme getScheme() {
                return new moveProfile_argsTupleScheme();
            }
        }

        private static class moveProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<moveProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, moveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDestUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetOriginUserId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDestUserId()) {
                    oprot.writeI32(struct.destUserId);
                }
                if (struct.isSetOriginUserId()) {
                    oprot.writeI32(struct.originUserId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, moveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.destUserId = iprot.readI32();
                    struct.setDestUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.originUserId = iprot.readI32();
                    struct.setOriginUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class moveProfile_result implements org.apache.thrift.TBase<moveProfile_result, moveProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new moveProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new moveProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveProfile_result.class, metaDataMap);
        }

        public moveProfile_result() {
        }

        public moveProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public moveProfile_result(moveProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public moveProfile_result deepCopy() {
            return new moveProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public moveProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public moveProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof moveProfile_result)
                return this.equals((moveProfile_result)that);
            return false;
        }

        public boolean equals(moveProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(moveProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("moveProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class moveProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public moveProfile_resultStandardScheme getScheme() {
                return new moveProfile_resultStandardScheme();
            }
        }

        private static class moveProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<moveProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, moveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, moveProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class moveProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public moveProfile_resultTupleScheme getScheme() {
                return new moveProfile_resultTupleScheme();
            }
        }

        private static class moveProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<moveProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, moveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, moveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class retrieveProfile_args implements org.apache.thrift.TBase<retrieveProfile_args, retrieveProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveProfile_args");

        private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveProfile_argsTupleSchemeFactory();

        public java.lang.String parameter; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMETER((short)1, "parameter");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMETER
                        return PARAMETER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveProfile_args.class, metaDataMap);
        }

        public retrieveProfile_args() {
        }

        public retrieveProfile_args(
                java.lang.String parameter)
        {
            this();
            this.parameter = parameter;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public retrieveProfile_args(retrieveProfile_args other) {
            if (other.isSetParameter()) {
                this.parameter = other.parameter;
            }
        }

        public retrieveProfile_args deepCopy() {
            return new retrieveProfile_args(this);
        }

        @Override
        public void clear() {
            this.parameter = null;
        }

        public java.lang.String getParameter() {
            return this.parameter;
        }

        public retrieveProfile_args setParameter(java.lang.String parameter) {
            this.parameter = parameter;
            return this;
        }

        public void unsetParameter() {
            this.parameter = null;
        }

        /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
        public boolean isSetParameter() {
            return this.parameter != null;
        }

        public void setParameterIsSet(boolean value) {
            if (!value) {
                this.parameter = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMETER:
                    if (value == null) {
                        unsetParameter();
                    } else {
                        setParameter((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMETER:
                    return getParameter();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMETER:
                    return isSetParameter();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof retrieveProfile_args)
                return this.equals((retrieveProfile_args)that);
            return false;
        }

        public boolean equals(retrieveProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_parameter = true && this.isSetParameter();
            boolean that_present_parameter = true && that.isSetParameter();
            if (this_present_parameter || that_present_parameter) {
                if (!(this_present_parameter && that_present_parameter))
                    return false;
                if (!this.parameter.equals(that.parameter))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
            if (isSetParameter())
                hashCode = hashCode * 8191 + parameter.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(retrieveProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParameter()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveProfile_args(");
            boolean first = true;

            sb.append("parameter:");
            if (this.parameter == null) {
                sb.append("null");
            } else {
                sb.append(this.parameter);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class retrieveProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public retrieveProfile_argsStandardScheme getScheme() {
                return new retrieveProfile_argsStandardScheme();
            }
        }

        private static class retrieveProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMETER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.parameter = iprot.readString();
                                struct.setParameterIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.parameter != null) {
                    oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
                    oprot.writeString(struct.parameter);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class retrieveProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public retrieveProfile_argsTupleScheme getScheme() {
                return new retrieveProfile_argsTupleScheme();
            }
        }

        private static class retrieveProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParameter()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParameter()) {
                    oprot.writeString(struct.parameter);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.parameter = iprot.readString();
                    struct.setParameterIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class retrieveProfile_result implements org.apache.thrift.TBase<retrieveProfile_result, retrieveProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveProfile_resultTupleSchemeFactory();

        public boolean success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveProfile_result.class, metaDataMap);
        }

        public retrieveProfile_result() {
        }

        public retrieveProfile_result(
                boolean success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public retrieveProfile_result(retrieveProfile_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public retrieveProfile_result deepCopy() {
            return new retrieveProfile_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.e = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public retrieveProfile_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public retrieveProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof retrieveProfile_result)
                return this.equals((retrieveProfile_result)that);
            return false;
        }

        public boolean equals(retrieveProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(retrieveProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveProfile_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class retrieveProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public retrieveProfile_resultStandardScheme getScheme() {
                return new retrieveProfile_resultStandardScheme();
            }
        }

        private static class retrieveProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class retrieveProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public retrieveProfile_resultTupleScheme getScheme() {
                return new retrieveProfile_resultTupleScheme();
            }
        }

        private static class retrieveProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class combinationProfile_args implements org.apache.thrift.TBase<combinationProfile_args, combinationProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<combinationProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("combinationProfile_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new combinationProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new combinationProfile_argsTupleSchemeFactory();

        public java.lang.String params; // required
        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            COMPANY_ID((short)2, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(combinationProfile_args.class, metaDataMap);
        }

        public combinationProfile_args() {
        }

        public combinationProfile_args(
                java.lang.String params,
                int companyId)
        {
            this();
            this.params = params;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public combinationProfile_args(combinationProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetParams()) {
                this.params = other.params;
            }
            this.companyId = other.companyId;
        }

        public combinationProfile_args deepCopy() {
            return new combinationProfile_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public java.lang.String getParams() {
            return this.params;
        }

        public combinationProfile_args setParams(java.lang.String params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public combinationProfile_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.lang.String)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof combinationProfile_args)
                return this.equals((combinationProfile_args)that);
            return false;
        }

        public boolean equals(combinationProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(combinationProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("combinationProfile_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class combinationProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public combinationProfile_argsStandardScheme getScheme() {
                return new combinationProfile_argsStandardScheme();
            }
        }

        private static class combinationProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<combinationProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, combinationProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.params = iprot.readString();
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, combinationProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeString(struct.params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class combinationProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public combinationProfile_argsTupleScheme getScheme() {
                return new combinationProfile_argsTupleScheme();
            }
        }

        private static class combinationProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<combinationProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, combinationProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetParams()) {
                    oprot.writeString(struct.params);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, combinationProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.params = iprot.readString();
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class combinationProfile_result implements org.apache.thrift.TBase<combinationProfile_result, combinationProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<combinationProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("combinationProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new combinationProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new combinationProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(combinationProfile_result.class, metaDataMap);
        }

        public combinationProfile_result() {
        }

        public combinationProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public combinationProfile_result(combinationProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public combinationProfile_result deepCopy() {
            return new combinationProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public combinationProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public combinationProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof combinationProfile_result)
                return this.equals((combinationProfile_result)that);
            return false;
        }

        public boolean equals(combinationProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(combinationProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("combinationProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class combinationProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public combinationProfile_resultStandardScheme getScheme() {
                return new combinationProfile_resultStandardScheme();
            }
        }

        private static class combinationProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<combinationProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, combinationProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, combinationProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class combinationProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public combinationProfile_resultTupleScheme getScheme() {
                return new combinationProfile_resultTupleScheme();
            }
        }

        private static class combinationProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<combinationProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, combinationProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, combinationProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class preserveProfile_args implements org.apache.thrift.TBase<preserveProfile_args, preserveProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<preserveProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preserveProfile_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)4);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new preserveProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new preserveProfile_argsTupleSchemeFactory();

        public java.lang.String params; // required
        public int hrId; // required
        public int companyId; // required
        public java.lang.String fileName; // required
        public int userId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            HR_ID((short)2, "hrId"),
            COMPANY_ID((short)3, "companyId"),
            FILE_NAME((short)4, "fileName"),
            USER_ID((short)5, "userId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // HR_ID
                        return HR_ID;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // FILE_NAME
                        return FILE_NAME;
                    case 5: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __USERID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(preserveProfile_args.class, metaDataMap);
        }

        public preserveProfile_args() {
        }

        public preserveProfile_args(
                java.lang.String params,
                int hrId,
                int companyId,
                java.lang.String fileName,
                int userId)
        {
            this();
            this.params = params;
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.fileName = fileName;
            this.userId = userId;
            setUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public preserveProfile_args(preserveProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetParams()) {
                this.params = other.params;
            }
            this.hrId = other.hrId;
            this.companyId = other.companyId;
            if (other.isSetFileName()) {
                this.fileName = other.fileName;
            }
            this.userId = other.userId;
        }

        public preserveProfile_args deepCopy() {
            return new preserveProfile_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            setHrIdIsSet(false);
            this.hrId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            this.fileName = null;
            setUserIdIsSet(false);
            this.userId = 0;
        }

        public java.lang.String getParams() {
            return this.params;
        }

        public preserveProfile_args setParams(java.lang.String params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getHrId() {
            return this.hrId;
        }

        public preserveProfile_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public preserveProfile_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public java.lang.String getFileName() {
            return this.fileName;
        }

        public preserveProfile_args setFileName(java.lang.String fileName) {
            this.fileName = fileName;
            return this;
        }

        public void unsetFileName() {
            this.fileName = null;
        }

        /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
        public boolean isSetFileName() {
            return this.fileName != null;
        }

        public void setFileNameIsSet(boolean value) {
            if (!value) {
                this.fileName = null;
            }
        }

        public int getUserId() {
            return this.userId;
        }

        public preserveProfile_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.lang.String)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case FILE_NAME:
                    if (value == null) {
                        unsetFileName();
                    } else {
                        setFileName((java.lang.String)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case HR_ID:
                    return getHrId();

                case COMPANY_ID:
                    return getCompanyId();

                case FILE_NAME:
                    return getFileName();

                case USER_ID:
                    return getUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case HR_ID:
                    return isSetHrId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case FILE_NAME:
                    return isSetFileName();
                case USER_ID:
                    return isSetUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof preserveProfile_args)
                return this.equals((preserveProfile_args)that);
            return false;
        }

        public boolean equals(preserveProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_fileName = true && this.isSetFileName();
            boolean that_present_fileName = true && that.isSetFileName();
            if (this_present_fileName || that_present_fileName) {
                if (!(this_present_fileName && that_present_fileName))
                    return false;
                if (!this.fileName.equals(that.fileName))
                    return false;
            }

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
            if (isSetFileName())
                hashCode = hashCode * 8191 + fileName.hashCode();

            hashCode = hashCode * 8191 + userId;

            return hashCode;
        }

        @Override
        public int compareTo(preserveProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFileName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("preserveProfile_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("fileName:");
            if (this.fileName == null) {
                sb.append("null");
            } else {
                sb.append(this.fileName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class preserveProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public preserveProfile_argsStandardScheme getScheme() {
                return new preserveProfile_argsStandardScheme();
            }
        }

        private static class preserveProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<preserveProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, preserveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.params = iprot.readString();
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // FILE_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.fileName = iprot.readString();
                                struct.setFileNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, preserveProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeString(struct.params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                if (struct.fileName != null) {
                    oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
                    oprot.writeString(struct.fileName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class preserveProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public preserveProfile_argsTupleScheme getScheme() {
                return new preserveProfile_argsTupleScheme();
            }
        }

        private static class preserveProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<preserveProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, preserveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetHrId()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                if (struct.isSetFileName()) {
                    optionals.set(3);
                }
                if (struct.isSetUserId()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetParams()) {
                    oprot.writeString(struct.params);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetFileName()) {
                    oprot.writeString(struct.fileName);
                }
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, preserveProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.params = iprot.readString();
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.fileName = iprot.readString();
                    struct.setFileNameIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class preserveProfile_result implements org.apache.thrift.TBase<preserveProfile_result, preserveProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<preserveProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preserveProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new preserveProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new preserveProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(preserveProfile_result.class, metaDataMap);
        }

        public preserveProfile_result() {
        }

        public preserveProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public preserveProfile_result(preserveProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public preserveProfile_result deepCopy() {
            return new preserveProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public preserveProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public preserveProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof preserveProfile_result)
                return this.equals((preserveProfile_result)that);
            return false;
        }

        public boolean equals(preserveProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(preserveProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("preserveProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class preserveProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public preserveProfile_resultStandardScheme getScheme() {
                return new preserveProfile_resultStandardScheme();
            }
        }

        private static class preserveProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<preserveProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, preserveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, preserveProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class preserveProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public preserveProfile_resultTupleScheme getScheme() {
                return new preserveProfile_resultTupleScheme();
            }
        }

        private static class preserveProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<preserveProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, preserveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, preserveProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class validateHrAndUploaduser_args implements org.apache.thrift.TBase<validateHrAndUploaduser_args, validateHrAndUploaduser_args._Fields>, java.io.Serializable, Cloneable, Comparable<validateHrAndUploaduser_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateHrAndUploaduser_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validateHrAndUploaduser_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validateHrAndUploaduser_argsTupleSchemeFactory();

        public int hrId; // required
        public int companyId; // required
        public int userId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            COMPANY_ID((short)2, "companyId"),
            USER_ID((short)3, "userId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __USERID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateHrAndUploaduser_args.class, metaDataMap);
        }

        public validateHrAndUploaduser_args() {
        }

        public validateHrAndUploaduser_args(
                int hrId,
                int companyId,
                int userId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.userId = userId;
            setUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public validateHrAndUploaduser_args(validateHrAndUploaduser_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.companyId = other.companyId;
            this.userId = other.userId;
        }

        public validateHrAndUploaduser_args deepCopy() {
            return new validateHrAndUploaduser_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setUserIdIsSet(false);
            this.userId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public validateHrAndUploaduser_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public validateHrAndUploaduser_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getUserId() {
            return this.userId;
        }

        public validateHrAndUploaduser_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case COMPANY_ID:
                    return getCompanyId();

                case USER_ID:
                    return getUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case USER_ID:
                    return isSetUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof validateHrAndUploaduser_args)
                return this.equals((validateHrAndUploaduser_args)that);
            return false;
        }

        public boolean equals(validateHrAndUploaduser_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + userId;

            return hashCode;
        }

        @Override
        public int compareTo(validateHrAndUploaduser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("validateHrAndUploaduser_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class validateHrAndUploaduser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public validateHrAndUploaduser_argsStandardScheme getScheme() {
                return new validateHrAndUploaduser_argsStandardScheme();
            }
        }

        private static class validateHrAndUploaduser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<validateHrAndUploaduser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, validateHrAndUploaduser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, validateHrAndUploaduser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class validateHrAndUploaduser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public validateHrAndUploaduser_argsTupleScheme getScheme() {
                return new validateHrAndUploaduser_argsTupleScheme();
            }
        }

        private static class validateHrAndUploaduser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<validateHrAndUploaduser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, validateHrAndUploaduser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetUserId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, validateHrAndUploaduser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class validateHrAndUploaduser_result implements org.apache.thrift.TBase<validateHrAndUploaduser_result, validateHrAndUploaduser_result._Fields>, java.io.Serializable, Cloneable, Comparable<validateHrAndUploaduser_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateHrAndUploaduser_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validateHrAndUploaduser_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validateHrAndUploaduser_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateHrAndUploaduser_result.class, metaDataMap);
        }

        public validateHrAndUploaduser_result() {
        }

        public validateHrAndUploaduser_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public validateHrAndUploaduser_result(validateHrAndUploaduser_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public validateHrAndUploaduser_result deepCopy() {
            return new validateHrAndUploaduser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public validateHrAndUploaduser_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public validateHrAndUploaduser_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof validateHrAndUploaduser_result)
                return this.equals((validateHrAndUploaduser_result)that);
            return false;
        }

        public boolean equals(validateHrAndUploaduser_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(validateHrAndUploaduser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("validateHrAndUploaduser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class validateHrAndUploaduser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public validateHrAndUploaduser_resultStandardScheme getScheme() {
                return new validateHrAndUploaduser_resultStandardScheme();
            }
        }

        private static class validateHrAndUploaduser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<validateHrAndUploaduser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, validateHrAndUploaduser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, validateHrAndUploaduser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class validateHrAndUploaduser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public validateHrAndUploaduser_resultTupleScheme getScheme() {
                return new validateHrAndUploaduser_resultTupleScheme();
            }
        }

        private static class validateHrAndUploaduser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<validateHrAndUploaduser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, validateHrAndUploaduser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, validateHrAndUploaduser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUploadProfile_args implements org.apache.thrift.TBase<getUploadProfile_args, getUploadProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUploadProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUploadProfile_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUploadProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUploadProfile_argsTupleSchemeFactory();

        public int userId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUploadProfile_args.class, metaDataMap);
        }

        public getUploadProfile_args() {
        }

        public getUploadProfile_args(
                int userId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUploadProfile_args(getUploadProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
        }

        public getUploadProfile_args deepCopy() {
            return new getUploadProfile_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getUploadProfile_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUploadProfile_args)
                return this.equals((getUploadProfile_args)that);
            return false;
        }

        public boolean equals(getUploadProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            return hashCode;
        }

        @Override
        public int compareTo(getUploadProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUploadProfile_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUploadProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUploadProfile_argsStandardScheme getScheme() {
                return new getUploadProfile_argsStandardScheme();
            }
        }

        private static class getUploadProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUploadProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUploadProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUploadProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUploadProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUploadProfile_argsTupleScheme getScheme() {
                return new getUploadProfile_argsTupleScheme();
            }
        }

        private static class getUploadProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUploadProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUploadProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUploadProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUploadProfile_result implements org.apache.thrift.TBase<getUploadProfile_result, getUploadProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUploadProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUploadProfile_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUploadProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUploadProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUploadProfile_result.class, metaDataMap);
        }

        public getUploadProfile_result() {
        }

        public getUploadProfile_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUploadProfile_result(getUploadProfile_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getUploadProfile_result deepCopy() {
            return new getUploadProfile_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getUploadProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getUploadProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUploadProfile_result)
                return this.equals((getUploadProfile_result)that);
            return false;
        }

        public boolean equals(getUploadProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getUploadProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUploadProfile_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUploadProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUploadProfile_resultStandardScheme getScheme() {
                return new getUploadProfile_resultStandardScheme();
            }
        }

        private static class getUploadProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUploadProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUploadProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUploadProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUploadProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUploadProfile_resultTupleScheme getScheme() {
                return new getUploadProfile_resultTupleScheme();
            }
        }

        private static class getUploadProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUploadProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUploadProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUploadProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileInfo_args implements org.apache.thrift.TBase<getProfileInfo_args, getProfileInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileInfo_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileInfo_argsTupleSchemeFactory();

        public int userId; // required
        public int accountId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            ACCOUNT_ID((short)2, "accountId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __ACCOUNTID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileInfo_args.class, metaDataMap);
        }

        public getProfileInfo_args() {
        }

        public getProfileInfo_args(
                int userId,
                int accountId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.accountId = accountId;
            setAccountIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileInfo_args(getProfileInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.accountId = other.accountId;
        }

        public getProfileInfo_args deepCopy() {
            return new getProfileInfo_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setAccountIdIsSet(false);
            this.accountId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getProfileInfo_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getAccountId() {
            return this.accountId;
        }

        public getProfileInfo_args setAccountId(int accountId) {
            this.accountId = accountId;
            setAccountIdIsSet(true);
            return this;
        }

        public void unsetAccountId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
        public boolean isSetAccountId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        public void setAccountIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccountId();
                    } else {
                        setAccountId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case ACCOUNT_ID:
                    return getAccountId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case ACCOUNT_ID:
                    return isSetAccountId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileInfo_args)
                return this.equals((getProfileInfo_args)that);
            return false;
        }

        public boolean equals(getProfileInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_accountId = true;
            boolean that_present_accountId = true;
            if (this_present_accountId || that_present_accountId) {
                if (!(this_present_accountId && that_present_accountId))
                    return false;
                if (this.accountId != that.accountId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + accountId;

            return hashCode;
        }

        @Override
        public int compareTo(getProfileInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccountId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileInfo_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("accountId:");
            sb.append(this.accountId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileInfo_argsStandardScheme getScheme() {
                return new getProfileInfo_argsStandardScheme();
            }
        }

        private static class getProfileInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.accountId = iprot.readI32();
                                struct.setAccountIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.accountId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileInfo_argsTupleScheme getScheme() {
                return new getProfileInfo_argsTupleScheme();
            }
        }

        private static class getProfileInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetAccountId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetAccountId()) {
                    oprot.writeI32(struct.accountId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.accountId = iprot.readI32();
                    struct.setAccountIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileInfo_result implements org.apache.thrift.TBase<getProfileInfo_result, getProfileInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileInfo_result.class, metaDataMap);
        }

        public getProfileInfo_result() {
        }

        public getProfileInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileInfo_result(getProfileInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProfileInfo_result deepCopy() {
            return new getProfileInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProfileInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileInfo_result)
                return this.equals((getProfileInfo_result)that);
            return false;
        }

        public boolean equals(getProfileInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileInfo_resultStandardScheme getScheme() {
                return new getProfileInfo_resultStandardScheme();
            }
        }

        private static class getProfileInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileInfo_resultTupleScheme getScheme() {
                return new getProfileInfo_resultTupleScheme();
            }
        }

        private static class getProfileInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileMiniList_args implements org.apache.thrift.TBase<getProfileMiniList_args, getProfileMiniList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileMiniList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileMiniList_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileMiniList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileMiniList_argsTupleSchemeFactory();

        public java.util.Map<java.lang.String,java.lang.String> params; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileMiniList_args.class, metaDataMap);
        }

        public getProfileMiniList_args() {
        }

        public getProfileMiniList_args(
                java.util.Map<java.lang.String,java.lang.String> params)
        {
            this();
            this.params = params;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileMiniList_args(getProfileMiniList_args other) {
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
        }

        public getProfileMiniList_args deepCopy() {
            return new getProfileMiniList_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public getProfileMiniList_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileMiniList_args)
                return this.equals((getProfileMiniList_args)that);
            return false;
        }

        public boolean equals(getProfileMiniList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileMiniList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileMiniList_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileMiniList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileMiniList_argsStandardScheme getScheme() {
                return new getProfileMiniList_argsStandardScheme();
            }
        }

        private static class getProfileMiniList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileMiniList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileMiniList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map56.size);
                                    java.lang.String _key57;
                                    java.lang.String _val58;
                                    for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                                    {
                                        _key57 = iprot.readString();
                                        _val58 = iprot.readString();
                                        struct.params.put(_key57, _val58);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileMiniList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter60 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter60.getKey());
                            oprot.writeString(_iter60.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileMiniList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileMiniList_argsTupleScheme getScheme() {
                return new getProfileMiniList_argsTupleScheme();
            }
        }

        private static class getProfileMiniList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileMiniList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileMiniList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter61 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter61.getKey());
                            oprot.writeString(_iter61.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileMiniList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map62.size);
                        java.lang.String _key63;
                        java.lang.String _val64;
                        for (int _i65 = 0; _i65 < _map62.size; ++_i65)
                        {
                            _key63 = iprot.readString();
                            _val64 = iprot.readString();
                            struct.params.put(_key63, _val64);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileMiniList_result implements org.apache.thrift.TBase<getProfileMiniList_result, getProfileMiniList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileMiniList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileMiniList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileMiniList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileMiniList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileMiniList_result.class, metaDataMap);
        }

        public getProfileMiniList_result() {
        }

        public getProfileMiniList_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileMiniList_result(getProfileMiniList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getProfileMiniList_result deepCopy() {
            return new getProfileMiniList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileMiniList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileMiniList_result)
                return this.equals((getProfileMiniList_result)that);
            return false;
        }

        public boolean equals(getProfileMiniList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileMiniList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileMiniList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileMiniList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileMiniList_resultStandardScheme getScheme() {
                return new getProfileMiniList_resultStandardScheme();
            }
        }

        private static class getProfileMiniList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileMiniList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileMiniList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileMiniList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileMiniList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileMiniList_resultTupleScheme getScheme() {
                return new getProfileMiniList_resultTupleScheme();
            }
        }

        private static class getProfileMiniList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileMiniList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileMiniList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileMiniList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
