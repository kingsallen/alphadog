/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.logdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-20")
public class LogWxMessageRecordDO implements org.apache.thrift.TBase<LogWxMessageRecordDO, LogWxMessageRecordDO._Fields>, java.io.Serializable, Cloneable, Comparable<LogWxMessageRecordDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogWxMessageRecordDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MSGID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("openId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOPCOLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("topcolor", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField JSONDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsondata", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ERRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errcode", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendtime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updatetime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SENDSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sendstatus", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SENDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendtype", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogWxMessageRecordDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogWxMessageRecordDOTupleSchemeFactory();

  public int id; // optional
  public int templateId; // optional
  public int wechatId; // optional
  public int msgid; // optional
  public java.lang.String openId; // optional
  public java.lang.String url; // optional
  public java.lang.String topcolor; // optional
  public java.lang.String jsondata; // optional
  public int errcode; // optional
  public java.lang.String errmsg; // optional
  public java.lang.String sendtime; // optional
  public java.lang.String updatetime; // optional
  public java.lang.String sendstatus; // optional
  public int sendtype; // optional
  public java.lang.String accessToken; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TEMPLATE_ID((short)2, "templateId"),
    WECHAT_ID((short)3, "wechatId"),
    MSGID((short)4, "msgid"),
    OPEN_ID((short)5, "openId"),
    URL((short)6, "url"),
    TOPCOLOR((short)7, "topcolor"),
    JSONDATA((short)8, "jsondata"),
    ERRCODE((short)9, "errcode"),
    ERRMSG((short)10, "errmsg"),
    SENDTIME((short)11, "sendtime"),
    UPDATETIME((short)12, "updatetime"),
    SENDSTATUS((short)13, "sendstatus"),
    SENDTYPE((short)14, "sendtype"),
    ACCESS_TOKEN((short)15, "accessToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 3: // WECHAT_ID
          return WECHAT_ID;
        case 4: // MSGID
          return MSGID;
        case 5: // OPEN_ID
          return OPEN_ID;
        case 6: // URL
          return URL;
        case 7: // TOPCOLOR
          return TOPCOLOR;
        case 8: // JSONDATA
          return JSONDATA;
        case 9: // ERRCODE
          return ERRCODE;
        case 10: // ERRMSG
          return ERRMSG;
        case 11: // SENDTIME
          return SENDTIME;
        case 12: // UPDATETIME
          return UPDATETIME;
        case 13: // SENDSTATUS
          return SENDSTATUS;
        case 14: // SENDTYPE
          return SENDTYPE;
        case 15: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TEMPLATEID_ISSET_ID = 1;
  private static final int __WECHATID_ISSET_ID = 2;
  private static final int __MSGID_ISSET_ID = 3;
  private static final int __ERRCODE_ISSET_ID = 4;
  private static final int __SENDTYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TEMPLATE_ID,_Fields.WECHAT_ID,_Fields.MSGID,_Fields.OPEN_ID,_Fields.URL,_Fields.TOPCOLOR,_Fields.JSONDATA,_Fields.ERRCODE,_Fields.ERRMSG,_Fields.SENDTIME,_Fields.UPDATETIME,_Fields.SENDSTATUS,_Fields.SENDTYPE,_Fields.ACCESS_TOKEN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSGID, new org.apache.thrift.meta_data.FieldMetaData("msgid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("openId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPCOLOR, new org.apache.thrift.meta_data.FieldMetaData("topcolor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSONDATA, new org.apache.thrift.meta_data.FieldMetaData("jsondata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERRCODE, new org.apache.thrift.meta_data.FieldMetaData("errcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDTIME, new org.apache.thrift.meta_data.FieldMetaData("sendtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATETIME, new org.apache.thrift.meta_data.FieldMetaData("updatetime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDSTATUS, new org.apache.thrift.meta_data.FieldMetaData("sendstatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDTYPE, new org.apache.thrift.meta_data.FieldMetaData("sendtype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogWxMessageRecordDO.class, metaDataMap);
  }

  public LogWxMessageRecordDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogWxMessageRecordDO(LogWxMessageRecordDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.templateId = other.templateId;
    this.wechatId = other.wechatId;
    this.msgid = other.msgid;
    if (other.isSetOpenId()) {
      this.openId = other.openId;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTopcolor()) {
      this.topcolor = other.topcolor;
    }
    if (other.isSetJsondata()) {
      this.jsondata = other.jsondata;
    }
    this.errcode = other.errcode;
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
    if (other.isSetSendtime()) {
      this.sendtime = other.sendtime;
    }
    if (other.isSetUpdatetime()) {
      this.updatetime = other.updatetime;
    }
    if (other.isSetSendstatus()) {
      this.sendstatus = other.sendstatus;
    }
    this.sendtype = other.sendtype;
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
  }

  public LogWxMessageRecordDO deepCopy() {
    return new LogWxMessageRecordDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTemplateIdIsSet(false);
    this.templateId = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    setMsgidIsSet(false);
    this.msgid = 0;
    this.openId = null;
    this.url = null;
    this.topcolor = null;
    this.jsondata = null;
    setErrcodeIsSet(false);
    this.errcode = 0;
    this.errmsg = null;
    this.sendtime = null;
    this.updatetime = null;
    this.sendstatus = null;
    setSendtypeIsSet(false);
    this.sendtype = 0;
    this.accessToken = null;
  }

  public int getId() {
    return this.id;
  }

  public LogWxMessageRecordDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getTemplateId() {
    return this.templateId;
  }

  public LogWxMessageRecordDO setTemplateId(int templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    return this;
  }

  public void unsetTemplateId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public LogWxMessageRecordDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public int getMsgid() {
    return this.msgid;
  }

  public LogWxMessageRecordDO setMsgid(int msgid) {
    this.msgid = msgid;
    setMsgidIsSet(true);
    return this;
  }

  public void unsetMsgid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgid is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public java.lang.String getOpenId() {
    return this.openId;
  }

  public LogWxMessageRecordDO setOpenId(java.lang.String openId) {
    this.openId = openId;
    return this;
  }

  public void unsetOpenId() {
    this.openId = null;
  }

  /** Returns true if field openId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.openId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.openId = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public LogWxMessageRecordDO setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public java.lang.String getTopcolor() {
    return this.topcolor;
  }

  public LogWxMessageRecordDO setTopcolor(java.lang.String topcolor) {
    this.topcolor = topcolor;
    return this;
  }

  public void unsetTopcolor() {
    this.topcolor = null;
  }

  /** Returns true if field topcolor is set (has been assigned a value) and false otherwise */
  public boolean isSetTopcolor() {
    return this.topcolor != null;
  }

  public void setTopcolorIsSet(boolean value) {
    if (!value) {
      this.topcolor = null;
    }
  }

  public java.lang.String getJsondata() {
    return this.jsondata;
  }

  public LogWxMessageRecordDO setJsondata(java.lang.String jsondata) {
    this.jsondata = jsondata;
    return this;
  }

  public void unsetJsondata() {
    this.jsondata = null;
  }

  /** Returns true if field jsondata is set (has been assigned a value) and false otherwise */
  public boolean isSetJsondata() {
    return this.jsondata != null;
  }

  public void setJsondataIsSet(boolean value) {
    if (!value) {
      this.jsondata = null;
    }
  }

  public int getErrcode() {
    return this.errcode;
  }

  public LogWxMessageRecordDO setErrcode(int errcode) {
    this.errcode = errcode;
    setErrcodeIsSet(true);
    return this;
  }

  public void unsetErrcode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errcode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrcode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrcodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public java.lang.String getErrmsg() {
    return this.errmsg;
  }

  public LogWxMessageRecordDO setErrmsg(java.lang.String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  public java.lang.String getSendtime() {
    return this.sendtime;
  }

  public LogWxMessageRecordDO setSendtime(java.lang.String sendtime) {
    this.sendtime = sendtime;
    return this;
  }

  public void unsetSendtime() {
    this.sendtime = null;
  }

  /** Returns true if field sendtime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendtime() {
    return this.sendtime != null;
  }

  public void setSendtimeIsSet(boolean value) {
    if (!value) {
      this.sendtime = null;
    }
  }

  public java.lang.String getUpdatetime() {
    return this.updatetime;
  }

  public LogWxMessageRecordDO setUpdatetime(java.lang.String updatetime) {
    this.updatetime = updatetime;
    return this;
  }

  public void unsetUpdatetime() {
    this.updatetime = null;
  }

  /** Returns true if field updatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatetime() {
    return this.updatetime != null;
  }

  public void setUpdatetimeIsSet(boolean value) {
    if (!value) {
      this.updatetime = null;
    }
  }

  public java.lang.String getSendstatus() {
    return this.sendstatus;
  }

  public LogWxMessageRecordDO setSendstatus(java.lang.String sendstatus) {
    this.sendstatus = sendstatus;
    return this;
  }

  public void unsetSendstatus() {
    this.sendstatus = null;
  }

  /** Returns true if field sendstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSendstatus() {
    return this.sendstatus != null;
  }

  public void setSendstatusIsSet(boolean value) {
    if (!value) {
      this.sendstatus = null;
    }
  }

  public int getSendtype() {
    return this.sendtype;
  }

  public LogWxMessageRecordDO setSendtype(int sendtype) {
    this.sendtype = sendtype;
    setSendtypeIsSet(true);
    return this;
  }

  public void unsetSendtype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
  }

  /** Returns true if field sendtype is set (has been assigned a value) and false otherwise */
  public boolean isSetSendtype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
  }

  public void setSendtypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDTYPE_ISSET_ID, value);
  }

  public java.lang.String getAccessToken() {
    return this.accessToken;
  }

  public LogWxMessageRecordDO setAccessToken(java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((java.lang.Integer)value);
      }
      break;

    case MSGID:
      if (value == null) {
        unsetMsgid();
      } else {
        setMsgid((java.lang.Integer)value);
      }
      break;

    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case TOPCOLOR:
      if (value == null) {
        unsetTopcolor();
      } else {
        setTopcolor((java.lang.String)value);
      }
      break;

    case JSONDATA:
      if (value == null) {
        unsetJsondata();
      } else {
        setJsondata((java.lang.String)value);
      }
      break;

    case ERRCODE:
      if (value == null) {
        unsetErrcode();
      } else {
        setErrcode((java.lang.Integer)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((java.lang.String)value);
      }
      break;

    case SENDTIME:
      if (value == null) {
        unsetSendtime();
      } else {
        setSendtime((java.lang.String)value);
      }
      break;

    case UPDATETIME:
      if (value == null) {
        unsetUpdatetime();
      } else {
        setUpdatetime((java.lang.String)value);
      }
      break;

    case SENDSTATUS:
      if (value == null) {
        unsetSendstatus();
      } else {
        setSendstatus((java.lang.String)value);
      }
      break;

    case SENDTYPE:
      if (value == null) {
        unsetSendtype();
      } else {
        setSendtype((java.lang.Integer)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TEMPLATE_ID:
      return getTemplateId();

    case WECHAT_ID:
      return getWechatId();

    case MSGID:
      return getMsgid();

    case OPEN_ID:
      return getOpenId();

    case URL:
      return getUrl();

    case TOPCOLOR:
      return getTopcolor();

    case JSONDATA:
      return getJsondata();

    case ERRCODE:
      return getErrcode();

    case ERRMSG:
      return getErrmsg();

    case SENDTIME:
      return getSendtime();

    case UPDATETIME:
      return getUpdatetime();

    case SENDSTATUS:
      return getSendstatus();

    case SENDTYPE:
      return getSendtype();

    case ACCESS_TOKEN:
      return getAccessToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case WECHAT_ID:
      return isSetWechatId();
    case MSGID:
      return isSetMsgid();
    case OPEN_ID:
      return isSetOpenId();
    case URL:
      return isSetUrl();
    case TOPCOLOR:
      return isSetTopcolor();
    case JSONDATA:
      return isSetJsondata();
    case ERRCODE:
      return isSetErrcode();
    case ERRMSG:
      return isSetErrmsg();
    case SENDTIME:
      return isSetSendtime();
    case UPDATETIME:
      return isSetUpdatetime();
    case SENDSTATUS:
      return isSetSendstatus();
    case SENDTYPE:
      return isSetSendtype();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LogWxMessageRecordDO)
      return this.equals((LogWxMessageRecordDO)that);
    return false;
  }

  public boolean equals(LogWxMessageRecordDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_msgid = true && this.isSetMsgid();
    boolean that_present_msgid = true && that.isSetMsgid();
    if (this_present_msgid || that_present_msgid) {
      if (!(this_present_msgid && that_present_msgid))
        return false;
      if (this.msgid != that.msgid)
        return false;
    }

    boolean this_present_openId = true && this.isSetOpenId();
    boolean that_present_openId = true && that.isSetOpenId();
    if (this_present_openId || that_present_openId) {
      if (!(this_present_openId && that_present_openId))
        return false;
      if (!this.openId.equals(that.openId))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_topcolor = true && this.isSetTopcolor();
    boolean that_present_topcolor = true && that.isSetTopcolor();
    if (this_present_topcolor || that_present_topcolor) {
      if (!(this_present_topcolor && that_present_topcolor))
        return false;
      if (!this.topcolor.equals(that.topcolor))
        return false;
    }

    boolean this_present_jsondata = true && this.isSetJsondata();
    boolean that_present_jsondata = true && that.isSetJsondata();
    if (this_present_jsondata || that_present_jsondata) {
      if (!(this_present_jsondata && that_present_jsondata))
        return false;
      if (!this.jsondata.equals(that.jsondata))
        return false;
    }

    boolean this_present_errcode = true && this.isSetErrcode();
    boolean that_present_errcode = true && that.isSetErrcode();
    if (this_present_errcode || that_present_errcode) {
      if (!(this_present_errcode && that_present_errcode))
        return false;
      if (this.errcode != that.errcode)
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    boolean this_present_sendtime = true && this.isSetSendtime();
    boolean that_present_sendtime = true && that.isSetSendtime();
    if (this_present_sendtime || that_present_sendtime) {
      if (!(this_present_sendtime && that_present_sendtime))
        return false;
      if (!this.sendtime.equals(that.sendtime))
        return false;
    }

    boolean this_present_updatetime = true && this.isSetUpdatetime();
    boolean that_present_updatetime = true && that.isSetUpdatetime();
    if (this_present_updatetime || that_present_updatetime) {
      if (!(this_present_updatetime && that_present_updatetime))
        return false;
      if (!this.updatetime.equals(that.updatetime))
        return false;
    }

    boolean this_present_sendstatus = true && this.isSetSendstatus();
    boolean that_present_sendstatus = true && that.isSetSendstatus();
    if (this_present_sendstatus || that_present_sendstatus) {
      if (!(this_present_sendstatus && that_present_sendstatus))
        return false;
      if (!this.sendstatus.equals(that.sendstatus))
        return false;
    }

    boolean this_present_sendtype = true && this.isSetSendtype();
    boolean that_present_sendtype = true && that.isSetSendtype();
    if (this_present_sendtype || that_present_sendtype) {
      if (!(this_present_sendtype && that_present_sendtype))
        return false;
      if (this.sendtype != that.sendtype)
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTemplateId()) ? 131071 : 524287);
    if (isSetTemplateId())
      hashCode = hashCode * 8191 + templateId;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetMsgid()) ? 131071 : 524287);
    if (isSetMsgid())
      hashCode = hashCode * 8191 + msgid;

    hashCode = hashCode * 8191 + ((isSetOpenId()) ? 131071 : 524287);
    if (isSetOpenId())
      hashCode = hashCode * 8191 + openId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopcolor()) ? 131071 : 524287);
    if (isSetTopcolor())
      hashCode = hashCode * 8191 + topcolor.hashCode();

    hashCode = hashCode * 8191 + ((isSetJsondata()) ? 131071 : 524287);
    if (isSetJsondata())
      hashCode = hashCode * 8191 + jsondata.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrcode()) ? 131071 : 524287);
    if (isSetErrcode())
      hashCode = hashCode * 8191 + errcode;

    hashCode = hashCode * 8191 + ((isSetErrmsg()) ? 131071 : 524287);
    if (isSetErrmsg())
      hashCode = hashCode * 8191 + errmsg.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendtime()) ? 131071 : 524287);
    if (isSetSendtime())
      hashCode = hashCode * 8191 + sendtime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatetime()) ? 131071 : 524287);
    if (isSetUpdatetime())
      hashCode = hashCode * 8191 + updatetime.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendstatus()) ? 131071 : 524287);
    if (isSetSendstatus())
      hashCode = hashCode * 8191 + sendstatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendtype()) ? 131071 : 524287);
    if (isSetSendtype())
      hashCode = hashCode * 8191 + sendtype;

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LogWxMessageRecordDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgid()).compareTo(other.isSetMsgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgid, other.msgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openId, other.openId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopcolor()).compareTo(other.isSetTopcolor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopcolor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topcolor, other.topcolor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJsondata()).compareTo(other.isSetJsondata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsondata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsondata, other.jsondata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrcode()).compareTo(other.isSetErrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errcode, other.errcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrmsg()).compareTo(other.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, other.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendtime()).compareTo(other.isSetSendtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendtime, other.sendtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatetime()).compareTo(other.isSetUpdatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatetime, other.updatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendstatus()).compareTo(other.isSetSendstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendstatus, other.sendstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendtype()).compareTo(other.isSetSendtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendtype, other.sendtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LogWxMessageRecordDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTemplateId()) {
      if (!first) sb.append(", ");
      sb.append("templateId:");
      sb.append(this.templateId);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetMsgid()) {
      if (!first) sb.append(", ");
      sb.append("msgid:");
      sb.append(this.msgid);
      first = false;
    }
    if (isSetOpenId()) {
      if (!first) sb.append(", ");
      sb.append("openId:");
      if (this.openId == null) {
        sb.append("null");
      } else {
        sb.append(this.openId);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetTopcolor()) {
      if (!first) sb.append(", ");
      sb.append("topcolor:");
      if (this.topcolor == null) {
        sb.append("null");
      } else {
        sb.append(this.topcolor);
      }
      first = false;
    }
    if (isSetJsondata()) {
      if (!first) sb.append(", ");
      sb.append("jsondata:");
      if (this.jsondata == null) {
        sb.append("null");
      } else {
        sb.append(this.jsondata);
      }
      first = false;
    }
    if (isSetErrcode()) {
      if (!first) sb.append(", ");
      sb.append("errcode:");
      sb.append(this.errcode);
      first = false;
    }
    if (isSetErrmsg()) {
      if (!first) sb.append(", ");
      sb.append("errmsg:");
      if (this.errmsg == null) {
        sb.append("null");
      } else {
        sb.append(this.errmsg);
      }
      first = false;
    }
    if (isSetSendtime()) {
      if (!first) sb.append(", ");
      sb.append("sendtime:");
      if (this.sendtime == null) {
        sb.append("null");
      } else {
        sb.append(this.sendtime);
      }
      first = false;
    }
    if (isSetUpdatetime()) {
      if (!first) sb.append(", ");
      sb.append("updatetime:");
      if (this.updatetime == null) {
        sb.append("null");
      } else {
        sb.append(this.updatetime);
      }
      first = false;
    }
    if (isSetSendstatus()) {
      if (!first) sb.append(", ");
      sb.append("sendstatus:");
      if (this.sendstatus == null) {
        sb.append("null");
      } else {
        sb.append(this.sendstatus);
      }
      first = false;
    }
    if (isSetSendtype()) {
      if (!first) sb.append(", ");
      sb.append("sendtype:");
      sb.append(this.sendtype);
      first = false;
    }
    if (isSetAccessToken()) {
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogWxMessageRecordDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogWxMessageRecordDOStandardScheme getScheme() {
      return new LogWxMessageRecordDOStandardScheme();
    }
  }

  private static class LogWxMessageRecordDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogWxMessageRecordDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogWxMessageRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateId = iprot.readI32();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgid = iprot.readI32();
              struct.setMsgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openId = iprot.readString();
              struct.setOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOPCOLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topcolor = iprot.readString();
              struct.setTopcolorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JSONDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsondata = iprot.readString();
              struct.setJsondataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERRCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errcode = iprot.readI32();
              struct.setErrcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendtime = iprot.readString();
              struct.setSendtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatetime = iprot.readString();
              struct.setUpdatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SENDSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendstatus = iprot.readString();
              struct.setSendstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SENDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendtype = iprot.readI32();
              struct.setSendtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogWxMessageRecordDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTemplateId()) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.templateId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMsgid()) {
        oprot.writeFieldBegin(MSGID_FIELD_DESC);
        oprot.writeI32(struct.msgid);
        oprot.writeFieldEnd();
      }
      if (struct.openId != null) {
        if (struct.isSetOpenId()) {
          oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
          oprot.writeString(struct.openId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topcolor != null) {
        if (struct.isSetTopcolor()) {
          oprot.writeFieldBegin(TOPCOLOR_FIELD_DESC);
          oprot.writeString(struct.topcolor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jsondata != null) {
        if (struct.isSetJsondata()) {
          oprot.writeFieldBegin(JSONDATA_FIELD_DESC);
          oprot.writeString(struct.jsondata);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetErrcode()) {
        oprot.writeFieldBegin(ERRCODE_FIELD_DESC);
        oprot.writeI32(struct.errcode);
        oprot.writeFieldEnd();
      }
      if (struct.errmsg != null) {
        if (struct.isSetErrmsg()) {
          oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
          oprot.writeString(struct.errmsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendtime != null) {
        if (struct.isSetSendtime()) {
          oprot.writeFieldBegin(SENDTIME_FIELD_DESC);
          oprot.writeString(struct.sendtime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatetime != null) {
        if (struct.isSetUpdatetime()) {
          oprot.writeFieldBegin(UPDATETIME_FIELD_DESC);
          oprot.writeString(struct.updatetime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendstatus != null) {
        if (struct.isSetSendstatus()) {
          oprot.writeFieldBegin(SENDSTATUS_FIELD_DESC);
          oprot.writeString(struct.sendstatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSendtype()) {
        oprot.writeFieldBegin(SENDTYPE_FIELD_DESC);
        oprot.writeI32(struct.sendtype);
        oprot.writeFieldEnd();
      }
      if (struct.accessToken != null) {
        if (struct.isSetAccessToken()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogWxMessageRecordDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogWxMessageRecordDOTupleScheme getScheme() {
      return new LogWxMessageRecordDOTupleScheme();
    }
  }

  private static class LogWxMessageRecordDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogWxMessageRecordDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogWxMessageRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(1);
      }
      if (struct.isSetWechatId()) {
        optionals.set(2);
      }
      if (struct.isSetMsgid()) {
        optionals.set(3);
      }
      if (struct.isSetOpenId()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetTopcolor()) {
        optionals.set(6);
      }
      if (struct.isSetJsondata()) {
        optionals.set(7);
      }
      if (struct.isSetErrcode()) {
        optionals.set(8);
      }
      if (struct.isSetErrmsg()) {
        optionals.set(9);
      }
      if (struct.isSetSendtime()) {
        optionals.set(10);
      }
      if (struct.isSetUpdatetime()) {
        optionals.set(11);
      }
      if (struct.isSetSendstatus()) {
        optionals.set(12);
      }
      if (struct.isSetSendtype()) {
        optionals.set(13);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTemplateId()) {
        oprot.writeI32(struct.templateId);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetMsgid()) {
        oprot.writeI32(struct.msgid);
      }
      if (struct.isSetOpenId()) {
        oprot.writeString(struct.openId);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTopcolor()) {
        oprot.writeString(struct.topcolor);
      }
      if (struct.isSetJsondata()) {
        oprot.writeString(struct.jsondata);
      }
      if (struct.isSetErrcode()) {
        oprot.writeI32(struct.errcode);
      }
      if (struct.isSetErrmsg()) {
        oprot.writeString(struct.errmsg);
      }
      if (struct.isSetSendtime()) {
        oprot.writeString(struct.sendtime);
      }
      if (struct.isSetUpdatetime()) {
        oprot.writeString(struct.updatetime);
      }
      if (struct.isSetSendstatus()) {
        oprot.writeString(struct.sendstatus);
      }
      if (struct.isSetSendtype()) {
        oprot.writeI32(struct.sendtype);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogWxMessageRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateId = iprot.readI32();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msgid = iprot.readI32();
        struct.setMsgidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.openId = iprot.readString();
        struct.setOpenIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.topcolor = iprot.readString();
        struct.setTopcolorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jsondata = iprot.readString();
        struct.setJsondataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.errcode = iprot.readI32();
        struct.setErrcodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.errmsg = iprot.readString();
        struct.setErrmsgIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sendtime = iprot.readString();
        struct.setSendtimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updatetime = iprot.readString();
        struct.setUpdatetimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sendstatus = iprot.readString();
        struct.setSendstatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sendtype = iprot.readI32();
        struct.setSendtypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

