/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.common.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-23")
public class CommonUpdate implements org.apache.thrift.TBase<CommonUpdate, CommonUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<CommonUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonUpdate");

  private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldValues", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EXTRAS_FIELD_DESC = new org.apache.thrift.protocol.TField("extras", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CommonUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CommonUpdateTupleSchemeFactory();

  public Condition conditions; // optional
  public java.util.Map<String,String> fieldValues; // optional
  public java.util.Map<String,String> extras; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONDITIONS((short)1, "conditions"),
    FIELD_VALUES((short)2, "fieldValues"),
    EXTRAS((short)3, "extras");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONDITIONS
          return CONDITIONS;
        case 2: // FIELD_VALUES
          return FIELD_VALUES;
        case 3: // EXTRAS
          return EXTRAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONDITIONS,_Fields.FIELD_VALUES,_Fields.EXTRAS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Condition.class)));
    tmpMap.put(_Fields.FIELD_VALUES, new org.apache.thrift.meta_data.FieldMetaData("fieldValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRAS, new org.apache.thrift.meta_data.FieldMetaData("extras", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonUpdate.class, metaDataMap);
  }

  public CommonUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonUpdate(CommonUpdate other) {
    if (other.isSetConditions()) {
      this.conditions = new Condition(other.conditions);
    }
    if (other.isSetFieldValues()) {
      java.util.Map<String,String> __this__fieldValues = new java.util.HashMap<String,String>(other.fieldValues);
      this.fieldValues = __this__fieldValues;
    }
    if (other.isSetExtras()) {
      java.util.Map<String,String> __this__extras = new java.util.HashMap<String,String>(other.extras);
      this.extras = __this__extras;
    }
  }

  public CommonUpdate deepCopy() {
    return new CommonUpdate(this);
  }

  @Override
  public void clear() {
    this.conditions = null;
    this.fieldValues = null;
    this.extras = null;
  }

  public Condition getConditions() {
    return this.conditions;
  }

  public CommonUpdate setConditions(Condition conditions) {
    this.conditions = conditions;
    return this;
  }

  public void unsetConditions() {
    this.conditions = null;
  }

  /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
  public boolean isSetConditions() {
    return this.conditions != null;
  }

  public void setConditionsIsSet(boolean value) {
    if (!value) {
      this.conditions = null;
    }
  }

  public int getFieldValuesSize() {
    return (this.fieldValues == null) ? 0 : this.fieldValues.size();
  }

  public void putToFieldValues(String key, String val) {
    if (this.fieldValues == null) {
      this.fieldValues = new java.util.HashMap<String,String>();
    }
    this.fieldValues.put(key, val);
  }

  public java.util.Map<String,String> getFieldValues() {
    return this.fieldValues;
  }

  public CommonUpdate setFieldValues(java.util.Map<String,String> fieldValues) {
    this.fieldValues = fieldValues;
    return this;
  }

  public void unsetFieldValues() {
    this.fieldValues = null;
  }

  /** Returns true if field fieldValues is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldValues() {
    return this.fieldValues != null;
  }

  public void setFieldValuesIsSet(boolean value) {
    if (!value) {
      this.fieldValues = null;
    }
  }

  public int getExtrasSize() {
    return (this.extras == null) ? 0 : this.extras.size();
  }

  public void putToExtras(String key, String val) {
    if (this.extras == null) {
      this.extras = new java.util.HashMap<String,String>();
    }
    this.extras.put(key, val);
  }

  public java.util.Map<String,String> getExtras() {
    return this.extras;
  }

  public CommonUpdate setExtras(java.util.Map<String,String> extras) {
    this.extras = extras;
    return this;
  }

  public void unsetExtras() {
    this.extras = null;
  }

  /** Returns true if field extras is set (has been assigned a value) and false otherwise */
  public boolean isSetExtras() {
    return this.extras != null;
  }

  public void setExtrasIsSet(boolean value) {
    if (!value) {
      this.extras = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONDITIONS:
      if (value == null) {
        unsetConditions();
      } else {
        setConditions((Condition)value);
      }
      break;

    case FIELD_VALUES:
      if (value == null) {
        unsetFieldValues();
      } else {
        setFieldValues((java.util.Map<String,String>)value);
      }
      break;

    case EXTRAS:
      if (value == null) {
        unsetExtras();
      } else {
        setExtras((java.util.Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONDITIONS:
      return getConditions();

    case FIELD_VALUES:
      return getFieldValues();

    case EXTRAS:
      return getExtras();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONDITIONS:
      return isSetConditions();
    case FIELD_VALUES:
      return isSetFieldValues();
    case EXTRAS:
      return isSetExtras();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonUpdate)
      return this.equals((CommonUpdate)that);
    return false;
  }

  public boolean equals(CommonUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_conditions = true && this.isSetConditions();
    boolean that_present_conditions = true && that.isSetConditions();
    if (this_present_conditions || that_present_conditions) {
      if (!(this_present_conditions && that_present_conditions))
        return false;
      if (!this.conditions.equals(that.conditions))
        return false;
    }

    boolean this_present_fieldValues = true && this.isSetFieldValues();
    boolean that_present_fieldValues = true && that.isSetFieldValues();
    if (this_present_fieldValues || that_present_fieldValues) {
      if (!(this_present_fieldValues && that_present_fieldValues))
        return false;
      if (!this.fieldValues.equals(that.fieldValues))
        return false;
    }

    boolean this_present_extras = true && this.isSetExtras();
    boolean that_present_extras = true && that.isSetExtras();
    if (this_present_extras || that_present_extras) {
      if (!(this_present_extras && that_present_extras))
        return false;
      if (!this.extras.equals(that.extras))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConditions()) ? 131071 : 524287);
    if (isSetConditions())
      hashCode = hashCode * 8191 + conditions.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldValues()) ? 131071 : 524287);
    if (isSetFieldValues())
      hashCode = hashCode * 8191 + fieldValues.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtras()) ? 131071 : 524287);
    if (isSetExtras())
      hashCode = hashCode * 8191 + extras.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CommonUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConditions()).compareTo(other.isSetConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, other.conditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldValues()).compareTo(other.isSetFieldValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldValues, other.fieldValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtras()).compareTo(other.isSetExtras());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtras()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extras, other.extras);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonUpdate(");
    boolean first = true;

    if (isSetConditions()) {
      sb.append("conditions:");
      if (this.conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.conditions);
      }
      first = false;
    }
    if (isSetFieldValues()) {
      if (!first) sb.append(", ");
      sb.append("fieldValues:");
      if (this.fieldValues == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldValues);
      }
      first = false;
    }
    if (isSetExtras()) {
      if (!first) sb.append(", ");
      sb.append("extras:");
      if (this.extras == null) {
        sb.append("null");
      } else {
        sb.append(this.extras);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (conditions != null) {
      conditions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommonUpdateStandardScheme getScheme() {
      return new CommonUpdateStandardScheme();
    }
  }

  private static class CommonUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<CommonUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.conditions = new Condition();
              struct.conditions.read(iprot);
              struct.setConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.fieldValues = new java.util.HashMap<String,String>(2*_map34.size);
                String _key35;
                String _val36;
                for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                {
                  _key35 = iprot.readString();
                  _val36 = iprot.readString();
                  struct.fieldValues.put(_key35, _val36);
                }
                iprot.readMapEnd();
              }
              struct.setFieldValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTRAS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.extras = new java.util.HashMap<String,String>(2*_map38.size);
                String _key39;
                String _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readString();
                  _val40 = iprot.readString();
                  struct.extras.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setExtrasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.conditions != null) {
        if (struct.isSetConditions()) {
          oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
          struct.conditions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldValues != null) {
        if (struct.isSetFieldValues()) {
          oprot.writeFieldBegin(FIELD_VALUES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.fieldValues.size()));
            for (java.util.Map.Entry<String, String> _iter42 : struct.fieldValues.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extras != null) {
        if (struct.isSetExtras()) {
          oprot.writeFieldBegin(EXTRAS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extras.size()));
            for (java.util.Map.Entry<String, String> _iter43 : struct.extras.entrySet())
            {
              oprot.writeString(_iter43.getKey());
              oprot.writeString(_iter43.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommonUpdateTupleScheme getScheme() {
      return new CommonUpdateTupleScheme();
    }
  }

  private static class CommonUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<CommonUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConditions()) {
        optionals.set(0);
      }
      if (struct.isSetFieldValues()) {
        optionals.set(1);
      }
      if (struct.isSetExtras()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetConditions()) {
        struct.conditions.write(oprot);
      }
      if (struct.isSetFieldValues()) {
        {
          oprot.writeI32(struct.fieldValues.size());
          for (java.util.Map.Entry<String, String> _iter44 : struct.fieldValues.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            oprot.writeString(_iter44.getValue());
          }
        }
      }
      if (struct.isSetExtras()) {
        {
          oprot.writeI32(struct.extras.size());
          for (java.util.Map.Entry<String, String> _iter45 : struct.extras.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeString(_iter45.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.conditions = new Condition();
        struct.conditions.read(iprot);
        struct.setConditionsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fieldValues = new java.util.HashMap<String,String>(2*_map46.size);
          String _key47;
          String _val48;
          for (int _i49 = 0; _i49 < _map46.size; ++_i49)
          {
            _key47 = iprot.readString();
            _val48 = iprot.readString();
            struct.fieldValues.put(_key47, _val48);
          }
        }
        struct.setFieldValuesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extras = new java.util.HashMap<String,String>(2*_map50.size);
          String _key51;
          String _val52;
          for (int _i53 = 0; _i53 < _map50.size; ++_i53)
          {
            _key51 = iprot.readString();
            _val52 = iprot.readString();
            struct.extras.put(_key51, _val52);
          }
        }
        struct.setExtrasIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

