/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-07-12")
public class HrCompanyWechatDO implements org.apache.thrift.TBase<HrCompanyWechatDO, HrCompanyWechatDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrCompanyWechatDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrCompanyWechatDO");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOPCOLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("topcolor", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeCount", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrCompanyWechatDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrCompanyWechatDOTupleSchemeFactory();

  public int companyId; // optional
  public int wechatId; // optional
  public String signature; // optional
  public String accessToken; // optional
  public String templateId; // optional
  public String topcolor; // optional
  public int employeeCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "companyId"),
    WECHAT_ID((short)2, "wechatId"),
    SIGNATURE((short)3, "signature"),
    ACCESS_TOKEN((short)4, "accessToken"),
    TEMPLATE_ID((short)5, "templateId"),
    TOPCOLOR((short)6, "topcolor"),
    EMPLOYEE_COUNT((short)7, "employeeCount");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // WECHAT_ID
          return WECHAT_ID;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 5: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 6: // TOPCOLOR
          return TOPCOLOR;
        case 7: // EMPLOYEE_COUNT
          return EMPLOYEE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANYID_ISSET_ID = 0;
  private static final int __WECHATID_ISSET_ID = 1;
  private static final int __EMPLOYEECOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.WECHAT_ID,_Fields.SIGNATURE,_Fields.ACCESS_TOKEN,_Fields.TEMPLATE_ID,_Fields.TOPCOLOR,_Fields.EMPLOYEE_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPCOLOR, new org.apache.thrift.meta_data.FieldMetaData("topcolor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYEE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("employeeCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrCompanyWechatDO.class, metaDataMap);
  }

  public HrCompanyWechatDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrCompanyWechatDO(HrCompanyWechatDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.companyId = other.companyId;
    this.wechatId = other.wechatId;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetTemplateId()) {
      this.templateId = other.templateId;
    }
    if (other.isSetTopcolor()) {
      this.topcolor = other.topcolor;
    }
    this.employeeCount = other.employeeCount;
  }

  public HrCompanyWechatDO deepCopy() {
    return new HrCompanyWechatDO(this);
  }

  @Override
  public void clear() {
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    this.signature = null;
    this.accessToken = null;
    this.templateId = null;
    this.topcolor = null;
    setEmployeeCountIsSet(false);
    this.employeeCount = 0;
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrCompanyWechatDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public HrCompanyWechatDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public String getSignature() {
    return this.signature;
  }

  public HrCompanyWechatDO setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public HrCompanyWechatDO setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public String getTemplateId() {
    return this.templateId;
  }

  public HrCompanyWechatDO setTemplateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  public void unsetTemplateId() {
    this.templateId = null;
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return this.templateId != null;
  }

  public void setTemplateIdIsSet(boolean value) {
    if (!value) {
      this.templateId = null;
    }
  }

  public String getTopcolor() {
    return this.topcolor;
  }

  public HrCompanyWechatDO setTopcolor(String topcolor) {
    this.topcolor = topcolor;
    return this;
  }

  public void unsetTopcolor() {
    this.topcolor = null;
  }

  /** Returns true if field topcolor is set (has been assigned a value) and false otherwise */
  public boolean isSetTopcolor() {
    return this.topcolor != null;
  }

  public void setTopcolorIsSet(boolean value) {
    if (!value) {
      this.topcolor = null;
    }
  }

  public int getEmployeeCount() {
    return this.employeeCount;
  }

  public HrCompanyWechatDO setEmployeeCount(int employeeCount) {
    this.employeeCount = employeeCount;
    setEmployeeCountIsSet(true);
    return this;
  }

  public void unsetEmployeeCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEECOUNT_ISSET_ID);
  }

  /** Returns true if field employeeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEECOUNT_ISSET_ID);
  }

  public void setEmployeeCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((Integer)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((String)value);
      }
      break;

    case TOPCOLOR:
      if (value == null) {
        unsetTopcolor();
      } else {
        setTopcolor((String)value);
      }
      break;

    case EMPLOYEE_COUNT:
      if (value == null) {
        unsetEmployeeCount();
      } else {
        setEmployeeCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return getCompanyId();

    case WECHAT_ID:
      return getWechatId();

    case SIGNATURE:
      return getSignature();

    case ACCESS_TOKEN:
      return getAccessToken();

    case TEMPLATE_ID:
      return getTemplateId();

    case TOPCOLOR:
      return getTopcolor();

    case EMPLOYEE_COUNT:
      return getEmployeeCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompanyId();
    case WECHAT_ID:
      return isSetWechatId();
    case SIGNATURE:
      return isSetSignature();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case TOPCOLOR:
      return isSetTopcolor();
    case EMPLOYEE_COUNT:
      return isSetEmployeeCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrCompanyWechatDO)
      return this.equals((HrCompanyWechatDO)that);
    return false;
  }

  public boolean equals(HrCompanyWechatDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (!this.templateId.equals(that.templateId))
        return false;
    }

    boolean this_present_topcolor = true && this.isSetTopcolor();
    boolean that_present_topcolor = true && that.isSetTopcolor();
    if (this_present_topcolor || that_present_topcolor) {
      if (!(this_present_topcolor && that_present_topcolor))
        return false;
      if (!this.topcolor.equals(that.topcolor))
        return false;
    }

    boolean this_present_employeeCount = true && this.isSetEmployeeCount();
    boolean that_present_employeeCount = true && that.isSetEmployeeCount();
    if (this_present_employeeCount || that_present_employeeCount) {
      if (!(this_present_employeeCount && that_present_employeeCount))
        return false;
      if (this.employeeCount != that.employeeCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemplateId()) ? 131071 : 524287);
    if (isSetTemplateId())
      hashCode = hashCode * 8191 + templateId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopcolor()) ? 131071 : 524287);
    if (isSetTopcolor())
      hashCode = hashCode * 8191 + topcolor.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmployeeCount()) ? 131071 : 524287);
    if (isSetEmployeeCount())
      hashCode = hashCode * 8191 + employeeCount;

    return hashCode;
  }

  @Override
  public int compareTo(HrCompanyWechatDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopcolor()).compareTo(other.isSetTopcolor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopcolor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topcolor, other.topcolor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeCount()).compareTo(other.isSetEmployeeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeCount, other.employeeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrCompanyWechatDO(");
    boolean first = true;

    if (isSetCompanyId()) {
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    if (isSetAccessToken()) {
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
    }
    if (isSetTemplateId()) {
      if (!first) sb.append(", ");
      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
    }
    if (isSetTopcolor()) {
      if (!first) sb.append(", ");
      sb.append("topcolor:");
      if (this.topcolor == null) {
        sb.append("null");
      } else {
        sb.append(this.topcolor);
      }
      first = false;
    }
    if (isSetEmployeeCount()) {
      if (!first) sb.append(", ");
      sb.append("employeeCount:");
      sb.append(this.employeeCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrCompanyWechatDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCompanyWechatDOStandardScheme getScheme() {
      return new HrCompanyWechatDOStandardScheme();
    }
  }

  private static class HrCompanyWechatDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrCompanyWechatDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrCompanyWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateId = iprot.readString();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOPCOLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topcolor = iprot.readString();
              struct.setTopcolorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMPLOYEE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employeeCount = iprot.readI32();
              struct.setEmployeeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrCompanyWechatDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessToken != null) {
        if (struct.isSetAccessToken()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templateId != null) {
        if (struct.isSetTemplateId()) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topcolor != null) {
        if (struct.isSetTopcolor()) {
          oprot.writeFieldBegin(TOPCOLOR_FIELD_DESC);
          oprot.writeString(struct.topcolor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmployeeCount()) {
        oprot.writeFieldBegin(EMPLOYEE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.employeeCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrCompanyWechatDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCompanyWechatDOTupleScheme getScheme() {
      return new HrCompanyWechatDOTupleScheme();
    }
  }

  private static class HrCompanyWechatDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrCompanyWechatDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrCompanyWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCompanyId()) {
        optionals.set(0);
      }
      if (struct.isSetWechatId()) {
        optionals.set(1);
      }
      if (struct.isSetSignature()) {
        optionals.set(2);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(3);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(4);
      }
      if (struct.isSetTopcolor()) {
        optionals.set(5);
      }
      if (struct.isSetEmployeeCount()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetTemplateId()) {
        oprot.writeString(struct.templateId);
      }
      if (struct.isSetTopcolor()) {
        oprot.writeString(struct.topcolor);
      }
      if (struct.isSetEmployeeCount()) {
        oprot.writeI32(struct.employeeCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrCompanyWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.templateId = iprot.readString();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.topcolor = iprot.readString();
        struct.setTopcolorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.employeeCount = iprot.readI32();
        struct.setEmployeeCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

