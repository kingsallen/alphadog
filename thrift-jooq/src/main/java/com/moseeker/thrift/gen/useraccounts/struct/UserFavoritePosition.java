/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-25")
public class UserFavoritePosition implements org.apache.thrift.TBase<UserFavoritePosition, UserFavoritePosition._Fields>, java.io.Serializable, Cloneable, Comparable<UserFavoritePosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserFavoritePosition");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SYSUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sysuser_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FAVORITE_FIELD_DESC = new org.apache.thrift.protocol.TField("favorite", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxuser_id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField RECOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recom_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserFavoritePositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserFavoritePositionTupleSchemeFactory());
  }

  public long id; // required
  public int sysuser_id; // required
  public int position_id; // required
  public byte favorite; // required
  public String mobile; // required
  public long wxuser_id; // required
  public int recom_id; // required
  public String create_time; // required
  public String update_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SYSUSER_ID((short)2, "sysuser_id"),
    POSITION_ID((short)3, "position_id"),
    FAVORITE((short)4, "favorite"),
    MOBILE((short)5, "mobile"),
    WXUSER_ID((short)6, "wxuser_id"),
    RECOM_ID((short)7, "recom_id"),
    CREATE_TIME((short)8, "create_time"),
    UPDATE_TIME((short)9, "update_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SYSUSER_ID
          return SYSUSER_ID;
        case 3: // POSITION_ID
          return POSITION_ID;
        case 4: // FAVORITE
          return FAVORITE;
        case 5: // MOBILE
          return MOBILE;
        case 6: // WXUSER_ID
          return WXUSER_ID;
        case 7: // RECOM_ID
          return RECOM_ID;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SYSUSER_ID_ISSET_ID = 1;
  private static final int __POSITION_ID_ISSET_ID = 2;
  private static final int __FAVORITE_ISSET_ID = 3;
  private static final int __WXUSER_ID_ISSET_ID = 4;
  private static final int __RECOM_ID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYSUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("sysuser_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAVORITE, new org.apache.thrift.meta_data.FieldMetaData("favorite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("wxuser_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECOM_ID, new org.apache.thrift.meta_data.FieldMetaData("recom_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserFavoritePosition.class, metaDataMap);
  }

  public UserFavoritePosition() {
  }

  public UserFavoritePosition(
    long id,
    int sysuser_id,
    int position_id,
    byte favorite,
    String mobile,
    long wxuser_id,
    int recom_id,
    String create_time,
    String update_time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.sysuser_id = sysuser_id;
    setSysuser_idIsSet(true);
    this.position_id = position_id;
    setPosition_idIsSet(true);
    this.favorite = favorite;
    setFavoriteIsSet(true);
    this.mobile = mobile;
    this.wxuser_id = wxuser_id;
    setWxuser_idIsSet(true);
    this.recom_id = recom_id;
    setRecom_idIsSet(true);
    this.create_time = create_time;
    this.update_time = update_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserFavoritePosition(UserFavoritePosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.sysuser_id = other.sysuser_id;
    this.position_id = other.position_id;
    this.favorite = other.favorite;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    this.wxuser_id = other.wxuser_id;
    this.recom_id = other.recom_id;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public UserFavoritePosition deepCopy() {
    return new UserFavoritePosition(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setSysuser_idIsSet(false);
    this.sysuser_id = 0;
    setPosition_idIsSet(false);
    this.position_id = 0;
    setFavoriteIsSet(false);
    this.favorite = 0;
    this.mobile = null;
    setWxuser_idIsSet(false);
    this.wxuser_id = 0;
    setRecom_idIsSet(false);
    this.recom_id = 0;
    this.create_time = null;
    this.update_time = null;
  }

  public long getId() {
    return this.id;
  }

  public UserFavoritePosition setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getSysuser_id() {
    return this.sysuser_id;
  }

  public UserFavoritePosition setSysuser_id(int sysuser_id) {
    this.sysuser_id = sysuser_id;
    setSysuser_idIsSet(true);
    return this;
  }

  public void unsetSysuser_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSUSER_ID_ISSET_ID);
  }

  /** Returns true if field sysuser_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSysuser_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSUSER_ID_ISSET_ID);
  }

  public void setSysuser_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSUSER_ID_ISSET_ID, value);
  }

  public int getPosition_id() {
    return this.position_id;
  }

  public UserFavoritePosition setPosition_id(int position_id) {
    this.position_id = position_id;
    setPosition_idIsSet(true);
    return this;
  }

  public void unsetPosition_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
  }

  /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_id() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
  }

  public void setPosition_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
  }

  public byte getFavorite() {
    return this.favorite;
  }

  public UserFavoritePosition setFavorite(byte favorite) {
    this.favorite = favorite;
    setFavoriteIsSet(true);
    return this;
  }

  public void unsetFavorite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITE_ISSET_ID);
  }

  /** Returns true if field favorite is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorite() {
    return EncodingUtils.testBit(__isset_bitfield, __FAVORITE_ISSET_ID);
  }

  public void setFavoriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITE_ISSET_ID, value);
  }

  public String getMobile() {
    return this.mobile;
  }

  public UserFavoritePosition setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public long getWxuser_id() {
    return this.wxuser_id;
  }

  public UserFavoritePosition setWxuser_id(long wxuser_id) {
    this.wxuser_id = wxuser_id;
    setWxuser_idIsSet(true);
    return this;
  }

  public void unsetWxuser_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  /** Returns true if field wxuser_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWxuser_id() {
    return EncodingUtils.testBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  public void setWxuser_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WXUSER_ID_ISSET_ID, value);
  }

  public int getRecom_id() {
    return this.recom_id;
  }

  public UserFavoritePosition setRecom_id(int recom_id) {
    this.recom_id = recom_id;
    setRecom_idIsSet(true);
    return this;
  }

  public void unsetRecom_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOM_ID_ISSET_ID);
  }

  /** Returns true if field recom_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRecom_id() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOM_ID_ISSET_ID);
  }

  public void setRecom_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOM_ID_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public UserFavoritePosition setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public UserFavoritePosition setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case SYSUSER_ID:
      if (value == null) {
        unsetSysuser_id();
      } else {
        setSysuser_id((Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPosition_id();
      } else {
        setPosition_id((Integer)value);
      }
      break;

    case FAVORITE:
      if (value == null) {
        unsetFavorite();
      } else {
        setFavorite((Byte)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case WXUSER_ID:
      if (value == null) {
        unsetWxuser_id();
      } else {
        setWxuser_id((Long)value);
      }
      break;

    case RECOM_ID:
      if (value == null) {
        unsetRecom_id();
      } else {
        setRecom_id((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SYSUSER_ID:
      return getSysuser_id();

    case POSITION_ID:
      return getPosition_id();

    case FAVORITE:
      return getFavorite();

    case MOBILE:
      return getMobile();

    case WXUSER_ID:
      return getWxuser_id();

    case RECOM_ID:
      return getRecom_id();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SYSUSER_ID:
      return isSetSysuser_id();
    case POSITION_ID:
      return isSetPosition_id();
    case FAVORITE:
      return isSetFavorite();
    case MOBILE:
      return isSetMobile();
    case WXUSER_ID:
      return isSetWxuser_id();
    case RECOM_ID:
      return isSetRecom_id();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserFavoritePosition)
      return this.equals((UserFavoritePosition)that);
    return false;
  }

  public boolean equals(UserFavoritePosition that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_sysuser_id = true;
    boolean that_present_sysuser_id = true;
    if (this_present_sysuser_id || that_present_sysuser_id) {
      if (!(this_present_sysuser_id && that_present_sysuser_id))
        return false;
      if (this.sysuser_id != that.sysuser_id)
        return false;
    }

    boolean this_present_position_id = true;
    boolean that_present_position_id = true;
    if (this_present_position_id || that_present_position_id) {
      if (!(this_present_position_id && that_present_position_id))
        return false;
      if (this.position_id != that.position_id)
        return false;
    }

    boolean this_present_favorite = true;
    boolean that_present_favorite = true;
    if (this_present_favorite || that_present_favorite) {
      if (!(this_present_favorite && that_present_favorite))
        return false;
      if (this.favorite != that.favorite)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_wxuser_id = true;
    boolean that_present_wxuser_id = true;
    if (this_present_wxuser_id || that_present_wxuser_id) {
      if (!(this_present_wxuser_id && that_present_wxuser_id))
        return false;
      if (this.wxuser_id != that.wxuser_id)
        return false;
    }

    boolean this_present_recom_id = true;
    boolean that_present_recom_id = true;
    if (this_present_recom_id || that_present_recom_id) {
      if (!(this_present_recom_id && that_present_recom_id))
        return false;
      if (this.recom_id != that.recom_id)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_sysuser_id = true;
    list.add(present_sysuser_id);
    if (present_sysuser_id)
      list.add(sysuser_id);

    boolean present_position_id = true;
    list.add(present_position_id);
    if (present_position_id)
      list.add(position_id);

    boolean present_favorite = true;
    list.add(present_favorite);
    if (present_favorite)
      list.add(favorite);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_wxuser_id = true;
    list.add(present_wxuser_id);
    if (present_wxuser_id)
      list.add(wxuser_id);

    boolean present_recom_id = true;
    list.add(present_recom_id);
    if (present_recom_id)
      list.add(recom_id);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserFavoritePosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysuser_id()).compareTo(other.isSetSysuser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysuser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysuser_id, other.sysuser_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavorite()).compareTo(other.isSetFavorite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorite, other.favorite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWxuser_id()).compareTo(other.isSetWxuser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxuser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxuser_id, other.wxuser_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecom_id()).compareTo(other.isSetRecom_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecom_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recom_id, other.recom_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserFavoritePosition(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysuser_id:");
    sb.append(this.sysuser_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_id:");
    sb.append(this.position_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorite:");
    sb.append(this.favorite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wxuser_id:");
    sb.append(this.wxuser_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recom_id:");
    sb.append(this.recom_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    if (this.update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.update_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserFavoritePositionStandardSchemeFactory implements SchemeFactory {
    public UserFavoritePositionStandardScheme getScheme() {
      return new UserFavoritePositionStandardScheme();
    }
  }

  private static class UserFavoritePositionStandardScheme extends StandardScheme<UserFavoritePosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserFavoritePosition struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYSUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sysuser_id = iprot.readI32();
              struct.setSysuser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position_id = iprot.readI32();
              struct.setPosition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAVORITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.favorite = iprot.readByte();
              struct.setFavoriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wxuser_id = iprot.readI64();
              struct.setWxuser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recom_id = iprot.readI32();
              struct.setRecom_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserFavoritePosition struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYSUSER_ID_FIELD_DESC);
      oprot.writeI32(struct.sysuser_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
      oprot.writeI32(struct.position_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAVORITE_FIELD_DESC);
      oprot.writeByte(struct.favorite);
      oprot.writeFieldEnd();
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WXUSER_ID_FIELD_DESC);
      oprot.writeI64(struct.wxuser_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOM_ID_FIELD_DESC);
      oprot.writeI32(struct.recom_id);
      oprot.writeFieldEnd();
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.update_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserFavoritePositionTupleSchemeFactory implements SchemeFactory {
    public UserFavoritePositionTupleScheme getScheme() {
      return new UserFavoritePositionTupleScheme();
    }
  }

  private static class UserFavoritePositionTupleScheme extends TupleScheme<UserFavoritePosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserFavoritePosition struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSysuser_id()) {
        optionals.set(1);
      }
      if (struct.isSetPosition_id()) {
        optionals.set(2);
      }
      if (struct.isSetFavorite()) {
        optionals.set(3);
      }
      if (struct.isSetMobile()) {
        optionals.set(4);
      }
      if (struct.isSetWxuser_id()) {
        optionals.set(5);
      }
      if (struct.isSetRecom_id()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(7);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetSysuser_id()) {
        oprot.writeI32(struct.sysuser_id);
      }
      if (struct.isSetPosition_id()) {
        oprot.writeI32(struct.position_id);
      }
      if (struct.isSetFavorite()) {
        oprot.writeByte(struct.favorite);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetWxuser_id()) {
        oprot.writeI64(struct.wxuser_id);
      }
      if (struct.isSetRecom_id()) {
        oprot.writeI32(struct.recom_id);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserFavoritePosition struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sysuser_id = iprot.readI32();
        struct.setSysuser_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.position_id = iprot.readI32();
        struct.setPosition_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.favorite = iprot.readByte();
        struct.setFavoriteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wxuser_id = iprot.readI64();
        struct.setWxuser_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recom_id = iprot.readI32();
        struct.setRecom_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

}

