/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class ConfigAdminnotificationEventsDO implements org.apache.thrift.TBase<ConfigAdminnotificationEventsDO, ConfigAdminnotificationEventsDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigAdminnotificationEventsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigAdminnotificationEventsDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAppid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("eventKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDesc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField THRESHOLD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("thresholdValue", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField THRESHOLD_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("thresholdInterval", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ENABLE_NOTIFYBY_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("enableNotifybyEmail", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField ENABLE_NOTIFYBY_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("enableNotifybySms", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableNotifybyWechattemplatemessage", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField GROUPID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupid", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigAdminnotificationEventsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigAdminnotificationEventsDOTupleSchemeFactory();

  public int id; // optional
  public String projectAppid; // optional
  public String eventKey; // optional
  public String eventName; // optional
  public String eventDesc; // optional
  public int thresholdValue; // optional
  public int thresholdInterval; // optional
  public byte enableNotifybyEmail; // optional
  public byte enableNotifybySms; // optional
  public byte enableNotifybyWechattemplatemessage; // optional
  public int groupid; // optional
  public String createTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROJECT_APPID((short)2, "projectAppid"),
    EVENT_KEY((short)3, "eventKey"),
    EVENT_NAME((short)4, "eventName"),
    EVENT_DESC((short)5, "eventDesc"),
    THRESHOLD_VALUE((short)6, "thresholdValue"),
    THRESHOLD_INTERVAL((short)7, "thresholdInterval"),
    ENABLE_NOTIFYBY_EMAIL((short)8, "enableNotifybyEmail"),
    ENABLE_NOTIFYBY_SMS((short)9, "enableNotifybySms"),
    ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE((short)10, "enableNotifybyWechattemplatemessage"),
    GROUPID((short)11, "groupid"),
    CREATE_TIME((short)12, "createTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROJECT_APPID
          return PROJECT_APPID;
        case 3: // EVENT_KEY
          return EVENT_KEY;
        case 4: // EVENT_NAME
          return EVENT_NAME;
        case 5: // EVENT_DESC
          return EVENT_DESC;
        case 6: // THRESHOLD_VALUE
          return THRESHOLD_VALUE;
        case 7: // THRESHOLD_INTERVAL
          return THRESHOLD_INTERVAL;
        case 8: // ENABLE_NOTIFYBY_EMAIL
          return ENABLE_NOTIFYBY_EMAIL;
        case 9: // ENABLE_NOTIFYBY_SMS
          return ENABLE_NOTIFYBY_SMS;
        case 10: // ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE
          return ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE;
        case 11: // GROUPID
          return GROUPID;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __THRESHOLDVALUE_ISSET_ID = 1;
  private static final int __THRESHOLDINTERVAL_ISSET_ID = 2;
  private static final int __ENABLENOTIFYBYEMAIL_ISSET_ID = 3;
  private static final int __ENABLENOTIFYBYSMS_ISSET_ID = 4;
  private static final int __ENABLENOTIFYBYWECHATTEMPLATEMESSAGE_ISSET_ID = 5;
  private static final int __GROUPID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROJECT_APPID,_Fields.EVENT_KEY,_Fields.EVENT_NAME,_Fields.EVENT_DESC,_Fields.THRESHOLD_VALUE,_Fields.THRESHOLD_INTERVAL,_Fields.ENABLE_NOTIFYBY_EMAIL,_Fields.ENABLE_NOTIFYBY_SMS,_Fields.ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE,_Fields.GROUPID,_Fields.CREATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_APPID, new org.apache.thrift.meta_data.FieldMetaData("projectAppid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("eventKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("eventName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_DESC, new org.apache.thrift.meta_data.FieldMetaData("eventDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THRESHOLD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("thresholdValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THRESHOLD_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("thresholdInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_NOTIFYBY_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("enableNotifybyEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ENABLE_NOTIFYBY_SMS, new org.apache.thrift.meta_data.FieldMetaData("enableNotifybySms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("enableNotifybyWechattemplatemessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GROUPID, new org.apache.thrift.meta_data.FieldMetaData("groupid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigAdminnotificationEventsDO.class, metaDataMap);
  }

  public ConfigAdminnotificationEventsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigAdminnotificationEventsDO(ConfigAdminnotificationEventsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetProjectAppid()) {
      this.projectAppid = other.projectAppid;
    }
    if (other.isSetEventKey()) {
      this.eventKey = other.eventKey;
    }
    if (other.isSetEventName()) {
      this.eventName = other.eventName;
    }
    if (other.isSetEventDesc()) {
      this.eventDesc = other.eventDesc;
    }
    this.thresholdValue = other.thresholdValue;
    this.thresholdInterval = other.thresholdInterval;
    this.enableNotifybyEmail = other.enableNotifybyEmail;
    this.enableNotifybySms = other.enableNotifybySms;
    this.enableNotifybyWechattemplatemessage = other.enableNotifybyWechattemplatemessage;
    this.groupid = other.groupid;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public ConfigAdminnotificationEventsDO deepCopy() {
    return new ConfigAdminnotificationEventsDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.projectAppid = null;
    this.eventKey = null;
    this.eventName = null;
    this.eventDesc = null;
    setThresholdValueIsSet(false);
    this.thresholdValue = 0;
    setThresholdIntervalIsSet(false);
    this.thresholdInterval = 0;
    setEnableNotifybyEmailIsSet(false);
    this.enableNotifybyEmail = 0;
    setEnableNotifybySmsIsSet(false);
    this.enableNotifybySms = 0;
    setEnableNotifybyWechattemplatemessageIsSet(false);
    this.enableNotifybyWechattemplatemessage = 0;
    setGroupidIsSet(false);
    this.groupid = 0;
    this.createTime = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigAdminnotificationEventsDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getProjectAppid() {
    return this.projectAppid;
  }

  public ConfigAdminnotificationEventsDO setProjectAppid(String projectAppid) {
    this.projectAppid = projectAppid;
    return this;
  }

  public void unsetProjectAppid() {
    this.projectAppid = null;
  }

  /** Returns true if field projectAppid is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectAppid() {
    return this.projectAppid != null;
  }

  public void setProjectAppidIsSet(boolean value) {
    if (!value) {
      this.projectAppid = null;
    }
  }

  public String getEventKey() {
    return this.eventKey;
  }

  public ConfigAdminnotificationEventsDO setEventKey(String eventKey) {
    this.eventKey = eventKey;
    return this;
  }

  public void unsetEventKey() {
    this.eventKey = null;
  }

  /** Returns true if field eventKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEventKey() {
    return this.eventKey != null;
  }

  public void setEventKeyIsSet(boolean value) {
    if (!value) {
      this.eventKey = null;
    }
  }

  public String getEventName() {
    return this.eventName;
  }

  public ConfigAdminnotificationEventsDO setEventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  public void unsetEventName() {
    this.eventName = null;
  }

  /** Returns true if field eventName is set (has been assigned a value) and false otherwise */
  public boolean isSetEventName() {
    return this.eventName != null;
  }

  public void setEventNameIsSet(boolean value) {
    if (!value) {
      this.eventName = null;
    }
  }

  public String getEventDesc() {
    return this.eventDesc;
  }

  public ConfigAdminnotificationEventsDO setEventDesc(String eventDesc) {
    this.eventDesc = eventDesc;
    return this;
  }

  public void unsetEventDesc() {
    this.eventDesc = null;
  }

  /** Returns true if field eventDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetEventDesc() {
    return this.eventDesc != null;
  }

  public void setEventDescIsSet(boolean value) {
    if (!value) {
      this.eventDesc = null;
    }
  }

  public int getThresholdValue() {
    return this.thresholdValue;
  }

  public ConfigAdminnotificationEventsDO setThresholdValue(int thresholdValue) {
    this.thresholdValue = thresholdValue;
    setThresholdValueIsSet(true);
    return this;
  }

  public void unsetThresholdValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID);
  }

  /** Returns true if field thresholdValue is set (has been assigned a value) and false otherwise */
  public boolean isSetThresholdValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID);
  }

  public void setThresholdValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID, value);
  }

  public int getThresholdInterval() {
    return this.thresholdInterval;
  }

  public ConfigAdminnotificationEventsDO setThresholdInterval(int thresholdInterval) {
    this.thresholdInterval = thresholdInterval;
    setThresholdIntervalIsSet(true);
    return this;
  }

  public void unsetThresholdInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLDINTERVAL_ISSET_ID);
  }

  /** Returns true if field thresholdInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetThresholdInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLDINTERVAL_ISSET_ID);
  }

  public void setThresholdIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLDINTERVAL_ISSET_ID, value);
  }

  public byte getEnableNotifybyEmail() {
    return this.enableNotifybyEmail;
  }

  public ConfigAdminnotificationEventsDO setEnableNotifybyEmail(byte enableNotifybyEmail) {
    this.enableNotifybyEmail = enableNotifybyEmail;
    setEnableNotifybyEmailIsSet(true);
    return this;
  }

  public void unsetEnableNotifybyEmail() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLENOTIFYBYEMAIL_ISSET_ID);
  }

  /** Returns true if field enableNotifybyEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableNotifybyEmail() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLENOTIFYBYEMAIL_ISSET_ID);
  }

  public void setEnableNotifybyEmailIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLENOTIFYBYEMAIL_ISSET_ID, value);
  }

  public byte getEnableNotifybySms() {
    return this.enableNotifybySms;
  }

  public ConfigAdminnotificationEventsDO setEnableNotifybySms(byte enableNotifybySms) {
    this.enableNotifybySms = enableNotifybySms;
    setEnableNotifybySmsIsSet(true);
    return this;
  }

  public void unsetEnableNotifybySms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLENOTIFYBYSMS_ISSET_ID);
  }

  /** Returns true if field enableNotifybySms is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableNotifybySms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLENOTIFYBYSMS_ISSET_ID);
  }

  public void setEnableNotifybySmsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLENOTIFYBYSMS_ISSET_ID, value);
  }

  public byte getEnableNotifybyWechattemplatemessage() {
    return this.enableNotifybyWechattemplatemessage;
  }

  public ConfigAdminnotificationEventsDO setEnableNotifybyWechattemplatemessage(byte enableNotifybyWechattemplatemessage) {
    this.enableNotifybyWechattemplatemessage = enableNotifybyWechattemplatemessage;
    setEnableNotifybyWechattemplatemessageIsSet(true);
    return this;
  }

  public void unsetEnableNotifybyWechattemplatemessage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLENOTIFYBYWECHATTEMPLATEMESSAGE_ISSET_ID);
  }

  /** Returns true if field enableNotifybyWechattemplatemessage is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableNotifybyWechattemplatemessage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLENOTIFYBYWECHATTEMPLATEMESSAGE_ISSET_ID);
  }

  public void setEnableNotifybyWechattemplatemessageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLENOTIFYBYWECHATTEMPLATEMESSAGE_ISSET_ID, value);
  }

  public int getGroupid() {
    return this.groupid;
  }

  public ConfigAdminnotificationEventsDO setGroupid(int groupid) {
    this.groupid = groupid;
    setGroupidIsSet(true);
    return this;
  }

  public void unsetGroupid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupid is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ConfigAdminnotificationEventsDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROJECT_APPID:
      if (value == null) {
        unsetProjectAppid();
      } else {
        setProjectAppid((String)value);
      }
      break;

    case EVENT_KEY:
      if (value == null) {
        unsetEventKey();
      } else {
        setEventKey((String)value);
      }
      break;

    case EVENT_NAME:
      if (value == null) {
        unsetEventName();
      } else {
        setEventName((String)value);
      }
      break;

    case EVENT_DESC:
      if (value == null) {
        unsetEventDesc();
      } else {
        setEventDesc((String)value);
      }
      break;

    case THRESHOLD_VALUE:
      if (value == null) {
        unsetThresholdValue();
      } else {
        setThresholdValue((Integer)value);
      }
      break;

    case THRESHOLD_INTERVAL:
      if (value == null) {
        unsetThresholdInterval();
      } else {
        setThresholdInterval((Integer)value);
      }
      break;

    case ENABLE_NOTIFYBY_EMAIL:
      if (value == null) {
        unsetEnableNotifybyEmail();
      } else {
        setEnableNotifybyEmail((Byte)value);
      }
      break;

    case ENABLE_NOTIFYBY_SMS:
      if (value == null) {
        unsetEnableNotifybySms();
      } else {
        setEnableNotifybySms((Byte)value);
      }
      break;

    case ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE:
      if (value == null) {
        unsetEnableNotifybyWechattemplatemessage();
      } else {
        setEnableNotifybyWechattemplatemessage((Byte)value);
      }
      break;

    case GROUPID:
      if (value == null) {
        unsetGroupid();
      } else {
        setGroupid((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROJECT_APPID:
      return getProjectAppid();

    case EVENT_KEY:
      return getEventKey();

    case EVENT_NAME:
      return getEventName();

    case EVENT_DESC:
      return getEventDesc();

    case THRESHOLD_VALUE:
      return getThresholdValue();

    case THRESHOLD_INTERVAL:
      return getThresholdInterval();

    case ENABLE_NOTIFYBY_EMAIL:
      return getEnableNotifybyEmail();

    case ENABLE_NOTIFYBY_SMS:
      return getEnableNotifybySms();

    case ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE:
      return getEnableNotifybyWechattemplatemessage();

    case GROUPID:
      return getGroupid();

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROJECT_APPID:
      return isSetProjectAppid();
    case EVENT_KEY:
      return isSetEventKey();
    case EVENT_NAME:
      return isSetEventName();
    case EVENT_DESC:
      return isSetEventDesc();
    case THRESHOLD_VALUE:
      return isSetThresholdValue();
    case THRESHOLD_INTERVAL:
      return isSetThresholdInterval();
    case ENABLE_NOTIFYBY_EMAIL:
      return isSetEnableNotifybyEmail();
    case ENABLE_NOTIFYBY_SMS:
      return isSetEnableNotifybySms();
    case ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE:
      return isSetEnableNotifybyWechattemplatemessage();
    case GROUPID:
      return isSetGroupid();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigAdminnotificationEventsDO)
      return this.equals((ConfigAdminnotificationEventsDO)that);
    return false;
  }

  public boolean equals(ConfigAdminnotificationEventsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_projectAppid = true && this.isSetProjectAppid();
    boolean that_present_projectAppid = true && that.isSetProjectAppid();
    if (this_present_projectAppid || that_present_projectAppid) {
      if (!(this_present_projectAppid && that_present_projectAppid))
        return false;
      if (!this.projectAppid.equals(that.projectAppid))
        return false;
    }

    boolean this_present_eventKey = true && this.isSetEventKey();
    boolean that_present_eventKey = true && that.isSetEventKey();
    if (this_present_eventKey || that_present_eventKey) {
      if (!(this_present_eventKey && that_present_eventKey))
        return false;
      if (!this.eventKey.equals(that.eventKey))
        return false;
    }

    boolean this_present_eventName = true && this.isSetEventName();
    boolean that_present_eventName = true && that.isSetEventName();
    if (this_present_eventName || that_present_eventName) {
      if (!(this_present_eventName && that_present_eventName))
        return false;
      if (!this.eventName.equals(that.eventName))
        return false;
    }

    boolean this_present_eventDesc = true && this.isSetEventDesc();
    boolean that_present_eventDesc = true && that.isSetEventDesc();
    if (this_present_eventDesc || that_present_eventDesc) {
      if (!(this_present_eventDesc && that_present_eventDesc))
        return false;
      if (!this.eventDesc.equals(that.eventDesc))
        return false;
    }

    boolean this_present_thresholdValue = true && this.isSetThresholdValue();
    boolean that_present_thresholdValue = true && that.isSetThresholdValue();
    if (this_present_thresholdValue || that_present_thresholdValue) {
      if (!(this_present_thresholdValue && that_present_thresholdValue))
        return false;
      if (this.thresholdValue != that.thresholdValue)
        return false;
    }

    boolean this_present_thresholdInterval = true && this.isSetThresholdInterval();
    boolean that_present_thresholdInterval = true && that.isSetThresholdInterval();
    if (this_present_thresholdInterval || that_present_thresholdInterval) {
      if (!(this_present_thresholdInterval && that_present_thresholdInterval))
        return false;
      if (this.thresholdInterval != that.thresholdInterval)
        return false;
    }

    boolean this_present_enableNotifybyEmail = true && this.isSetEnableNotifybyEmail();
    boolean that_present_enableNotifybyEmail = true && that.isSetEnableNotifybyEmail();
    if (this_present_enableNotifybyEmail || that_present_enableNotifybyEmail) {
      if (!(this_present_enableNotifybyEmail && that_present_enableNotifybyEmail))
        return false;
      if (this.enableNotifybyEmail != that.enableNotifybyEmail)
        return false;
    }

    boolean this_present_enableNotifybySms = true && this.isSetEnableNotifybySms();
    boolean that_present_enableNotifybySms = true && that.isSetEnableNotifybySms();
    if (this_present_enableNotifybySms || that_present_enableNotifybySms) {
      if (!(this_present_enableNotifybySms && that_present_enableNotifybySms))
        return false;
      if (this.enableNotifybySms != that.enableNotifybySms)
        return false;
    }

    boolean this_present_enableNotifybyWechattemplatemessage = true && this.isSetEnableNotifybyWechattemplatemessage();
    boolean that_present_enableNotifybyWechattemplatemessage = true && that.isSetEnableNotifybyWechattemplatemessage();
    if (this_present_enableNotifybyWechattemplatemessage || that_present_enableNotifybyWechattemplatemessage) {
      if (!(this_present_enableNotifybyWechattemplatemessage && that_present_enableNotifybyWechattemplatemessage))
        return false;
      if (this.enableNotifybyWechattemplatemessage != that.enableNotifybyWechattemplatemessage)
        return false;
    }

    boolean this_present_groupid = true && this.isSetGroupid();
    boolean that_present_groupid = true && that.isSetGroupid();
    if (this_present_groupid || that_present_groupid) {
      if (!(this_present_groupid && that_present_groupid))
        return false;
      if (this.groupid != that.groupid)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProjectAppid()) ? 131071 : 524287);
    if (isSetProjectAppid())
      hashCode = hashCode * 8191 + projectAppid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventKey()) ? 131071 : 524287);
    if (isSetEventKey())
      hashCode = hashCode * 8191 + eventKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventName()) ? 131071 : 524287);
    if (isSetEventName())
      hashCode = hashCode * 8191 + eventName.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventDesc()) ? 131071 : 524287);
    if (isSetEventDesc())
      hashCode = hashCode * 8191 + eventDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetThresholdValue()) ? 131071 : 524287);
    if (isSetThresholdValue())
      hashCode = hashCode * 8191 + thresholdValue;

    hashCode = hashCode * 8191 + ((isSetThresholdInterval()) ? 131071 : 524287);
    if (isSetThresholdInterval())
      hashCode = hashCode * 8191 + thresholdInterval;

    hashCode = hashCode * 8191 + ((isSetEnableNotifybyEmail()) ? 131071 : 524287);
    if (isSetEnableNotifybyEmail())
      hashCode = hashCode * 8191 + (int) (enableNotifybyEmail);

    hashCode = hashCode * 8191 + ((isSetEnableNotifybySms()) ? 131071 : 524287);
    if (isSetEnableNotifybySms())
      hashCode = hashCode * 8191 + (int) (enableNotifybySms);

    hashCode = hashCode * 8191 + ((isSetEnableNotifybyWechattemplatemessage()) ? 131071 : 524287);
    if (isSetEnableNotifybyWechattemplatemessage())
      hashCode = hashCode * 8191 + (int) (enableNotifybyWechattemplatemessage);

    hashCode = hashCode * 8191 + ((isSetGroupid()) ? 131071 : 524287);
    if (isSetGroupid())
      hashCode = hashCode * 8191 + groupid;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigAdminnotificationEventsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectAppid()).compareTo(other.isSetProjectAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAppid, other.projectAppid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventKey()).compareTo(other.isSetEventKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventKey, other.eventKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventName()).compareTo(other.isSetEventName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventName, other.eventName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventDesc()).compareTo(other.isSetEventDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDesc, other.eventDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThresholdValue()).compareTo(other.isSetThresholdValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThresholdValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thresholdValue, other.thresholdValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThresholdInterval()).compareTo(other.isSetThresholdInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThresholdInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thresholdInterval, other.thresholdInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableNotifybyEmail()).compareTo(other.isSetEnableNotifybyEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableNotifybyEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableNotifybyEmail, other.enableNotifybyEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableNotifybySms()).compareTo(other.isSetEnableNotifybySms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableNotifybySms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableNotifybySms, other.enableNotifybySms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableNotifybyWechattemplatemessage()).compareTo(other.isSetEnableNotifybyWechattemplatemessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableNotifybyWechattemplatemessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableNotifybyWechattemplatemessage, other.enableNotifybyWechattemplatemessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupid()).compareTo(other.isSetGroupid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupid, other.groupid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigAdminnotificationEventsDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProjectAppid()) {
      if (!first) sb.append(", ");
      sb.append("projectAppid:");
      if (this.projectAppid == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAppid);
      }
      first = false;
    }
    if (isSetEventKey()) {
      if (!first) sb.append(", ");
      sb.append("eventKey:");
      if (this.eventKey == null) {
        sb.append("null");
      } else {
        sb.append(this.eventKey);
      }
      first = false;
    }
    if (isSetEventName()) {
      if (!first) sb.append(", ");
      sb.append("eventName:");
      if (this.eventName == null) {
        sb.append("null");
      } else {
        sb.append(this.eventName);
      }
      first = false;
    }
    if (isSetEventDesc()) {
      if (!first) sb.append(", ");
      sb.append("eventDesc:");
      if (this.eventDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.eventDesc);
      }
      first = false;
    }
    if (isSetThresholdValue()) {
      if (!first) sb.append(", ");
      sb.append("thresholdValue:");
      sb.append(this.thresholdValue);
      first = false;
    }
    if (isSetThresholdInterval()) {
      if (!first) sb.append(", ");
      sb.append("thresholdInterval:");
      sb.append(this.thresholdInterval);
      first = false;
    }
    if (isSetEnableNotifybyEmail()) {
      if (!first) sb.append(", ");
      sb.append("enableNotifybyEmail:");
      sb.append(this.enableNotifybyEmail);
      first = false;
    }
    if (isSetEnableNotifybySms()) {
      if (!first) sb.append(", ");
      sb.append("enableNotifybySms:");
      sb.append(this.enableNotifybySms);
      first = false;
    }
    if (isSetEnableNotifybyWechattemplatemessage()) {
      if (!first) sb.append(", ");
      sb.append("enableNotifybyWechattemplatemessage:");
      sb.append(this.enableNotifybyWechattemplatemessage);
      first = false;
    }
    if (isSetGroupid()) {
      if (!first) sb.append(", ");
      sb.append("groupid:");
      sb.append(this.groupid);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigAdminnotificationEventsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigAdminnotificationEventsDOStandardScheme getScheme() {
      return new ConfigAdminnotificationEventsDOStandardScheme();
    }
  }

  private static class ConfigAdminnotificationEventsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigAdminnotificationEventsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigAdminnotificationEventsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectAppid = iprot.readString();
              struct.setProjectAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventKey = iprot.readString();
              struct.setEventKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventName = iprot.readString();
              struct.setEventNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventDesc = iprot.readString();
              struct.setEventDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // THRESHOLD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thresholdValue = iprot.readI32();
              struct.setThresholdValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THRESHOLD_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thresholdInterval = iprot.readI32();
              struct.setThresholdIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENABLE_NOTIFYBY_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enableNotifybyEmail = iprot.readByte();
              struct.setEnableNotifybyEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENABLE_NOTIFYBY_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enableNotifybySms = iprot.readByte();
              struct.setEnableNotifybySmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enableNotifybyWechattemplatemessage = iprot.readByte();
              struct.setEnableNotifybyWechattemplatemessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupid = iprot.readI32();
              struct.setGroupidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigAdminnotificationEventsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.projectAppid != null) {
        if (struct.isSetProjectAppid()) {
          oprot.writeFieldBegin(PROJECT_APPID_FIELD_DESC);
          oprot.writeString(struct.projectAppid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.eventKey != null) {
        if (struct.isSetEventKey()) {
          oprot.writeFieldBegin(EVENT_KEY_FIELD_DESC);
          oprot.writeString(struct.eventKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.eventName != null) {
        if (struct.isSetEventName()) {
          oprot.writeFieldBegin(EVENT_NAME_FIELD_DESC);
          oprot.writeString(struct.eventName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.eventDesc != null) {
        if (struct.isSetEventDesc()) {
          oprot.writeFieldBegin(EVENT_DESC_FIELD_DESC);
          oprot.writeString(struct.eventDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThresholdValue()) {
        oprot.writeFieldBegin(THRESHOLD_VALUE_FIELD_DESC);
        oprot.writeI32(struct.thresholdValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThresholdInterval()) {
        oprot.writeFieldBegin(THRESHOLD_INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.thresholdInterval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableNotifybyEmail()) {
        oprot.writeFieldBegin(ENABLE_NOTIFYBY_EMAIL_FIELD_DESC);
        oprot.writeByte(struct.enableNotifybyEmail);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableNotifybySms()) {
        oprot.writeFieldBegin(ENABLE_NOTIFYBY_SMS_FIELD_DESC);
        oprot.writeByte(struct.enableNotifybySms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableNotifybyWechattemplatemessage()) {
        oprot.writeFieldBegin(ENABLE_NOTIFYBY_WECHATTEMPLATEMESSAGE_FIELD_DESC);
        oprot.writeByte(struct.enableNotifybyWechattemplatemessage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupid()) {
        oprot.writeFieldBegin(GROUPID_FIELD_DESC);
        oprot.writeI32(struct.groupid);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigAdminnotificationEventsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigAdminnotificationEventsDOTupleScheme getScheme() {
      return new ConfigAdminnotificationEventsDOTupleScheme();
    }
  }

  private static class ConfigAdminnotificationEventsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigAdminnotificationEventsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigAdminnotificationEventsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectAppid()) {
        optionals.set(1);
      }
      if (struct.isSetEventKey()) {
        optionals.set(2);
      }
      if (struct.isSetEventName()) {
        optionals.set(3);
      }
      if (struct.isSetEventDesc()) {
        optionals.set(4);
      }
      if (struct.isSetThresholdValue()) {
        optionals.set(5);
      }
      if (struct.isSetThresholdInterval()) {
        optionals.set(6);
      }
      if (struct.isSetEnableNotifybyEmail()) {
        optionals.set(7);
      }
      if (struct.isSetEnableNotifybySms()) {
        optionals.set(8);
      }
      if (struct.isSetEnableNotifybyWechattemplatemessage()) {
        optionals.set(9);
      }
      if (struct.isSetGroupid()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProjectAppid()) {
        oprot.writeString(struct.projectAppid);
      }
      if (struct.isSetEventKey()) {
        oprot.writeString(struct.eventKey);
      }
      if (struct.isSetEventName()) {
        oprot.writeString(struct.eventName);
      }
      if (struct.isSetEventDesc()) {
        oprot.writeString(struct.eventDesc);
      }
      if (struct.isSetThresholdValue()) {
        oprot.writeI32(struct.thresholdValue);
      }
      if (struct.isSetThresholdInterval()) {
        oprot.writeI32(struct.thresholdInterval);
      }
      if (struct.isSetEnableNotifybyEmail()) {
        oprot.writeByte(struct.enableNotifybyEmail);
      }
      if (struct.isSetEnableNotifybySms()) {
        oprot.writeByte(struct.enableNotifybySms);
      }
      if (struct.isSetEnableNotifybyWechattemplatemessage()) {
        oprot.writeByte(struct.enableNotifybyWechattemplatemessage);
      }
      if (struct.isSetGroupid()) {
        oprot.writeI32(struct.groupid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigAdminnotificationEventsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectAppid = iprot.readString();
        struct.setProjectAppidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventKey = iprot.readString();
        struct.setEventKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventName = iprot.readString();
        struct.setEventNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eventDesc = iprot.readString();
        struct.setEventDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.thresholdValue = iprot.readI32();
        struct.setThresholdValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.thresholdInterval = iprot.readI32();
        struct.setThresholdIntervalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enableNotifybyEmail = iprot.readByte();
        struct.setEnableNotifybyEmailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.enableNotifybySms = iprot.readByte();
        struct.setEnableNotifybySmsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.enableNotifybyWechattemplatemessage = iprot.readByte();
        struct.setEnableNotifybyWechattemplatemessageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.groupid = iprot.readI32();
        struct.setGroupidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

