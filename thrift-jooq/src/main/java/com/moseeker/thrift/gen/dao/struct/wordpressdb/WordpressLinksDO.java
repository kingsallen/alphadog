/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.wordpressdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-21")
public class WordpressLinksDO implements org.apache.thrift.TBase<WordpressLinksDO, WordpressLinksDO._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressLinksDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressLinksDO");

  private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LINK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("linkName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINK_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkImage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LINK_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("linkTarget", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LINK_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("linkDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LINK_VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkVisible", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LINK_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("linkOwner", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LINK_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("linkRating", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LINK_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUpdated", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LINK_REL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkRel", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LINK_NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("linkNotes", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LINK_RSS_FIELD_DESC = new org.apache.thrift.protocol.TField("linkRss", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WordpressLinksDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WordpressLinksDOTupleSchemeFactory();

  public int linkId; // optional
  public java.lang.String linkUrl; // optional
  public java.lang.String linkName; // optional
  public java.lang.String linkImage; // optional
  public java.lang.String linkTarget; // optional
  public java.lang.String linkDescription; // optional
  public java.lang.String linkVisible; // optional
  public int linkOwner; // optional
  public int linkRating; // optional
  public java.lang.String linkUpdated; // optional
  public java.lang.String linkRel; // optional
  public java.lang.String linkNotes; // optional
  public java.lang.String linkRss; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINK_ID((short)1, "linkId"),
    LINK_URL((short)2, "linkUrl"),
    LINK_NAME((short)3, "linkName"),
    LINK_IMAGE((short)4, "linkImage"),
    LINK_TARGET((short)5, "linkTarget"),
    LINK_DESCRIPTION((short)6, "linkDescription"),
    LINK_VISIBLE((short)7, "linkVisible"),
    LINK_OWNER((short)8, "linkOwner"),
    LINK_RATING((short)9, "linkRating"),
    LINK_UPDATED((short)10, "linkUpdated"),
    LINK_REL((short)11, "linkRel"),
    LINK_NOTES((short)12, "linkNotes"),
    LINK_RSS((short)13, "linkRss");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINK_ID
          return LINK_ID;
        case 2: // LINK_URL
          return LINK_URL;
        case 3: // LINK_NAME
          return LINK_NAME;
        case 4: // LINK_IMAGE
          return LINK_IMAGE;
        case 5: // LINK_TARGET
          return LINK_TARGET;
        case 6: // LINK_DESCRIPTION
          return LINK_DESCRIPTION;
        case 7: // LINK_VISIBLE
          return LINK_VISIBLE;
        case 8: // LINK_OWNER
          return LINK_OWNER;
        case 9: // LINK_RATING
          return LINK_RATING;
        case 10: // LINK_UPDATED
          return LINK_UPDATED;
        case 11: // LINK_REL
          return LINK_REL;
        case 12: // LINK_NOTES
          return LINK_NOTES;
        case 13: // LINK_RSS
          return LINK_RSS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINKID_ISSET_ID = 0;
  private static final int __LINKOWNER_ISSET_ID = 1;
  private static final int __LINKRATING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LINK_ID,_Fields.LINK_URL,_Fields.LINK_NAME,_Fields.LINK_IMAGE,_Fields.LINK_TARGET,_Fields.LINK_DESCRIPTION,_Fields.LINK_VISIBLE,_Fields.LINK_OWNER,_Fields.LINK_RATING,_Fields.LINK_UPDATED,_Fields.LINK_REL,_Fields.LINK_NOTES,_Fields.LINK_RSS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_NAME, new org.apache.thrift.meta_data.FieldMetaData("linkName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("linkImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_TARGET, new org.apache.thrift.meta_data.FieldMetaData("linkTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("linkDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_VISIBLE, new org.apache.thrift.meta_data.FieldMetaData("linkVisible", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_OWNER, new org.apache.thrift.meta_data.FieldMetaData("linkOwner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_RATING, new org.apache.thrift.meta_data.FieldMetaData("linkRating", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("linkUpdated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_REL, new org.apache.thrift.meta_data.FieldMetaData("linkRel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_NOTES, new org.apache.thrift.meta_data.FieldMetaData("linkNotes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_RSS, new org.apache.thrift.meta_data.FieldMetaData("linkRss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressLinksDO.class, metaDataMap);
  }

  public WordpressLinksDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressLinksDO(WordpressLinksDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.linkId = other.linkId;
    if (other.isSetLinkUrl()) {
      this.linkUrl = other.linkUrl;
    }
    if (other.isSetLinkName()) {
      this.linkName = other.linkName;
    }
    if (other.isSetLinkImage()) {
      this.linkImage = other.linkImage;
    }
    if (other.isSetLinkTarget()) {
      this.linkTarget = other.linkTarget;
    }
    if (other.isSetLinkDescription()) {
      this.linkDescription = other.linkDescription;
    }
    if (other.isSetLinkVisible()) {
      this.linkVisible = other.linkVisible;
    }
    this.linkOwner = other.linkOwner;
    this.linkRating = other.linkRating;
    if (other.isSetLinkUpdated()) {
      this.linkUpdated = other.linkUpdated;
    }
    if (other.isSetLinkRel()) {
      this.linkRel = other.linkRel;
    }
    if (other.isSetLinkNotes()) {
      this.linkNotes = other.linkNotes;
    }
    if (other.isSetLinkRss()) {
      this.linkRss = other.linkRss;
    }
  }

  public WordpressLinksDO deepCopy() {
    return new WordpressLinksDO(this);
  }

  @Override
  public void clear() {
    setLinkIdIsSet(false);
    this.linkId = 0;
    this.linkUrl = null;
    this.linkName = null;
    this.linkImage = null;
    this.linkTarget = null;
    this.linkDescription = null;
    this.linkVisible = null;
    setLinkOwnerIsSet(false);
    this.linkOwner = 0;
    setLinkRatingIsSet(false);
    this.linkRating = 0;
    this.linkUpdated = null;
    this.linkRel = null;
    this.linkNotes = null;
    this.linkRss = null;
  }

  public int getLinkId() {
    return this.linkId;
  }

  public WordpressLinksDO setLinkId(int linkId) {
    this.linkId = linkId;
    setLinkIdIsSet(true);
    return this;
  }

  public void unsetLinkId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  public void setLinkIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
  }

  public java.lang.String getLinkUrl() {
    return this.linkUrl;
  }

  public WordpressLinksDO setLinkUrl(java.lang.String linkUrl) {
    this.linkUrl = linkUrl;
    return this;
  }

  public void unsetLinkUrl() {
    this.linkUrl = null;
  }

  /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkUrl() {
    return this.linkUrl != null;
  }

  public void setLinkUrlIsSet(boolean value) {
    if (!value) {
      this.linkUrl = null;
    }
  }

  public java.lang.String getLinkName() {
    return this.linkName;
  }

  public WordpressLinksDO setLinkName(java.lang.String linkName) {
    this.linkName = linkName;
    return this;
  }

  public void unsetLinkName() {
    this.linkName = null;
  }

  /** Returns true if field linkName is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkName() {
    return this.linkName != null;
  }

  public void setLinkNameIsSet(boolean value) {
    if (!value) {
      this.linkName = null;
    }
  }

  public java.lang.String getLinkImage() {
    return this.linkImage;
  }

  public WordpressLinksDO setLinkImage(java.lang.String linkImage) {
    this.linkImage = linkImage;
    return this;
  }

  public void unsetLinkImage() {
    this.linkImage = null;
  }

  /** Returns true if field linkImage is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkImage() {
    return this.linkImage != null;
  }

  public void setLinkImageIsSet(boolean value) {
    if (!value) {
      this.linkImage = null;
    }
  }

  public java.lang.String getLinkTarget() {
    return this.linkTarget;
  }

  public WordpressLinksDO setLinkTarget(java.lang.String linkTarget) {
    this.linkTarget = linkTarget;
    return this;
  }

  public void unsetLinkTarget() {
    this.linkTarget = null;
  }

  /** Returns true if field linkTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkTarget() {
    return this.linkTarget != null;
  }

  public void setLinkTargetIsSet(boolean value) {
    if (!value) {
      this.linkTarget = null;
    }
  }

  public java.lang.String getLinkDescription() {
    return this.linkDescription;
  }

  public WordpressLinksDO setLinkDescription(java.lang.String linkDescription) {
    this.linkDescription = linkDescription;
    return this;
  }

  public void unsetLinkDescription() {
    this.linkDescription = null;
  }

  /** Returns true if field linkDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkDescription() {
    return this.linkDescription != null;
  }

  public void setLinkDescriptionIsSet(boolean value) {
    if (!value) {
      this.linkDescription = null;
    }
  }

  public java.lang.String getLinkVisible() {
    return this.linkVisible;
  }

  public WordpressLinksDO setLinkVisible(java.lang.String linkVisible) {
    this.linkVisible = linkVisible;
    return this;
  }

  public void unsetLinkVisible() {
    this.linkVisible = null;
  }

  /** Returns true if field linkVisible is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkVisible() {
    return this.linkVisible != null;
  }

  public void setLinkVisibleIsSet(boolean value) {
    if (!value) {
      this.linkVisible = null;
    }
  }

  public int getLinkOwner() {
    return this.linkOwner;
  }

  public WordpressLinksDO setLinkOwner(int linkOwner) {
    this.linkOwner = linkOwner;
    setLinkOwnerIsSet(true);
    return this;
  }

  public void unsetLinkOwner() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKOWNER_ISSET_ID);
  }

  /** Returns true if field linkOwner is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkOwner() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKOWNER_ISSET_ID);
  }

  public void setLinkOwnerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKOWNER_ISSET_ID, value);
  }

  public int getLinkRating() {
    return this.linkRating;
  }

  public WordpressLinksDO setLinkRating(int linkRating) {
    this.linkRating = linkRating;
    setLinkRatingIsSet(true);
    return this;
  }

  public void unsetLinkRating() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKRATING_ISSET_ID);
  }

  /** Returns true if field linkRating is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkRating() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKRATING_ISSET_ID);
  }

  public void setLinkRatingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKRATING_ISSET_ID, value);
  }

  public java.lang.String getLinkUpdated() {
    return this.linkUpdated;
  }

  public WordpressLinksDO setLinkUpdated(java.lang.String linkUpdated) {
    this.linkUpdated = linkUpdated;
    return this;
  }

  public void unsetLinkUpdated() {
    this.linkUpdated = null;
  }

  /** Returns true if field linkUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkUpdated() {
    return this.linkUpdated != null;
  }

  public void setLinkUpdatedIsSet(boolean value) {
    if (!value) {
      this.linkUpdated = null;
    }
  }

  public java.lang.String getLinkRel() {
    return this.linkRel;
  }

  public WordpressLinksDO setLinkRel(java.lang.String linkRel) {
    this.linkRel = linkRel;
    return this;
  }

  public void unsetLinkRel() {
    this.linkRel = null;
  }

  /** Returns true if field linkRel is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkRel() {
    return this.linkRel != null;
  }

  public void setLinkRelIsSet(boolean value) {
    if (!value) {
      this.linkRel = null;
    }
  }

  public java.lang.String getLinkNotes() {
    return this.linkNotes;
  }

  public WordpressLinksDO setLinkNotes(java.lang.String linkNotes) {
    this.linkNotes = linkNotes;
    return this;
  }

  public void unsetLinkNotes() {
    this.linkNotes = null;
  }

  /** Returns true if field linkNotes is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkNotes() {
    return this.linkNotes != null;
  }

  public void setLinkNotesIsSet(boolean value) {
    if (!value) {
      this.linkNotes = null;
    }
  }

  public java.lang.String getLinkRss() {
    return this.linkRss;
  }

  public WordpressLinksDO setLinkRss(java.lang.String linkRss) {
    this.linkRss = linkRss;
    return this;
  }

  public void unsetLinkRss() {
    this.linkRss = null;
  }

  /** Returns true if field linkRss is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkRss() {
    return this.linkRss != null;
  }

  public void setLinkRssIsSet(boolean value) {
    if (!value) {
      this.linkRss = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LINK_ID:
      if (value == null) {
        unsetLinkId();
      } else {
        setLinkId((java.lang.Integer)value);
      }
      break;

    case LINK_URL:
      if (value == null) {
        unsetLinkUrl();
      } else {
        setLinkUrl((java.lang.String)value);
      }
      break;

    case LINK_NAME:
      if (value == null) {
        unsetLinkName();
      } else {
        setLinkName((java.lang.String)value);
      }
      break;

    case LINK_IMAGE:
      if (value == null) {
        unsetLinkImage();
      } else {
        setLinkImage((java.lang.String)value);
      }
      break;

    case LINK_TARGET:
      if (value == null) {
        unsetLinkTarget();
      } else {
        setLinkTarget((java.lang.String)value);
      }
      break;

    case LINK_DESCRIPTION:
      if (value == null) {
        unsetLinkDescription();
      } else {
        setLinkDescription((java.lang.String)value);
      }
      break;

    case LINK_VISIBLE:
      if (value == null) {
        unsetLinkVisible();
      } else {
        setLinkVisible((java.lang.String)value);
      }
      break;

    case LINK_OWNER:
      if (value == null) {
        unsetLinkOwner();
      } else {
        setLinkOwner((java.lang.Integer)value);
      }
      break;

    case LINK_RATING:
      if (value == null) {
        unsetLinkRating();
      } else {
        setLinkRating((java.lang.Integer)value);
      }
      break;

    case LINK_UPDATED:
      if (value == null) {
        unsetLinkUpdated();
      } else {
        setLinkUpdated((java.lang.String)value);
      }
      break;

    case LINK_REL:
      if (value == null) {
        unsetLinkRel();
      } else {
        setLinkRel((java.lang.String)value);
      }
      break;

    case LINK_NOTES:
      if (value == null) {
        unsetLinkNotes();
      } else {
        setLinkNotes((java.lang.String)value);
      }
      break;

    case LINK_RSS:
      if (value == null) {
        unsetLinkRss();
      } else {
        setLinkRss((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LINK_ID:
      return getLinkId();

    case LINK_URL:
      return getLinkUrl();

    case LINK_NAME:
      return getLinkName();

    case LINK_IMAGE:
      return getLinkImage();

    case LINK_TARGET:
      return getLinkTarget();

    case LINK_DESCRIPTION:
      return getLinkDescription();

    case LINK_VISIBLE:
      return getLinkVisible();

    case LINK_OWNER:
      return getLinkOwner();

    case LINK_RATING:
      return getLinkRating();

    case LINK_UPDATED:
      return getLinkUpdated();

    case LINK_REL:
      return getLinkRel();

    case LINK_NOTES:
      return getLinkNotes();

    case LINK_RSS:
      return getLinkRss();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LINK_ID:
      return isSetLinkId();
    case LINK_URL:
      return isSetLinkUrl();
    case LINK_NAME:
      return isSetLinkName();
    case LINK_IMAGE:
      return isSetLinkImage();
    case LINK_TARGET:
      return isSetLinkTarget();
    case LINK_DESCRIPTION:
      return isSetLinkDescription();
    case LINK_VISIBLE:
      return isSetLinkVisible();
    case LINK_OWNER:
      return isSetLinkOwner();
    case LINK_RATING:
      return isSetLinkRating();
    case LINK_UPDATED:
      return isSetLinkUpdated();
    case LINK_REL:
      return isSetLinkRel();
    case LINK_NOTES:
      return isSetLinkNotes();
    case LINK_RSS:
      return isSetLinkRss();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressLinksDO)
      return this.equals((WordpressLinksDO)that);
    return false;
  }

  public boolean equals(WordpressLinksDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_linkId = true && this.isSetLinkId();
    boolean that_present_linkId = true && that.isSetLinkId();
    if (this_present_linkId || that_present_linkId) {
      if (!(this_present_linkId && that_present_linkId))
        return false;
      if (this.linkId != that.linkId)
        return false;
    }

    boolean this_present_linkUrl = true && this.isSetLinkUrl();
    boolean that_present_linkUrl = true && that.isSetLinkUrl();
    if (this_present_linkUrl || that_present_linkUrl) {
      if (!(this_present_linkUrl && that_present_linkUrl))
        return false;
      if (!this.linkUrl.equals(that.linkUrl))
        return false;
    }

    boolean this_present_linkName = true && this.isSetLinkName();
    boolean that_present_linkName = true && that.isSetLinkName();
    if (this_present_linkName || that_present_linkName) {
      if (!(this_present_linkName && that_present_linkName))
        return false;
      if (!this.linkName.equals(that.linkName))
        return false;
    }

    boolean this_present_linkImage = true && this.isSetLinkImage();
    boolean that_present_linkImage = true && that.isSetLinkImage();
    if (this_present_linkImage || that_present_linkImage) {
      if (!(this_present_linkImage && that_present_linkImage))
        return false;
      if (!this.linkImage.equals(that.linkImage))
        return false;
    }

    boolean this_present_linkTarget = true && this.isSetLinkTarget();
    boolean that_present_linkTarget = true && that.isSetLinkTarget();
    if (this_present_linkTarget || that_present_linkTarget) {
      if (!(this_present_linkTarget && that_present_linkTarget))
        return false;
      if (!this.linkTarget.equals(that.linkTarget))
        return false;
    }

    boolean this_present_linkDescription = true && this.isSetLinkDescription();
    boolean that_present_linkDescription = true && that.isSetLinkDescription();
    if (this_present_linkDescription || that_present_linkDescription) {
      if (!(this_present_linkDescription && that_present_linkDescription))
        return false;
      if (!this.linkDescription.equals(that.linkDescription))
        return false;
    }

    boolean this_present_linkVisible = true && this.isSetLinkVisible();
    boolean that_present_linkVisible = true && that.isSetLinkVisible();
    if (this_present_linkVisible || that_present_linkVisible) {
      if (!(this_present_linkVisible && that_present_linkVisible))
        return false;
      if (!this.linkVisible.equals(that.linkVisible))
        return false;
    }

    boolean this_present_linkOwner = true && this.isSetLinkOwner();
    boolean that_present_linkOwner = true && that.isSetLinkOwner();
    if (this_present_linkOwner || that_present_linkOwner) {
      if (!(this_present_linkOwner && that_present_linkOwner))
        return false;
      if (this.linkOwner != that.linkOwner)
        return false;
    }

    boolean this_present_linkRating = true && this.isSetLinkRating();
    boolean that_present_linkRating = true && that.isSetLinkRating();
    if (this_present_linkRating || that_present_linkRating) {
      if (!(this_present_linkRating && that_present_linkRating))
        return false;
      if (this.linkRating != that.linkRating)
        return false;
    }

    boolean this_present_linkUpdated = true && this.isSetLinkUpdated();
    boolean that_present_linkUpdated = true && that.isSetLinkUpdated();
    if (this_present_linkUpdated || that_present_linkUpdated) {
      if (!(this_present_linkUpdated && that_present_linkUpdated))
        return false;
      if (!this.linkUpdated.equals(that.linkUpdated))
        return false;
    }

    boolean this_present_linkRel = true && this.isSetLinkRel();
    boolean that_present_linkRel = true && that.isSetLinkRel();
    if (this_present_linkRel || that_present_linkRel) {
      if (!(this_present_linkRel && that_present_linkRel))
        return false;
      if (!this.linkRel.equals(that.linkRel))
        return false;
    }

    boolean this_present_linkNotes = true && this.isSetLinkNotes();
    boolean that_present_linkNotes = true && that.isSetLinkNotes();
    if (this_present_linkNotes || that_present_linkNotes) {
      if (!(this_present_linkNotes && that_present_linkNotes))
        return false;
      if (!this.linkNotes.equals(that.linkNotes))
        return false;
    }

    boolean this_present_linkRss = true && this.isSetLinkRss();
    boolean that_present_linkRss = true && that.isSetLinkRss();
    if (this_present_linkRss || that_present_linkRss) {
      if (!(this_present_linkRss && that_present_linkRss))
        return false;
      if (!this.linkRss.equals(that.linkRss))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLinkId()) ? 131071 : 524287);
    if (isSetLinkId())
      hashCode = hashCode * 8191 + linkId;

    hashCode = hashCode * 8191 + ((isSetLinkUrl()) ? 131071 : 524287);
    if (isSetLinkUrl())
      hashCode = hashCode * 8191 + linkUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkName()) ? 131071 : 524287);
    if (isSetLinkName())
      hashCode = hashCode * 8191 + linkName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkImage()) ? 131071 : 524287);
    if (isSetLinkImage())
      hashCode = hashCode * 8191 + linkImage.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkTarget()) ? 131071 : 524287);
    if (isSetLinkTarget())
      hashCode = hashCode * 8191 + linkTarget.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkDescription()) ? 131071 : 524287);
    if (isSetLinkDescription())
      hashCode = hashCode * 8191 + linkDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkVisible()) ? 131071 : 524287);
    if (isSetLinkVisible())
      hashCode = hashCode * 8191 + linkVisible.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkOwner()) ? 131071 : 524287);
    if (isSetLinkOwner())
      hashCode = hashCode * 8191 + linkOwner;

    hashCode = hashCode * 8191 + ((isSetLinkRating()) ? 131071 : 524287);
    if (isSetLinkRating())
      hashCode = hashCode * 8191 + linkRating;

    hashCode = hashCode * 8191 + ((isSetLinkUpdated()) ? 131071 : 524287);
    if (isSetLinkUpdated())
      hashCode = hashCode * 8191 + linkUpdated.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkRel()) ? 131071 : 524287);
    if (isSetLinkRel())
      hashCode = hashCode * 8191 + linkRel.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkNotes()) ? 131071 : 524287);
    if (isSetLinkNotes())
      hashCode = hashCode * 8191 + linkNotes.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkRss()) ? 131071 : 524287);
    if (isSetLinkRss())
      hashCode = hashCode * 8191 + linkRss.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WordpressLinksDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLinkId()).compareTo(other.isSetLinkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, other.linkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkUrl()).compareTo(other.isSetLinkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, other.linkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkName()).compareTo(other.isSetLinkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkName, other.linkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkImage()).compareTo(other.isSetLinkImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkImage, other.linkImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkTarget()).compareTo(other.isSetLinkTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkTarget, other.linkTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkDescription()).compareTo(other.isSetLinkDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkDescription, other.linkDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkVisible()).compareTo(other.isSetLinkVisible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkVisible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkVisible, other.linkVisible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkOwner()).compareTo(other.isSetLinkOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkOwner, other.linkOwner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkRating()).compareTo(other.isSetLinkRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkRating, other.linkRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkUpdated()).compareTo(other.isSetLinkUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUpdated, other.linkUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkRel()).compareTo(other.isSetLinkRel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkRel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkRel, other.linkRel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkNotes()).compareTo(other.isSetLinkNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkNotes, other.linkNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkRss()).compareTo(other.isSetLinkRss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkRss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkRss, other.linkRss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WordpressLinksDO(");
    boolean first = true;

    if (isSetLinkId()) {
      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
    }
    if (isSetLinkUrl()) {
      if (!first) sb.append(", ");
      sb.append("linkUrl:");
      if (this.linkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUrl);
      }
      first = false;
    }
    if (isSetLinkName()) {
      if (!first) sb.append(", ");
      sb.append("linkName:");
      if (this.linkName == null) {
        sb.append("null");
      } else {
        sb.append(this.linkName);
      }
      first = false;
    }
    if (isSetLinkImage()) {
      if (!first) sb.append(", ");
      sb.append("linkImage:");
      if (this.linkImage == null) {
        sb.append("null");
      } else {
        sb.append(this.linkImage);
      }
      first = false;
    }
    if (isSetLinkTarget()) {
      if (!first) sb.append(", ");
      sb.append("linkTarget:");
      if (this.linkTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.linkTarget);
      }
      first = false;
    }
    if (isSetLinkDescription()) {
      if (!first) sb.append(", ");
      sb.append("linkDescription:");
      if (this.linkDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.linkDescription);
      }
      first = false;
    }
    if (isSetLinkVisible()) {
      if (!first) sb.append(", ");
      sb.append("linkVisible:");
      if (this.linkVisible == null) {
        sb.append("null");
      } else {
        sb.append(this.linkVisible);
      }
      first = false;
    }
    if (isSetLinkOwner()) {
      if (!first) sb.append(", ");
      sb.append("linkOwner:");
      sb.append(this.linkOwner);
      first = false;
    }
    if (isSetLinkRating()) {
      if (!first) sb.append(", ");
      sb.append("linkRating:");
      sb.append(this.linkRating);
      first = false;
    }
    if (isSetLinkUpdated()) {
      if (!first) sb.append(", ");
      sb.append("linkUpdated:");
      if (this.linkUpdated == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUpdated);
      }
      first = false;
    }
    if (isSetLinkRel()) {
      if (!first) sb.append(", ");
      sb.append("linkRel:");
      if (this.linkRel == null) {
        sb.append("null");
      } else {
        sb.append(this.linkRel);
      }
      first = false;
    }
    if (isSetLinkNotes()) {
      if (!first) sb.append(", ");
      sb.append("linkNotes:");
      if (this.linkNotes == null) {
        sb.append("null");
      } else {
        sb.append(this.linkNotes);
      }
      first = false;
    }
    if (isSetLinkRss()) {
      if (!first) sb.append(", ");
      sb.append("linkRss:");
      if (this.linkRss == null) {
        sb.append("null");
      } else {
        sb.append(this.linkRss);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressLinksDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressLinksDOStandardScheme getScheme() {
      return new WordpressLinksDOStandardScheme();
    }
  }

  private static class WordpressLinksDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WordpressLinksDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressLinksDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.linkId = iprot.readI32();
              struct.setLinkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkUrl = iprot.readString();
              struct.setLinkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LINK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkName = iprot.readString();
              struct.setLinkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINK_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkImage = iprot.readString();
              struct.setLinkImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LINK_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkTarget = iprot.readString();
              struct.setLinkTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINK_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkDescription = iprot.readString();
              struct.setLinkDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINK_VISIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkVisible = iprot.readString();
              struct.setLinkVisibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LINK_OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.linkOwner = iprot.readI32();
              struct.setLinkOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LINK_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.linkRating = iprot.readI32();
              struct.setLinkRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LINK_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkUpdated = iprot.readString();
              struct.setLinkUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LINK_REL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkRel = iprot.readString();
              struct.setLinkRelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LINK_NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkNotes = iprot.readString();
              struct.setLinkNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LINK_RSS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkRss = iprot.readString();
              struct.setLinkRssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressLinksDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLinkId()) {
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI32(struct.linkId);
        oprot.writeFieldEnd();
      }
      if (struct.linkUrl != null) {
        if (struct.isSetLinkUrl()) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.linkUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkName != null) {
        if (struct.isSetLinkName()) {
          oprot.writeFieldBegin(LINK_NAME_FIELD_DESC);
          oprot.writeString(struct.linkName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkImage != null) {
        if (struct.isSetLinkImage()) {
          oprot.writeFieldBegin(LINK_IMAGE_FIELD_DESC);
          oprot.writeString(struct.linkImage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkTarget != null) {
        if (struct.isSetLinkTarget()) {
          oprot.writeFieldBegin(LINK_TARGET_FIELD_DESC);
          oprot.writeString(struct.linkTarget);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkDescription != null) {
        if (struct.isSetLinkDescription()) {
          oprot.writeFieldBegin(LINK_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.linkDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkVisible != null) {
        if (struct.isSetLinkVisible()) {
          oprot.writeFieldBegin(LINK_VISIBLE_FIELD_DESC);
          oprot.writeString(struct.linkVisible);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLinkOwner()) {
        oprot.writeFieldBegin(LINK_OWNER_FIELD_DESC);
        oprot.writeI32(struct.linkOwner);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLinkRating()) {
        oprot.writeFieldBegin(LINK_RATING_FIELD_DESC);
        oprot.writeI32(struct.linkRating);
        oprot.writeFieldEnd();
      }
      if (struct.linkUpdated != null) {
        if (struct.isSetLinkUpdated()) {
          oprot.writeFieldBegin(LINK_UPDATED_FIELD_DESC);
          oprot.writeString(struct.linkUpdated);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkRel != null) {
        if (struct.isSetLinkRel()) {
          oprot.writeFieldBegin(LINK_REL_FIELD_DESC);
          oprot.writeString(struct.linkRel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkNotes != null) {
        if (struct.isSetLinkNotes()) {
          oprot.writeFieldBegin(LINK_NOTES_FIELD_DESC);
          oprot.writeString(struct.linkNotes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkRss != null) {
        if (struct.isSetLinkRss()) {
          oprot.writeFieldBegin(LINK_RSS_FIELD_DESC);
          oprot.writeString(struct.linkRss);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressLinksDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressLinksDOTupleScheme getScheme() {
      return new WordpressLinksDOTupleScheme();
    }
  }

  private static class WordpressLinksDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WordpressLinksDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressLinksDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLinkId()) {
        optionals.set(0);
      }
      if (struct.isSetLinkUrl()) {
        optionals.set(1);
      }
      if (struct.isSetLinkName()) {
        optionals.set(2);
      }
      if (struct.isSetLinkImage()) {
        optionals.set(3);
      }
      if (struct.isSetLinkTarget()) {
        optionals.set(4);
      }
      if (struct.isSetLinkDescription()) {
        optionals.set(5);
      }
      if (struct.isSetLinkVisible()) {
        optionals.set(6);
      }
      if (struct.isSetLinkOwner()) {
        optionals.set(7);
      }
      if (struct.isSetLinkRating()) {
        optionals.set(8);
      }
      if (struct.isSetLinkUpdated()) {
        optionals.set(9);
      }
      if (struct.isSetLinkRel()) {
        optionals.set(10);
      }
      if (struct.isSetLinkNotes()) {
        optionals.set(11);
      }
      if (struct.isSetLinkRss()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetLinkId()) {
        oprot.writeI32(struct.linkId);
      }
      if (struct.isSetLinkUrl()) {
        oprot.writeString(struct.linkUrl);
      }
      if (struct.isSetLinkName()) {
        oprot.writeString(struct.linkName);
      }
      if (struct.isSetLinkImage()) {
        oprot.writeString(struct.linkImage);
      }
      if (struct.isSetLinkTarget()) {
        oprot.writeString(struct.linkTarget);
      }
      if (struct.isSetLinkDescription()) {
        oprot.writeString(struct.linkDescription);
      }
      if (struct.isSetLinkVisible()) {
        oprot.writeString(struct.linkVisible);
      }
      if (struct.isSetLinkOwner()) {
        oprot.writeI32(struct.linkOwner);
      }
      if (struct.isSetLinkRating()) {
        oprot.writeI32(struct.linkRating);
      }
      if (struct.isSetLinkUpdated()) {
        oprot.writeString(struct.linkUpdated);
      }
      if (struct.isSetLinkRel()) {
        oprot.writeString(struct.linkRel);
      }
      if (struct.isSetLinkNotes()) {
        oprot.writeString(struct.linkNotes);
      }
      if (struct.isSetLinkRss()) {
        oprot.writeString(struct.linkRss);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressLinksDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.linkId = iprot.readI32();
        struct.setLinkIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.linkUrl = iprot.readString();
        struct.setLinkUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.linkName = iprot.readString();
        struct.setLinkNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.linkImage = iprot.readString();
        struct.setLinkImageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.linkTarget = iprot.readString();
        struct.setLinkTargetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.linkDescription = iprot.readString();
        struct.setLinkDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.linkVisible = iprot.readString();
        struct.setLinkVisibleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.linkOwner = iprot.readI32();
        struct.setLinkOwnerIsSet(true);
      }
      if (incoming.get(8)) {
        struct.linkRating = iprot.readI32();
        struct.setLinkRatingIsSet(true);
      }
      if (incoming.get(9)) {
        struct.linkUpdated = iprot.readString();
        struct.setLinkUpdatedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.linkRel = iprot.readString();
        struct.setLinkRelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.linkNotes = iprot.readString();
        struct.setLinkNotesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.linkRss = iprot.readString();
        struct.setLinkRssIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

