/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ProfileProjectexpDO implements org.apache.thrift.TBase<ProfileProjectexpDO, ProfileProjectexpDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileProjectexpDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileProjectexpDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_UNTIL_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("endUntilNow", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_IT_FIELD_DESC = new org.apache.thrift.protocol.TField("isIt", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField DEV_TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("devTool", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HARDWARE_FIELD_DESC = new org.apache.thrift.protocol.TField("hardware", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SOFTWARE_FIELD_DESC = new org.apache.thrift.protocol.TField("software", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RESPONSIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("responsibility", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ACHIEVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("achievement", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileProjectexpDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileProjectexpDOTupleSchemeFactory();

  public int id; // optional
  public int profileId; // optional
  public String startTime; // optional
  public String endTime; // optional
  public byte endUntilNow; // optional
  public String name; // optional
  public String companyName; // optional
  public byte isIt; // optional
  public String devTool; // optional
  public String hardware; // optional
  public String software; // optional
  public String url; // optional
  public String description; // optional
  public String role; // optional
  public String responsibility; // optional
  public String achievement; // optional
  public String member; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profileId"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    END_UNTIL_NOW((short)5, "endUntilNow"),
    NAME((short)6, "name"),
    COMPANY_NAME((short)7, "companyName"),
    IS_IT((short)8, "isIt"),
    DEV_TOOL((short)9, "devTool"),
    HARDWARE((short)10, "hardware"),
    SOFTWARE((short)11, "software"),
    URL((short)12, "url"),
    DESCRIPTION((short)13, "description"),
    ROLE((short)14, "role"),
    RESPONSIBILITY((short)15, "responsibility"),
    ACHIEVEMENT((short)16, "achievement"),
    MEMBER((short)17, "member"),
    CREATE_TIME((short)18, "createTime"),
    UPDATE_TIME((short)19, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // END_UNTIL_NOW
          return END_UNTIL_NOW;
        case 6: // NAME
          return NAME;
        case 7: // COMPANY_NAME
          return COMPANY_NAME;
        case 8: // IS_IT
          return IS_IT;
        case 9: // DEV_TOOL
          return DEV_TOOL;
        case 10: // HARDWARE
          return HARDWARE;
        case 11: // SOFTWARE
          return SOFTWARE;
        case 12: // URL
          return URL;
        case 13: // DESCRIPTION
          return DESCRIPTION;
        case 14: // ROLE
          return ROLE;
        case 15: // RESPONSIBILITY
          return RESPONSIBILITY;
        case 16: // ACHIEVEMENT
          return ACHIEVEMENT;
        case 17: // MEMBER
          return MEMBER;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILEID_ISSET_ID = 1;
  private static final int __ENDUNTILNOW_ISSET_ID = 2;
  private static final int __ISIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_ID,_Fields.START_TIME,_Fields.END_TIME,_Fields.END_UNTIL_NOW,_Fields.NAME,_Fields.COMPANY_NAME,_Fields.IS_IT,_Fields.DEV_TOOL,_Fields.HARDWARE,_Fields.SOFTWARE,_Fields.URL,_Fields.DESCRIPTION,_Fields.ROLE,_Fields.RESPONSIBILITY,_Fields.ACHIEVEMENT,_Fields.MEMBER,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_UNTIL_NOW, new org.apache.thrift.meta_data.FieldMetaData("endUntilNow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_IT, new org.apache.thrift.meta_data.FieldMetaData("isIt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DEV_TOOL, new org.apache.thrift.meta_data.FieldMetaData("devTool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HARDWARE, new org.apache.thrift.meta_data.FieldMetaData("hardware", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOFTWARE, new org.apache.thrift.meta_data.FieldMetaData("software", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSIBILITY, new org.apache.thrift.meta_data.FieldMetaData("responsibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACHIEVEMENT, new org.apache.thrift.meta_data.FieldMetaData("achievement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileProjectexpDO.class, metaDataMap);
  }

  public ProfileProjectexpDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileProjectexpDO(ProfileProjectexpDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profileId = other.profileId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.endUntilNow = other.endUntilNow;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    this.isIt = other.isIt;
    if (other.isSetDevTool()) {
      this.devTool = other.devTool;
    }
    if (other.isSetHardware()) {
      this.hardware = other.hardware;
    }
    if (other.isSetSoftware()) {
      this.software = other.software;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetResponsibility()) {
      this.responsibility = other.responsibility;
    }
    if (other.isSetAchievement()) {
      this.achievement = other.achievement;
    }
    if (other.isSetMember()) {
      this.member = other.member;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public ProfileProjectexpDO deepCopy() {
    return new ProfileProjectexpDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfileIdIsSet(false);
    this.profileId = 0;
    this.startTime = null;
    this.endTime = null;
    setEndUntilNowIsSet(false);
    this.endUntilNow = 0;
    this.name = null;
    this.companyName = null;
    setIsItIsSet(false);
    this.isIt = 0;
    this.devTool = null;
    this.hardware = null;
    this.software = null;
    this.url = null;
    this.description = null;
    this.role = null;
    this.responsibility = null;
    this.achievement = null;
    this.member = null;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public ProfileProjectexpDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfileId() {
    return this.profileId;
  }

  public ProfileProjectexpDO setProfileId(int profileId) {
    this.profileId = profileId;
    setProfileIdIsSet(true);
    return this;
  }

  public void unsetProfileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  public void setProfileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ProfileProjectexpDO setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ProfileProjectexpDO setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public byte getEndUntilNow() {
    return this.endUntilNow;
  }

  public ProfileProjectexpDO setEndUntilNow(byte endUntilNow) {
    this.endUntilNow = endUntilNow;
    setEndUntilNowIsSet(true);
    return this;
  }

  public void unsetEndUntilNow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  /** Returns true if field endUntilNow is set (has been assigned a value) and false otherwise */
  public boolean isSetEndUntilNow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  public void setEndUntilNowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ProfileProjectexpDO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public ProfileProjectexpDO setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public byte getIsIt() {
    return this.isIt;
  }

  public ProfileProjectexpDO setIsIt(byte isIt) {
    this.isIt = isIt;
    setIsItIsSet(true);
    return this;
  }

  public void unsetIsIt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISIT_ISSET_ID);
  }

  /** Returns true if field isIt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsIt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISIT_ISSET_ID);
  }

  public void setIsItIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISIT_ISSET_ID, value);
  }

  public String getDevTool() {
    return this.devTool;
  }

  public ProfileProjectexpDO setDevTool(String devTool) {
    this.devTool = devTool;
    return this;
  }

  public void unsetDevTool() {
    this.devTool = null;
  }

  /** Returns true if field devTool is set (has been assigned a value) and false otherwise */
  public boolean isSetDevTool() {
    return this.devTool != null;
  }

  public void setDevToolIsSet(boolean value) {
    if (!value) {
      this.devTool = null;
    }
  }

  public String getHardware() {
    return this.hardware;
  }

  public ProfileProjectexpDO setHardware(String hardware) {
    this.hardware = hardware;
    return this;
  }

  public void unsetHardware() {
    this.hardware = null;
  }

  /** Returns true if field hardware is set (has been assigned a value) and false otherwise */
  public boolean isSetHardware() {
    return this.hardware != null;
  }

  public void setHardwareIsSet(boolean value) {
    if (!value) {
      this.hardware = null;
    }
  }

  public String getSoftware() {
    return this.software;
  }

  public ProfileProjectexpDO setSoftware(String software) {
    this.software = software;
    return this;
  }

  public void unsetSoftware() {
    this.software = null;
  }

  /** Returns true if field software is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftware() {
    return this.software != null;
  }

  public void setSoftwareIsSet(boolean value) {
    if (!value) {
      this.software = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public ProfileProjectexpDO setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ProfileProjectexpDO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getRole() {
    return this.role;
  }

  public ProfileProjectexpDO setRole(String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public String getResponsibility() {
    return this.responsibility;
  }

  public ProfileProjectexpDO setResponsibility(String responsibility) {
    this.responsibility = responsibility;
    return this;
  }

  public void unsetResponsibility() {
    this.responsibility = null;
  }

  /** Returns true if field responsibility is set (has been assigned a value) and false otherwise */
  public boolean isSetResponsibility() {
    return this.responsibility != null;
  }

  public void setResponsibilityIsSet(boolean value) {
    if (!value) {
      this.responsibility = null;
    }
  }

  public String getAchievement() {
    return this.achievement;
  }

  public ProfileProjectexpDO setAchievement(String achievement) {
    this.achievement = achievement;
    return this;
  }

  public void unsetAchievement() {
    this.achievement = null;
  }

  /** Returns true if field achievement is set (has been assigned a value) and false otherwise */
  public boolean isSetAchievement() {
    return this.achievement != null;
  }

  public void setAchievementIsSet(boolean value) {
    if (!value) {
      this.achievement = null;
    }
  }

  public String getMember() {
    return this.member;
  }

  public ProfileProjectexpDO setMember(String member) {
    this.member = member;
    return this;
  }

  public void unsetMember() {
    this.member = null;
  }

  /** Returns true if field member is set (has been assigned a value) and false otherwise */
  public boolean isSetMember() {
    return this.member != null;
  }

  public void setMemberIsSet(boolean value) {
    if (!value) {
      this.member = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProfileProjectexpDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProfileProjectexpDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case END_UNTIL_NOW:
      if (value == null) {
        unsetEndUntilNow();
      } else {
        setEndUntilNow((Byte)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case IS_IT:
      if (value == null) {
        unsetIsIt();
      } else {
        setIsIt((Byte)value);
      }
      break;

    case DEV_TOOL:
      if (value == null) {
        unsetDevTool();
      } else {
        setDevTool((String)value);
      }
      break;

    case HARDWARE:
      if (value == null) {
        unsetHardware();
      } else {
        setHardware((String)value);
      }
      break;

    case SOFTWARE:
      if (value == null) {
        unsetSoftware();
      } else {
        setSoftware((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((String)value);
      }
      break;

    case RESPONSIBILITY:
      if (value == null) {
        unsetResponsibility();
      } else {
        setResponsibility((String)value);
      }
      break;

    case ACHIEVEMENT:
      if (value == null) {
        unsetAchievement();
      } else {
        setAchievement((String)value);
      }
      break;

    case MEMBER:
      if (value == null) {
        unsetMember();
      } else {
        setMember((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_ID:
      return getProfileId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case END_UNTIL_NOW:
      return getEndUntilNow();

    case NAME:
      return getName();

    case COMPANY_NAME:
      return getCompanyName();

    case IS_IT:
      return getIsIt();

    case DEV_TOOL:
      return getDevTool();

    case HARDWARE:
      return getHardware();

    case SOFTWARE:
      return getSoftware();

    case URL:
      return getUrl();

    case DESCRIPTION:
      return getDescription();

    case ROLE:
      return getRole();

    case RESPONSIBILITY:
      return getResponsibility();

    case ACHIEVEMENT:
      return getAchievement();

    case MEMBER:
      return getMember();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfileId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case END_UNTIL_NOW:
      return isSetEndUntilNow();
    case NAME:
      return isSetName();
    case COMPANY_NAME:
      return isSetCompanyName();
    case IS_IT:
      return isSetIsIt();
    case DEV_TOOL:
      return isSetDevTool();
    case HARDWARE:
      return isSetHardware();
    case SOFTWARE:
      return isSetSoftware();
    case URL:
      return isSetUrl();
    case DESCRIPTION:
      return isSetDescription();
    case ROLE:
      return isSetRole();
    case RESPONSIBILITY:
      return isSetResponsibility();
    case ACHIEVEMENT:
      return isSetAchievement();
    case MEMBER:
      return isSetMember();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileProjectexpDO)
      return this.equals((ProfileProjectexpDO)that);
    return false;
  }

  public boolean equals(ProfileProjectexpDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (this.profileId != that.profileId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_endUntilNow = true && this.isSetEndUntilNow();
    boolean that_present_endUntilNow = true && that.isSetEndUntilNow();
    if (this_present_endUntilNow || that_present_endUntilNow) {
      if (!(this_present_endUntilNow && that_present_endUntilNow))
        return false;
      if (this.endUntilNow != that.endUntilNow)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_isIt = true && this.isSetIsIt();
    boolean that_present_isIt = true && that.isSetIsIt();
    if (this_present_isIt || that_present_isIt) {
      if (!(this_present_isIt && that_present_isIt))
        return false;
      if (this.isIt != that.isIt)
        return false;
    }

    boolean this_present_devTool = true && this.isSetDevTool();
    boolean that_present_devTool = true && that.isSetDevTool();
    if (this_present_devTool || that_present_devTool) {
      if (!(this_present_devTool && that_present_devTool))
        return false;
      if (!this.devTool.equals(that.devTool))
        return false;
    }

    boolean this_present_hardware = true && this.isSetHardware();
    boolean that_present_hardware = true && that.isSetHardware();
    if (this_present_hardware || that_present_hardware) {
      if (!(this_present_hardware && that_present_hardware))
        return false;
      if (!this.hardware.equals(that.hardware))
        return false;
    }

    boolean this_present_software = true && this.isSetSoftware();
    boolean that_present_software = true && that.isSetSoftware();
    if (this_present_software || that_present_software) {
      if (!(this_present_software && that_present_software))
        return false;
      if (!this.software.equals(that.software))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_responsibility = true && this.isSetResponsibility();
    boolean that_present_responsibility = true && that.isSetResponsibility();
    if (this_present_responsibility || that_present_responsibility) {
      if (!(this_present_responsibility && that_present_responsibility))
        return false;
      if (!this.responsibility.equals(that.responsibility))
        return false;
    }

    boolean this_present_achievement = true && this.isSetAchievement();
    boolean that_present_achievement = true && that.isSetAchievement();
    if (this_present_achievement || that_present_achievement) {
      if (!(this_present_achievement && that_present_achievement))
        return false;
      if (!this.achievement.equals(that.achievement))
        return false;
    }

    boolean this_present_member = true && this.isSetMember();
    boolean that_present_member = true && that.isSetMember();
    if (this_present_member || that_present_member) {
      if (!(this_present_member && that_present_member))
        return false;
      if (!this.member.equals(that.member))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId;

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndUntilNow()) ? 131071 : 524287);
    if (isSetEndUntilNow())
      hashCode = hashCode * 8191 + (int) (endUntilNow);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyName()) ? 131071 : 524287);
    if (isSetCompanyName())
      hashCode = hashCode * 8191 + companyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsIt()) ? 131071 : 524287);
    if (isSetIsIt())
      hashCode = hashCode * 8191 + (int) (isIt);

    hashCode = hashCode * 8191 + ((isSetDevTool()) ? 131071 : 524287);
    if (isSetDevTool())
      hashCode = hashCode * 8191 + devTool.hashCode();

    hashCode = hashCode * 8191 + ((isSetHardware()) ? 131071 : 524287);
    if (isSetHardware())
      hashCode = hashCode * 8191 + hardware.hashCode();

    hashCode = hashCode * 8191 + ((isSetSoftware()) ? 131071 : 524287);
    if (isSetSoftware())
      hashCode = hashCode * 8191 + software.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
    if (isSetRole())
      hashCode = hashCode * 8191 + role.hashCode();

    hashCode = hashCode * 8191 + ((isSetResponsibility()) ? 131071 : 524287);
    if (isSetResponsibility())
      hashCode = hashCode * 8191 + responsibility.hashCode();

    hashCode = hashCode * 8191 + ((isSetAchievement()) ? 131071 : 524287);
    if (isSetAchievement())
      hashCode = hashCode * 8191 + achievement.hashCode();

    hashCode = hashCode * 8191 + ((isSetMember()) ? 131071 : 524287);
    if (isSetMember())
      hashCode = hashCode * 8191 + member.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileProjectexpDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndUntilNow()).compareTo(other.isSetEndUntilNow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndUntilNow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endUntilNow, other.endUntilNow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsIt()).compareTo(other.isSetIsIt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsIt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isIt, other.isIt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevTool()).compareTo(other.isSetDevTool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevTool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devTool, other.devTool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHardware()).compareTo(other.isSetHardware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardware()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardware, other.hardware);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoftware()).compareTo(other.isSetSoftware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftware()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.software, other.software);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponsibility()).compareTo(other.isSetResponsibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponsibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responsibility, other.responsibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAchievement()).compareTo(other.isSetAchievement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchievement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achievement, other.achievement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileProjectexpDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfileId()) {
      if (!first) sb.append(", ");
      sb.append("profileId:");
      sb.append(this.profileId);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetEndUntilNow()) {
      if (!first) sb.append(", ");
      sb.append("endUntilNow:");
      sb.append(this.endUntilNow);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetCompanyName()) {
      if (!first) sb.append(", ");
      sb.append("companyName:");
      if (this.companyName == null) {
        sb.append("null");
      } else {
        sb.append(this.companyName);
      }
      first = false;
    }
    if (isSetIsIt()) {
      if (!first) sb.append(", ");
      sb.append("isIt:");
      sb.append(this.isIt);
      first = false;
    }
    if (isSetDevTool()) {
      if (!first) sb.append(", ");
      sb.append("devTool:");
      if (this.devTool == null) {
        sb.append("null");
      } else {
        sb.append(this.devTool);
      }
      first = false;
    }
    if (isSetHardware()) {
      if (!first) sb.append(", ");
      sb.append("hardware:");
      if (this.hardware == null) {
        sb.append("null");
      } else {
        sb.append(this.hardware);
      }
      first = false;
    }
    if (isSetSoftware()) {
      if (!first) sb.append(", ");
      sb.append("software:");
      if (this.software == null) {
        sb.append("null");
      } else {
        sb.append(this.software);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetResponsibility()) {
      if (!first) sb.append(", ");
      sb.append("responsibility:");
      if (this.responsibility == null) {
        sb.append("null");
      } else {
        sb.append(this.responsibility);
      }
      first = false;
    }
    if (isSetAchievement()) {
      if (!first) sb.append(", ");
      sb.append("achievement:");
      if (this.achievement == null) {
        sb.append("null");
      } else {
        sb.append(this.achievement);
      }
      first = false;
    }
    if (isSetMember()) {
      if (!first) sb.append(", ");
      sb.append("member:");
      if (this.member == null) {
        sb.append("null");
      } else {
        sb.append(this.member);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileProjectexpDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileProjectexpDOStandardScheme getScheme() {
      return new ProfileProjectexpDOStandardScheme();
    }
  }

  private static class ProfileProjectexpDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileProjectexpDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileProjectexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileId = iprot.readI32();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_UNTIL_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.endUntilNow = iprot.readByte();
              struct.setEndUntilNowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_IT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isIt = iprot.readByte();
              struct.setIsItIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEV_TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.devTool = iprot.readString();
              struct.setDevToolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HARDWARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hardware = iprot.readString();
              struct.setHardwareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOFTWARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.software = iprot.readString();
              struct.setSoftwareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RESPONSIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responsibility = iprot.readString();
              struct.setResponsibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ACHIEVEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.achievement = iprot.readString();
              struct.setAchievementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member = iprot.readString();
              struct.setMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileProjectexpDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfileId()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeFieldBegin(END_UNTIL_NOW_FIELD_DESC);
        oprot.writeByte(struct.endUntilNow);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyName != null) {
        if (struct.isSetCompanyName()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.companyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsIt()) {
        oprot.writeFieldBegin(IS_IT_FIELD_DESC);
        oprot.writeByte(struct.isIt);
        oprot.writeFieldEnd();
      }
      if (struct.devTool != null) {
        if (struct.isSetDevTool()) {
          oprot.writeFieldBegin(DEV_TOOL_FIELD_DESC);
          oprot.writeString(struct.devTool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hardware != null) {
        if (struct.isSetHardware()) {
          oprot.writeFieldBegin(HARDWARE_FIELD_DESC);
          oprot.writeString(struct.hardware);
          oprot.writeFieldEnd();
        }
      }
      if (struct.software != null) {
        if (struct.isSetSoftware()) {
          oprot.writeFieldBegin(SOFTWARE_FIELD_DESC);
          oprot.writeString(struct.software);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
      }
      if (struct.responsibility != null) {
        if (struct.isSetResponsibility()) {
          oprot.writeFieldBegin(RESPONSIBILITY_FIELD_DESC);
          oprot.writeString(struct.responsibility);
          oprot.writeFieldEnd();
        }
      }
      if (struct.achievement != null) {
        if (struct.isSetAchievement()) {
          oprot.writeFieldBegin(ACHIEVEMENT_FIELD_DESC);
          oprot.writeString(struct.achievement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.member != null) {
        if (struct.isSetMember()) {
          oprot.writeFieldBegin(MEMBER_FIELD_DESC);
          oprot.writeString(struct.member);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileProjectexpDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileProjectexpDOTupleScheme getScheme() {
      return new ProfileProjectexpDOTupleScheme();
    }
  }

  private static class ProfileProjectexpDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileProjectexpDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileProjectexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfileId()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndUntilNow()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(6);
      }
      if (struct.isSetIsIt()) {
        optionals.set(7);
      }
      if (struct.isSetDevTool()) {
        optionals.set(8);
      }
      if (struct.isSetHardware()) {
        optionals.set(9);
      }
      if (struct.isSetSoftware()) {
        optionals.set(10);
      }
      if (struct.isSetUrl()) {
        optionals.set(11);
      }
      if (struct.isSetDescription()) {
        optionals.set(12);
      }
      if (struct.isSetRole()) {
        optionals.set(13);
      }
      if (struct.isSetResponsibility()) {
        optionals.set(14);
      }
      if (struct.isSetAchievement()) {
        optionals.set(15);
      }
      if (struct.isSetMember()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(17);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfileId()) {
        oprot.writeI32(struct.profileId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeByte(struct.endUntilNow);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetIsIt()) {
        oprot.writeByte(struct.isIt);
      }
      if (struct.isSetDevTool()) {
        oprot.writeString(struct.devTool);
      }
      if (struct.isSetHardware()) {
        oprot.writeString(struct.hardware);
      }
      if (struct.isSetSoftware()) {
        oprot.writeString(struct.software);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetResponsibility()) {
        oprot.writeString(struct.responsibility);
      }
      if (struct.isSetAchievement()) {
        oprot.writeString(struct.achievement);
      }
      if (struct.isSetMember()) {
        oprot.writeString(struct.member);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileProjectexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileId = iprot.readI32();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endUntilNow = iprot.readByte();
        struct.setEndUntilNowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isIt = iprot.readByte();
        struct.setIsItIsSet(true);
      }
      if (incoming.get(8)) {
        struct.devTool = iprot.readString();
        struct.setDevToolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hardware = iprot.readString();
        struct.setHardwareIsSet(true);
      }
      if (incoming.get(10)) {
        struct.software = iprot.readString();
        struct.setSoftwareIsSet(true);
      }
      if (incoming.get(11)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.responsibility = iprot.readString();
        struct.setResponsibilityIsSet(true);
      }
      if (incoming.get(15)) {
        struct.achievement = iprot.readString();
        struct.setAchievementIsSet(true);
      }
      if (incoming.get(16)) {
        struct.member = iprot.readString();
        struct.setMemberIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

