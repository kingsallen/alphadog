/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-13")
public class CandidatePositionDTO implements org.apache.thrift.TBase<CandidatePositionDTO, CandidatePositionDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CandidatePositionDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CandidatePositionDTO");

  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_INTERESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isInterested", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CANDIDATE_COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateCompanyId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SHARED_FROM_EMPLOYEE_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedFromEmployee", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CandidatePositionDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CandidatePositionDTOTupleSchemeFactory();

  public int positionId; // optional
  public int userId; // optional
  public java.lang.String updateTime; // optional
  public boolean isInterested; // optional
  public int candidateCompanyId; // optional
  public int viewNumber; // optional
  public boolean sharedFromEmployee; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POSITION_ID((short)1, "positionId"),
    USER_ID((short)2, "userId"),
    UPDATE_TIME((short)3, "updateTime"),
    IS_INTERESTED((short)4, "isInterested"),
    CANDIDATE_COMPANY_ID((short)5, "candidateCompanyId"),
    VIEW_NUMBER((short)6, "viewNumber"),
    SHARED_FROM_EMPLOYEE((short)7, "sharedFromEmployee");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSITION_ID
          return POSITION_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // UPDATE_TIME
          return UPDATE_TIME;
        case 4: // IS_INTERESTED
          return IS_INTERESTED;
        case 5: // CANDIDATE_COMPANY_ID
          return CANDIDATE_COMPANY_ID;
        case 6: // VIEW_NUMBER
          return VIEW_NUMBER;
        case 7: // SHARED_FROM_EMPLOYEE
          return SHARED_FROM_EMPLOYEE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITIONID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ISINTERESTED_ISSET_ID = 2;
  private static final int __CANDIDATECOMPANYID_ISSET_ID = 3;
  private static final int __VIEWNUMBER_ISSET_ID = 4;
  private static final int __SHAREDFROMEMPLOYEE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POSITION_ID,_Fields.USER_ID,_Fields.UPDATE_TIME,_Fields.IS_INTERESTED,_Fields.CANDIDATE_COMPANY_ID,_Fields.VIEW_NUMBER,_Fields.SHARED_FROM_EMPLOYEE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.IS_INTERESTED, new org.apache.thrift.meta_data.FieldMetaData("isInterested", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CANDIDATE_COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("candidateCompanyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARED_FROM_EMPLOYEE, new org.apache.thrift.meta_data.FieldMetaData("sharedFromEmployee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CandidatePositionDTO.class, metaDataMap);
  }

  public CandidatePositionDTO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CandidatePositionDTO(CandidatePositionDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.positionId = other.positionId;
    this.userId = other.userId;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.isInterested = other.isInterested;
    this.candidateCompanyId = other.candidateCompanyId;
    this.viewNumber = other.viewNumber;
    this.sharedFromEmployee = other.sharedFromEmployee;
  }

  public CandidatePositionDTO deepCopy() {
    return new CandidatePositionDTO(this);
  }

  @Override
  public void clear() {
    setPositionIdIsSet(false);
    this.positionId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.updateTime = null;
    setIsInterestedIsSet(false);
    this.isInterested = false;
    setCandidateCompanyIdIsSet(false);
    this.candidateCompanyId = 0;
    setViewNumberIsSet(false);
    this.viewNumber = 0;
    setSharedFromEmployeeIsSet(false);
    this.sharedFromEmployee = false;
  }

  public int getPositionId() {
    return this.positionId;
  }

  public CandidatePositionDTO setPositionId(int positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CandidatePositionDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public CandidatePositionDTO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public boolean isIsInterested() {
    return this.isInterested;
  }

  public CandidatePositionDTO setIsInterested(boolean isInterested) {
    this.isInterested = isInterested;
    setIsInterestedIsSet(true);
    return this;
  }

  public void unsetIsInterested() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINTERESTED_ISSET_ID);
  }

  /** Returns true if field isInterested is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInterested() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINTERESTED_ISSET_ID);
  }

  public void setIsInterestedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINTERESTED_ISSET_ID, value);
  }

  public int getCandidateCompanyId() {
    return this.candidateCompanyId;
  }

  public CandidatePositionDTO setCandidateCompanyId(int candidateCompanyId) {
    this.candidateCompanyId = candidateCompanyId;
    setCandidateCompanyIdIsSet(true);
    return this;
  }

  public void unsetCandidateCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATECOMPANYID_ISSET_ID);
  }

  /** Returns true if field candidateCompanyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidateCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATECOMPANYID_ISSET_ID);
  }

  public void setCandidateCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATECOMPANYID_ISSET_ID, value);
  }

  public int getViewNumber() {
    return this.viewNumber;
  }

  public CandidatePositionDTO setViewNumber(int viewNumber) {
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    return this;
  }

  public void unsetViewNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetViewNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  public void setViewNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
  }

  public boolean isSharedFromEmployee() {
    return this.sharedFromEmployee;
  }

  public CandidatePositionDTO setSharedFromEmployee(boolean sharedFromEmployee) {
    this.sharedFromEmployee = sharedFromEmployee;
    setSharedFromEmployeeIsSet(true);
    return this;
  }

  public void unsetSharedFromEmployee() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHAREDFROMEMPLOYEE_ISSET_ID);
  }

  /** Returns true if field sharedFromEmployee is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedFromEmployee() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHAREDFROMEMPLOYEE_ISSET_ID);
  }

  public void setSharedFromEmployeeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHAREDFROMEMPLOYEE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case IS_INTERESTED:
      if (value == null) {
        unsetIsInterested();
      } else {
        setIsInterested((java.lang.Boolean)value);
      }
      break;

    case CANDIDATE_COMPANY_ID:
      if (value == null) {
        unsetCandidateCompanyId();
      } else {
        setCandidateCompanyId((java.lang.Integer)value);
      }
      break;

    case VIEW_NUMBER:
      if (value == null) {
        unsetViewNumber();
      } else {
        setViewNumber((java.lang.Integer)value);
      }
      break;

    case SHARED_FROM_EMPLOYEE:
      if (value == null) {
        unsetSharedFromEmployee();
      } else {
        setSharedFromEmployee((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case POSITION_ID:
      return getPositionId();

    case USER_ID:
      return getUserId();

    case UPDATE_TIME:
      return getUpdateTime();

    case IS_INTERESTED:
      return isIsInterested();

    case CANDIDATE_COMPANY_ID:
      return getCandidateCompanyId();

    case VIEW_NUMBER:
      return getViewNumber();

    case SHARED_FROM_EMPLOYEE:
      return isSharedFromEmployee();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case POSITION_ID:
      return isSetPositionId();
    case USER_ID:
      return isSetUserId();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case IS_INTERESTED:
      return isSetIsInterested();
    case CANDIDATE_COMPANY_ID:
      return isSetCandidateCompanyId();
    case VIEW_NUMBER:
      return isSetViewNumber();
    case SHARED_FROM_EMPLOYEE:
      return isSetSharedFromEmployee();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CandidatePositionDTO)
      return this.equals((CandidatePositionDTO)that);
    return false;
  }

  public boolean equals(CandidatePositionDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_isInterested = true && this.isSetIsInterested();
    boolean that_present_isInterested = true && that.isSetIsInterested();
    if (this_present_isInterested || that_present_isInterested) {
      if (!(this_present_isInterested && that_present_isInterested))
        return false;
      if (this.isInterested != that.isInterested)
        return false;
    }

    boolean this_present_candidateCompanyId = true && this.isSetCandidateCompanyId();
    boolean that_present_candidateCompanyId = true && that.isSetCandidateCompanyId();
    if (this_present_candidateCompanyId || that_present_candidateCompanyId) {
      if (!(this_present_candidateCompanyId && that_present_candidateCompanyId))
        return false;
      if (this.candidateCompanyId != that.candidateCompanyId)
        return false;
    }

    boolean this_present_viewNumber = true && this.isSetViewNumber();
    boolean that_present_viewNumber = true && that.isSetViewNumber();
    if (this_present_viewNumber || that_present_viewNumber) {
      if (!(this_present_viewNumber && that_present_viewNumber))
        return false;
      if (this.viewNumber != that.viewNumber)
        return false;
    }

    boolean this_present_sharedFromEmployee = true && this.isSetSharedFromEmployee();
    boolean that_present_sharedFromEmployee = true && that.isSetSharedFromEmployee();
    if (this_present_sharedFromEmployee || that_present_sharedFromEmployee) {
      if (!(this_present_sharedFromEmployee && that_present_sharedFromEmployee))
        return false;
      if (this.sharedFromEmployee != that.sharedFromEmployee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
    if (isSetPositionId())
      hashCode = hashCode * 8191 + positionId;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsInterested()) ? 131071 : 524287);
    if (isSetIsInterested())
      hashCode = hashCode * 8191 + ((isInterested) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCandidateCompanyId()) ? 131071 : 524287);
    if (isSetCandidateCompanyId())
      hashCode = hashCode * 8191 + candidateCompanyId;

    hashCode = hashCode * 8191 + ((isSetViewNumber()) ? 131071 : 524287);
    if (isSetViewNumber())
      hashCode = hashCode * 8191 + viewNumber;

    hashCode = hashCode * 8191 + ((isSetSharedFromEmployee()) ? 131071 : 524287);
    if (isSetSharedFromEmployee())
      hashCode = hashCode * 8191 + ((sharedFromEmployee) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(CandidatePositionDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInterested()).compareTo(other.isSetIsInterested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInterested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInterested, other.isInterested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCandidateCompanyId()).compareTo(other.isSetCandidateCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidateCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateCompanyId, other.candidateCompanyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharedFromEmployee()).compareTo(other.isSetSharedFromEmployee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedFromEmployee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedFromEmployee, other.sharedFromEmployee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CandidatePositionDTO(");
    boolean first = true;

    if (isSetPositionId()) {
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetIsInterested()) {
      if (!first) sb.append(", ");
      sb.append("isInterested:");
      sb.append(this.isInterested);
      first = false;
    }
    if (isSetCandidateCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("candidateCompanyId:");
      sb.append(this.candidateCompanyId);
      first = false;
    }
    if (isSetViewNumber()) {
      if (!first) sb.append(", ");
      sb.append("viewNumber:");
      sb.append(this.viewNumber);
      first = false;
    }
    if (isSetSharedFromEmployee()) {
      if (!first) sb.append(", ");
      sb.append("sharedFromEmployee:");
      sb.append(this.sharedFromEmployee);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CandidatePositionDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidatePositionDTOStandardScheme getScheme() {
      return new CandidatePositionDTOStandardScheme();
    }
  }

  private static class CandidatePositionDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CandidatePositionDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CandidatePositionDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionId = iprot.readI32();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_INTERESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInterested = iprot.readBool();
              struct.setIsInterestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CANDIDATE_COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candidateCompanyId = iprot.readI32();
              struct.setCandidateCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIEW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewNumber = iprot.readI32();
              struct.setViewNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARED_FROM_EMPLOYEE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sharedFromEmployee = iprot.readBool();
              struct.setSharedFromEmployeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CandidatePositionDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsInterested()) {
        oprot.writeFieldBegin(IS_INTERESTED_FIELD_DESC);
        oprot.writeBool(struct.isInterested);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCandidateCompanyId()) {
        oprot.writeFieldBegin(CANDIDATE_COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.candidateCompanyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetViewNumber()) {
        oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.viewNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSharedFromEmployee()) {
        oprot.writeFieldBegin(SHARED_FROM_EMPLOYEE_FIELD_DESC);
        oprot.writeBool(struct.sharedFromEmployee);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CandidatePositionDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CandidatePositionDTOTupleScheme getScheme() {
      return new CandidatePositionDTOTupleScheme();
    }
  }

  private static class CandidatePositionDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CandidatePositionDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CandidatePositionDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPositionId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(2);
      }
      if (struct.isSetIsInterested()) {
        optionals.set(3);
      }
      if (struct.isSetCandidateCompanyId()) {
        optionals.set(4);
      }
      if (struct.isSetViewNumber()) {
        optionals.set(5);
      }
      if (struct.isSetSharedFromEmployee()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPositionId()) {
        oprot.writeI32(struct.positionId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetIsInterested()) {
        oprot.writeBool(struct.isInterested);
      }
      if (struct.isSetCandidateCompanyId()) {
        oprot.writeI32(struct.candidateCompanyId);
      }
      if (struct.isSetViewNumber()) {
        oprot.writeI32(struct.viewNumber);
      }
      if (struct.isSetSharedFromEmployee()) {
        oprot.writeBool(struct.sharedFromEmployee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CandidatePositionDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.positionId = iprot.readI32();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isInterested = iprot.readBool();
        struct.setIsInterestedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.candidateCompanyId = iprot.readI32();
        struct.setCandidateCompanyIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.viewNumber = iprot.readI32();
        struct.setViewNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sharedFromEmployee = iprot.readBool();
        struct.setSharedFromEmployeeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

