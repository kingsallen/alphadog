/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ConfigPositionKenexaDO implements org.apache.thrift.TBase<ConfigPositionKenexaDO, ConfigPositionKenexaDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigPositionKenexaDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigPositionKenexaDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("positionColumn", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KENEXA_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("kenexaJobId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField APP_TPL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appTplId", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigPositionKenexaDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigPositionKenexaDOTupleSchemeFactory();

  public int id; // optional
  public int sourceId; // optional
  public String positionColumn; // optional
  public String kenexaJobId; // optional
  public int disable; // optional
  public String createTime; // optional
  public String updateTime; // optional
  public int appTplId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SOURCE_ID((short)2, "sourceId"),
    POSITION_COLUMN((short)3, "positionColumn"),
    KENEXA_JOB_ID((short)4, "kenexaJobId"),
    DISABLE((short)5, "disable"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)7, "updateTime"),
    APP_TPL_ID((short)8, "appTplId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SOURCE_ID
          return SOURCE_ID;
        case 3: // POSITION_COLUMN
          return POSITION_COLUMN;
        case 4: // KENEXA_JOB_ID
          return KENEXA_JOB_ID;
        case 5: // DISABLE
          return DISABLE;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // APP_TPL_ID
          return APP_TPL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SOURCEID_ISSET_ID = 1;
  private static final int __DISABLE_ISSET_ID = 2;
  private static final int __APPTPLID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.SOURCE_ID,_Fields.POSITION_COLUMN,_Fields.KENEXA_JOB_ID,_Fields.DISABLE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.APP_TPL_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("positionColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KENEXA_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("kenexaJobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_TPL_ID, new org.apache.thrift.meta_data.FieldMetaData("appTplId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigPositionKenexaDO.class, metaDataMap);
  }

  public ConfigPositionKenexaDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigPositionKenexaDO(ConfigPositionKenexaDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.sourceId = other.sourceId;
    if (other.isSetPositionColumn()) {
      this.positionColumn = other.positionColumn;
    }
    if (other.isSetKenexaJobId()) {
      this.kenexaJobId = other.kenexaJobId;
    }
    this.disable = other.disable;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.appTplId = other.appTplId;
  }

  public ConfigPositionKenexaDO deepCopy() {
    return new ConfigPositionKenexaDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    this.positionColumn = null;
    this.kenexaJobId = null;
    setDisableIsSet(false);
    this.disable = 0;
    this.createTime = null;
    this.updateTime = null;
    setAppTplIdIsSet(false);
    this.appTplId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ConfigPositionKenexaDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getSourceId() {
    return this.sourceId;
  }

  public ConfigPositionKenexaDO setSourceId(int sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    return this;
  }

  public void unsetSourceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
  }

  public String getPositionColumn() {
    return this.positionColumn;
  }

  public ConfigPositionKenexaDO setPositionColumn(String positionColumn) {
    this.positionColumn = positionColumn;
    return this;
  }

  public void unsetPositionColumn() {
    this.positionColumn = null;
  }

  /** Returns true if field positionColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionColumn() {
    return this.positionColumn != null;
  }

  public void setPositionColumnIsSet(boolean value) {
    if (!value) {
      this.positionColumn = null;
    }
  }

  public String getKenexaJobId() {
    return this.kenexaJobId;
  }

  public ConfigPositionKenexaDO setKenexaJobId(String kenexaJobId) {
    this.kenexaJobId = kenexaJobId;
    return this;
  }

  public void unsetKenexaJobId() {
    this.kenexaJobId = null;
  }

  /** Returns true if field kenexaJobId is set (has been assigned a value) and false otherwise */
  public boolean isSetKenexaJobId() {
    return this.kenexaJobId != null;
  }

  public void setKenexaJobIdIsSet(boolean value) {
    if (!value) {
      this.kenexaJobId = null;
    }
  }

  public int getDisable() {
    return this.disable;
  }

  public ConfigPositionKenexaDO setDisable(int disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ConfigPositionKenexaDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ConfigPositionKenexaDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getAppTplId() {
    return this.appTplId;
  }

  public ConfigPositionKenexaDO setAppTplId(int appTplId) {
    this.appTplId = appTplId;
    setAppTplIdIsSet(true);
    return this;
  }

  public void unsetAppTplId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPTPLID_ISSET_ID);
  }

  /** Returns true if field appTplId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppTplId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPTPLID_ISSET_ID);
  }

  public void setAppTplIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPTPLID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Integer)value);
      }
      break;

    case POSITION_COLUMN:
      if (value == null) {
        unsetPositionColumn();
      } else {
        setPositionColumn((String)value);
      }
      break;

    case KENEXA_JOB_ID:
      if (value == null) {
        unsetKenexaJobId();
      } else {
        setKenexaJobId((String)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case APP_TPL_ID:
      if (value == null) {
        unsetAppTplId();
      } else {
        setAppTplId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SOURCE_ID:
      return getSourceId();

    case POSITION_COLUMN:
      return getPositionColumn();

    case KENEXA_JOB_ID:
      return getKenexaJobId();

    case DISABLE:
      return getDisable();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case APP_TPL_ID:
      return getAppTplId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SOURCE_ID:
      return isSetSourceId();
    case POSITION_COLUMN:
      return isSetPositionColumn();
    case KENEXA_JOB_ID:
      return isSetKenexaJobId();
    case DISABLE:
      return isSetDisable();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case APP_TPL_ID:
      return isSetAppTplId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigPositionKenexaDO)
      return this.equals((ConfigPositionKenexaDO)that);
    return false;
  }

  public boolean equals(ConfigPositionKenexaDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_sourceId = true && this.isSetSourceId();
    boolean that_present_sourceId = true && that.isSetSourceId();
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_positionColumn = true && this.isSetPositionColumn();
    boolean that_present_positionColumn = true && that.isSetPositionColumn();
    if (this_present_positionColumn || that_present_positionColumn) {
      if (!(this_present_positionColumn && that_present_positionColumn))
        return false;
      if (!this.positionColumn.equals(that.positionColumn))
        return false;
    }

    boolean this_present_kenexaJobId = true && this.isSetKenexaJobId();
    boolean that_present_kenexaJobId = true && that.isSetKenexaJobId();
    if (this_present_kenexaJobId || that_present_kenexaJobId) {
      if (!(this_present_kenexaJobId && that_present_kenexaJobId))
        return false;
      if (!this.kenexaJobId.equals(that.kenexaJobId))
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_appTplId = true && this.isSetAppTplId();
    boolean that_present_appTplId = true && that.isSetAppTplId();
    if (this_present_appTplId || that_present_appTplId) {
      if (!(this_present_appTplId && that_present_appTplId))
        return false;
      if (this.appTplId != that.appTplId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetSourceId()) ? 131071 : 524287);
    if (isSetSourceId())
      hashCode = hashCode * 8191 + sourceId;

    hashCode = hashCode * 8191 + ((isSetPositionColumn()) ? 131071 : 524287);
    if (isSetPositionColumn())
      hashCode = hashCode * 8191 + positionColumn.hashCode();

    hashCode = hashCode * 8191 + ((isSetKenexaJobId()) ? 131071 : 524287);
    if (isSetKenexaJobId())
      hashCode = hashCode * 8191 + kenexaJobId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + disable;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppTplId()) ? 131071 : 524287);
    if (isSetAppTplId())
      hashCode = hashCode * 8191 + appTplId;

    return hashCode;
  }

  @Override
  public int compareTo(ConfigPositionKenexaDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionColumn()).compareTo(other.isSetPositionColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionColumn, other.positionColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKenexaJobId()).compareTo(other.isSetKenexaJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKenexaJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kenexaJobId, other.kenexaJobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppTplId()).compareTo(other.isSetAppTplId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppTplId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appTplId, other.appTplId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigPositionKenexaDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetSourceId()) {
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
    }
    if (isSetPositionColumn()) {
      if (!first) sb.append(", ");
      sb.append("positionColumn:");
      if (this.positionColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.positionColumn);
      }
      first = false;
    }
    if (isSetKenexaJobId()) {
      if (!first) sb.append(", ");
      sb.append("kenexaJobId:");
      if (this.kenexaJobId == null) {
        sb.append("null");
      } else {
        sb.append(this.kenexaJobId);
      }
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetAppTplId()) {
      if (!first) sb.append(", ");
      sb.append("appTplId:");
      sb.append(this.appTplId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigPositionKenexaDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigPositionKenexaDOStandardScheme getScheme() {
      return new ConfigPositionKenexaDOStandardScheme();
    }
  }

  private static class ConfigPositionKenexaDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigPositionKenexaDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigPositionKenexaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceId = iprot.readI32();
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionColumn = iprot.readString();
              struct.setPositionColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KENEXA_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kenexaJobId = iprot.readString();
              struct.setKenexaJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disable = iprot.readI32();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APP_TPL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appTplId = iprot.readI32();
              struct.setAppTplIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigPositionKenexaDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSourceId()) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI32(struct.sourceId);
        oprot.writeFieldEnd();
      }
      if (struct.positionColumn != null) {
        if (struct.isSetPositionColumn()) {
          oprot.writeFieldBegin(POSITION_COLUMN_FIELD_DESC);
          oprot.writeString(struct.positionColumn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kenexaJobId != null) {
        if (struct.isSetKenexaJobId()) {
          oprot.writeFieldBegin(KENEXA_JOB_ID_FIELD_DESC);
          oprot.writeString(struct.kenexaJobId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeI32(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAppTplId()) {
        oprot.writeFieldBegin(APP_TPL_ID_FIELD_DESC);
        oprot.writeI32(struct.appTplId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigPositionKenexaDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigPositionKenexaDOTupleScheme getScheme() {
      return new ConfigPositionKenexaDOTupleScheme();
    }
  }

  private static class ConfigPositionKenexaDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigPositionKenexaDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigPositionKenexaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSourceId()) {
        optionals.set(1);
      }
      if (struct.isSetPositionColumn()) {
        optionals.set(2);
      }
      if (struct.isSetKenexaJobId()) {
        optionals.set(3);
      }
      if (struct.isSetDisable()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetAppTplId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetSourceId()) {
        oprot.writeI32(struct.sourceId);
      }
      if (struct.isSetPositionColumn()) {
        oprot.writeString(struct.positionColumn);
      }
      if (struct.isSetKenexaJobId()) {
        oprot.writeString(struct.kenexaJobId);
      }
      if (struct.isSetDisable()) {
        oprot.writeI32(struct.disable);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetAppTplId()) {
        oprot.writeI32(struct.appTplId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigPositionKenexaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceId = iprot.readI32();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.positionColumn = iprot.readString();
        struct.setPositionColumnIsSet(true);
      }
      if (incoming.get(3)) {
        struct.kenexaJobId = iprot.readString();
        struct.setKenexaJobIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disable = iprot.readI32();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.appTplId = iprot.readI32();
        struct.setAppTplIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

