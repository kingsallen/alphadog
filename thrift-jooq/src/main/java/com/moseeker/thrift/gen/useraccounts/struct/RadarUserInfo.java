/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-13")
public class RadarUserInfo implements org.apache.thrift.TBase<RadarUserInfo, RadarUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RadarUserInfo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RadarUserInfo");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VIEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewCount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SEEK_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("seekRecommend", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField HEADIMGURL_FIELD_DESC = new org.apache.thrift.protocol.TField("headimgurl", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField POSITION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionTitle", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField FORWARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardName", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField FORWARD_SOURCE_WX_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardSourceWx", org.apache.thrift.protocol.TType.BOOL, (short)10);
    private static final org.apache.thrift.protocol.TField REFERRAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("referralId", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField CLICK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickTime", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RadarUserInfoStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RadarUserInfoTupleSchemeFactory();

    public int userId; // optional
    public java.lang.String nickname; // optional
    public int viewCount; // optional
    public boolean seekRecommend; // optional
    public int depth; // optional
    public java.lang.String headimgurl; // optional
    public java.lang.String positionTitle; // optional
    public int positionId; // optional
    public java.lang.String forwardName; // optional
    public boolean forwardSourceWx; // optional
    public int referralId; // optional
    public java.lang.String clickTime; // optional
    public int status; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        USER_ID((short)1, "userId"),
        NICKNAME((short)2, "nickname"),
        VIEW_COUNT((short)3, "viewCount"),
        SEEK_RECOMMEND((short)4, "seekRecommend"),
        DEPTH((short)5, "depth"),
        HEADIMGURL((short)6, "headimgurl"),
        POSITION_TITLE((short)7, "positionTitle"),
        POSITION_ID((short)8, "positionId"),
        FORWARD_NAME((short)9, "forwardName"),
        FORWARD_SOURCE_WX((short)10, "forwardSourceWx"),
        REFERRAL_ID((short)11, "referralId"),
        CLICK_TIME((short)12, "clickTime"),
        STATUS((short)13, "status");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // USER_ID
                    return USER_ID;
                case 2: // NICKNAME
                    return NICKNAME;
                case 3: // VIEW_COUNT
                    return VIEW_COUNT;
                case 4: // SEEK_RECOMMEND
                    return SEEK_RECOMMEND;
                case 5: // DEPTH
                    return DEPTH;
                case 6: // HEADIMGURL
                    return HEADIMGURL;
                case 7: // POSITION_TITLE
                    return POSITION_TITLE;
                case 8: // POSITION_ID
                    return POSITION_ID;
                case 9: // FORWARD_NAME
                    return FORWARD_NAME;
                case 10: // FORWARD_SOURCE_WX
                    return FORWARD_SOURCE_WX;
                case 11: // REFERRAL_ID
                    return REFERRAL_ID;
                case 12: // CLICK_TIME
                    return CLICK_TIME;
                case 13: // STATUS
                    return STATUS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __VIEWCOUNT_ISSET_ID = 1;
    private static final int __SEEKRECOMMEND_ISSET_ID = 2;
    private static final int __DEPTH_ISSET_ID = 3;
    private static final int __POSITIONID_ISSET_ID = 4;
    private static final int __FORWARDSOURCEWX_ISSET_ID = 5;
    private static final int __REFERRALID_ISSET_ID = 6;
    private static final int __STATUS_ISSET_ID = 7;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.NICKNAME,_Fields.VIEW_COUNT,_Fields.SEEK_RECOMMEND,_Fields.DEPTH,_Fields.HEADIMGURL,_Fields.POSITION_TITLE,_Fields.POSITION_ID,_Fields.FORWARD_NAME,_Fields.FORWARD_SOURCE_WX,_Fields.REFERRAL_ID,_Fields.CLICK_TIME,_Fields.STATUS};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.VIEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("viewCount", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SEEK_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("seekRecommend", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.HEADIMGURL, new org.apache.thrift.meta_data.FieldMetaData("headimgurl", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.POSITION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("positionTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FORWARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("forwardName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FORWARD_SOURCE_WX, new org.apache.thrift.meta_data.FieldMetaData("forwardSourceWx", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.REFERRAL_ID, new org.apache.thrift.meta_data.FieldMetaData("referralId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CLICK_TIME, new org.apache.thrift.meta_data.FieldMetaData("clickTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RadarUserInfo.class, metaDataMap);
    }

    public RadarUserInfo() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RadarUserInfo(RadarUserInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        this.userId = other.userId;
        if (other.isSetNickname()) {
            this.nickname = other.nickname;
        }
        this.viewCount = other.viewCount;
        this.seekRecommend = other.seekRecommend;
        this.depth = other.depth;
        if (other.isSetHeadimgurl()) {
            this.headimgurl = other.headimgurl;
        }
        if (other.isSetPositionTitle()) {
            this.positionTitle = other.positionTitle;
        }
        this.positionId = other.positionId;
        if (other.isSetForwardName()) {
            this.forwardName = other.forwardName;
        }
        this.forwardSourceWx = other.forwardSourceWx;
        this.referralId = other.referralId;
        if (other.isSetClickTime()) {
            this.clickTime = other.clickTime;
        }
        this.status = other.status;
    }

    public RadarUserInfo deepCopy() {
        return new RadarUserInfo(this);
    }

    @Override
    public void clear() {
        setUserIdIsSet(false);
        this.userId = 0;
        this.nickname = null;
        setViewCountIsSet(false);
        this.viewCount = 0;
        setSeekRecommendIsSet(false);
        this.seekRecommend = false;
        setDepthIsSet(false);
        this.depth = 0;
        this.headimgurl = null;
        this.positionTitle = null;
        setPositionIdIsSet(false);
        this.positionId = 0;
        this.forwardName = null;
        setForwardSourceWxIsSet(false);
        this.forwardSourceWx = false;
        setReferralIdIsSet(false);
        this.referralId = 0;
        this.clickTime = null;
        setStatusIsSet(false);
        this.status = 0;
    }

    public int getUserId() {
        return this.userId;
    }

    public RadarUserInfo setUserId(int userId) {
        this.userId = userId;
        setUserIdIsSet(true);
        return this;
    }

    public void unsetUserId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public java.lang.String getNickname() {
        return this.nickname;
    }

    public RadarUserInfo setNickname(java.lang.String nickname) {
        this.nickname = nickname;
        return this;
    }

    public void unsetNickname() {
        this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
        return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
        if (!value) {
            this.nickname = null;
        }
    }

    public int getViewCount() {
        return this.viewCount;
    }

    public RadarUserInfo setViewCount(int viewCount) {
        this.viewCount = viewCount;
        setViewCountIsSet(true);
        return this;
    }

    public void unsetViewCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
    }

    /** Returns true if field viewCount is set (has been assigned a value) and false otherwise */
    public boolean isSetViewCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
    }

    public void setViewCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID, value);
    }

    public boolean isSeekRecommend() {
        return this.seekRecommend;
    }

    public RadarUserInfo setSeekRecommend(boolean seekRecommend) {
        this.seekRecommend = seekRecommend;
        setSeekRecommendIsSet(true);
        return this;
    }

    public void unsetSeekRecommend() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEEKRECOMMEND_ISSET_ID);
    }

    /** Returns true if field seekRecommend is set (has been assigned a value) and false otherwise */
    public boolean isSetSeekRecommend() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEEKRECOMMEND_ISSET_ID);
    }

    public void setSeekRecommendIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEEKRECOMMEND_ISSET_ID, value);
    }

    public int getDepth() {
        return this.depth;
    }

    public RadarUserInfo setDepth(int depth) {
        this.depth = depth;
        setDepthIsSet(true);
        return this;
    }

    public void unsetDepth() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPTH_ISSET_ID);
    }

    /** Returns true if field depth is set (has been assigned a value) and false otherwise */
    public boolean isSetDepth() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPTH_ISSET_ID);
    }

    public void setDepthIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPTH_ISSET_ID, value);
    }

    public java.lang.String getHeadimgurl() {
        return this.headimgurl;
    }

    public RadarUserInfo setHeadimgurl(java.lang.String headimgurl) {
        this.headimgurl = headimgurl;
        return this;
    }

    public void unsetHeadimgurl() {
        this.headimgurl = null;
    }

    /** Returns true if field headimgurl is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadimgurl() {
        return this.headimgurl != null;
    }

    public void setHeadimgurlIsSet(boolean value) {
        if (!value) {
            this.headimgurl = null;
        }
    }

    public java.lang.String getPositionTitle() {
        return this.positionTitle;
    }

    public RadarUserInfo setPositionTitle(java.lang.String positionTitle) {
        this.positionTitle = positionTitle;
        return this;
    }

    public void unsetPositionTitle() {
        this.positionTitle = null;
    }

    /** Returns true if field positionTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionTitle() {
        return this.positionTitle != null;
    }

    public void setPositionTitleIsSet(boolean value) {
        if (!value) {
            this.positionTitle = null;
        }
    }

    public int getPositionId() {
        return this.positionId;
    }

    public RadarUserInfo setPositionId(int positionId) {
        this.positionId = positionId;
        setPositionIdIsSet(true);
        return this;
    }

    public void unsetPositionId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public java.lang.String getForwardName() {
        return this.forwardName;
    }

    public RadarUserInfo setForwardName(java.lang.String forwardName) {
        this.forwardName = forwardName;
        return this;
    }

    public void unsetForwardName() {
        this.forwardName = null;
    }

    /** Returns true if field forwardName is set (has been assigned a value) and false otherwise */
    public boolean isSetForwardName() {
        return this.forwardName != null;
    }

    public void setForwardNameIsSet(boolean value) {
        if (!value) {
            this.forwardName = null;
        }
    }

    public boolean isForwardSourceWx() {
        return this.forwardSourceWx;
    }

    public RadarUserInfo setForwardSourceWx(boolean forwardSourceWx) {
        this.forwardSourceWx = forwardSourceWx;
        setForwardSourceWxIsSet(true);
        return this;
    }

    public void unsetForwardSourceWx() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDSOURCEWX_ISSET_ID);
    }

    /** Returns true if field forwardSourceWx is set (has been assigned a value) and false otherwise */
    public boolean isSetForwardSourceWx() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDSOURCEWX_ISSET_ID);
    }

    public void setForwardSourceWxIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDSOURCEWX_ISSET_ID, value);
    }

    public int getReferralId() {
        return this.referralId;
    }

    public RadarUserInfo setReferralId(int referralId) {
        this.referralId = referralId;
        setReferralIdIsSet(true);
        return this;
    }

    public void unsetReferralId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALID_ISSET_ID);
    }

    /** Returns true if field referralId is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALID_ISSET_ID);
    }

    public void setReferralIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALID_ISSET_ID, value);
    }

    public java.lang.String getClickTime() {
        return this.clickTime;
    }

    public RadarUserInfo setClickTime(java.lang.String clickTime) {
        this.clickTime = clickTime;
        return this;
    }

    public void unsetClickTime() {
        this.clickTime = null;
    }

    /** Returns true if field clickTime is set (has been assigned a value) and false otherwise */
    public boolean isSetClickTime() {
        return this.clickTime != null;
    }

    public void setClickTimeIsSet(boolean value) {
        if (!value) {
            this.clickTime = null;
        }
    }

    public int getStatus() {
        return this.status;
    }

    public RadarUserInfo setStatus(int status) {
        this.status = status;
        setStatusIsSet(true);
        return this;
    }

    public void unsetStatus() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case USER_ID:
                if (value == null) {
                    unsetUserId();
                } else {
                    setUserId((java.lang.Integer)value);
                }
                break;

            case NICKNAME:
                if (value == null) {
                    unsetNickname();
                } else {
                    setNickname((java.lang.String)value);
                }
                break;

            case VIEW_COUNT:
                if (value == null) {
                    unsetViewCount();
                } else {
                    setViewCount((java.lang.Integer)value);
                }
                break;

            case SEEK_RECOMMEND:
                if (value == null) {
                    unsetSeekRecommend();
                } else {
                    setSeekRecommend((java.lang.Boolean)value);
                }
                break;

            case DEPTH:
                if (value == null) {
                    unsetDepth();
                } else {
                    setDepth((java.lang.Integer)value);
                }
                break;

            case HEADIMGURL:
                if (value == null) {
                    unsetHeadimgurl();
                } else {
                    setHeadimgurl((java.lang.String)value);
                }
                break;

            case POSITION_TITLE:
                if (value == null) {
                    unsetPositionTitle();
                } else {
                    setPositionTitle((java.lang.String)value);
                }
                break;

            case POSITION_ID:
                if (value == null) {
                    unsetPositionId();
                } else {
                    setPositionId((java.lang.Integer)value);
                }
                break;

            case FORWARD_NAME:
                if (value == null) {
                    unsetForwardName();
                } else {
                    setForwardName((java.lang.String)value);
                }
                break;

            case FORWARD_SOURCE_WX:
                if (value == null) {
                    unsetForwardSourceWx();
                } else {
                    setForwardSourceWx((java.lang.Boolean)value);
                }
                break;

            case REFERRAL_ID:
                if (value == null) {
                    unsetReferralId();
                } else {
                    setReferralId((java.lang.Integer)value);
                }
                break;

            case CLICK_TIME:
                if (value == null) {
                    unsetClickTime();
                } else {
                    setClickTime((java.lang.String)value);
                }
                break;

            case STATUS:
                if (value == null) {
                    unsetStatus();
                } else {
                    setStatus((java.lang.Integer)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case USER_ID:
                return getUserId();

            case NICKNAME:
                return getNickname();

            case VIEW_COUNT:
                return getViewCount();

            case SEEK_RECOMMEND:
                return isSeekRecommend();

            case DEPTH:
                return getDepth();

            case HEADIMGURL:
                return getHeadimgurl();

            case POSITION_TITLE:
                return getPositionTitle();

            case POSITION_ID:
                return getPositionId();

            case FORWARD_NAME:
                return getForwardName();

            case FORWARD_SOURCE_WX:
                return isForwardSourceWx();

            case REFERRAL_ID:
                return getReferralId();

            case CLICK_TIME:
                return getClickTime();

            case STATUS:
                return getStatus();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case USER_ID:
                return isSetUserId();
            case NICKNAME:
                return isSetNickname();
            case VIEW_COUNT:
                return isSetViewCount();
            case SEEK_RECOMMEND:
                return isSetSeekRecommend();
            case DEPTH:
                return isSetDepth();
            case HEADIMGURL:
                return isSetHeadimgurl();
            case POSITION_TITLE:
                return isSetPositionTitle();
            case POSITION_ID:
                return isSetPositionId();
            case FORWARD_NAME:
                return isSetForwardName();
            case FORWARD_SOURCE_WX:
                return isSetForwardSourceWx();
            case REFERRAL_ID:
                return isSetReferralId();
            case CLICK_TIME:
                return isSetClickTime();
            case STATUS:
                return isSetStatus();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof RadarUserInfo)
            return this.equals((RadarUserInfo)that);
        return false;
    }

    public boolean equals(RadarUserInfo that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_userId = true && this.isSetUserId();
        boolean that_present_userId = true && that.isSetUserId();
        if (this_present_userId || that_present_userId) {
            if (!(this_present_userId && that_present_userId))
                return false;
            if (this.userId != that.userId)
                return false;
        }

        boolean this_present_nickname = true && this.isSetNickname();
        boolean that_present_nickname = true && that.isSetNickname();
        if (this_present_nickname || that_present_nickname) {
            if (!(this_present_nickname && that_present_nickname))
                return false;
            if (!this.nickname.equals(that.nickname))
                return false;
        }

        boolean this_present_viewCount = true && this.isSetViewCount();
        boolean that_present_viewCount = true && that.isSetViewCount();
        if (this_present_viewCount || that_present_viewCount) {
            if (!(this_present_viewCount && that_present_viewCount))
                return false;
            if (this.viewCount != that.viewCount)
                return false;
        }

        boolean this_present_seekRecommend = true && this.isSetSeekRecommend();
        boolean that_present_seekRecommend = true && that.isSetSeekRecommend();
        if (this_present_seekRecommend || that_present_seekRecommend) {
            if (!(this_present_seekRecommend && that_present_seekRecommend))
                return false;
            if (this.seekRecommend != that.seekRecommend)
                return false;
        }

        boolean this_present_depth = true && this.isSetDepth();
        boolean that_present_depth = true && that.isSetDepth();
        if (this_present_depth || that_present_depth) {
            if (!(this_present_depth && that_present_depth))
                return false;
            if (this.depth != that.depth)
                return false;
        }

        boolean this_present_headimgurl = true && this.isSetHeadimgurl();
        boolean that_present_headimgurl = true && that.isSetHeadimgurl();
        if (this_present_headimgurl || that_present_headimgurl) {
            if (!(this_present_headimgurl && that_present_headimgurl))
                return false;
            if (!this.headimgurl.equals(that.headimgurl))
                return false;
        }

        boolean this_present_positionTitle = true && this.isSetPositionTitle();
        boolean that_present_positionTitle = true && that.isSetPositionTitle();
        if (this_present_positionTitle || that_present_positionTitle) {
            if (!(this_present_positionTitle && that_present_positionTitle))
                return false;
            if (!this.positionTitle.equals(that.positionTitle))
                return false;
        }

        boolean this_present_positionId = true && this.isSetPositionId();
        boolean that_present_positionId = true && that.isSetPositionId();
        if (this_present_positionId || that_present_positionId) {
            if (!(this_present_positionId && that_present_positionId))
                return false;
            if (this.positionId != that.positionId)
                return false;
        }

        boolean this_present_forwardName = true && this.isSetForwardName();
        boolean that_present_forwardName = true && that.isSetForwardName();
        if (this_present_forwardName || that_present_forwardName) {
            if (!(this_present_forwardName && that_present_forwardName))
                return false;
            if (!this.forwardName.equals(that.forwardName))
                return false;
        }

        boolean this_present_forwardSourceWx = true && this.isSetForwardSourceWx();
        boolean that_present_forwardSourceWx = true && that.isSetForwardSourceWx();
        if (this_present_forwardSourceWx || that_present_forwardSourceWx) {
            if (!(this_present_forwardSourceWx && that_present_forwardSourceWx))
                return false;
            if (this.forwardSourceWx != that.forwardSourceWx)
                return false;
        }

        boolean this_present_referralId = true && this.isSetReferralId();
        boolean that_present_referralId = true && that.isSetReferralId();
        if (this_present_referralId || that_present_referralId) {
            if (!(this_present_referralId && that_present_referralId))
                return false;
            if (this.referralId != that.referralId)
                return false;
        }

        boolean this_present_clickTime = true && this.isSetClickTime();
        boolean that_present_clickTime = true && that.isSetClickTime();
        if (this_present_clickTime || that_present_clickTime) {
            if (!(this_present_clickTime && that_present_clickTime))
                return false;
            if (!this.clickTime.equals(that.clickTime))
                return false;
        }

        boolean this_present_status = true && this.isSetStatus();
        boolean that_present_status = true && that.isSetStatus();
        if (this_present_status || that_present_status) {
            if (!(this_present_status && that_present_status))
                return false;
            if (this.status != that.status)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
        if (isSetUserId())
            hashCode = hashCode * 8191 + userId;

        hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
        if (isSetNickname())
            hashCode = hashCode * 8191 + nickname.hashCode();

        hashCode = hashCode * 8191 + ((isSetViewCount()) ? 131071 : 524287);
        if (isSetViewCount())
            hashCode = hashCode * 8191 + viewCount;

        hashCode = hashCode * 8191 + ((isSetSeekRecommend()) ? 131071 : 524287);
        if (isSetSeekRecommend())
            hashCode = hashCode * 8191 + ((seekRecommend) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetDepth()) ? 131071 : 524287);
        if (isSetDepth())
            hashCode = hashCode * 8191 + depth;

        hashCode = hashCode * 8191 + ((isSetHeadimgurl()) ? 131071 : 524287);
        if (isSetHeadimgurl())
            hashCode = hashCode * 8191 + headimgurl.hashCode();

        hashCode = hashCode * 8191 + ((isSetPositionTitle()) ? 131071 : 524287);
        if (isSetPositionTitle())
            hashCode = hashCode * 8191 + positionTitle.hashCode();

        hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
        if (isSetPositionId())
            hashCode = hashCode * 8191 + positionId;

        hashCode = hashCode * 8191 + ((isSetForwardName()) ? 131071 : 524287);
        if (isSetForwardName())
            hashCode = hashCode * 8191 + forwardName.hashCode();

        hashCode = hashCode * 8191 + ((isSetForwardSourceWx()) ? 131071 : 524287);
        if (isSetForwardSourceWx())
            hashCode = hashCode * 8191 + ((forwardSourceWx) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetReferralId()) ? 131071 : 524287);
        if (isSetReferralId())
            hashCode = hashCode * 8191 + referralId;

        hashCode = hashCode * 8191 + ((isSetClickTime()) ? 131071 : 524287);
        if (isSetClickTime())
            hashCode = hashCode * 8191 + clickTime.hashCode();

        hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
        if (isSetStatus())
            hashCode = hashCode * 8191 + status;

        return hashCode;
    }

    @Override
    public int compareTo(RadarUserInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNickname()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetViewCount()).compareTo(other.isSetViewCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetViewCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewCount, other.viewCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSeekRecommend()).compareTo(other.isSetSeekRecommend());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSeekRecommend()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seekRecommend, other.seekRecommend);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDepth()).compareTo(other.isSetDepth());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDepth()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, other.depth);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetHeadimgurl()).compareTo(other.isSetHeadimgurl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHeadimgurl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headimgurl, other.headimgurl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPositionTitle()).compareTo(other.isSetPositionTitle());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPositionTitle()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionTitle, other.positionTitle);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPositionId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetForwardName()).compareTo(other.isSetForwardName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetForwardName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardName, other.forwardName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetForwardSourceWx()).compareTo(other.isSetForwardSourceWx());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetForwardSourceWx()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardSourceWx, other.forwardSourceWx);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetReferralId()).compareTo(other.isSetReferralId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReferralId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralId, other.referralId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetClickTime()).compareTo(other.isSetClickTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetClickTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickTime, other.clickTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatus()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("RadarUserInfo(");
        boolean first = true;

        if (isSetUserId()) {
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
        }
        if (isSetNickname()) {
            if (!first) sb.append(", ");
            sb.append("nickname:");
            if (this.nickname == null) {
                sb.append("null");
            } else {
                sb.append(this.nickname);
            }
            first = false;
        }
        if (isSetViewCount()) {
            if (!first) sb.append(", ");
            sb.append("viewCount:");
            sb.append(this.viewCount);
            first = false;
        }
        if (isSetSeekRecommend()) {
            if (!first) sb.append(", ");
            sb.append("seekRecommend:");
            sb.append(this.seekRecommend);
            first = false;
        }
        if (isSetDepth()) {
            if (!first) sb.append(", ");
            sb.append("depth:");
            sb.append(this.depth);
            first = false;
        }
        if (isSetHeadimgurl()) {
            if (!first) sb.append(", ");
            sb.append("headimgurl:");
            if (this.headimgurl == null) {
                sb.append("null");
            } else {
                sb.append(this.headimgurl);
            }
            first = false;
        }
        if (isSetPositionTitle()) {
            if (!first) sb.append(", ");
            sb.append("positionTitle:");
            if (this.positionTitle == null) {
                sb.append("null");
            } else {
                sb.append(this.positionTitle);
            }
            first = false;
        }
        if (isSetPositionId()) {
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
        }
        if (isSetForwardName()) {
            if (!first) sb.append(", ");
            sb.append("forwardName:");
            if (this.forwardName == null) {
                sb.append("null");
            } else {
                sb.append(this.forwardName);
            }
            first = false;
        }
        if (isSetForwardSourceWx()) {
            if (!first) sb.append(", ");
            sb.append("forwardSourceWx:");
            sb.append(this.forwardSourceWx);
            first = false;
        }
        if (isSetReferralId()) {
            if (!first) sb.append(", ");
            sb.append("referralId:");
            sb.append(this.referralId);
            first = false;
        }
        if (isSetClickTime()) {
            if (!first) sb.append(", ");
            sb.append("clickTime:");
            if (this.clickTime == null) {
                sb.append("null");
            } else {
                sb.append(this.clickTime);
            }
            first = false;
        }
        if (isSetStatus()) {
            if (!first) sb.append(", ");
            sb.append("status:");
            sb.append(this.status);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class RadarUserInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public RadarUserInfoStandardScheme getScheme() {
            return new RadarUserInfoStandardScheme();
        }
    }

    private static class RadarUserInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<RadarUserInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, RadarUserInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.userId = iprot.readI32();
                            struct.setUserIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NICKNAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.nickname = iprot.readString();
                            struct.setNicknameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // VIEW_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.viewCount = iprot.readI32();
                            struct.setViewCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // SEEK_RECOMMEND
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.seekRecommend = iprot.readBool();
                            struct.setSeekRecommendIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DEPTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.depth = iprot.readI32();
                            struct.setDepthIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // HEADIMGURL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.headimgurl = iprot.readString();
                            struct.setHeadimgurlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // POSITION_TITLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.positionTitle = iprot.readString();
                            struct.setPositionTitleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // POSITION_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.positionId = iprot.readI32();
                            struct.setPositionIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // FORWARD_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.forwardName = iprot.readString();
                            struct.setForwardNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // FORWARD_SOURCE_WX
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.forwardSourceWx = iprot.readBool();
                            struct.setForwardSourceWxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // REFERRAL_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.referralId = iprot.readI32();
                            struct.setReferralIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // CLICK_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.clickTime = iprot.readString();
                            struct.setClickTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // STATUS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.status = iprot.readI32();
                            struct.setStatusIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, RadarUserInfo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetUserId()) {
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
            }
            if (struct.nickname != null) {
                if (struct.isSetNickname()) {
                    oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
                    oprot.writeString(struct.nickname);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetViewCount()) {
                oprot.writeFieldBegin(VIEW_COUNT_FIELD_DESC);
                oprot.writeI32(struct.viewCount);
                oprot.writeFieldEnd();
            }
            if (struct.isSetSeekRecommend()) {
                oprot.writeFieldBegin(SEEK_RECOMMEND_FIELD_DESC);
                oprot.writeBool(struct.seekRecommend);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDepth()) {
                oprot.writeFieldBegin(DEPTH_FIELD_DESC);
                oprot.writeI32(struct.depth);
                oprot.writeFieldEnd();
            }
            if (struct.headimgurl != null) {
                if (struct.isSetHeadimgurl()) {
                    oprot.writeFieldBegin(HEADIMGURL_FIELD_DESC);
                    oprot.writeString(struct.headimgurl);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.positionTitle != null) {
                if (struct.isSetPositionTitle()) {
                    oprot.writeFieldBegin(POSITION_TITLE_FIELD_DESC);
                    oprot.writeString(struct.positionTitle);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetPositionId()) {
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
            }
            if (struct.forwardName != null) {
                if (struct.isSetForwardName()) {
                    oprot.writeFieldBegin(FORWARD_NAME_FIELD_DESC);
                    oprot.writeString(struct.forwardName);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetForwardSourceWx()) {
                oprot.writeFieldBegin(FORWARD_SOURCE_WX_FIELD_DESC);
                oprot.writeBool(struct.forwardSourceWx);
                oprot.writeFieldEnd();
            }
            if (struct.isSetReferralId()) {
                oprot.writeFieldBegin(REFERRAL_ID_FIELD_DESC);
                oprot.writeI32(struct.referralId);
                oprot.writeFieldEnd();
            }
            if (struct.clickTime != null) {
                if (struct.isSetClickTime()) {
                    oprot.writeFieldBegin(CLICK_TIME_FIELD_DESC);
                    oprot.writeString(struct.clickTime);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetStatus()) {
                oprot.writeFieldBegin(STATUS_FIELD_DESC);
                oprot.writeI32(struct.status);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class RadarUserInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public RadarUserInfoTupleScheme getScheme() {
            return new RadarUserInfoTupleScheme();
        }
    }

    private static class RadarUserInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<RadarUserInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, RadarUserInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetUserId()) {
                optionals.set(0);
            }
            if (struct.isSetNickname()) {
                optionals.set(1);
            }
            if (struct.isSetViewCount()) {
                optionals.set(2);
            }
            if (struct.isSetSeekRecommend()) {
                optionals.set(3);
            }
            if (struct.isSetDepth()) {
                optionals.set(4);
            }
            if (struct.isSetHeadimgurl()) {
                optionals.set(5);
            }
            if (struct.isSetPositionTitle()) {
                optionals.set(6);
            }
            if (struct.isSetPositionId()) {
                optionals.set(7);
            }
            if (struct.isSetForwardName()) {
                optionals.set(8);
            }
            if (struct.isSetForwardSourceWx()) {
                optionals.set(9);
            }
            if (struct.isSetReferralId()) {
                optionals.set(10);
            }
            if (struct.isSetClickTime()) {
                optionals.set(11);
            }
            if (struct.isSetStatus()) {
                optionals.set(12);
            }
            oprot.writeBitSet(optionals, 13);
            if (struct.isSetUserId()) {
                oprot.writeI32(struct.userId);
            }
            if (struct.isSetNickname()) {
                oprot.writeString(struct.nickname);
            }
            if (struct.isSetViewCount()) {
                oprot.writeI32(struct.viewCount);
            }
            if (struct.isSetSeekRecommend()) {
                oprot.writeBool(struct.seekRecommend);
            }
            if (struct.isSetDepth()) {
                oprot.writeI32(struct.depth);
            }
            if (struct.isSetHeadimgurl()) {
                oprot.writeString(struct.headimgurl);
            }
            if (struct.isSetPositionTitle()) {
                oprot.writeString(struct.positionTitle);
            }
            if (struct.isSetPositionId()) {
                oprot.writeI32(struct.positionId);
            }
            if (struct.isSetForwardName()) {
                oprot.writeString(struct.forwardName);
            }
            if (struct.isSetForwardSourceWx()) {
                oprot.writeBool(struct.forwardSourceWx);
            }
            if (struct.isSetReferralId()) {
                oprot.writeI32(struct.referralId);
            }
            if (struct.isSetClickTime()) {
                oprot.writeString(struct.clickTime);
            }
            if (struct.isSetStatus()) {
                oprot.writeI32(struct.status);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, RadarUserInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(13);
            if (incoming.get(0)) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.viewCount = iprot.readI32();
                struct.setViewCountIsSet(true);
            }
            if (incoming.get(3)) {
                struct.seekRecommend = iprot.readBool();
                struct.setSeekRecommendIsSet(true);
            }
            if (incoming.get(4)) {
                struct.depth = iprot.readI32();
                struct.setDepthIsSet(true);
            }
            if (incoming.get(5)) {
                struct.headimgurl = iprot.readString();
                struct.setHeadimgurlIsSet(true);
            }
            if (incoming.get(6)) {
                struct.positionTitle = iprot.readString();
                struct.setPositionTitleIsSet(true);
            }
            if (incoming.get(7)) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
            }
            if (incoming.get(8)) {
                struct.forwardName = iprot.readString();
                struct.setForwardNameIsSet(true);
            }
            if (incoming.get(9)) {
                struct.forwardSourceWx = iprot.readBool();
                struct.setForwardSourceWxIsSet(true);
            }
            if (incoming.get(10)) {
                struct.referralId = iprot.readI32();
                struct.setReferralIdIsSet(true);
            }
            if (incoming.get(11)) {
                struct.clickTime = iprot.readString();
                struct.setClickTimeIsSet(true);
            }
            if (incoming.get(12)) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

