/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ConfigSysAdministratorDO implements org.apache.thrift.TBase<ConfigSysAdministratorDO, ConfigSysAdministratorDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysAdministratorDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysAdministratorDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDisable", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AUTH_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authGroupId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysAdministratorDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysAdministratorDOTupleSchemeFactory();

  public int id; // optional
  public String name; // optional
  public String email; // optional
  public String mobile; // optional
  public String password; // optional
  public int isDisable; // optional
  public int loginCount; // optional
  public String lastLoginTime; // optional
  public String createTime; // optional
  public int authGroupId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    EMAIL((short)3, "email"),
    MOBILE((short)4, "mobile"),
    PASSWORD((short)5, "password"),
    IS_DISABLE((short)6, "isDisable"),
    LOGIN_COUNT((short)7, "loginCount"),
    LAST_LOGIN_TIME((short)8, "lastLoginTime"),
    CREATE_TIME((short)9, "createTime"),
    AUTH_GROUP_ID((short)10, "authGroupId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // EMAIL
          return EMAIL;
        case 4: // MOBILE
          return MOBILE;
        case 5: // PASSWORD
          return PASSWORD;
        case 6: // IS_DISABLE
          return IS_DISABLE;
        case 7: // LOGIN_COUNT
          return LOGIN_COUNT;
        case 8: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // AUTH_GROUP_ID
          return AUTH_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISDISABLE_ISSET_ID = 1;
  private static final int __LOGINCOUNT_ISSET_ID = 2;
  private static final int __AUTHGROUPID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.EMAIL,_Fields.MOBILE,_Fields.PASSWORD,_Fields.IS_DISABLE,_Fields.LOGIN_COUNT,_Fields.LAST_LOGIN_TIME,_Fields.CREATE_TIME,_Fields.AUTH_GROUP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DISABLE, new org.apache.thrift.meta_data.FieldMetaData("isDisable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loginCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("authGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysAdministratorDO.class, metaDataMap);
  }

  public ConfigSysAdministratorDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysAdministratorDO(ConfigSysAdministratorDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.isDisable = other.isDisable;
    this.loginCount = other.loginCount;
    if (other.isSetLastLoginTime()) {
      this.lastLoginTime = other.lastLoginTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.authGroupId = other.authGroupId;
  }

  public ConfigSysAdministratorDO deepCopy() {
    return new ConfigSysAdministratorDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.email = null;
    this.mobile = null;
    this.password = null;
    setIsDisableIsSet(false);
    this.isDisable = 0;
    setLoginCountIsSet(false);
    this.loginCount = 0;
    this.lastLoginTime = null;
    this.createTime = null;
    setAuthGroupIdIsSet(false);
    this.authGroupId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysAdministratorDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ConfigSysAdministratorDO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public ConfigSysAdministratorDO setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public ConfigSysAdministratorDO setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public ConfigSysAdministratorDO setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getIsDisable() {
    return this.isDisable;
  }

  public ConfigSysAdministratorDO setIsDisable(int isDisable) {
    this.isDisable = isDisable;
    setIsDisableIsSet(true);
    return this;
  }

  public void unsetIsDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDISABLE_ISSET_ID);
  }

  /** Returns true if field isDisable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDISABLE_ISSET_ID);
  }

  public void setIsDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDISABLE_ISSET_ID, value);
  }

  public int getLoginCount() {
    return this.loginCount;
  }

  public ConfigSysAdministratorDO setLoginCount(int loginCount) {
    this.loginCount = loginCount;
    setLoginCountIsSet(true);
    return this;
  }

  public void unsetLoginCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  /** Returns true if field loginCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  public void setLoginCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID, value);
  }

  public String getLastLoginTime() {
    return this.lastLoginTime;
  }

  public ConfigSysAdministratorDO setLastLoginTime(String lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    return this;
  }

  public void unsetLastLoginTime() {
    this.lastLoginTime = null;
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return this.lastLoginTime != null;
  }

  public void setLastLoginTimeIsSet(boolean value) {
    if (!value) {
      this.lastLoginTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ConfigSysAdministratorDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getAuthGroupId() {
    return this.authGroupId;
  }

  public ConfigSysAdministratorDO setAuthGroupId(int authGroupId) {
    this.authGroupId = authGroupId;
    setAuthGroupIdIsSet(true);
    return this;
  }

  public void unsetAuthGroupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTHGROUPID_ISSET_ID);
  }

  /** Returns true if field authGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthGroupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTHGROUPID_ISSET_ID);
  }

  public void setAuthGroupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTHGROUPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case IS_DISABLE:
      if (value == null) {
        unsetIsDisable();
      } else {
        setIsDisable((Integer)value);
      }
      break;

    case LOGIN_COUNT:
      if (value == null) {
        unsetLoginCount();
      } else {
        setLoginCount((Integer)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case AUTH_GROUP_ID:
      if (value == null) {
        unsetAuthGroupId();
      } else {
        setAuthGroupId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case PASSWORD:
      return getPassword();

    case IS_DISABLE:
      return getIsDisable();

    case LOGIN_COUNT:
      return getLoginCount();

    case LAST_LOGIN_TIME:
      return getLastLoginTime();

    case CREATE_TIME:
      return getCreateTime();

    case AUTH_GROUP_ID:
      return getAuthGroupId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case PASSWORD:
      return isSetPassword();
    case IS_DISABLE:
      return isSetIsDisable();
    case LOGIN_COUNT:
      return isSetLoginCount();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case AUTH_GROUP_ID:
      return isSetAuthGroupId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysAdministratorDO)
      return this.equals((ConfigSysAdministratorDO)that);
    return false;
  }

  public boolean equals(ConfigSysAdministratorDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_isDisable = true && this.isSetIsDisable();
    boolean that_present_isDisable = true && that.isSetIsDisable();
    if (this_present_isDisable || that_present_isDisable) {
      if (!(this_present_isDisable && that_present_isDisable))
        return false;
      if (this.isDisable != that.isDisable)
        return false;
    }

    boolean this_present_loginCount = true && this.isSetLoginCount();
    boolean that_present_loginCount = true && that.isSetLoginCount();
    if (this_present_loginCount || that_present_loginCount) {
      if (!(this_present_loginCount && that_present_loginCount))
        return false;
      if (this.loginCount != that.loginCount)
        return false;
    }

    boolean this_present_lastLoginTime = true && this.isSetLastLoginTime();
    boolean that_present_lastLoginTime = true && that.isSetLastLoginTime();
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (!this.lastLoginTime.equals(that.lastLoginTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_authGroupId = true && this.isSetAuthGroupId();
    boolean that_present_authGroupId = true && that.isSetAuthGroupId();
    if (this_present_authGroupId || that_present_authGroupId) {
      if (!(this_present_authGroupId && that_present_authGroupId))
        return false;
      if (this.authGroupId != that.authGroupId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsDisable()) ? 131071 : 524287);
    if (isSetIsDisable())
      hashCode = hashCode * 8191 + isDisable;

    hashCode = hashCode * 8191 + ((isSetLoginCount()) ? 131071 : 524287);
    if (isSetLoginCount())
      hashCode = hashCode * 8191 + loginCount;

    hashCode = hashCode * 8191 + ((isSetLastLoginTime()) ? 131071 : 524287);
    if (isSetLastLoginTime())
      hashCode = hashCode * 8191 + lastLoginTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthGroupId()) ? 131071 : 524287);
    if (isSetAuthGroupId())
      hashCode = hashCode * 8191 + authGroupId;

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysAdministratorDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDisable()).compareTo(other.isSetIsDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDisable, other.isDisable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginCount()).compareTo(other.isSetLoginCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginCount, other.loginCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthGroupId()).compareTo(other.isSetAuthGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authGroupId, other.authGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysAdministratorDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetIsDisable()) {
      if (!first) sb.append(", ");
      sb.append("isDisable:");
      sb.append(this.isDisable);
      first = false;
    }
    if (isSetLoginCount()) {
      if (!first) sb.append(", ");
      sb.append("loginCount:");
      sb.append(this.loginCount);
      first = false;
    }
    if (isSetLastLoginTime()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginTime:");
      if (this.lastLoginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginTime);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetAuthGroupId()) {
      if (!first) sb.append(", ");
      sb.append("authGroupId:");
      sb.append(this.authGroupId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysAdministratorDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysAdministratorDOStandardScheme getScheme() {
      return new ConfigSysAdministratorDOStandardScheme();
    }
  }

  private static class ConfigSysAdministratorDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysAdministratorDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysAdministratorDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDisable = iprot.readI32();
              struct.setIsDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginCount = iprot.readI32();
              struct.setLoginCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginTime = iprot.readString();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUTH_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authGroupId = iprot.readI32();
              struct.setAuthGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysAdministratorDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDisable()) {
        oprot.writeFieldBegin(IS_DISABLE_FIELD_DESC);
        oprot.writeI32(struct.isDisable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoginCount()) {
        oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.loginCount);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginTime != null) {
        if (struct.isSetLastLoginTime()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.lastLoginTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuthGroupId()) {
        oprot.writeFieldBegin(AUTH_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.authGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysAdministratorDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysAdministratorDOTupleScheme getScheme() {
      return new ConfigSysAdministratorDOTupleScheme();
    }
  }

  private static class ConfigSysAdministratorDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysAdministratorDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysAdministratorDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetEmail()) {
        optionals.set(2);
      }
      if (struct.isSetMobile()) {
        optionals.set(3);
      }
      if (struct.isSetPassword()) {
        optionals.set(4);
      }
      if (struct.isSetIsDisable()) {
        optionals.set(5);
      }
      if (struct.isSetLoginCount()) {
        optionals.set(6);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetAuthGroupId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetIsDisable()) {
        oprot.writeI32(struct.isDisable);
      }
      if (struct.isSetLoginCount()) {
        oprot.writeI32(struct.loginCount);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeString(struct.lastLoginTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetAuthGroupId()) {
        oprot.writeI32(struct.authGroupId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysAdministratorDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isDisable = iprot.readI32();
        struct.setIsDisableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loginCount = iprot.readI32();
        struct.setLoginCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastLoginTime = iprot.readString();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.authGroupId = iprot.readI32();
        struct.setAuthGroupIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

