/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-30")
public class WorkExp implements org.apache.thrift.TBase<WorkExp, WorkExp._Fields>, java.io.Serializable, Cloneable, Comparable<WorkExp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkExp");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_UNTIL_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("end_until_now", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField SALARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_type", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField SALARY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_code", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INDUSTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("industry_code", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField INDUSTRY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("industry_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("department_name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField POSITION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("position_code", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField POSITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("position_name", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("city_code", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("city_name", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REPORT_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("report_to", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UNDERLINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("underlings", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField RESIGN_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("resign_reason", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACHIEVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("achievement", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("company_name", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField COMPANY_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("company_logo", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I16, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkExpStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkExpTupleSchemeFactory());
  }

  public int id; // required
  public int profile_id; // required
  public String start_date; // required
  public String end_date; // required
  public short end_until_now; // required
  public short salary_type; // required
  public int salary_code; // required
  public int industry_code; // required
  public String industry_name; // required
  public int company_id; // required
  public String department_name; // required
  public int position_code; // required
  public String position_name; // required
  public String description; // required
  public short type; // required
  public int city_code; // required
  public String city_name; // required
  public String report_to; // required
  public int underlings; // required
  public String reference; // required
  public String resign_reason; // required
  public String achievement; // required
  public String create_time; // required
  public String update_time; // required
  public String company_name; // required
  public String company_logo; // required
  public short source; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profile_id"),
    START_DATE((short)3, "start_date"),
    END_DATE((short)4, "end_date"),
    END_UNTIL_NOW((short)5, "end_until_now"),
    SALARY_TYPE((short)6, "salary_type"),
    SALARY_CODE((short)7, "salary_code"),
    INDUSTRY_CODE((short)8, "industry_code"),
    INDUSTRY_NAME((short)9, "industry_name"),
    COMPANY_ID((short)10, "company_id"),
    DEPARTMENT_NAME((short)11, "department_name"),
    POSITION_CODE((short)12, "position_code"),
    POSITION_NAME((short)13, "position_name"),
    DESCRIPTION((short)14, "description"),
    TYPE((short)15, "type"),
    CITY_CODE((short)16, "city_code"),
    CITY_NAME((short)17, "city_name"),
    REPORT_TO((short)18, "report_to"),
    UNDERLINGS((short)19, "underlings"),
    REFERENCE((short)20, "reference"),
    RESIGN_REASON((short)21, "resign_reason"),
    ACHIEVEMENT((short)22, "achievement"),
    CREATE_TIME((short)23, "create_time"),
    UPDATE_TIME((short)24, "update_time"),
    COMPANY_NAME((short)25, "company_name"),
    COMPANY_LOGO((short)26, "company_logo"),
    SOURCE((short)27, "source");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // END_UNTIL_NOW
          return END_UNTIL_NOW;
        case 6: // SALARY_TYPE
          return SALARY_TYPE;
        case 7: // SALARY_CODE
          return SALARY_CODE;
        case 8: // INDUSTRY_CODE
          return INDUSTRY_CODE;
        case 9: // INDUSTRY_NAME
          return INDUSTRY_NAME;
        case 10: // COMPANY_ID
          return COMPANY_ID;
        case 11: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 12: // POSITION_CODE
          return POSITION_CODE;
        case 13: // POSITION_NAME
          return POSITION_NAME;
        case 14: // DESCRIPTION
          return DESCRIPTION;
        case 15: // TYPE
          return TYPE;
        case 16: // CITY_CODE
          return CITY_CODE;
        case 17: // CITY_NAME
          return CITY_NAME;
        case 18: // REPORT_TO
          return REPORT_TO;
        case 19: // UNDERLINGS
          return UNDERLINGS;
        case 20: // REFERENCE
          return REFERENCE;
        case 21: // RESIGN_REASON
          return RESIGN_REASON;
        case 22: // ACHIEVEMENT
          return ACHIEVEMENT;
        case 23: // CREATE_TIME
          return CREATE_TIME;
        case 24: // UPDATE_TIME
          return UPDATE_TIME;
        case 25: // COMPANY_NAME
          return COMPANY_NAME;
        case 26: // COMPANY_LOGO
          return COMPANY_LOGO;
        case 27: // SOURCE
          return SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILE_ID_ISSET_ID = 1;
  private static final int __END_UNTIL_NOW_ISSET_ID = 2;
  private static final int __SALARY_TYPE_ISSET_ID = 3;
  private static final int __SALARY_CODE_ISSET_ID = 4;
  private static final int __INDUSTRY_CODE_ISSET_ID = 5;
  private static final int __COMPANY_ID_ISSET_ID = 6;
  private static final int __POSITION_CODE_ISSET_ID = 7;
  private static final int __TYPE_ISSET_ID = 8;
  private static final int __CITY_CODE_ISSET_ID = 9;
  private static final int __UNDERLINGS_ISSET_ID = 10;
  private static final int __SOURCE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.END_UNTIL_NOW, new org.apache.thrift.meta_data.FieldMetaData("end_until_now", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("salary_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_CODE, new org.apache.thrift.meta_data.FieldMetaData("salary_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDUSTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("industry_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDUSTRY_NAME, new org.apache.thrift.meta_data.FieldMetaData("industry_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("department_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_CODE, new org.apache.thrift.meta_data.FieldMetaData("position_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("position_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("city_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("city_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_TO, new org.apache.thrift.meta_data.FieldMetaData("report_to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNDERLINGS, new org.apache.thrift.meta_data.FieldMetaData("underlings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESIGN_REASON, new org.apache.thrift.meta_data.FieldMetaData("resign_reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACHIEVEMENT, new org.apache.thrift.meta_data.FieldMetaData("achievement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("company_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_LOGO, new org.apache.thrift.meta_data.FieldMetaData("company_logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkExp.class, metaDataMap);
  }

  public WorkExp() {
  }

  public WorkExp(
    int id,
    int profile_id,
    String start_date,
    String end_date,
    short end_until_now,
    short salary_type,
    int salary_code,
    int industry_code,
    String industry_name,
    int company_id,
    String department_name,
    int position_code,
    String position_name,
    String description,
    short type,
    int city_code,
    String city_name,
    String report_to,
    int underlings,
    String reference,
    String resign_reason,
    String achievement,
    String create_time,
    String update_time,
    String company_name,
    String company_logo,
    short source)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    this.start_date = start_date;
    this.end_date = end_date;
    this.end_until_now = end_until_now;
    setEnd_until_nowIsSet(true);
    this.salary_type = salary_type;
    setSalary_typeIsSet(true);
    this.salary_code = salary_code;
    setSalary_codeIsSet(true);
    this.industry_code = industry_code;
    setIndustry_codeIsSet(true);
    this.industry_name = industry_name;
    this.company_id = company_id;
    setCompany_idIsSet(true);
    this.department_name = department_name;
    this.position_code = position_code;
    setPosition_codeIsSet(true);
    this.position_name = position_name;
    this.description = description;
    this.type = type;
    setTypeIsSet(true);
    this.city_code = city_code;
    setCity_codeIsSet(true);
    this.city_name = city_name;
    this.report_to = report_to;
    this.underlings = underlings;
    setUnderlingsIsSet(true);
    this.reference = reference;
    this.resign_reason = resign_reason;
    this.achievement = achievement;
    this.create_time = create_time;
    this.update_time = update_time;
    this.company_name = company_name;
    this.company_logo = company_logo;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkExp(WorkExp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profile_id = other.profile_id;
    if (other.isSetStart_date()) {
      this.start_date = other.start_date;
    }
    if (other.isSetEnd_date()) {
      this.end_date = other.end_date;
    }
    this.end_until_now = other.end_until_now;
    this.salary_type = other.salary_type;
    this.salary_code = other.salary_code;
    this.industry_code = other.industry_code;
    if (other.isSetIndustry_name()) {
      this.industry_name = other.industry_name;
    }
    this.company_id = other.company_id;
    if (other.isSetDepartment_name()) {
      this.department_name = other.department_name;
    }
    this.position_code = other.position_code;
    if (other.isSetPosition_name()) {
      this.position_name = other.position_name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.type = other.type;
    this.city_code = other.city_code;
    if (other.isSetCity_name()) {
      this.city_name = other.city_name;
    }
    if (other.isSetReport_to()) {
      this.report_to = other.report_to;
    }
    this.underlings = other.underlings;
    if (other.isSetReference()) {
      this.reference = other.reference;
    }
    if (other.isSetResign_reason()) {
      this.resign_reason = other.resign_reason;
    }
    if (other.isSetAchievement()) {
      this.achievement = other.achievement;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    if (other.isSetCompany_name()) {
      this.company_name = other.company_name;
    }
    if (other.isSetCompany_logo()) {
      this.company_logo = other.company_logo;
    }
    this.source = other.source;
  }

  public WorkExp deepCopy() {
    return new WorkExp(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfile_idIsSet(false);
    this.profile_id = 0;
    this.start_date = null;
    this.end_date = null;
    setEnd_until_nowIsSet(false);
    this.end_until_now = 0;
    setSalary_typeIsSet(false);
    this.salary_type = 0;
    setSalary_codeIsSet(false);
    this.salary_code = 0;
    setIndustry_codeIsSet(false);
    this.industry_code = 0;
    this.industry_name = null;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.department_name = null;
    setPosition_codeIsSet(false);
    this.position_code = 0;
    this.position_name = null;
    this.description = null;
    setTypeIsSet(false);
    this.type = 0;
    setCity_codeIsSet(false);
    this.city_code = 0;
    this.city_name = null;
    this.report_to = null;
    setUnderlingsIsSet(false);
    this.underlings = 0;
    this.reference = null;
    this.resign_reason = null;
    this.achievement = null;
    this.create_time = null;
    this.update_time = null;
    this.company_name = null;
    this.company_logo = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public int getId() {
    return this.id;
  }

  public WorkExp setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfile_id() {
    return this.profile_id;
  }

  public WorkExp setProfile_id(int profile_id) {
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    return this;
  }

  public void unsetProfile_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  /** Returns true if field profile_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  public void setProfile_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILE_ID_ISSET_ID, value);
  }

  public String getStart_date() {
    return this.start_date;
  }

  public WorkExp setStart_date(String start_date) {
    this.start_date = start_date;
    return this;
  }

  public void unsetStart_date() {
    this.start_date = null;
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return this.start_date != null;
  }

  public void setStart_dateIsSet(boolean value) {
    if (!value) {
      this.start_date = null;
    }
  }

  public String getEnd_date() {
    return this.end_date;
  }

  public WorkExp setEnd_date(String end_date) {
    this.end_date = end_date;
    return this;
  }

  public void unsetEnd_date() {
    this.end_date = null;
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return this.end_date != null;
  }

  public void setEnd_dateIsSet(boolean value) {
    if (!value) {
      this.end_date = null;
    }
  }

  public short getEnd_until_now() {
    return this.end_until_now;
  }

  public WorkExp setEnd_until_now(short end_until_now) {
    this.end_until_now = end_until_now;
    setEnd_until_nowIsSet(true);
    return this;
  }

  public void unsetEnd_until_now() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID);
  }

  /** Returns true if field end_until_now is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_until_now() {
    return EncodingUtils.testBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID);
  }

  public void setEnd_until_nowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID, value);
  }

  public short getSalary_type() {
    return this.salary_type;
  }

  public WorkExp setSalary_type(short salary_type) {
    this.salary_type = salary_type;
    setSalary_typeIsSet(true);
    return this;
  }

  public void unsetSalary_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  /** Returns true if field salary_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  public void setSalary_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID, value);
  }

  public int getSalary_code() {
    return this.salary_code;
  }

  public WorkExp setSalary_code(int salary_code) {
    this.salary_code = salary_code;
    setSalary_codeIsSet(true);
    return this;
  }

  public void unsetSalary_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  /** Returns true if field salary_code is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_code() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  public void setSalary_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_CODE_ISSET_ID, value);
  }

  public int getIndustry_code() {
    return this.industry_code;
  }

  public WorkExp setIndustry_code(int industry_code) {
    this.industry_code = industry_code;
    setIndustry_codeIsSet(true);
    return this;
  }

  public void unsetIndustry_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDUSTRY_CODE_ISSET_ID);
  }

  /** Returns true if field industry_code is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustry_code() {
    return EncodingUtils.testBit(__isset_bitfield, __INDUSTRY_CODE_ISSET_ID);
  }

  public void setIndustry_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDUSTRY_CODE_ISSET_ID, value);
  }

  public String getIndustry_name() {
    return this.industry_name;
  }

  public WorkExp setIndustry_name(String industry_name) {
    this.industry_name = industry_name;
    return this;
  }

  public void unsetIndustry_name() {
    this.industry_name = null;
  }

  /** Returns true if field industry_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustry_name() {
    return this.industry_name != null;
  }

  public void setIndustry_nameIsSet(boolean value) {
    if (!value) {
      this.industry_name = null;
    }
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public WorkExp setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public String getDepartment_name() {
    return this.department_name;
  }

  public WorkExp setDepartment_name(String department_name) {
    this.department_name = department_name;
    return this;
  }

  public void unsetDepartment_name() {
    this.department_name = null;
  }

  /** Returns true if field department_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment_name() {
    return this.department_name != null;
  }

  public void setDepartment_nameIsSet(boolean value) {
    if (!value) {
      this.department_name = null;
    }
  }

  public int getPosition_code() {
    return this.position_code;
  }

  public WorkExp setPosition_code(int position_code) {
    this.position_code = position_code;
    setPosition_codeIsSet(true);
    return this;
  }

  public void unsetPosition_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_CODE_ISSET_ID);
  }

  /** Returns true if field position_code is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_code() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_CODE_ISSET_ID);
  }

  public void setPosition_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_CODE_ISSET_ID, value);
  }

  public String getPosition_name() {
    return this.position_name;
  }

  public WorkExp setPosition_name(String position_name) {
    this.position_name = position_name;
    return this;
  }

  public void unsetPosition_name() {
    this.position_name = null;
  }

  /** Returns true if field position_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_name() {
    return this.position_name != null;
  }

  public void setPosition_nameIsSet(boolean value) {
    if (!value) {
      this.position_name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public WorkExp setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public short getType() {
    return this.type;
  }

  public WorkExp setType(short type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getCity_code() {
    return this.city_code;
  }

  public WorkExp setCity_code(int city_code) {
    this.city_code = city_code;
    setCity_codeIsSet(true);
    return this;
  }

  public void unsetCity_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_CODE_ISSET_ID);
  }

  /** Returns true if field city_code is set (has been assigned a value) and false otherwise */
  public boolean isSetCity_code() {
    return EncodingUtils.testBit(__isset_bitfield, __CITY_CODE_ISSET_ID);
  }

  public void setCity_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_CODE_ISSET_ID, value);
  }

  public String getCity_name() {
    return this.city_name;
  }

  public WorkExp setCity_name(String city_name) {
    this.city_name = city_name;
    return this;
  }

  public void unsetCity_name() {
    this.city_name = null;
  }

  /** Returns true if field city_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCity_name() {
    return this.city_name != null;
  }

  public void setCity_nameIsSet(boolean value) {
    if (!value) {
      this.city_name = null;
    }
  }

  public String getReport_to() {
    return this.report_to;
  }

  public WorkExp setReport_to(String report_to) {
    this.report_to = report_to;
    return this;
  }

  public void unsetReport_to() {
    this.report_to = null;
  }

  /** Returns true if field report_to is set (has been assigned a value) and false otherwise */
  public boolean isSetReport_to() {
    return this.report_to != null;
  }

  public void setReport_toIsSet(boolean value) {
    if (!value) {
      this.report_to = null;
    }
  }

  public int getUnderlings() {
    return this.underlings;
  }

  public WorkExp setUnderlings(int underlings) {
    this.underlings = underlings;
    setUnderlingsIsSet(true);
    return this;
  }

  public void unsetUnderlings() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  /** Returns true if field underlings is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlings() {
    return EncodingUtils.testBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  public void setUnderlingsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNDERLINGS_ISSET_ID, value);
  }

  public String getReference() {
    return this.reference;
  }

  public WorkExp setReference(String reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  public String getResign_reason() {
    return this.resign_reason;
  }

  public WorkExp setResign_reason(String resign_reason) {
    this.resign_reason = resign_reason;
    return this;
  }

  public void unsetResign_reason() {
    this.resign_reason = null;
  }

  /** Returns true if field resign_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetResign_reason() {
    return this.resign_reason != null;
  }

  public void setResign_reasonIsSet(boolean value) {
    if (!value) {
      this.resign_reason = null;
    }
  }

  public String getAchievement() {
    return this.achievement;
  }

  public WorkExp setAchievement(String achievement) {
    this.achievement = achievement;
    return this;
  }

  public void unsetAchievement() {
    this.achievement = null;
  }

  /** Returns true if field achievement is set (has been assigned a value) and false otherwise */
  public boolean isSetAchievement() {
    return this.achievement != null;
  }

  public void setAchievementIsSet(boolean value) {
    if (!value) {
      this.achievement = null;
    }
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public WorkExp setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public WorkExp setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public String getCompany_name() {
    return this.company_name;
  }

  public WorkExp setCompany_name(String company_name) {
    this.company_name = company_name;
    return this;
  }

  public void unsetCompany_name() {
    this.company_name = null;
  }

  /** Returns true if field company_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_name() {
    return this.company_name != null;
  }

  public void setCompany_nameIsSet(boolean value) {
    if (!value) {
      this.company_name = null;
    }
  }

  public String getCompany_logo() {
    return this.company_logo;
  }

  public WorkExp setCompany_logo(String company_logo) {
    this.company_logo = company_logo;
    return this;
  }

  public void unsetCompany_logo() {
    this.company_logo = null;
  }

  /** Returns true if field company_logo is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_logo() {
    return this.company_logo != null;
  }

  public void setCompany_logoIsSet(boolean value) {
    if (!value) {
      this.company_logo = null;
    }
  }

  public short getSource() {
    return this.source;
  }

  public WorkExp setSource(short source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfile_id();
      } else {
        setProfile_id((Integer)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEnd_date();
      } else {
        setEnd_date((String)value);
      }
      break;

    case END_UNTIL_NOW:
      if (value == null) {
        unsetEnd_until_now();
      } else {
        setEnd_until_now((Short)value);
      }
      break;

    case SALARY_TYPE:
      if (value == null) {
        unsetSalary_type();
      } else {
        setSalary_type((Short)value);
      }
      break;

    case SALARY_CODE:
      if (value == null) {
        unsetSalary_code();
      } else {
        setSalary_code((Integer)value);
      }
      break;

    case INDUSTRY_CODE:
      if (value == null) {
        unsetIndustry_code();
      } else {
        setIndustry_code((Integer)value);
      }
      break;

    case INDUSTRY_NAME:
      if (value == null) {
        unsetIndustry_name();
      } else {
        setIndustry_name((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartment_name();
      } else {
        setDepartment_name((String)value);
      }
      break;

    case POSITION_CODE:
      if (value == null) {
        unsetPosition_code();
      } else {
        setPosition_code((Integer)value);
      }
      break;

    case POSITION_NAME:
      if (value == null) {
        unsetPosition_name();
      } else {
        setPosition_name((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Short)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCity_code();
      } else {
        setCity_code((Integer)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCity_name();
      } else {
        setCity_name((String)value);
      }
      break;

    case REPORT_TO:
      if (value == null) {
        unsetReport_to();
      } else {
        setReport_to((String)value);
      }
      break;

    case UNDERLINGS:
      if (value == null) {
        unsetUnderlings();
      } else {
        setUnderlings((Integer)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((String)value);
      }
      break;

    case RESIGN_REASON:
      if (value == null) {
        unsetResign_reason();
      } else {
        setResign_reason((String)value);
      }
      break;

    case ACHIEVEMENT:
      if (value == null) {
        unsetAchievement();
      } else {
        setAchievement((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompany_name();
      } else {
        setCompany_name((String)value);
      }
      break;

    case COMPANY_LOGO:
      if (value == null) {
        unsetCompany_logo();
      } else {
        setCompany_logo((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PROFILE_ID:
      return Integer.valueOf(getProfile_id());

    case START_DATE:
      return getStart_date();

    case END_DATE:
      return getEnd_date();

    case END_UNTIL_NOW:
      return Short.valueOf(getEnd_until_now());

    case SALARY_TYPE:
      return Short.valueOf(getSalary_type());

    case SALARY_CODE:
      return Integer.valueOf(getSalary_code());

    case INDUSTRY_CODE:
      return Integer.valueOf(getIndustry_code());

    case INDUSTRY_NAME:
      return getIndustry_name();

    case COMPANY_ID:
      return Integer.valueOf(getCompany_id());

    case DEPARTMENT_NAME:
      return getDepartment_name();

    case POSITION_CODE:
      return Integer.valueOf(getPosition_code());

    case POSITION_NAME:
      return getPosition_name();

    case DESCRIPTION:
      return getDescription();

    case TYPE:
      return Short.valueOf(getType());

    case CITY_CODE:
      return Integer.valueOf(getCity_code());

    case CITY_NAME:
      return getCity_name();

    case REPORT_TO:
      return getReport_to();

    case UNDERLINGS:
      return Integer.valueOf(getUnderlings());

    case REFERENCE:
      return getReference();

    case RESIGN_REASON:
      return getResign_reason();

    case ACHIEVEMENT:
      return getAchievement();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case COMPANY_NAME:
      return getCompany_name();

    case COMPANY_LOGO:
      return getCompany_logo();

    case SOURCE:
      return Short.valueOf(getSource());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfile_id();
    case START_DATE:
      return isSetStart_date();
    case END_DATE:
      return isSetEnd_date();
    case END_UNTIL_NOW:
      return isSetEnd_until_now();
    case SALARY_TYPE:
      return isSetSalary_type();
    case SALARY_CODE:
      return isSetSalary_code();
    case INDUSTRY_CODE:
      return isSetIndustry_code();
    case INDUSTRY_NAME:
      return isSetIndustry_name();
    case COMPANY_ID:
      return isSetCompany_id();
    case DEPARTMENT_NAME:
      return isSetDepartment_name();
    case POSITION_CODE:
      return isSetPosition_code();
    case POSITION_NAME:
      return isSetPosition_name();
    case DESCRIPTION:
      return isSetDescription();
    case TYPE:
      return isSetType();
    case CITY_CODE:
      return isSetCity_code();
    case CITY_NAME:
      return isSetCity_name();
    case REPORT_TO:
      return isSetReport_to();
    case UNDERLINGS:
      return isSetUnderlings();
    case REFERENCE:
      return isSetReference();
    case RESIGN_REASON:
      return isSetResign_reason();
    case ACHIEVEMENT:
      return isSetAchievement();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case COMPANY_NAME:
      return isSetCompany_name();
    case COMPANY_LOGO:
      return isSetCompany_logo();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkExp)
      return this.equals((WorkExp)that);
    return false;
  }

  public boolean equals(WorkExp that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profile_id = true;
    boolean that_present_profile_id = true;
    if (this_present_profile_id || that_present_profile_id) {
      if (!(this_present_profile_id && that_present_profile_id))
        return false;
      if (this.profile_id != that.profile_id)
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (!this.start_date.equals(that.start_date))
        return false;
    }

    boolean this_present_end_date = true && this.isSetEnd_date();
    boolean that_present_end_date = true && that.isSetEnd_date();
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (!this.end_date.equals(that.end_date))
        return false;
    }

    boolean this_present_end_until_now = true;
    boolean that_present_end_until_now = true;
    if (this_present_end_until_now || that_present_end_until_now) {
      if (!(this_present_end_until_now && that_present_end_until_now))
        return false;
      if (this.end_until_now != that.end_until_now)
        return false;
    }

    boolean this_present_salary_type = true;
    boolean that_present_salary_type = true;
    if (this_present_salary_type || that_present_salary_type) {
      if (!(this_present_salary_type && that_present_salary_type))
        return false;
      if (this.salary_type != that.salary_type)
        return false;
    }

    boolean this_present_salary_code = true;
    boolean that_present_salary_code = true;
    if (this_present_salary_code || that_present_salary_code) {
      if (!(this_present_salary_code && that_present_salary_code))
        return false;
      if (this.salary_code != that.salary_code)
        return false;
    }

    boolean this_present_industry_code = true;
    boolean that_present_industry_code = true;
    if (this_present_industry_code || that_present_industry_code) {
      if (!(this_present_industry_code && that_present_industry_code))
        return false;
      if (this.industry_code != that.industry_code)
        return false;
    }

    boolean this_present_industry_name = true && this.isSetIndustry_name();
    boolean that_present_industry_name = true && that.isSetIndustry_name();
    if (this_present_industry_name || that_present_industry_name) {
      if (!(this_present_industry_name && that_present_industry_name))
        return false;
      if (!this.industry_name.equals(that.industry_name))
        return false;
    }

    boolean this_present_company_id = true;
    boolean that_present_company_id = true;
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_department_name = true && this.isSetDepartment_name();
    boolean that_present_department_name = true && that.isSetDepartment_name();
    if (this_present_department_name || that_present_department_name) {
      if (!(this_present_department_name && that_present_department_name))
        return false;
      if (!this.department_name.equals(that.department_name))
        return false;
    }

    boolean this_present_position_code = true;
    boolean that_present_position_code = true;
    if (this_present_position_code || that_present_position_code) {
      if (!(this_present_position_code && that_present_position_code))
        return false;
      if (this.position_code != that.position_code)
        return false;
    }

    boolean this_present_position_name = true && this.isSetPosition_name();
    boolean that_present_position_name = true && that.isSetPosition_name();
    if (this_present_position_name || that_present_position_name) {
      if (!(this_present_position_name && that_present_position_name))
        return false;
      if (!this.position_name.equals(that.position_name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_city_code = true;
    boolean that_present_city_code = true;
    if (this_present_city_code || that_present_city_code) {
      if (!(this_present_city_code && that_present_city_code))
        return false;
      if (this.city_code != that.city_code)
        return false;
    }

    boolean this_present_city_name = true && this.isSetCity_name();
    boolean that_present_city_name = true && that.isSetCity_name();
    if (this_present_city_name || that_present_city_name) {
      if (!(this_present_city_name && that_present_city_name))
        return false;
      if (!this.city_name.equals(that.city_name))
        return false;
    }

    boolean this_present_report_to = true && this.isSetReport_to();
    boolean that_present_report_to = true && that.isSetReport_to();
    if (this_present_report_to || that_present_report_to) {
      if (!(this_present_report_to && that_present_report_to))
        return false;
      if (!this.report_to.equals(that.report_to))
        return false;
    }

    boolean this_present_underlings = true;
    boolean that_present_underlings = true;
    if (this_present_underlings || that_present_underlings) {
      if (!(this_present_underlings && that_present_underlings))
        return false;
      if (this.underlings != that.underlings)
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    boolean this_present_resign_reason = true && this.isSetResign_reason();
    boolean that_present_resign_reason = true && that.isSetResign_reason();
    if (this_present_resign_reason || that_present_resign_reason) {
      if (!(this_present_resign_reason && that_present_resign_reason))
        return false;
      if (!this.resign_reason.equals(that.resign_reason))
        return false;
    }

    boolean this_present_achievement = true && this.isSetAchievement();
    boolean that_present_achievement = true && that.isSetAchievement();
    if (this_present_achievement || that_present_achievement) {
      if (!(this_present_achievement && that_present_achievement))
        return false;
      if (!this.achievement.equals(that.achievement))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_company_name = true && this.isSetCompany_name();
    boolean that_present_company_name = true && that.isSetCompany_name();
    if (this_present_company_name || that_present_company_name) {
      if (!(this_present_company_name && that_present_company_name))
        return false;
      if (!this.company_name.equals(that.company_name))
        return false;
    }

    boolean this_present_company_logo = true && this.isSetCompany_logo();
    boolean that_present_company_logo = true && that.isSetCompany_logo();
    if (this_present_company_logo || that_present_company_logo) {
      if (!(this_present_company_logo && that_present_company_logo))
        return false;
      if (!this.company_logo.equals(that.company_logo))
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_profile_id = true;
    list.add(present_profile_id);
    if (present_profile_id)
      list.add(profile_id);

    boolean present_start_date = true && (isSetStart_date());
    list.add(present_start_date);
    if (present_start_date)
      list.add(start_date);

    boolean present_end_date = true && (isSetEnd_date());
    list.add(present_end_date);
    if (present_end_date)
      list.add(end_date);

    boolean present_end_until_now = true;
    list.add(present_end_until_now);
    if (present_end_until_now)
      list.add(end_until_now);

    boolean present_salary_type = true;
    list.add(present_salary_type);
    if (present_salary_type)
      list.add(salary_type);

    boolean present_salary_code = true;
    list.add(present_salary_code);
    if (present_salary_code)
      list.add(salary_code);

    boolean present_industry_code = true;
    list.add(present_industry_code);
    if (present_industry_code)
      list.add(industry_code);

    boolean present_industry_name = true && (isSetIndustry_name());
    list.add(present_industry_name);
    if (present_industry_name)
      list.add(industry_name);

    boolean present_company_id = true;
    list.add(present_company_id);
    if (present_company_id)
      list.add(company_id);

    boolean present_department_name = true && (isSetDepartment_name());
    list.add(present_department_name);
    if (present_department_name)
      list.add(department_name);

    boolean present_position_code = true;
    list.add(present_position_code);
    if (present_position_code)
      list.add(position_code);

    boolean present_position_name = true && (isSetPosition_name());
    list.add(present_position_name);
    if (present_position_name)
      list.add(position_name);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_city_code = true;
    list.add(present_city_code);
    if (present_city_code)
      list.add(city_code);

    boolean present_city_name = true && (isSetCity_name());
    list.add(present_city_name);
    if (present_city_name)
      list.add(city_name);

    boolean present_report_to = true && (isSetReport_to());
    list.add(present_report_to);
    if (present_report_to)
      list.add(report_to);

    boolean present_underlings = true;
    list.add(present_underlings);
    if (present_underlings)
      list.add(underlings);

    boolean present_reference = true && (isSetReference());
    list.add(present_reference);
    if (present_reference)
      list.add(reference);

    boolean present_resign_reason = true && (isSetResign_reason());
    list.add(present_resign_reason);
    if (present_resign_reason)
      list.add(resign_reason);

    boolean present_achievement = true && (isSetAchievement());
    list.add(present_achievement);
    if (present_achievement)
      list.add(achievement);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    boolean present_company_name = true && (isSetCompany_name());
    list.add(present_company_name);
    if (present_company_name)
      list.add(company_name);

    boolean present_company_logo = true && (isSetCompany_logo());
    list.add(present_company_logo);
    if (present_company_logo)
      list.add(company_logo);

    boolean present_source = true;
    list.add(present_source);
    if (present_source)
      list.add(source);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkExp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_id()).compareTo(other.isSetProfile_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_id, other.profile_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_until_now()).compareTo(other.isSetEnd_until_now());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_until_now()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_until_now, other.end_until_now);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_type()).compareTo(other.isSetSalary_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_type, other.salary_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_code()).compareTo(other.isSetSalary_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_code, other.salary_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustry_code()).compareTo(other.isSetIndustry_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustry_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industry_code, other.industry_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustry_name()).compareTo(other.isSetIndustry_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustry_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industry_name, other.industry_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment_name()).compareTo(other.isSetDepartment_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department_name, other.department_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_code()).compareTo(other.isSetPosition_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_code, other.position_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_name()).compareTo(other.isSetPosition_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_name, other.position_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity_code()).compareTo(other.isSetCity_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city_code, other.city_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity_name()).compareTo(other.isSetCity_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city_name, other.city_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReport_to()).compareTo(other.isSetReport_to());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport_to()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_to, other.report_to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlings()).compareTo(other.isSetUnderlings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlings, other.underlings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResign_reason()).compareTo(other.isSetResign_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResign_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resign_reason, other.resign_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAchievement()).compareTo(other.isSetAchievement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchievement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achievement, other.achievement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_name()).compareTo(other.isSetCompany_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_name, other.company_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_logo()).compareTo(other.isSetCompany_logo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_logo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_logo, other.company_logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkExp(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile_id:");
    sb.append(this.profile_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_date:");
    if (this.start_date == null) {
      sb.append("null");
    } else {
      sb.append(this.start_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_date:");
    if (this.end_date == null) {
      sb.append("null");
    } else {
      sb.append(this.end_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_until_now:");
    sb.append(this.end_until_now);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_type:");
    sb.append(this.salary_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_code:");
    sb.append(this.salary_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("industry_code:");
    sb.append(this.industry_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("industry_name:");
    if (this.industry_name == null) {
      sb.append("null");
    } else {
      sb.append(this.industry_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("company_id:");
    sb.append(this.company_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("department_name:");
    if (this.department_name == null) {
      sb.append("null");
    } else {
      sb.append(this.department_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_code:");
    sb.append(this.position_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_name:");
    if (this.position_name == null) {
      sb.append("null");
    } else {
      sb.append(this.position_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city_code:");
    sb.append(this.city_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city_name:");
    if (this.city_name == null) {
      sb.append("null");
    } else {
      sb.append(this.city_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("report_to:");
    if (this.report_to == null) {
      sb.append("null");
    } else {
      sb.append(this.report_to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("underlings:");
    sb.append(this.underlings);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reference:");
    if (this.reference == null) {
      sb.append("null");
    } else {
      sb.append(this.reference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resign_reason:");
    if (this.resign_reason == null) {
      sb.append("null");
    } else {
      sb.append(this.resign_reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("achievement:");
    if (this.achievement == null) {
      sb.append("null");
    } else {
      sb.append(this.achievement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    if (this.update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.update_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("company_name:");
    if (this.company_name == null) {
      sb.append("null");
    } else {
      sb.append(this.company_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("company_logo:");
    if (this.company_logo == null) {
      sb.append("null");
    } else {
      sb.append(this.company_logo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkExpStandardSchemeFactory implements SchemeFactory {
    public WorkExpStandardScheme getScheme() {
      return new WorkExpStandardScheme();
    }
  }

  private static class WorkExpStandardScheme extends StandardScheme<WorkExp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkExp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profile_id = iprot.readI32();
              struct.setProfile_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_date = iprot.readString();
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_date = iprot.readString();
              struct.setEnd_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_UNTIL_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.end_until_now = iprot.readI16();
              struct.setEnd_until_nowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SALARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.salary_type = iprot.readI16();
              struct.setSalary_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SALARY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_code = iprot.readI32();
              struct.setSalary_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INDUSTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.industry_code = iprot.readI32();
              struct.setIndustry_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INDUSTRY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industry_name = iprot.readString();
              struct.setIndustry_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department_name = iprot.readString();
              struct.setDepartment_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSITION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position_code = iprot.readI32();
              struct.setPosition_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position_name = iprot.readString();
              struct.setPosition_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.type = iprot.readI16();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.city_code = iprot.readI32();
              struct.setCity_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city_name = iprot.readString();
              struct.setCity_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REPORT_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.report_to = iprot.readString();
              struct.setReport_toIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UNDERLINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.underlings = iprot.readI32();
              struct.setUnderlingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reference = iprot.readString();
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RESIGN_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resign_reason = iprot.readString();
              struct.setResign_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACHIEVEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.achievement = iprot.readString();
              struct.setAchievementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_name = iprot.readString();
              struct.setCompany_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COMPANY_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_logo = iprot.readString();
              struct.setCompany_logoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.source = iprot.readI16();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkExp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
      oprot.writeI32(struct.profile_id);
      oprot.writeFieldEnd();
      if (struct.start_date != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.start_date);
        oprot.writeFieldEnd();
      }
      if (struct.end_date != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.end_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_UNTIL_NOW_FIELD_DESC);
      oprot.writeI16(struct.end_until_now);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_TYPE_FIELD_DESC);
      oprot.writeI16(struct.salary_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_CODE_FIELD_DESC);
      oprot.writeI32(struct.salary_code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDUSTRY_CODE_FIELD_DESC);
      oprot.writeI32(struct.industry_code);
      oprot.writeFieldEnd();
      if (struct.industry_name != null) {
        oprot.writeFieldBegin(INDUSTRY_NAME_FIELD_DESC);
        oprot.writeString(struct.industry_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
      oprot.writeI32(struct.company_id);
      oprot.writeFieldEnd();
      if (struct.department_name != null) {
        oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.department_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POSITION_CODE_FIELD_DESC);
      oprot.writeI32(struct.position_code);
      oprot.writeFieldEnd();
      if (struct.position_name != null) {
        oprot.writeFieldBegin(POSITION_NAME_FIELD_DESC);
        oprot.writeString(struct.position_name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI16(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
      oprot.writeI32(struct.city_code);
      oprot.writeFieldEnd();
      if (struct.city_name != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.city_name);
        oprot.writeFieldEnd();
      }
      if (struct.report_to != null) {
        oprot.writeFieldBegin(REPORT_TO_FIELD_DESC);
        oprot.writeString(struct.report_to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNDERLINGS_FIELD_DESC);
      oprot.writeI32(struct.underlings);
      oprot.writeFieldEnd();
      if (struct.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(struct.reference);
        oprot.writeFieldEnd();
      }
      if (struct.resign_reason != null) {
        oprot.writeFieldBegin(RESIGN_REASON_FIELD_DESC);
        oprot.writeString(struct.resign_reason);
        oprot.writeFieldEnd();
      }
      if (struct.achievement != null) {
        oprot.writeFieldBegin(ACHIEVEMENT_FIELD_DESC);
        oprot.writeString(struct.achievement);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.update_time);
        oprot.writeFieldEnd();
      }
      if (struct.company_name != null) {
        oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
        oprot.writeString(struct.company_name);
        oprot.writeFieldEnd();
      }
      if (struct.company_logo != null) {
        oprot.writeFieldBegin(COMPANY_LOGO_FIELD_DESC);
        oprot.writeString(struct.company_logo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI16(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkExpTupleSchemeFactory implements SchemeFactory {
    public WorkExpTupleScheme getScheme() {
      return new WorkExpTupleScheme();
    }
  }

  private static class WorkExpTupleScheme extends TupleScheme<WorkExp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkExp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfile_id()) {
        optionals.set(1);
      }
      if (struct.isSetStart_date()) {
        optionals.set(2);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(3);
      }
      if (struct.isSetEnd_until_now()) {
        optionals.set(4);
      }
      if (struct.isSetSalary_type()) {
        optionals.set(5);
      }
      if (struct.isSetSalary_code()) {
        optionals.set(6);
      }
      if (struct.isSetIndustry_code()) {
        optionals.set(7);
      }
      if (struct.isSetIndustry_name()) {
        optionals.set(8);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(9);
      }
      if (struct.isSetDepartment_name()) {
        optionals.set(10);
      }
      if (struct.isSetPosition_code()) {
        optionals.set(11);
      }
      if (struct.isSetPosition_name()) {
        optionals.set(12);
      }
      if (struct.isSetDescription()) {
        optionals.set(13);
      }
      if (struct.isSetType()) {
        optionals.set(14);
      }
      if (struct.isSetCity_code()) {
        optionals.set(15);
      }
      if (struct.isSetCity_name()) {
        optionals.set(16);
      }
      if (struct.isSetReport_to()) {
        optionals.set(17);
      }
      if (struct.isSetUnderlings()) {
        optionals.set(18);
      }
      if (struct.isSetReference()) {
        optionals.set(19);
      }
      if (struct.isSetResign_reason()) {
        optionals.set(20);
      }
      if (struct.isSetAchievement()) {
        optionals.set(21);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(22);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(23);
      }
      if (struct.isSetCompany_name()) {
        optionals.set(24);
      }
      if (struct.isSetCompany_logo()) {
        optionals.set(25);
      }
      if (struct.isSetSource()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfile_id()) {
        oprot.writeI32(struct.profile_id);
      }
      if (struct.isSetStart_date()) {
        oprot.writeString(struct.start_date);
      }
      if (struct.isSetEnd_date()) {
        oprot.writeString(struct.end_date);
      }
      if (struct.isSetEnd_until_now()) {
        oprot.writeI16(struct.end_until_now);
      }
      if (struct.isSetSalary_type()) {
        oprot.writeI16(struct.salary_type);
      }
      if (struct.isSetSalary_code()) {
        oprot.writeI32(struct.salary_code);
      }
      if (struct.isSetIndustry_code()) {
        oprot.writeI32(struct.industry_code);
      }
      if (struct.isSetIndustry_name()) {
        oprot.writeString(struct.industry_name);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetDepartment_name()) {
        oprot.writeString(struct.department_name);
      }
      if (struct.isSetPosition_code()) {
        oprot.writeI32(struct.position_code);
      }
      if (struct.isSetPosition_name()) {
        oprot.writeString(struct.position_name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetType()) {
        oprot.writeI16(struct.type);
      }
      if (struct.isSetCity_code()) {
        oprot.writeI32(struct.city_code);
      }
      if (struct.isSetCity_name()) {
        oprot.writeString(struct.city_name);
      }
      if (struct.isSetReport_to()) {
        oprot.writeString(struct.report_to);
      }
      if (struct.isSetUnderlings()) {
        oprot.writeI32(struct.underlings);
      }
      if (struct.isSetReference()) {
        oprot.writeString(struct.reference);
      }
      if (struct.isSetResign_reason()) {
        oprot.writeString(struct.resign_reason);
      }
      if (struct.isSetAchievement()) {
        oprot.writeString(struct.achievement);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetCompany_name()) {
        oprot.writeString(struct.company_name);
      }
      if (struct.isSetCompany_logo()) {
        oprot.writeString(struct.company_logo);
      }
      if (struct.isSetSource()) {
        oprot.writeI16(struct.source);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkExp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profile_id = iprot.readI32();
        struct.setProfile_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_date = iprot.readString();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.end_date = iprot.readString();
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.end_until_now = iprot.readI16();
        struct.setEnd_until_nowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.salary_type = iprot.readI16();
        struct.setSalary_typeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.salary_code = iprot.readI32();
        struct.setSalary_codeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.industry_code = iprot.readI32();
        struct.setIndustry_codeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.industry_name = iprot.readString();
        struct.setIndustry_nameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.department_name = iprot.readString();
        struct.setDepartment_nameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.position_code = iprot.readI32();
        struct.setPosition_codeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.position_name = iprot.readString();
        struct.setPosition_nameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.type = iprot.readI16();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.city_code = iprot.readI32();
        struct.setCity_codeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.city_name = iprot.readString();
        struct.setCity_nameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.report_to = iprot.readString();
        struct.setReport_toIsSet(true);
      }
      if (incoming.get(18)) {
        struct.underlings = iprot.readI32();
        struct.setUnderlingsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reference = iprot.readString();
        struct.setReferenceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.resign_reason = iprot.readString();
        struct.setResign_reasonIsSet(true);
      }
      if (incoming.get(21)) {
        struct.achievement = iprot.readString();
        struct.setAchievementIsSet(true);
      }
      if (incoming.get(22)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.company_name = iprot.readString();
        struct.setCompany_nameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.company_logo = iprot.readString();
        struct.setCompany_logoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.source = iprot.readI16();
        struct.setSourceIsSet(true);
      }
    }
  }

}

