/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-01")
public class UserHrAccount implements org.apache.thrift.TBase<UserHrAccount, UserHrAccount._Fields>, java.io.Serializable, Cloneable, Comparable<UserHrAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserHrAccount");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxuser_id", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("account_type", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("activation", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_time", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("register_ip", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login_time", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login_ip", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("login_count", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("download_token", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserHrAccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserHrAccountTupleSchemeFactory();

  public long id; // optional
  public long company_id; // optional
  public java.lang.String mobile; // optional
  public java.lang.String email; // optional
  public long wxuser_id; // optional
  public java.lang.String password; // optional
  public java.lang.String username; // optional
  public byte account_type; // optional
  public byte activation; // optional
  public byte disable; // optional
  public java.lang.String register_time; // optional
  public java.lang.String register_ip; // optional
  public java.lang.String last_login_time; // optional
  public java.lang.String last_login_ip; // optional
  public int login_count; // optional
  public int source; // optional
  public java.lang.String download_token; // optional
  public java.lang.String create_time; // optional
  public java.lang.String update_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "company_id"),
    MOBILE((short)3, "mobile"),
    EMAIL((short)4, "email"),
    WXUSER_ID((short)5, "wxuser_id"),
    PASSWORD((short)6, "password"),
    USERNAME((short)7, "username"),
    ACCOUNT_TYPE((short)8, "account_type"),
    ACTIVATION((short)9, "activation"),
    DISABLE((short)10, "disable"),
    REGISTER_TIME((short)11, "register_time"),
    REGISTER_IP((short)12, "register_ip"),
    LAST_LOGIN_TIME((short)13, "last_login_time"),
    LAST_LOGIN_IP((short)14, "last_login_ip"),
    LOGIN_COUNT((short)15, "login_count"),
    SOURCE((short)16, "source"),
    DOWNLOAD_TOKEN((short)17, "download_token"),
    CREATE_TIME((short)18, "create_time"),
    UPDATE_TIME((short)19, "update_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // MOBILE
          return MOBILE;
        case 4: // EMAIL
          return EMAIL;
        case 5: // WXUSER_ID
          return WXUSER_ID;
        case 6: // PASSWORD
          return PASSWORD;
        case 7: // USERNAME
          return USERNAME;
        case 8: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 9: // ACTIVATION
          return ACTIVATION;
        case 10: // DISABLE
          return DISABLE;
        case 11: // REGISTER_TIME
          return REGISTER_TIME;
        case 12: // REGISTER_IP
          return REGISTER_IP;
        case 13: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 14: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 15: // LOGIN_COUNT
          return LOGIN_COUNT;
        case 16: // SOURCE
          return SOURCE;
        case 17: // DOWNLOAD_TOKEN
          return DOWNLOAD_TOKEN;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANY_ID_ISSET_ID = 1;
  private static final int __WXUSER_ID_ISSET_ID = 2;
  private static final int __ACCOUNT_TYPE_ISSET_ID = 3;
  private static final int __ACTIVATION_ISSET_ID = 4;
  private static final int __DISABLE_ISSET_ID = 5;
  private static final int __LOGIN_COUNT_ISSET_ID = 6;
  private static final int __SOURCE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.MOBILE,_Fields.EMAIL,_Fields.WXUSER_ID,_Fields.PASSWORD,_Fields.USERNAME,_Fields.ACCOUNT_TYPE,_Fields.ACTIVATION,_Fields.DISABLE,_Fields.REGISTER_TIME,_Fields.REGISTER_IP,_Fields.LAST_LOGIN_TIME,_Fields.LAST_LOGIN_IP,_Fields.LOGIN_COUNT,_Fields.SOURCE,_Fields.DOWNLOAD_TOKEN,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("wxuser_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("account_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTIVATION, new org.apache.thrift.meta_data.FieldMetaData("activation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("register_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("register_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_login_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("last_login_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("login_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNLOAD_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("download_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserHrAccount.class, metaDataMap);
  }

  public UserHrAccount() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserHrAccount(UserHrAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.company_id = other.company_id;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.wxuser_id = other.wxuser_id;
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.account_type = other.account_type;
    this.activation = other.activation;
    this.disable = other.disable;
    if (other.isSetRegister_time()) {
      this.register_time = other.register_time;
    }
    if (other.isSetRegister_ip()) {
      this.register_ip = other.register_ip;
    }
    if (other.isSetLast_login_time()) {
      this.last_login_time = other.last_login_time;
    }
    if (other.isSetLast_login_ip()) {
      this.last_login_ip = other.last_login_ip;
    }
    this.login_count = other.login_count;
    this.source = other.source;
    if (other.isSetDownload_token()) {
      this.download_token = other.download_token;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public UserHrAccount deepCopy() {
    return new UserHrAccount(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.mobile = null;
    this.email = null;
    setWxuser_idIsSet(false);
    this.wxuser_id = 0;
    this.password = null;
    this.username = null;
    setAccount_typeIsSet(false);
    this.account_type = 0;
    setActivationIsSet(false);
    this.activation = 0;
    setDisableIsSet(false);
    this.disable = 0;
    this.register_time = null;
    this.register_ip = null;
    this.last_login_time = null;
    this.last_login_ip = null;
    setLogin_countIsSet(false);
    this.login_count = 0;
    setSourceIsSet(false);
    this.source = 0;
    this.download_token = null;
    this.create_time = null;
    this.update_time = null;
  }

  public long getId() {
    return this.id;
  }

  public UserHrAccount setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCompany_id() {
    return this.company_id;
  }

  public UserHrAccount setCompany_id(long company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public java.lang.String getMobile() {
    return this.mobile;
  }

  public UserHrAccount setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public UserHrAccount setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public long getWxuser_id() {
    return this.wxuser_id;
  }

  public UserHrAccount setWxuser_id(long wxuser_id) {
    this.wxuser_id = wxuser_id;
    setWxuser_idIsSet(true);
    return this;
  }

  public void unsetWxuser_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  /** Returns true if field wxuser_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWxuser_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WXUSER_ID_ISSET_ID);
  }

  public void setWxuser_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WXUSER_ID_ISSET_ID, value);
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public UserHrAccount setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public UserHrAccount setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public byte getAccount_type() {
    return this.account_type;
  }

  public UserHrAccount setAccount_type(byte account_type) {
    this.account_type = account_type;
    setAccount_typeIsSet(true);
    return this;
  }

  public void unsetAccount_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID);
  }

  /** Returns true if field account_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID);
  }

  public void setAccount_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID, value);
  }

  public byte getActivation() {
    return this.activation;
  }

  public UserHrAccount setActivation(byte activation) {
    this.activation = activation;
    setActivationIsSet(true);
    return this;
  }

  public void unsetActivation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  /** Returns true if field activation is set (has been assigned a value) and false otherwise */
  public boolean isSetActivation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  public void setActivationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVATION_ISSET_ID, value);
  }

  public byte getDisable() {
    return this.disable;
  }

  public UserHrAccount setDisable(byte disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public java.lang.String getRegister_time() {
    return this.register_time;
  }

  public UserHrAccount setRegister_time(java.lang.String register_time) {
    this.register_time = register_time;
    return this;
  }

  public void unsetRegister_time() {
    this.register_time = null;
  }

  /** Returns true if field register_time is set (has been assigned a value) and false otherwise */
  public boolean isSetRegister_time() {
    return this.register_time != null;
  }

  public void setRegister_timeIsSet(boolean value) {
    if (!value) {
      this.register_time = null;
    }
  }

  public java.lang.String getRegister_ip() {
    return this.register_ip;
  }

  public UserHrAccount setRegister_ip(java.lang.String register_ip) {
    this.register_ip = register_ip;
    return this;
  }

  public void unsetRegister_ip() {
    this.register_ip = null;
  }

  /** Returns true if field register_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetRegister_ip() {
    return this.register_ip != null;
  }

  public void setRegister_ipIsSet(boolean value) {
    if (!value) {
      this.register_ip = null;
    }
  }

  public java.lang.String getLast_login_time() {
    return this.last_login_time;
  }

  public UserHrAccount setLast_login_time(java.lang.String last_login_time) {
    this.last_login_time = last_login_time;
    return this;
  }

  public void unsetLast_login_time() {
    this.last_login_time = null;
  }

  /** Returns true if field last_login_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login_time() {
    return this.last_login_time != null;
  }

  public void setLast_login_timeIsSet(boolean value) {
    if (!value) {
      this.last_login_time = null;
    }
  }

  public java.lang.String getLast_login_ip() {
    return this.last_login_ip;
  }

  public UserHrAccount setLast_login_ip(java.lang.String last_login_ip) {
    this.last_login_ip = last_login_ip;
    return this;
  }

  public void unsetLast_login_ip() {
    this.last_login_ip = null;
  }

  /** Returns true if field last_login_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login_ip() {
    return this.last_login_ip != null;
  }

  public void setLast_login_ipIsSet(boolean value) {
    if (!value) {
      this.last_login_ip = null;
    }
  }

  public int getLogin_count() {
    return this.login_count;
  }

  public UserHrAccount setLogin_count(int login_count) {
    this.login_count = login_count;
    setLogin_countIsSet(true);
    return this;
  }

  public void unsetLogin_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID);
  }

  /** Returns true if field login_count is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID);
  }

  public void setLogin_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public UserHrAccount setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public java.lang.String getDownload_token() {
    return this.download_token;
  }

  public UserHrAccount setDownload_token(java.lang.String download_token) {
    this.download_token = download_token;
    return this;
  }

  public void unsetDownload_token() {
    this.download_token = null;
  }

  /** Returns true if field download_token is set (has been assigned a value) and false otherwise */
  public boolean isSetDownload_token() {
    return this.download_token != null;
  }

  public void setDownload_tokenIsSet(boolean value) {
    if (!value) {
      this.download_token = null;
    }
  }

  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public UserHrAccount setCreate_time(java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public java.lang.String getUpdate_time() {
    return this.update_time;
  }

  public UserHrAccount setUpdate_time(java.lang.String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((java.lang.Long)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case WXUSER_ID:
      if (value == null) {
        unsetWxuser_id();
      } else {
        setWxuser_id((java.lang.Long)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccount_type();
      } else {
        setAccount_type((java.lang.Byte)value);
      }
      break;

    case ACTIVATION:
      if (value == null) {
        unsetActivation();
      } else {
        setActivation((java.lang.Byte)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((java.lang.Byte)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegister_time();
      } else {
        setRegister_time((java.lang.String)value);
      }
      break;

    case REGISTER_IP:
      if (value == null) {
        unsetRegister_ip();
      } else {
        setRegister_ip((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLast_login_time();
      } else {
        setLast_login_time((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLast_login_ip();
      } else {
        setLast_login_ip((java.lang.String)value);
      }
      break;

    case LOGIN_COUNT:
      if (value == null) {
        unsetLogin_count();
      } else {
        setLogin_count((java.lang.Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.Integer)value);
      }
      break;

    case DOWNLOAD_TOKEN:
      if (value == null) {
        unsetDownload_token();
      } else {
        setDownload_token((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompany_id();

    case MOBILE:
      return getMobile();

    case EMAIL:
      return getEmail();

    case WXUSER_ID:
      return getWxuser_id();

    case PASSWORD:
      return getPassword();

    case USERNAME:
      return getUsername();

    case ACCOUNT_TYPE:
      return getAccount_type();

    case ACTIVATION:
      return getActivation();

    case DISABLE:
      return getDisable();

    case REGISTER_TIME:
      return getRegister_time();

    case REGISTER_IP:
      return getRegister_ip();

    case LAST_LOGIN_TIME:
      return getLast_login_time();

    case LAST_LOGIN_IP:
      return getLast_login_ip();

    case LOGIN_COUNT:
      return getLogin_count();

    case SOURCE:
      return getSource();

    case DOWNLOAD_TOKEN:
      return getDownload_token();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompany_id();
    case MOBILE:
      return isSetMobile();
    case EMAIL:
      return isSetEmail();
    case WXUSER_ID:
      return isSetWxuser_id();
    case PASSWORD:
      return isSetPassword();
    case USERNAME:
      return isSetUsername();
    case ACCOUNT_TYPE:
      return isSetAccount_type();
    case ACTIVATION:
      return isSetActivation();
    case DISABLE:
      return isSetDisable();
    case REGISTER_TIME:
      return isSetRegister_time();
    case REGISTER_IP:
      return isSetRegister_ip();
    case LAST_LOGIN_TIME:
      return isSetLast_login_time();
    case LAST_LOGIN_IP:
      return isSetLast_login_ip();
    case LOGIN_COUNT:
      return isSetLogin_count();
    case SOURCE:
      return isSetSource();
    case DOWNLOAD_TOKEN:
      return isSetDownload_token();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserHrAccount)
      return this.equals((UserHrAccount)that);
    return false;
  }

  public boolean equals(UserHrAccount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_wxuser_id = true && this.isSetWxuser_id();
    boolean that_present_wxuser_id = true && that.isSetWxuser_id();
    if (this_present_wxuser_id || that_present_wxuser_id) {
      if (!(this_present_wxuser_id && that_present_wxuser_id))
        return false;
      if (this.wxuser_id != that.wxuser_id)
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_account_type = true && this.isSetAccount_type();
    boolean that_present_account_type = true && that.isSetAccount_type();
    if (this_present_account_type || that_present_account_type) {
      if (!(this_present_account_type && that_present_account_type))
        return false;
      if (this.account_type != that.account_type)
        return false;
    }

    boolean this_present_activation = true && this.isSetActivation();
    boolean that_present_activation = true && that.isSetActivation();
    if (this_present_activation || that_present_activation) {
      if (!(this_present_activation && that_present_activation))
        return false;
      if (this.activation != that.activation)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_register_time = true && this.isSetRegister_time();
    boolean that_present_register_time = true && that.isSetRegister_time();
    if (this_present_register_time || that_present_register_time) {
      if (!(this_present_register_time && that_present_register_time))
        return false;
      if (!this.register_time.equals(that.register_time))
        return false;
    }

    boolean this_present_register_ip = true && this.isSetRegister_ip();
    boolean that_present_register_ip = true && that.isSetRegister_ip();
    if (this_present_register_ip || that_present_register_ip) {
      if (!(this_present_register_ip && that_present_register_ip))
        return false;
      if (!this.register_ip.equals(that.register_ip))
        return false;
    }

    boolean this_present_last_login_time = true && this.isSetLast_login_time();
    boolean that_present_last_login_time = true && that.isSetLast_login_time();
    if (this_present_last_login_time || that_present_last_login_time) {
      if (!(this_present_last_login_time && that_present_last_login_time))
        return false;
      if (!this.last_login_time.equals(that.last_login_time))
        return false;
    }

    boolean this_present_last_login_ip = true && this.isSetLast_login_ip();
    boolean that_present_last_login_ip = true && that.isSetLast_login_ip();
    if (this_present_last_login_ip || that_present_last_login_ip) {
      if (!(this_present_last_login_ip && that_present_last_login_ip))
        return false;
      if (!this.last_login_ip.equals(that.last_login_ip))
        return false;
    }

    boolean this_present_login_count = true && this.isSetLogin_count();
    boolean that_present_login_count = true && that.isSetLogin_count();
    if (this_present_login_count || that_present_login_count) {
      if (!(this_present_login_count && that_present_login_count))
        return false;
      if (this.login_count != that.login_count)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_download_token = true && this.isSetDownload_token();
    boolean that_present_download_token = true && that.isSetDownload_token();
    if (this_present_download_token || that_present_download_token) {
      if (!(this_present_download_token && that_present_download_token))
        return false;
      if (!this.download_token.equals(that.download_token))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(company_id);

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetWxuser_id()) ? 131071 : 524287);
    if (isSetWxuser_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(wxuser_id);

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccount_type()) ? 131071 : 524287);
    if (isSetAccount_type())
      hashCode = hashCode * 8191 + (int) (account_type);

    hashCode = hashCode * 8191 + ((isSetActivation()) ? 131071 : 524287);
    if (isSetActivation())
      hashCode = hashCode * 8191 + (int) (activation);

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + (int) (disable);

    hashCode = hashCode * 8191 + ((isSetRegister_time()) ? 131071 : 524287);
    if (isSetRegister_time())
      hashCode = hashCode * 8191 + register_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegister_ip()) ? 131071 : 524287);
    if (isSetRegister_ip())
      hashCode = hashCode * 8191 + register_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_login_time()) ? 131071 : 524287);
    if (isSetLast_login_time())
      hashCode = hashCode * 8191 + last_login_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_login_ip()) ? 131071 : 524287);
    if (isSetLast_login_ip())
      hashCode = hashCode * 8191 + last_login_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogin_count()) ? 131071 : 524287);
    if (isSetLogin_count())
      hashCode = hashCode * 8191 + login_count;

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source;

    hashCode = hashCode * 8191 + ((isSetDownload_token()) ? 131071 : 524287);
    if (isSetDownload_token())
      hashCode = hashCode * 8191 + download_token.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserHrAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWxuser_id()).compareTo(other.isSetWxuser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxuser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxuser_id, other.wxuser_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccount_type()).compareTo(other.isSetAccount_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_type, other.account_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivation()).compareTo(other.isSetActivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activation, other.activation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegister_time()).compareTo(other.isSetRegister_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegister_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_time, other.register_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegister_ip()).compareTo(other.isSetRegister_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegister_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_ip, other.register_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_login_time()).compareTo(other.isSetLast_login_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login_time, other.last_login_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_login_ip()).compareTo(other.isSetLast_login_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login_ip, other.last_login_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogin_count()).compareTo(other.isSetLogin_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login_count, other.login_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownload_token()).compareTo(other.isSetDownload_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownload_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.download_token, other.download_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserHrAccount(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetWxuser_id()) {
      if (!first) sb.append(", ");
      sb.append("wxuser_id:");
      sb.append(this.wxuser_id);
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetAccount_type()) {
      if (!first) sb.append(", ");
      sb.append("account_type:");
      sb.append(this.account_type);
      first = false;
    }
    if (isSetActivation()) {
      if (!first) sb.append(", ");
      sb.append("activation:");
      sb.append(this.activation);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetRegister_time()) {
      if (!first) sb.append(", ");
      sb.append("register_time:");
      if (this.register_time == null) {
        sb.append("null");
      } else {
        sb.append(this.register_time);
      }
      first = false;
    }
    if (isSetRegister_ip()) {
      if (!first) sb.append(", ");
      sb.append("register_ip:");
      if (this.register_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.register_ip);
      }
      first = false;
    }
    if (isSetLast_login_time()) {
      if (!first) sb.append(", ");
      sb.append("last_login_time:");
      if (this.last_login_time == null) {
        sb.append("null");
      } else {
        sb.append(this.last_login_time);
      }
      first = false;
    }
    if (isSetLast_login_ip()) {
      if (!first) sb.append(", ");
      sb.append("last_login_ip:");
      if (this.last_login_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.last_login_ip);
      }
      first = false;
    }
    if (isSetLogin_count()) {
      if (!first) sb.append(", ");
      sb.append("login_count:");
      sb.append(this.login_count);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetDownload_token()) {
      if (!first) sb.append(", ");
      sb.append("download_token:");
      if (this.download_token == null) {
        sb.append("null");
      } else {
        sb.append(this.download_token);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserHrAccountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserHrAccountStandardScheme getScheme() {
      return new UserHrAccountStandardScheme();
    }
  }

  private static class UserHrAccountStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserHrAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserHrAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.company_id = iprot.readI64();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wxuser_id = iprot.readI64();
              struct.setWxuser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.account_type = iprot.readByte();
              struct.setAccount_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activation = iprot.readByte();
              struct.setActivationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.disable = iprot.readByte();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.register_time = iprot.readString();
              struct.setRegister_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.register_ip = iprot.readString();
              struct.setRegister_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login_time = iprot.readString();
              struct.setLast_login_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login_ip = iprot.readString();
              struct.setLast_login_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.login_count = iprot.readI32();
              struct.setLogin_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DOWNLOAD_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.download_token = iprot.readString();
              struct.setDownload_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserHrAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWxuser_id()) {
        oprot.writeFieldBegin(WXUSER_ID_FIELD_DESC);
        oprot.writeI64(struct.wxuser_id);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAccount_type()) {
        oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
        oprot.writeByte(struct.account_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActivation()) {
        oprot.writeFieldBegin(ACTIVATION_FIELD_DESC);
        oprot.writeByte(struct.activation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeByte(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.register_time != null) {
        if (struct.isSetRegister_time()) {
          oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
          oprot.writeString(struct.register_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.register_ip != null) {
        if (struct.isSetRegister_ip()) {
          oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
          oprot.writeString(struct.register_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_login_time != null) {
        if (struct.isSetLast_login_time()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.last_login_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_login_ip != null) {
        if (struct.isSetLast_login_ip()) {
          oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.last_login_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLogin_count()) {
        oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.login_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.download_token != null) {
        if (struct.isSetDownload_token()) {
          oprot.writeFieldBegin(DOWNLOAD_TOKEN_FIELD_DESC);
          oprot.writeString(struct.download_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserHrAccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserHrAccountTupleScheme getScheme() {
      return new UserHrAccountTupleScheme();
    }
  }

  private static class UserHrAccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserHrAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserHrAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(1);
      }
      if (struct.isSetMobile()) {
        optionals.set(2);
      }
      if (struct.isSetEmail()) {
        optionals.set(3);
      }
      if (struct.isSetWxuser_id()) {
        optionals.set(4);
      }
      if (struct.isSetPassword()) {
        optionals.set(5);
      }
      if (struct.isSetUsername()) {
        optionals.set(6);
      }
      if (struct.isSetAccount_type()) {
        optionals.set(7);
      }
      if (struct.isSetActivation()) {
        optionals.set(8);
      }
      if (struct.isSetDisable()) {
        optionals.set(9);
      }
      if (struct.isSetRegister_time()) {
        optionals.set(10);
      }
      if (struct.isSetRegister_ip()) {
        optionals.set(11);
      }
      if (struct.isSetLast_login_time()) {
        optionals.set(12);
      }
      if (struct.isSetLast_login_ip()) {
        optionals.set(13);
      }
      if (struct.isSetLogin_count()) {
        optionals.set(14);
      }
      if (struct.isSetSource()) {
        optionals.set(15);
      }
      if (struct.isSetDownload_token()) {
        optionals.set(16);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(17);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI64(struct.company_id);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetWxuser_id()) {
        oprot.writeI64(struct.wxuser_id);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetAccount_type()) {
        oprot.writeByte(struct.account_type);
      }
      if (struct.isSetActivation()) {
        oprot.writeByte(struct.activation);
      }
      if (struct.isSetDisable()) {
        oprot.writeByte(struct.disable);
      }
      if (struct.isSetRegister_time()) {
        oprot.writeString(struct.register_time);
      }
      if (struct.isSetRegister_ip()) {
        oprot.writeString(struct.register_ip);
      }
      if (struct.isSetLast_login_time()) {
        oprot.writeString(struct.last_login_time);
      }
      if (struct.isSetLast_login_ip()) {
        oprot.writeString(struct.last_login_ip);
      }
      if (struct.isSetLogin_count()) {
        oprot.writeI32(struct.login_count);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetDownload_token()) {
        oprot.writeString(struct.download_token);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserHrAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.company_id = iprot.readI64();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wxuser_id = iprot.readI64();
        struct.setWxuser_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.account_type = iprot.readByte();
        struct.setAccount_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.activation = iprot.readByte();
        struct.setActivationIsSet(true);
      }
      if (incoming.get(9)) {
        struct.disable = iprot.readByte();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.register_time = iprot.readString();
        struct.setRegister_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.register_ip = iprot.readString();
        struct.setRegister_ipIsSet(true);
      }
      if (incoming.get(12)) {
        struct.last_login_time = iprot.readString();
        struct.setLast_login_timeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.last_login_ip = iprot.readString();
        struct.setLast_login_ipIsSet(true);
      }
      if (incoming.get(14)) {
        struct.login_count = iprot.readI32();
        struct.setLogin_countIsSet(true);
      }
      if (incoming.get(15)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.download_token = iprot.readString();
        struct.setDownload_tokenIsSet(true);
      }
      if (incoming.get(17)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

