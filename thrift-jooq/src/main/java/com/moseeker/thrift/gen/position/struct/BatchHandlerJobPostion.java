/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-19")
public class BatchHandlerJobPostion implements org.apache.thrift.TBase<BatchHandlerJobPostion, BatchHandlerJobPostion._Fields>, java.io.Serializable, Cloneable, Comparable<BatchHandlerJobPostion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchHandlerJobPostion");

  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FIELDS_NOOVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("fields_nooverwrite", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NODELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodelete", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField FIELDS_NOHASH_FIELD_DESC = new org.apache.thrift.protocol.TField("fields_nohash", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BatchHandlerJobPostionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BatchHandlerJobPostionTupleSchemeFactory();

  public int appid; // required
  public java.util.List<JobPostrionObj> data; // required
  public java.lang.String fields_nooverwrite; // required
  public boolean nodelete; // required
  public java.lang.String fields_nohash; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPID((short)1, "appid"),
    DATA((short)2, "data"),
    FIELDS_NOOVERWRITE((short)3, "fields_nooverwrite"),
    NODELETE((short)4, "nodelete"),
    FIELDS_NOHASH((short)5, "fields_nohash");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPID
          return APPID;
        case 2: // DATA
          return DATA;
        case 3: // FIELDS_NOOVERWRITE
          return FIELDS_NOOVERWRITE;
        case 4: // NODELETE
          return NODELETE;
        case 5: // FIELDS_NOHASH
          return FIELDS_NOHASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __NODELETE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "JobPostrionObj"))));
    tmpMap.put(_Fields.FIELDS_NOOVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("fields_nooverwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODELETE, new org.apache.thrift.meta_data.FieldMetaData("nodelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELDS_NOHASH, new org.apache.thrift.meta_data.FieldMetaData("fields_nohash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchHandlerJobPostion.class, metaDataMap);
  }

  public BatchHandlerJobPostion() {
  }

  public BatchHandlerJobPostion(
    int appid,
    java.util.List<JobPostrionObj> data,
    java.lang.String fields_nooverwrite,
    boolean nodelete,
    java.lang.String fields_nohash)
  {
    this();
    this.appid = appid;
    setAppidIsSet(true);
    this.data = data;
    this.fields_nooverwrite = fields_nooverwrite;
    this.nodelete = nodelete;
    setNodeleteIsSet(true);
    this.fields_nohash = fields_nohash;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchHandlerJobPostion(BatchHandlerJobPostion other) {
    __isset_bitfield = other.__isset_bitfield;
    this.appid = other.appid;
    if (other.isSetData()) {
      java.util.List<JobPostrionObj> __this__data = new java.util.ArrayList<JobPostrionObj>(other.data.size());
      for (JobPostrionObj other_element : other.data) {
        __this__data.add(other_element);
      }
      this.data = __this__data;
    }
    if (other.isSetFields_nooverwrite()) {
      this.fields_nooverwrite = other.fields_nooverwrite;
    }
    this.nodelete = other.nodelete;
    if (other.isSetFields_nohash()) {
      this.fields_nohash = other.fields_nohash;
    }
  }

  public BatchHandlerJobPostion deepCopy() {
    return new BatchHandlerJobPostion(this);
  }

  @Override
  public void clear() {
    setAppidIsSet(false);
    this.appid = 0;
    this.data = null;
    this.fields_nooverwrite = null;
    setNodeleteIsSet(false);
    this.nodelete = false;
    this.fields_nohash = null;
  }

  public int getAppid() {
    return this.appid;
  }

  public BatchHandlerJobPostion setAppid(int appid) {
    this.appid = appid;
    setAppidIsSet(true);
    return this;
  }

  public void unsetAppid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<JobPostrionObj> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(JobPostrionObj elem) {
    if (this.data == null) {
      this.data = new java.util.ArrayList<JobPostrionObj>();
    }
    this.data.add(elem);
  }

  public java.util.List<JobPostrionObj> getData() {
    return this.data;
  }

  public BatchHandlerJobPostion setData(java.util.List<JobPostrionObj> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public java.lang.String getFields_nooverwrite() {
    return this.fields_nooverwrite;
  }

  public BatchHandlerJobPostion setFields_nooverwrite(java.lang.String fields_nooverwrite) {
    this.fields_nooverwrite = fields_nooverwrite;
    return this;
  }

  public void unsetFields_nooverwrite() {
    this.fields_nooverwrite = null;
  }

  /** Returns true if field fields_nooverwrite is set (has been assigned a value) and false otherwise */
  public boolean isSetFields_nooverwrite() {
    return this.fields_nooverwrite != null;
  }

  public void setFields_nooverwriteIsSet(boolean value) {
    if (!value) {
      this.fields_nooverwrite = null;
    }
  }

  public boolean isNodelete() {
    return this.nodelete;
  }

  public BatchHandlerJobPostion setNodelete(boolean nodelete) {
    this.nodelete = nodelete;
    setNodeleteIsSet(true);
    return this;
  }

  public void unsetNodelete() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODELETE_ISSET_ID);
  }

  /** Returns true if field nodelete is set (has been assigned a value) and false otherwise */
  public boolean isSetNodelete() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODELETE_ISSET_ID);
  }

  public void setNodeleteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODELETE_ISSET_ID, value);
  }

  public java.lang.String getFields_nohash() {
    return this.fields_nohash;
  }

  public BatchHandlerJobPostion setFields_nohash(java.lang.String fields_nohash) {
    this.fields_nohash = fields_nohash;
    return this;
  }

  public void unsetFields_nohash() {
    this.fields_nohash = null;
  }

  /** Returns true if field fields_nohash is set (has been assigned a value) and false otherwise */
  public boolean isSetFields_nohash() {
    return this.fields_nohash != null;
  }

  public void setFields_nohashIsSet(boolean value) {
    if (!value) {
      this.fields_nohash = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.List<JobPostrionObj>)value);
      }
      break;

    case FIELDS_NOOVERWRITE:
      if (value == null) {
        unsetFields_nooverwrite();
      } else {
        setFields_nooverwrite((java.lang.String)value);
      }
      break;

    case NODELETE:
      if (value == null) {
        unsetNodelete();
      } else {
        setNodelete((java.lang.Boolean)value);
      }
      break;

    case FIELDS_NOHASH:
      if (value == null) {
        unsetFields_nohash();
      } else {
        setFields_nohash((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPID:
      return getAppid();

    case DATA:
      return getData();

    case FIELDS_NOOVERWRITE:
      return getFields_nooverwrite();

    case NODELETE:
      return isNodelete();

    case FIELDS_NOHASH:
      return getFields_nohash();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPID:
      return isSetAppid();
    case DATA:
      return isSetData();
    case FIELDS_NOOVERWRITE:
      return isSetFields_nooverwrite();
    case NODELETE:
      return isSetNodelete();
    case FIELDS_NOHASH:
      return isSetFields_nohash();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchHandlerJobPostion)
      return this.equals((BatchHandlerJobPostion)that);
    return false;
  }

  public boolean equals(BatchHandlerJobPostion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appid = true;
    boolean that_present_appid = true;
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (this.appid != that.appid)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_fields_nooverwrite = true && this.isSetFields_nooverwrite();
    boolean that_present_fields_nooverwrite = true && that.isSetFields_nooverwrite();
    if (this_present_fields_nooverwrite || that_present_fields_nooverwrite) {
      if (!(this_present_fields_nooverwrite && that_present_fields_nooverwrite))
        return false;
      if (!this.fields_nooverwrite.equals(that.fields_nooverwrite))
        return false;
    }

    boolean this_present_nodelete = true;
    boolean that_present_nodelete = true;
    if (this_present_nodelete || that_present_nodelete) {
      if (!(this_present_nodelete && that_present_nodelete))
        return false;
      if (this.nodelete != that.nodelete)
        return false;
    }

    boolean this_present_fields_nohash = true && this.isSetFields_nohash();
    boolean that_present_fields_nohash = true && that.isSetFields_nohash();
    if (this_present_fields_nohash || that_present_fields_nohash) {
      if (!(this_present_fields_nohash && that_present_fields_nohash))
        return false;
      if (!this.fields_nohash.equals(that.fields_nohash))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + appid;

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetFields_nooverwrite()) ? 131071 : 524287);
    if (isSetFields_nooverwrite())
      hashCode = hashCode * 8191 + fields_nooverwrite.hashCode();

    hashCode = hashCode * 8191 + ((nodelete) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFields_nohash()) ? 131071 : 524287);
    if (isSetFields_nohash())
      hashCode = hashCode * 8191 + fields_nohash.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BatchHandlerJobPostion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFields_nooverwrite()).compareTo(other.isSetFields_nooverwrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields_nooverwrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields_nooverwrite, other.fields_nooverwrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodelete()).compareTo(other.isSetNodelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodelete, other.nodelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFields_nohash()).compareTo(other.isSetFields_nohash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields_nohash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields_nohash, other.fields_nohash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BatchHandlerJobPostion(");
    boolean first = true;

    sb.append("appid:");
    sb.append(this.appid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fields_nooverwrite:");
    if (this.fields_nooverwrite == null) {
      sb.append("null");
    } else {
      sb.append(this.fields_nooverwrite);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodelete:");
    sb.append(this.nodelete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fields_nohash:");
    if (this.fields_nohash == null) {
      sb.append("null");
    } else {
      sb.append(this.fields_nohash);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchHandlerJobPostionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchHandlerJobPostionStandardScheme getScheme() {
      return new BatchHandlerJobPostionStandardScheme();
    }
  }

  private static class BatchHandlerJobPostionStandardScheme extends org.apache.thrift.scheme.StandardScheme<BatchHandlerJobPostion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchHandlerJobPostion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appid = iprot.readI32();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.data = new java.util.ArrayList<JobPostrionObj>(_list10.size);
                JobPostrionObj _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new JobPostrionObj();
                  _elem11.read(iprot);
                  struct.data.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELDS_NOOVERWRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fields_nooverwrite = iprot.readString();
              struct.setFields_nooverwriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.nodelete = iprot.readBool();
              struct.setNodeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELDS_NOHASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fields_nohash = iprot.readString();
              struct.setFields_nohashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchHandlerJobPostion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPID_FIELD_DESC);
      oprot.writeI32(struct.appid);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
          for (JobPostrionObj _iter13 : struct.data)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fields_nooverwrite != null) {
        oprot.writeFieldBegin(FIELDS_NOOVERWRITE_FIELD_DESC);
        oprot.writeString(struct.fields_nooverwrite);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODELETE_FIELD_DESC);
      oprot.writeBool(struct.nodelete);
      oprot.writeFieldEnd();
      if (struct.fields_nohash != null) {
        oprot.writeFieldBegin(FIELDS_NOHASH_FIELD_DESC);
        oprot.writeString(struct.fields_nohash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchHandlerJobPostionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatchHandlerJobPostionTupleScheme getScheme() {
      return new BatchHandlerJobPostionTupleScheme();
    }
  }

  private static class BatchHandlerJobPostionTupleScheme extends org.apache.thrift.scheme.TupleScheme<BatchHandlerJobPostion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchHandlerJobPostion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppid()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetFields_nooverwrite()) {
        optionals.set(2);
      }
      if (struct.isSetNodelete()) {
        optionals.set(3);
      }
      if (struct.isSetFields_nohash()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAppid()) {
        oprot.writeI32(struct.appid);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (JobPostrionObj _iter14 : struct.data)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetFields_nooverwrite()) {
        oprot.writeString(struct.fields_nooverwrite);
      }
      if (struct.isSetNodelete()) {
        oprot.writeBool(struct.nodelete);
      }
      if (struct.isSetFields_nohash()) {
        oprot.writeString(struct.fields_nohash);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchHandlerJobPostion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.appid = iprot.readI32();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.data = new java.util.ArrayList<JobPostrionObj>(_list15.size);
          JobPostrionObj _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new JobPostrionObj();
            _elem16.read(iprot);
            struct.data.add(_elem16);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fields_nooverwrite = iprot.readString();
        struct.setFields_nooverwriteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nodelete = iprot.readBool();
        struct.setNodeleteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fields_nohash = iprot.readString();
        struct.setFields_nohashIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

