/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.referral.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-07")
public class ActivityDTO implements org.apache.thrift.TBase<ActivityDTO, ActivityDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ActivityDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AMOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("amounts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RANGE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeMin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField RANGE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("probability", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField D_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("headline", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HEADLINE_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("headlineFailure", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHARE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTitle", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHARE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDesc", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SHARE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("shareImg", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CHECKED_FIELD_DESC = new org.apache.thrift.protocol.TField("checked", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ESTIMATED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedTotal", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualTotal", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField POSITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIds", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ActivityDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ActivityDTOTupleSchemeFactory();

  public int id; // optional
  public java.util.List<java.lang.Double> amounts; // optional
  public int target; // optional
  public java.lang.String startTime; // optional
  public java.lang.String endTime; // optional
  public double totalAmount; // optional
  public double rangeMin; // optional
  public double rangeMax; // optional
  public int probability; // optional
  public int dType; // optional
  public java.lang.String headline; // optional
  public java.lang.String headlineFailure; // optional
  public java.lang.String shareTitle; // optional
  public java.lang.String shareDesc; // optional
  public java.lang.String shareImg; // optional
  public int status; // optional
  public int checked; // optional
  public int estimatedTotal; // optional
  public int actualTotal; // optional
  public java.util.List<java.lang.Integer> positionIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AMOUNTS((short)2, "amounts"),
    TARGET((short)3, "target"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime"),
    TOTAL_AMOUNT((short)6, "totalAmount"),
    RANGE_MIN((short)7, "rangeMin"),
    RANGE_MAX((short)8, "rangeMax"),
    PROBABILITY((short)9, "probability"),
    D_TYPE((short)10, "dType"),
    HEADLINE((short)11, "headline"),
    HEADLINE_FAILURE((short)12, "headlineFailure"),
    SHARE_TITLE((short)13, "shareTitle"),
    SHARE_DESC((short)14, "shareDesc"),
    SHARE_IMG((short)15, "shareImg"),
    STATUS((short)16, "status"),
    CHECKED((short)17, "checked"),
    ESTIMATED_TOTAL((short)18, "estimatedTotal"),
    ACTUAL_TOTAL((short)19, "actualTotal"),
    POSITION_IDS((short)20, "positionIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AMOUNTS
          return AMOUNTS;
        case 3: // TARGET
          return TARGET;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 7: // RANGE_MIN
          return RANGE_MIN;
        case 8: // RANGE_MAX
          return RANGE_MAX;
        case 9: // PROBABILITY
          return PROBABILITY;
        case 10: // D_TYPE
          return D_TYPE;
        case 11: // HEADLINE
          return HEADLINE;
        case 12: // HEADLINE_FAILURE
          return HEADLINE_FAILURE;
        case 13: // SHARE_TITLE
          return SHARE_TITLE;
        case 14: // SHARE_DESC
          return SHARE_DESC;
        case 15: // SHARE_IMG
          return SHARE_IMG;
        case 16: // STATUS
          return STATUS;
        case 17: // CHECKED
          return CHECKED;
        case 18: // ESTIMATED_TOTAL
          return ESTIMATED_TOTAL;
        case 19: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        case 20: // POSITION_IDS
          return POSITION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TARGET_ISSET_ID = 1;
  private static final int __TOTALAMOUNT_ISSET_ID = 2;
  private static final int __RANGEMIN_ISSET_ID = 3;
  private static final int __RANGEMAX_ISSET_ID = 4;
  private static final int __PROBABILITY_ISSET_ID = 5;
  private static final int __DTYPE_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __CHECKED_ISSET_ID = 8;
  private static final int __ESTIMATEDTOTAL_ISSET_ID = 9;
  private static final int __ACTUALTOTAL_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.AMOUNTS,_Fields.TARGET,_Fields.START_TIME,_Fields.END_TIME,_Fields.TOTAL_AMOUNT,_Fields.RANGE_MIN,_Fields.RANGE_MAX,_Fields.PROBABILITY,_Fields.D_TYPE,_Fields.HEADLINE,_Fields.HEADLINE_FAILURE,_Fields.SHARE_TITLE,_Fields.SHARE_DESC,_Fields.SHARE_IMG,_Fields.STATUS,_Fields.CHECKED,_Fields.ESTIMATED_TOTAL,_Fields.ACTUAL_TOTAL,_Fields.POSITION_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNTS, new org.apache.thrift.meta_data.FieldMetaData("amounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_MIN, new org.apache.thrift.meta_data.FieldMetaData("rangeMin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_MAX, new org.apache.thrift.meta_data.FieldMetaData("rangeMax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData("probability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("headline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADLINE_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("headlineFailure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("shareTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESC, new org.apache.thrift.meta_data.FieldMetaData("shareDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_IMG, new org.apache.thrift.meta_data.FieldMetaData("shareImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECKED, new org.apache.thrift.meta_data.FieldMetaData("checked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTIMATED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("estimatedTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actualTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("positionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityDTO.class, metaDataMap);
  }

  public ActivityDTO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityDTO(ActivityDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetAmounts()) {
      java.util.List<java.lang.Double> __this__amounts = new java.util.ArrayList<java.lang.Double>(other.amounts);
      this.amounts = __this__amounts;
    }
    this.target = other.target;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.totalAmount = other.totalAmount;
    this.rangeMin = other.rangeMin;
    this.rangeMax = other.rangeMax;
    this.probability = other.probability;
    this.dType = other.dType;
    if (other.isSetHeadline()) {
      this.headline = other.headline;
    }
    if (other.isSetHeadlineFailure()) {
      this.headlineFailure = other.headlineFailure;
    }
    if (other.isSetShareTitle()) {
      this.shareTitle = other.shareTitle;
    }
    if (other.isSetShareDesc()) {
      this.shareDesc = other.shareDesc;
    }
    if (other.isSetShareImg()) {
      this.shareImg = other.shareImg;
    }
    this.status = other.status;
    this.checked = other.checked;
    this.estimatedTotal = other.estimatedTotal;
    this.actualTotal = other.actualTotal;
    if (other.isSetPositionIds()) {
      java.util.List<java.lang.Integer> __this__positionIds = new java.util.ArrayList<java.lang.Integer>(other.positionIds);
      this.positionIds = __this__positionIds;
    }
  }

  public ActivityDTO deepCopy() {
    return new ActivityDTO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.amounts = null;
    setTargetIsSet(false);
    this.target = 0;
    this.startTime = null;
    this.endTime = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    setRangeMinIsSet(false);
    this.rangeMin = 0.0;
    setRangeMaxIsSet(false);
    this.rangeMax = 0.0;
    setProbabilityIsSet(false);
    this.probability = 0;
    setDTypeIsSet(false);
    this.dType = 0;
    this.headline = null;
    this.headlineFailure = null;
    this.shareTitle = null;
    this.shareDesc = null;
    this.shareImg = null;
    setStatusIsSet(false);
    this.status = 0;
    setCheckedIsSet(false);
    this.checked = 0;
    setEstimatedTotalIsSet(false);
    this.estimatedTotal = 0;
    setActualTotalIsSet(false);
    this.actualTotal = 0;
    this.positionIds = null;
  }

  public int getId() {
    return this.id;
  }

  public ActivityDTO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAmountsSize() {
    return (this.amounts == null) ? 0 : this.amounts.size();
  }

  public java.util.Iterator<java.lang.Double> getAmountsIterator() {
    return (this.amounts == null) ? null : this.amounts.iterator();
  }

  public void addToAmounts(double elem) {
    if (this.amounts == null) {
      this.amounts = new java.util.ArrayList<java.lang.Double>();
    }
    this.amounts.add(elem);
  }

  public java.util.List<java.lang.Double> getAmounts() {
    return this.amounts;
  }

  public ActivityDTO setAmounts(java.util.List<java.lang.Double> amounts) {
    this.amounts = amounts;
    return this;
  }

  public void unsetAmounts() {
    this.amounts = null;
  }

  /** Returns true if field amounts is set (has been assigned a value) and false otherwise */
  public boolean isSetAmounts() {
    return this.amounts != null;
  }

  public void setAmountsIsSet(boolean value) {
    if (!value) {
      this.amounts = null;
    }
  }

  public int getTarget() {
    return this.target;
  }

  public ActivityDTO setTarget(int target) {
    this.target = target;
    setTargetIsSet(true);
    return this;
  }

  public void unsetTarget() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  public void setTargetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
  }

  public java.lang.String getStartTime() {
    return this.startTime;
  }

  public ActivityDTO setStartTime(java.lang.String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public java.lang.String getEndTime() {
    return this.endTime;
  }

  public ActivityDTO setEndTime(java.lang.String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public ActivityDTO setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public double getRangeMin() {
    return this.rangeMin;
  }

  public ActivityDTO setRangeMin(double rangeMin) {
    this.rangeMin = rangeMin;
    setRangeMinIsSet(true);
    return this;
  }

  public void unsetRangeMin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGEMIN_ISSET_ID);
  }

  /** Returns true if field rangeMin is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeMin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGEMIN_ISSET_ID);
  }

  public void setRangeMinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGEMIN_ISSET_ID, value);
  }

  public double getRangeMax() {
    return this.rangeMax;
  }

  public ActivityDTO setRangeMax(double rangeMax) {
    this.rangeMax = rangeMax;
    setRangeMaxIsSet(true);
    return this;
  }

  public void unsetRangeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGEMAX_ISSET_ID);
  }

  /** Returns true if field rangeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGEMAX_ISSET_ID);
  }

  public void setRangeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGEMAX_ISSET_ID, value);
  }

  public int getProbability() {
    return this.probability;
  }

  public ActivityDTO setProbability(int probability) {
    this.probability = probability;
    setProbabilityIsSet(true);
    return this;
  }

  public void unsetProbability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  /** Returns true if field probability is set (has been assigned a value) and false otherwise */
  public boolean isSetProbability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  public void setProbabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROBABILITY_ISSET_ID, value);
  }

  public int getDType() {
    return this.dType;
  }

  public ActivityDTO setDType(int dType) {
    this.dType = dType;
    setDTypeIsSet(true);
    return this;
  }

  public void unsetDType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DTYPE_ISSET_ID);
  }

  /** Returns true if field dType is set (has been assigned a value) and false otherwise */
  public boolean isSetDType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DTYPE_ISSET_ID);
  }

  public void setDTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DTYPE_ISSET_ID, value);
  }

  public java.lang.String getHeadline() {
    return this.headline;
  }

  public ActivityDTO setHeadline(java.lang.String headline) {
    this.headline = headline;
    return this;
  }

  public void unsetHeadline() {
    this.headline = null;
  }

  /** Returns true if field headline is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadline() {
    return this.headline != null;
  }

  public void setHeadlineIsSet(boolean value) {
    if (!value) {
      this.headline = null;
    }
  }

  public java.lang.String getHeadlineFailure() {
    return this.headlineFailure;
  }

  public ActivityDTO setHeadlineFailure(java.lang.String headlineFailure) {
    this.headlineFailure = headlineFailure;
    return this;
  }

  public void unsetHeadlineFailure() {
    this.headlineFailure = null;
  }

  /** Returns true if field headlineFailure is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadlineFailure() {
    return this.headlineFailure != null;
  }

  public void setHeadlineFailureIsSet(boolean value) {
    if (!value) {
      this.headlineFailure = null;
    }
  }

  public java.lang.String getShareTitle() {
    return this.shareTitle;
  }

  public ActivityDTO setShareTitle(java.lang.String shareTitle) {
    this.shareTitle = shareTitle;
    return this;
  }

  public void unsetShareTitle() {
    this.shareTitle = null;
  }

  /** Returns true if field shareTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTitle() {
    return this.shareTitle != null;
  }

  public void setShareTitleIsSet(boolean value) {
    if (!value) {
      this.shareTitle = null;
    }
  }

  public java.lang.String getShareDesc() {
    return this.shareDesc;
  }

  public ActivityDTO setShareDesc(java.lang.String shareDesc) {
    this.shareDesc = shareDesc;
    return this;
  }

  public void unsetShareDesc() {
    this.shareDesc = null;
  }

  /** Returns true if field shareDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDesc() {
    return this.shareDesc != null;
  }

  public void setShareDescIsSet(boolean value) {
    if (!value) {
      this.shareDesc = null;
    }
  }

  public java.lang.String getShareImg() {
    return this.shareImg;
  }

  public ActivityDTO setShareImg(java.lang.String shareImg) {
    this.shareImg = shareImg;
    return this;
  }

  public void unsetShareImg() {
    this.shareImg = null;
  }

  /** Returns true if field shareImg is set (has been assigned a value) and false otherwise */
  public boolean isSetShareImg() {
    return this.shareImg != null;
  }

  public void setShareImgIsSet(boolean value) {
    if (!value) {
      this.shareImg = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ActivityDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getChecked() {
    return this.checked;
  }

  public ActivityDTO setChecked(int checked) {
    this.checked = checked;
    setCheckedIsSet(true);
    return this;
  }

  public void unsetChecked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  /** Returns true if field checked is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  public void setCheckedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKED_ISSET_ID, value);
  }

  public int getEstimatedTotal() {
    return this.estimatedTotal;
  }

  public ActivityDTO setEstimatedTotal(int estimatedTotal) {
    this.estimatedTotal = estimatedTotal;
    setEstimatedTotalIsSet(true);
    return this;
  }

  public void unsetEstimatedTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID);
  }

  /** Returns true if field estimatedTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID);
  }

  public void setEstimatedTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID, value);
  }

  public int getActualTotal() {
    return this.actualTotal;
  }

  public ActivityDTO setActualTotal(int actualTotal) {
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    return this;
  }

  public void unsetActualTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  /** Returns true if field actualTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  public void setActualTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID, value);
  }

  public int getPositionIdsSize() {
    return (this.positionIds == null) ? 0 : this.positionIds.size();
  }

  public java.util.Iterator<java.lang.Integer> getPositionIdsIterator() {
    return (this.positionIds == null) ? null : this.positionIds.iterator();
  }

  public void addToPositionIds(int elem) {
    if (this.positionIds == null) {
      this.positionIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.positionIds.add(elem);
  }

  public java.util.List<java.lang.Integer> getPositionIds() {
    return this.positionIds;
  }

  public ActivityDTO setPositionIds(java.util.List<java.lang.Integer> positionIds) {
    this.positionIds = positionIds;
    return this;
  }

  public void unsetPositionIds() {
    this.positionIds = null;
  }

  /** Returns true if field positionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionIds() {
    return this.positionIds != null;
  }

  public void setPositionIdsIsSet(boolean value) {
    if (!value) {
      this.positionIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case AMOUNTS:
      if (value == null) {
        unsetAmounts();
      } else {
        setAmounts((java.util.List<java.lang.Double>)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((java.lang.Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((java.lang.Double)value);
      }
      break;

    case RANGE_MIN:
      if (value == null) {
        unsetRangeMin();
      } else {
        setRangeMin((java.lang.Double)value);
      }
      break;

    case RANGE_MAX:
      if (value == null) {
        unsetRangeMax();
      } else {
        setRangeMax((java.lang.Double)value);
      }
      break;

    case PROBABILITY:
      if (value == null) {
        unsetProbability();
      } else {
        setProbability((java.lang.Integer)value);
      }
      break;

    case D_TYPE:
      if (value == null) {
        unsetDType();
      } else {
        setDType((java.lang.Integer)value);
      }
      break;

    case HEADLINE:
      if (value == null) {
        unsetHeadline();
      } else {
        setHeadline((java.lang.String)value);
      }
      break;

    case HEADLINE_FAILURE:
      if (value == null) {
        unsetHeadlineFailure();
      } else {
        setHeadlineFailure((java.lang.String)value);
      }
      break;

    case SHARE_TITLE:
      if (value == null) {
        unsetShareTitle();
      } else {
        setShareTitle((java.lang.String)value);
      }
      break;

    case SHARE_DESC:
      if (value == null) {
        unsetShareDesc();
      } else {
        setShareDesc((java.lang.String)value);
      }
      break;

    case SHARE_IMG:
      if (value == null) {
        unsetShareImg();
      } else {
        setShareImg((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case CHECKED:
      if (value == null) {
        unsetChecked();
      } else {
        setChecked((java.lang.Integer)value);
      }
      break;

    case ESTIMATED_TOTAL:
      if (value == null) {
        unsetEstimatedTotal();
      } else {
        setEstimatedTotal((java.lang.Integer)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActualTotal();
      } else {
        setActualTotal((java.lang.Integer)value);
      }
      break;

    case POSITION_IDS:
      if (value == null) {
        unsetPositionIds();
      } else {
        setPositionIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case AMOUNTS:
      return getAmounts();

    case TARGET:
      return getTarget();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case TOTAL_AMOUNT:
      return getTotalAmount();

    case RANGE_MIN:
      return getRangeMin();

    case RANGE_MAX:
      return getRangeMax();

    case PROBABILITY:
      return getProbability();

    case D_TYPE:
      return getDType();

    case HEADLINE:
      return getHeadline();

    case HEADLINE_FAILURE:
      return getHeadlineFailure();

    case SHARE_TITLE:
      return getShareTitle();

    case SHARE_DESC:
      return getShareDesc();

    case SHARE_IMG:
      return getShareImg();

    case STATUS:
      return getStatus();

    case CHECKED:
      return getChecked();

    case ESTIMATED_TOTAL:
      return getEstimatedTotal();

    case ACTUAL_TOTAL:
      return getActualTotal();

    case POSITION_IDS:
      return getPositionIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AMOUNTS:
      return isSetAmounts();
    case TARGET:
      return isSetTarget();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case RANGE_MIN:
      return isSetRangeMin();
    case RANGE_MAX:
      return isSetRangeMax();
    case PROBABILITY:
      return isSetProbability();
    case D_TYPE:
      return isSetDType();
    case HEADLINE:
      return isSetHeadline();
    case HEADLINE_FAILURE:
      return isSetHeadlineFailure();
    case SHARE_TITLE:
      return isSetShareTitle();
    case SHARE_DESC:
      return isSetShareDesc();
    case SHARE_IMG:
      return isSetShareImg();
    case STATUS:
      return isSetStatus();
    case CHECKED:
      return isSetChecked();
    case ESTIMATED_TOTAL:
      return isSetEstimatedTotal();
    case ACTUAL_TOTAL:
      return isSetActualTotal();
    case POSITION_IDS:
      return isSetPositionIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityDTO)
      return this.equals((ActivityDTO)that);
    return false;
  }

  public boolean equals(ActivityDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_amounts = true && this.isSetAmounts();
    boolean that_present_amounts = true && that.isSetAmounts();
    if (this_present_amounts || that_present_amounts) {
      if (!(this_present_amounts && that_present_amounts))
        return false;
      if (!this.amounts.equals(that.amounts))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (this.target != that.target)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_rangeMin = true && this.isSetRangeMin();
    boolean that_present_rangeMin = true && that.isSetRangeMin();
    if (this_present_rangeMin || that_present_rangeMin) {
      if (!(this_present_rangeMin && that_present_rangeMin))
        return false;
      if (this.rangeMin != that.rangeMin)
        return false;
    }

    boolean this_present_rangeMax = true && this.isSetRangeMax();
    boolean that_present_rangeMax = true && that.isSetRangeMax();
    if (this_present_rangeMax || that_present_rangeMax) {
      if (!(this_present_rangeMax && that_present_rangeMax))
        return false;
      if (this.rangeMax != that.rangeMax)
        return false;
    }

    boolean this_present_probability = true && this.isSetProbability();
    boolean that_present_probability = true && that.isSetProbability();
    if (this_present_probability || that_present_probability) {
      if (!(this_present_probability && that_present_probability))
        return false;
      if (this.probability != that.probability)
        return false;
    }

    boolean this_present_dType = true && this.isSetDType();
    boolean that_present_dType = true && that.isSetDType();
    if (this_present_dType || that_present_dType) {
      if (!(this_present_dType && that_present_dType))
        return false;
      if (this.dType != that.dType)
        return false;
    }

    boolean this_present_headline = true && this.isSetHeadline();
    boolean that_present_headline = true && that.isSetHeadline();
    if (this_present_headline || that_present_headline) {
      if (!(this_present_headline && that_present_headline))
        return false;
      if (!this.headline.equals(that.headline))
        return false;
    }

    boolean this_present_headlineFailure = true && this.isSetHeadlineFailure();
    boolean that_present_headlineFailure = true && that.isSetHeadlineFailure();
    if (this_present_headlineFailure || that_present_headlineFailure) {
      if (!(this_present_headlineFailure && that_present_headlineFailure))
        return false;
      if (!this.headlineFailure.equals(that.headlineFailure))
        return false;
    }

    boolean this_present_shareTitle = true && this.isSetShareTitle();
    boolean that_present_shareTitle = true && that.isSetShareTitle();
    if (this_present_shareTitle || that_present_shareTitle) {
      if (!(this_present_shareTitle && that_present_shareTitle))
        return false;
      if (!this.shareTitle.equals(that.shareTitle))
        return false;
    }

    boolean this_present_shareDesc = true && this.isSetShareDesc();
    boolean that_present_shareDesc = true && that.isSetShareDesc();
    if (this_present_shareDesc || that_present_shareDesc) {
      if (!(this_present_shareDesc && that_present_shareDesc))
        return false;
      if (!this.shareDesc.equals(that.shareDesc))
        return false;
    }

    boolean this_present_shareImg = true && this.isSetShareImg();
    boolean that_present_shareImg = true && that.isSetShareImg();
    if (this_present_shareImg || that_present_shareImg) {
      if (!(this_present_shareImg && that_present_shareImg))
        return false;
      if (!this.shareImg.equals(that.shareImg))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_checked = true && this.isSetChecked();
    boolean that_present_checked = true && that.isSetChecked();
    if (this_present_checked || that_present_checked) {
      if (!(this_present_checked && that_present_checked))
        return false;
      if (this.checked != that.checked)
        return false;
    }

    boolean this_present_estimatedTotal = true && this.isSetEstimatedTotal();
    boolean that_present_estimatedTotal = true && that.isSetEstimatedTotal();
    if (this_present_estimatedTotal || that_present_estimatedTotal) {
      if (!(this_present_estimatedTotal && that_present_estimatedTotal))
        return false;
      if (this.estimatedTotal != that.estimatedTotal)
        return false;
    }

    boolean this_present_actualTotal = true && this.isSetActualTotal();
    boolean that_present_actualTotal = true && that.isSetActualTotal();
    if (this_present_actualTotal || that_present_actualTotal) {
      if (!(this_present_actualTotal && that_present_actualTotal))
        return false;
      if (this.actualTotal != that.actualTotal)
        return false;
    }

    boolean this_present_positionIds = true && this.isSetPositionIds();
    boolean that_present_positionIds = true && that.isSetPositionIds();
    if (this_present_positionIds || that_present_positionIds) {
      if (!(this_present_positionIds && that_present_positionIds))
        return false;
      if (!this.positionIds.equals(that.positionIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetAmounts()) ? 131071 : 524287);
    if (isSetAmounts())
      hashCode = hashCode * 8191 + amounts.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target;

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalAmount()) ? 131071 : 524287);
    if (isSetTotalAmount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalAmount);

    hashCode = hashCode * 8191 + ((isSetRangeMin()) ? 131071 : 524287);
    if (isSetRangeMin())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rangeMin);

    hashCode = hashCode * 8191 + ((isSetRangeMax()) ? 131071 : 524287);
    if (isSetRangeMax())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rangeMax);

    hashCode = hashCode * 8191 + ((isSetProbability()) ? 131071 : 524287);
    if (isSetProbability())
      hashCode = hashCode * 8191 + probability;

    hashCode = hashCode * 8191 + ((isSetDType()) ? 131071 : 524287);
    if (isSetDType())
      hashCode = hashCode * 8191 + dType;

    hashCode = hashCode * 8191 + ((isSetHeadline()) ? 131071 : 524287);
    if (isSetHeadline())
      hashCode = hashCode * 8191 + headline.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadlineFailure()) ? 131071 : 524287);
    if (isSetHeadlineFailure())
      hashCode = hashCode * 8191 + headlineFailure.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareTitle()) ? 131071 : 524287);
    if (isSetShareTitle())
      hashCode = hashCode * 8191 + shareTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareDesc()) ? 131071 : 524287);
    if (isSetShareDesc())
      hashCode = hashCode * 8191 + shareDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareImg()) ? 131071 : 524287);
    if (isSetShareImg())
      hashCode = hashCode * 8191 + shareImg.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetChecked()) ? 131071 : 524287);
    if (isSetChecked())
      hashCode = hashCode * 8191 + checked;

    hashCode = hashCode * 8191 + ((isSetEstimatedTotal()) ? 131071 : 524287);
    if (isSetEstimatedTotal())
      hashCode = hashCode * 8191 + estimatedTotal;

    hashCode = hashCode * 8191 + ((isSetActualTotal()) ? 131071 : 524287);
    if (isSetActualTotal())
      hashCode = hashCode * 8191 + actualTotal;

    hashCode = hashCode * 8191 + ((isSetPositionIds()) ? 131071 : 524287);
    if (isSetPositionIds())
      hashCode = hashCode * 8191 + positionIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ActivityDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmounts()).compareTo(other.isSetAmounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amounts, other.amounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeMin()).compareTo(other.isSetRangeMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeMin, other.rangeMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeMax()).compareTo(other.isSetRangeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeMax, other.rangeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProbability()).compareTo(other.isSetProbability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probability, other.probability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDType()).compareTo(other.isSetDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dType, other.dType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadline()).compareTo(other.isSetHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headline, other.headline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadlineFailure()).compareTo(other.isSetHeadlineFailure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadlineFailure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headlineFailure, other.headlineFailure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareTitle()).compareTo(other.isSetShareTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTitle, other.shareTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareDesc()).compareTo(other.isSetShareDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDesc, other.shareDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareImg()).compareTo(other.isSetShareImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareImg, other.shareImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChecked()).compareTo(other.isSetChecked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked, other.checked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEstimatedTotal()).compareTo(other.isSetEstimatedTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedTotal, other.estimatedTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActualTotal()).compareTo(other.isSetActualTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualTotal, other.actualTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionIds()).compareTo(other.isSetPositionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIds, other.positionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ActivityDTO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAmounts()) {
      if (!first) sb.append(", ");
      sb.append("amounts:");
      if (this.amounts == null) {
        sb.append("null");
      } else {
        sb.append(this.amounts);
      }
      first = false;
    }
    if (isSetTarget()) {
      if (!first) sb.append(", ");
      sb.append("target:");
      sb.append(this.target);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    if (isSetRangeMin()) {
      if (!first) sb.append(", ");
      sb.append("rangeMin:");
      sb.append(this.rangeMin);
      first = false;
    }
    if (isSetRangeMax()) {
      if (!first) sb.append(", ");
      sb.append("rangeMax:");
      sb.append(this.rangeMax);
      first = false;
    }
    if (isSetProbability()) {
      if (!first) sb.append(", ");
      sb.append("probability:");
      sb.append(this.probability);
      first = false;
    }
    if (isSetDType()) {
      if (!first) sb.append(", ");
      sb.append("dType:");
      sb.append(this.dType);
      first = false;
    }
    if (isSetHeadline()) {
      if (!first) sb.append(", ");
      sb.append("headline:");
      if (this.headline == null) {
        sb.append("null");
      } else {
        sb.append(this.headline);
      }
      first = false;
    }
    if (isSetHeadlineFailure()) {
      if (!first) sb.append(", ");
      sb.append("headlineFailure:");
      if (this.headlineFailure == null) {
        sb.append("null");
      } else {
        sb.append(this.headlineFailure);
      }
      first = false;
    }
    if (isSetShareTitle()) {
      if (!first) sb.append(", ");
      sb.append("shareTitle:");
      if (this.shareTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.shareTitle);
      }
      first = false;
    }
    if (isSetShareDesc()) {
      if (!first) sb.append(", ");
      sb.append("shareDesc:");
      if (this.shareDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.shareDesc);
      }
      first = false;
    }
    if (isSetShareImg()) {
      if (!first) sb.append(", ");
      sb.append("shareImg:");
      if (this.shareImg == null) {
        sb.append("null");
      } else {
        sb.append(this.shareImg);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetChecked()) {
      if (!first) sb.append(", ");
      sb.append("checked:");
      sb.append(this.checked);
      first = false;
    }
    if (isSetEstimatedTotal()) {
      if (!first) sb.append(", ");
      sb.append("estimatedTotal:");
      sb.append(this.estimatedTotal);
      first = false;
    }
    if (isSetActualTotal()) {
      if (!first) sb.append(", ");
      sb.append("actualTotal:");
      sb.append(this.actualTotal);
      first = false;
    }
    if (isSetPositionIds()) {
      if (!first) sb.append(", ");
      sb.append("positionIds:");
      if (this.positionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.positionIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivityDTOStandardScheme getScheme() {
      return new ActivityDTOStandardScheme();
    }
  }

  private static class ActivityDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ActivityDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AMOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.amounts = new java.util.ArrayList<java.lang.Double>(_list16.size);
                double _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readDouble();
                  struct.amounts.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAmountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target = iprot.readI32();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RANGE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeMin = iprot.readDouble();
              struct.setRangeMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANGE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeMax = iprot.readDouble();
              struct.setRangeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROBABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.probability = iprot.readI32();
              struct.setProbabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // D_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dType = iprot.readI32();
              struct.setDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headline = iprot.readString();
              struct.setHeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEADLINE_FAILURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headlineFailure = iprot.readString();
              struct.setHeadlineFailureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHARE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareTitle = iprot.readString();
              struct.setShareTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHARE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareDesc = iprot.readString();
              struct.setShareDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHARE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareImg = iprot.readString();
              struct.setShareImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CHECKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checked = iprot.readI32();
              struct.setCheckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ESTIMATED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estimatedTotal = iprot.readI32();
              struct.setEstimatedTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actualTotal = iprot.readI32();
              struct.setActualTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // POSITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.positionIds = new java.util.ArrayList<java.lang.Integer>(_list19.size);
                int _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readI32();
                  struct.positionIds.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setPositionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.amounts != null) {
        if (struct.isSetAmounts()) {
          oprot.writeFieldBegin(AMOUNTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.amounts.size()));
            for (double _iter22 : struct.amounts)
            {
              oprot.writeDouble(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTarget()) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI32(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRangeMin()) {
        oprot.writeFieldBegin(RANGE_MIN_FIELD_DESC);
        oprot.writeDouble(struct.rangeMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRangeMax()) {
        oprot.writeFieldBegin(RANGE_MAX_FIELD_DESC);
        oprot.writeDouble(struct.rangeMax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProbability()) {
        oprot.writeFieldBegin(PROBABILITY_FIELD_DESC);
        oprot.writeI32(struct.probability);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDType()) {
        oprot.writeFieldBegin(D_TYPE_FIELD_DESC);
        oprot.writeI32(struct.dType);
        oprot.writeFieldEnd();
      }
      if (struct.headline != null) {
        if (struct.isSetHeadline()) {
          oprot.writeFieldBegin(HEADLINE_FIELD_DESC);
          oprot.writeString(struct.headline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headlineFailure != null) {
        if (struct.isSetHeadlineFailure()) {
          oprot.writeFieldBegin(HEADLINE_FAILURE_FIELD_DESC);
          oprot.writeString(struct.headlineFailure);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareTitle != null) {
        if (struct.isSetShareTitle()) {
          oprot.writeFieldBegin(SHARE_TITLE_FIELD_DESC);
          oprot.writeString(struct.shareTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareDesc != null) {
        if (struct.isSetShareDesc()) {
          oprot.writeFieldBegin(SHARE_DESC_FIELD_DESC);
          oprot.writeString(struct.shareDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareImg != null) {
        if (struct.isSetShareImg()) {
          oprot.writeFieldBegin(SHARE_IMG_FIELD_DESC);
          oprot.writeString(struct.shareImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecked()) {
        oprot.writeFieldBegin(CHECKED_FIELD_DESC);
        oprot.writeI32(struct.checked);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstimatedTotal()) {
        oprot.writeFieldBegin(ESTIMATED_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.estimatedTotal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActualTotal()) {
        oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.actualTotal);
        oprot.writeFieldEnd();
      }
      if (struct.positionIds != null) {
        if (struct.isSetPositionIds()) {
          oprot.writeFieldBegin(POSITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIds.size()));
            for (int _iter23 : struct.positionIds)
            {
              oprot.writeI32(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivityDTOTupleScheme getScheme() {
      return new ActivityDTOTupleScheme();
    }
  }

  private static class ActivityDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ActivityDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAmounts()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(5);
      }
      if (struct.isSetRangeMin()) {
        optionals.set(6);
      }
      if (struct.isSetRangeMax()) {
        optionals.set(7);
      }
      if (struct.isSetProbability()) {
        optionals.set(8);
      }
      if (struct.isSetDType()) {
        optionals.set(9);
      }
      if (struct.isSetHeadline()) {
        optionals.set(10);
      }
      if (struct.isSetHeadlineFailure()) {
        optionals.set(11);
      }
      if (struct.isSetShareTitle()) {
        optionals.set(12);
      }
      if (struct.isSetShareDesc()) {
        optionals.set(13);
      }
      if (struct.isSetShareImg()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetChecked()) {
        optionals.set(16);
      }
      if (struct.isSetEstimatedTotal()) {
        optionals.set(17);
      }
      if (struct.isSetActualTotal()) {
        optionals.set(18);
      }
      if (struct.isSetPositionIds()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAmounts()) {
        {
          oprot.writeI32(struct.amounts.size());
          for (double _iter24 : struct.amounts)
          {
            oprot.writeDouble(_iter24);
          }
        }
      }
      if (struct.isSetTarget()) {
        oprot.writeI32(struct.target);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
      if (struct.isSetRangeMin()) {
        oprot.writeDouble(struct.rangeMin);
      }
      if (struct.isSetRangeMax()) {
        oprot.writeDouble(struct.rangeMax);
      }
      if (struct.isSetProbability()) {
        oprot.writeI32(struct.probability);
      }
      if (struct.isSetDType()) {
        oprot.writeI32(struct.dType);
      }
      if (struct.isSetHeadline()) {
        oprot.writeString(struct.headline);
      }
      if (struct.isSetHeadlineFailure()) {
        oprot.writeString(struct.headlineFailure);
      }
      if (struct.isSetShareTitle()) {
        oprot.writeString(struct.shareTitle);
      }
      if (struct.isSetShareDesc()) {
        oprot.writeString(struct.shareDesc);
      }
      if (struct.isSetShareImg()) {
        oprot.writeString(struct.shareImg);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetChecked()) {
        oprot.writeI32(struct.checked);
      }
      if (struct.isSetEstimatedTotal()) {
        oprot.writeI32(struct.estimatedTotal);
      }
      if (struct.isSetActualTotal()) {
        oprot.writeI32(struct.actualTotal);
      }
      if (struct.isSetPositionIds()) {
        {
          oprot.writeI32(struct.positionIds.size());
          for (int _iter25 : struct.positionIds)
          {
            oprot.writeI32(_iter25);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.amounts = new java.util.ArrayList<java.lang.Double>(_list26.size);
          double _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readDouble();
            struct.amounts.add(_elem27);
          }
        }
        struct.setAmountsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target = iprot.readI32();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rangeMin = iprot.readDouble();
        struct.setRangeMinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rangeMax = iprot.readDouble();
        struct.setRangeMaxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.probability = iprot.readI32();
        struct.setProbabilityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dType = iprot.readI32();
        struct.setDTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.headline = iprot.readString();
        struct.setHeadlineIsSet(true);
      }
      if (incoming.get(11)) {
        struct.headlineFailure = iprot.readString();
        struct.setHeadlineFailureIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shareTitle = iprot.readString();
        struct.setShareTitleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.shareDesc = iprot.readString();
        struct.setShareDescIsSet(true);
      }
      if (incoming.get(14)) {
        struct.shareImg = iprot.readString();
        struct.setShareImgIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.checked = iprot.readI32();
        struct.setCheckedIsSet(true);
      }
      if (incoming.get(17)) {
        struct.estimatedTotal = iprot.readI32();
        struct.setEstimatedTotalIsSet(true);
      }
      if (incoming.get(18)) {
        struct.actualTotal = iprot.readI32();
        struct.setActualTotalIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.positionIds = new java.util.ArrayList<java.lang.Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.positionIds.add(_elem30);
          }
        }
        struct.setPositionIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

