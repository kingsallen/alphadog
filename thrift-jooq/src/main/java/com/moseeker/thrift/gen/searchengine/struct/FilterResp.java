/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.searchengine.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-18")
public class FilterResp implements org.apache.thrift.TBase<FilterResp, FilterResp._Fields>, java.io.Serializable, Cloneable, Comparable<FilterResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FilterResp");

  private static final org.apache.thrift.protocol.TField TALENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("talent_count", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FilterRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FilterRespTupleSchemeFactory();

  public int talent_count; // optional
  public java.util.List<Integer> user_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TALENT_COUNT((short)1, "talent_count"),
    USER_IDS((short)2, "user_ids");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TALENT_COUNT
          return TALENT_COUNT;
        case 2: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TALENT_COUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TALENT_COUNT,_Fields.USER_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TALENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("talent_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FilterResp.class, metaDataMap);
  }

  public FilterResp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FilterResp(FilterResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.talent_count = other.talent_count;
    if (other.isSetUser_ids()) {
      java.util.List<Integer> __this__user_ids = new java.util.ArrayList<Integer>(other.user_ids);
      this.user_ids = __this__user_ids;
    }
  }

  public FilterResp deepCopy() {
    return new FilterResp(this);
  }

  @Override
  public void clear() {
    setTalent_countIsSet(false);
    this.talent_count = 0;
    this.user_ids = null;
  }

  public int getTalent_count() {
    return this.talent_count;
  }

  public FilterResp setTalent_count(int talent_count) {
    this.talent_count = talent_count;
    setTalent_countIsSet(true);
    return this;
  }

  public void unsetTalent_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TALENT_COUNT_ISSET_ID);
  }

  /** Returns true if field talent_count is set (has been assigned a value) and false otherwise */
  public boolean isSetTalent_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TALENT_COUNT_ISSET_ID);
  }

  public void setTalent_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TALENT_COUNT_ISSET_ID, value);
  }

  public int getUser_idsSize() {
    return (this.user_ids == null) ? 0 : this.user_ids.size();
  }

  public java.util.Iterator<Integer> getUser_idsIterator() {
    return (this.user_ids == null) ? null : this.user_ids.iterator();
  }

  public void addToUser_ids(int elem) {
    if (this.user_ids == null) {
      this.user_ids = new java.util.ArrayList<Integer>();
    }
    this.user_ids.add(elem);
  }

  public java.util.List<Integer> getUser_ids() {
    return this.user_ids;
  }

  public FilterResp setUser_ids(java.util.List<Integer> user_ids) {
    this.user_ids = user_ids;
    return this;
  }

  public void unsetUser_ids() {
    this.user_ids = null;
  }

  /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ids() {
    return this.user_ids != null;
  }

  public void setUser_idsIsSet(boolean value) {
    if (!value) {
      this.user_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TALENT_COUNT:
      if (value == null) {
        unsetTalent_count();
      } else {
        setTalent_count((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUser_ids();
      } else {
        setUser_ids((java.util.List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TALENT_COUNT:
      return getTalent_count();

    case USER_IDS:
      return getUser_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TALENT_COUNT:
      return isSetTalent_count();
    case USER_IDS:
      return isSetUser_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FilterResp)
      return this.equals((FilterResp)that);
    return false;
  }

  public boolean equals(FilterResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_talent_count = true && this.isSetTalent_count();
    boolean that_present_talent_count = true && that.isSetTalent_count();
    if (this_present_talent_count || that_present_talent_count) {
      if (!(this_present_talent_count && that_present_talent_count))
        return false;
      if (this.talent_count != that.talent_count)
        return false;
    }

    boolean this_present_user_ids = true && this.isSetUser_ids();
    boolean that_present_user_ids = true && that.isSetUser_ids();
    if (this_present_user_ids || that_present_user_ids) {
      if (!(this_present_user_ids && that_present_user_ids))
        return false;
      if (!this.user_ids.equals(that.user_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTalent_count()) ? 131071 : 524287);
    if (isSetTalent_count())
      hashCode = hashCode * 8191 + talent_count;

    hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
    if (isSetUser_ids())
      hashCode = hashCode * 8191 + user_ids.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FilterResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTalent_count()).compareTo(other.isSetTalent_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTalent_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talent_count, other.talent_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FilterResp(");
    boolean first = true;

    if (isSetTalent_count()) {
      sb.append("talent_count:");
      sb.append(this.talent_count);
      first = false;
    }
    if (isSetUser_ids()) {
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FilterRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilterRespStandardScheme getScheme() {
      return new FilterRespStandardScheme();
    }
  }

  private static class FilterRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<FilterResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FilterResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TALENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.talent_count = iprot.readI32();
              struct.setTalent_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.user_ids = new java.util.ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.user_ids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUser_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FilterResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTalent_count()) {
        oprot.writeFieldBegin(TALENT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.talent_count);
        oprot.writeFieldEnd();
      }
      if (struct.user_ids != null) {
        if (struct.isSetUser_ids()) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter3 : struct.user_ids)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilterRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilterRespTupleScheme getScheme() {
      return new FilterRespTupleScheme();
    }
  }

  private static class FilterRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<FilterResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FilterResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTalent_count()) {
        optionals.set(0);
      }
      if (struct.isSetUser_ids()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTalent_count()) {
        oprot.writeI32(struct.talent_count);
      }
      if (struct.isSetUser_ids()) {
        {
          oprot.writeI32(struct.user_ids.size());
          for (int _iter4 : struct.user_ids)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FilterResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.talent_count = iprot.readI32();
        struct.setTalent_countIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.user_ids = new java.util.ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.user_ids.add(_elem6);
          }
        }
        struct.setUser_idsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

