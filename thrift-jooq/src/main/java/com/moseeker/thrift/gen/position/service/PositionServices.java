/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-29")
public class PositionServices {

    public interface Iface {

        public com.moseeker.thrift.gen.common.struct.Response getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getRecommendedPositions(int pid) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response verifyCustomize(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionById(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response CustomField(java.lang.String param) throws org.apache.thrift.TException;

        public boolean ifAllowRefresh(int positionId, int account_id) throws org.apache.thrift.TException;

        public java.util.List<java.lang.String> getThirdPartyPositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response saveAndSync(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response deleteJobposition(com.moseeker.thrift.gen.position.struct.DelePostion delePostion) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTeamIdByDepartmentName(int companyId, java.lang.String departmentName) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionForThirdParty(int positionId, int channel) throws org.apache.thrift.TException;

        public java.util.List<java.lang.Integer> getPositionListForThirdParty(int channel, int type, java.lang.String start_time, java.lang.String end_time) throws org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> getPositionList(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query) throws org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> getPositionListRpExt(java.util.List<java.lang.Integer> pids) throws org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> getRpPositionList(int hb_config_id, int pageNum, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.position.struct.WechatShareData getShareInfo(int hb_config_id) throws org.apache.thrift.TException;

        /**
         * Gamma 0.9 接口*
         */
        public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO headImage() throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.position.struct.PositionDetailsVO positionDetails(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO companyHotPositionDetailsList(int companyId, int page, int per_age) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO similarityPositionDetailsList(int pid, int page, int per_age) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult getThirdPartyPositionInfo(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public int updateThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public int updateThirdPartyPositionWithAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommand(int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommandCompany(int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommandCompanyAll(int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcPositionDetail(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommendPosition(int positionId, int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addPcReport(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPcAdvertisement(int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionRecommendByModuleId(int page, int pageSize, int moduleId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getThirdpartySyncedPositions(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response putAlipayResult(int channel, int positionId, int alipayJobId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPersonaRecomPositionList(int userId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response positionCvConf(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmployeeRecomPositionByIds(int recomPushId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updatePosition(java.lang.String param) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionList(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionSuggest(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionNumStatus(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionDetail(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionShare(int positionId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getFeatureByPId(int pid) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeature(int pid, int fid) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeatures(int pid, java.util.List<java.lang.Integer> fidList) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeatureBatch(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionFeatureBetch(java.util.List<java.lang.Integer> pidList) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getRecommendedPositions(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void verifyCustomize(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionById(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void CustomField(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void ifAllowRefresh(int positionId, int account_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

        public void getThirdPartyPositions(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

        public void batchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void saveAndSync(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void deleteJobposition(com.moseeker.thrift.gen.position.struct.DelePostion delePostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTeamIdByDepartmentName(int companyId, java.lang.String departmentName, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionForThirdParty(int positionId, int channel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionListForThirdParty(int channel, int type, java.lang.String start_time, java.lang.String end_time, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

        public void getPositionList(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> resultHandler) throws org.apache.thrift.TException;

        public void getPositionListRpExt(java.util.List<java.lang.Integer> pids, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> resultHandler) throws org.apache.thrift.TException;

        public void getRpPositionList(int hb_config_id, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> resultHandler) throws org.apache.thrift.TException;

        public void getShareInfo(int hb_config_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData> resultHandler) throws org.apache.thrift.TException;

        public void headImage(org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> resultHandler) throws org.apache.thrift.TException;

        public void positionDetails(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> resultHandler) throws org.apache.thrift.TException;

        public void companyHotPositionDetailsList(int companyId, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException;

        public void similarityPositionDetailsList(int pid, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException;

        public void getThirdPartyPositionInfo(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> resultHandler) throws org.apache.thrift.TException;

        public void updateThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void updateThirdPartyPositionWithAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void getPcRecommand(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPcRecommandCompany(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPcRecommandCompanyAll(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPcPositionDetail(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPcRecommendPosition(int positionId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addPcReport(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPcAdvertisement(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionRecommendByModuleId(int page, int pageSize, int moduleId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getThirdpartySyncedPositions(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void putAlipayResult(int channel, int positionId, int alipayJobId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPersonaRecomPositionList(int userId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void positionCvConf(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmployeeRecomPositionByIds(int recomPushId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updatePosition(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getMiniPositionList(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getMiniPositionSuggest(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getMiniPositionNumStatus(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getMiniPositionDetail(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getMiniPositionShare(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getFeatureByPId(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updatePositionFeature(int pid, int fid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updatePositionFeatures(int pid, java.util.List<java.lang.Integer> fidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updatePositionFeatureBatch(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionFeatureBetch(java.util.List<java.lang.Integer> pidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.common.struct.Response getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
        {
            send_getResources(query);
            return recv_getResources();
        }

        public void send_getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
        {
            getResources_args args = new getResources_args();
            args.setQuery(query);
            sendBase("getResources", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getResources() throws org.apache.thrift.TException
        {
            getResources_result result = new getResources_result();
            receiveBase(result, "getResources");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResources failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getRecommendedPositions(int pid) throws org.apache.thrift.TException
        {
            send_getRecommendedPositions(pid);
            return recv_getRecommendedPositions();
        }

        public void send_getRecommendedPositions(int pid) throws org.apache.thrift.TException
        {
            getRecommendedPositions_args args = new getRecommendedPositions_args();
            args.setPid(pid);
            sendBase("getRecommendedPositions", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getRecommendedPositions() throws org.apache.thrift.TException
        {
            getRecommendedPositions_result result = new getRecommendedPositions_result();
            receiveBase(result, "getRecommendedPositions");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecommendedPositions failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response verifyCustomize(int positionId) throws org.apache.thrift.TException
        {
            send_verifyCustomize(positionId);
            return recv_verifyCustomize();
        }

        public void send_verifyCustomize(int positionId) throws org.apache.thrift.TException
        {
            verifyCustomize_args args = new verifyCustomize_args();
            args.setPositionId(positionId);
            sendBase("verifyCustomize", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_verifyCustomize() throws org.apache.thrift.TException
        {
            verifyCustomize_result result = new verifyCustomize_result();
            receiveBase(result, "verifyCustomize");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyCustomize failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionById(int positionId) throws org.apache.thrift.TException
        {
            send_getPositionById(positionId);
            return recv_getPositionById();
        }

        public void send_getPositionById(int positionId) throws org.apache.thrift.TException
        {
            getPositionById_args args = new getPositionById_args();
            args.setPositionId(positionId);
            sendBase("getPositionById", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionById() throws org.apache.thrift.TException
        {
            getPositionById_result result = new getPositionById_result();
            receiveBase(result, "getPositionById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionById failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response CustomField(java.lang.String param) throws org.apache.thrift.TException
        {
            send_CustomField(param);
            return recv_CustomField();
        }

        public void send_CustomField(java.lang.String param) throws org.apache.thrift.TException
        {
            CustomField_args args = new CustomField_args();
            args.setParam(param);
            sendBase("CustomField", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_CustomField() throws org.apache.thrift.TException
        {
            CustomField_result result = new CustomField_result();
            receiveBase(result, "CustomField");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CustomField failed: unknown result");
        }

        public boolean ifAllowRefresh(int positionId, int account_id) throws org.apache.thrift.TException
        {
            send_ifAllowRefresh(positionId, account_id);
            return recv_ifAllowRefresh();
        }

        public void send_ifAllowRefresh(int positionId, int account_id) throws org.apache.thrift.TException
        {
            ifAllowRefresh_args args = new ifAllowRefresh_args();
            args.setPositionId(positionId);
            args.setAccount_id(account_id);
            sendBase("ifAllowRefresh", args);
        }

        public boolean recv_ifAllowRefresh() throws org.apache.thrift.TException
        {
            ifAllowRefresh_result result = new ifAllowRefresh_result();
            receiveBase(result, "ifAllowRefresh");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ifAllowRefresh failed: unknown result");
        }

        public java.util.List<java.lang.String> getThirdPartyPositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
        {
            send_getThirdPartyPositions(query);
            return recv_getThirdPartyPositions();
        }

        public void send_getThirdPartyPositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
        {
            getThirdPartyPositions_args args = new getThirdPartyPositions_args();
            args.setQuery(query);
            sendBase("getThirdPartyPositions", args);
        }

        public java.util.List<java.lang.String> recv_getThirdPartyPositions() throws org.apache.thrift.TException
        {
            getThirdPartyPositions_result result = new getThirdPartyPositions_result();
            receiveBase(result, "getThirdPartyPositions");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThirdPartyPositions failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
        {
            send_batchHandlerJobPostion(batchHandlerJobPostion);
            return recv_batchHandlerJobPostion();
        }

        public void send_batchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
        {
            batchHandlerJobPostion_args args = new batchHandlerJobPostion_args();
            args.setBatchHandlerJobPostion(batchHandlerJobPostion);
            sendBase("batchHandlerJobPostion", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchHandlerJobPostion() throws org.apache.thrift.TException
        {
            batchHandlerJobPostion_result result = new batchHandlerJobPostion_result();
            receiveBase(result, "batchHandlerJobPostion");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchHandlerJobPostion failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response saveAndSync(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
        {
            send_saveAndSync(batchHandlerJobPostion);
            return recv_saveAndSync();
        }

        public void send_saveAndSync(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
        {
            saveAndSync_args args = new saveAndSync_args();
            args.setBatchHandlerJobPostion(batchHandlerJobPostion);
            sendBase("saveAndSync", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_saveAndSync() throws org.apache.thrift.TException
        {
            saveAndSync_result result = new saveAndSync_result();
            receiveBase(result, "saveAndSync");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAndSync failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response deleteJobposition(com.moseeker.thrift.gen.position.struct.DelePostion delePostion) throws org.apache.thrift.TException
        {
            send_deleteJobposition(delePostion);
            return recv_deleteJobposition();
        }

        public void send_deleteJobposition(com.moseeker.thrift.gen.position.struct.DelePostion delePostion) throws org.apache.thrift.TException
        {
            deleteJobposition_args args = new deleteJobposition_args();
            args.setDelePostion(delePostion);
            sendBase("deleteJobposition", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_deleteJobposition() throws org.apache.thrift.TException
        {
            deleteJobposition_result result = new deleteJobposition_result();
            receiveBase(result, "deleteJobposition");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteJobposition failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTeamIdByDepartmentName(int companyId, java.lang.String departmentName) throws org.apache.thrift.TException
        {
            send_getTeamIdByDepartmentName(companyId, departmentName);
            return recv_getTeamIdByDepartmentName();
        }

        public void send_getTeamIdByDepartmentName(int companyId, java.lang.String departmentName) throws org.apache.thrift.TException
        {
            getTeamIdByDepartmentName_args args = new getTeamIdByDepartmentName_args();
            args.setCompanyId(companyId);
            args.setDepartmentName(departmentName);
            sendBase("getTeamIdByDepartmentName", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTeamIdByDepartmentName() throws org.apache.thrift.TException
        {
            getTeamIdByDepartmentName_result result = new getTeamIdByDepartmentName_result();
            receiveBase(result, "getTeamIdByDepartmentName");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeamIdByDepartmentName failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionForThirdParty(int positionId, int channel) throws org.apache.thrift.TException
        {
            send_getPositionForThirdParty(positionId, channel);
            return recv_getPositionForThirdParty();
        }

        public void send_getPositionForThirdParty(int positionId, int channel) throws org.apache.thrift.TException
        {
            getPositionForThirdParty_args args = new getPositionForThirdParty_args();
            args.setPositionId(positionId);
            args.setChannel(channel);
            sendBase("getPositionForThirdParty", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionForThirdParty() throws org.apache.thrift.TException
        {
            getPositionForThirdParty_result result = new getPositionForThirdParty_result();
            receiveBase(result, "getPositionForThirdParty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionForThirdParty failed: unknown result");
        }

        public java.util.List<java.lang.Integer> getPositionListForThirdParty(int channel, int type, java.lang.String start_time, java.lang.String end_time) throws org.apache.thrift.TException
        {
            send_getPositionListForThirdParty(channel, type, start_time, end_time);
            return recv_getPositionListForThirdParty();
        }

        public void send_getPositionListForThirdParty(int channel, int type, java.lang.String start_time, java.lang.String end_time) throws org.apache.thrift.TException
        {
            getPositionListForThirdParty_args args = new getPositionListForThirdParty_args();
            args.setChannel(channel);
            args.setType(type);
            args.setStart_time(start_time);
            args.setEnd_time(end_time);
            sendBase("getPositionListForThirdParty", args);
        }

        public java.util.List<java.lang.Integer> recv_getPositionListForThirdParty() throws org.apache.thrift.TException
        {
            getPositionListForThirdParty_result result = new getPositionListForThirdParty_result();
            receiveBase(result, "getPositionListForThirdParty");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionListForThirdParty failed: unknown result");
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> getPositionList(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query) throws org.apache.thrift.TException
        {
            send_getPositionList(query);
            return recv_getPositionList();
        }

        public void send_getPositionList(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query) throws org.apache.thrift.TException
        {
            getPositionList_args args = new getPositionList_args();
            args.setQuery(query);
            sendBase("getPositionList", args);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> recv_getPositionList() throws org.apache.thrift.TException
        {
            getPositionList_result result = new getPositionList_result();
            receiveBase(result, "getPositionList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionList failed: unknown result");
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> getPositionListRpExt(java.util.List<java.lang.Integer> pids) throws org.apache.thrift.TException
        {
            send_getPositionListRpExt(pids);
            return recv_getPositionListRpExt();
        }

        public void send_getPositionListRpExt(java.util.List<java.lang.Integer> pids) throws org.apache.thrift.TException
        {
            getPositionListRpExt_args args = new getPositionListRpExt_args();
            args.setPids(pids);
            sendBase("getPositionListRpExt", args);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> recv_getPositionListRpExt() throws org.apache.thrift.TException
        {
            getPositionListRpExt_result result = new getPositionListRpExt_result();
            receiveBase(result, "getPositionListRpExt");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionListRpExt failed: unknown result");
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> getRpPositionList(int hb_config_id, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            send_getRpPositionList(hb_config_id, pageNum, pageSize);
            return recv_getRpPositionList();
        }

        public void send_getRpPositionList(int hb_config_id, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            getRpPositionList_args args = new getRpPositionList_args();
            args.setHb_config_id(hb_config_id);
            args.setPageNum(pageNum);
            args.setPageSize(pageSize);
            sendBase("getRpPositionList", args);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> recv_getRpPositionList() throws org.apache.thrift.TException
        {
            getRpPositionList_result result = new getRpPositionList_result();
            receiveBase(result, "getRpPositionList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRpPositionList failed: unknown result");
        }

        public com.moseeker.thrift.gen.position.struct.WechatShareData getShareInfo(int hb_config_id) throws org.apache.thrift.TException
        {
            send_getShareInfo(hb_config_id);
            return recv_getShareInfo();
        }

        public void send_getShareInfo(int hb_config_id) throws org.apache.thrift.TException
        {
            getShareInfo_args args = new getShareInfo_args();
            args.setHb_config_id(hb_config_id);
            sendBase("getShareInfo", args);
        }

        public com.moseeker.thrift.gen.position.struct.WechatShareData recv_getShareInfo() throws org.apache.thrift.TException
        {
            getShareInfo_result result = new getShareInfo_result();
            receiveBase(result, "getShareInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShareInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO headImage() throws org.apache.thrift.TException
        {
            send_headImage();
            return recv_headImage();
        }

        public void send_headImage() throws org.apache.thrift.TException
        {
            headImage_args args = new headImage_args();
            sendBase("headImage", args);
        }

        public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO recv_headImage() throws org.apache.thrift.TException
        {
            headImage_result result = new headImage_result();
            receiveBase(result, "headImage");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "headImage failed: unknown result");
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsVO positionDetails(int positionId) throws org.apache.thrift.TException
        {
            send_positionDetails(positionId);
            return recv_positionDetails();
        }

        public void send_positionDetails(int positionId) throws org.apache.thrift.TException
        {
            positionDetails_args args = new positionDetails_args();
            args.setPositionId(positionId);
            sendBase("positionDetails", args);
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsVO recv_positionDetails() throws org.apache.thrift.TException
        {
            positionDetails_result result = new positionDetails_result();
            receiveBase(result, "positionDetails");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "positionDetails failed: unknown result");
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO companyHotPositionDetailsList(int companyId, int page, int per_age) throws org.apache.thrift.TException
        {
            send_companyHotPositionDetailsList(companyId, page, per_age);
            return recv_companyHotPositionDetailsList();
        }

        public void send_companyHotPositionDetailsList(int companyId, int page, int per_age) throws org.apache.thrift.TException
        {
            companyHotPositionDetailsList_args args = new companyHotPositionDetailsList_args();
            args.setCompanyId(companyId);
            args.setPage(page);
            args.setPer_age(per_age);
            sendBase("companyHotPositionDetailsList", args);
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO recv_companyHotPositionDetailsList() throws org.apache.thrift.TException
        {
            companyHotPositionDetailsList_result result = new companyHotPositionDetailsList_result();
            receiveBase(result, "companyHotPositionDetailsList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "companyHotPositionDetailsList failed: unknown result");
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO similarityPositionDetailsList(int pid, int page, int per_age) throws org.apache.thrift.TException
        {
            send_similarityPositionDetailsList(pid, page, per_age);
            return recv_similarityPositionDetailsList();
        }

        public void send_similarityPositionDetailsList(int pid, int page, int per_age) throws org.apache.thrift.TException
        {
            similarityPositionDetailsList_args args = new similarityPositionDetailsList_args();
            args.setPid(pid);
            args.setPage(page);
            args.setPer_age(per_age);
            sendBase("similarityPositionDetailsList", args);
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO recv_similarityPositionDetailsList() throws org.apache.thrift.TException
        {
            similarityPositionDetailsList_result result = new similarityPositionDetailsList_result();
            receiveBase(result, "similarityPositionDetailsList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "similarityPositionDetailsList failed: unknown result");
        }

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult getThirdPartyPositionInfo(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getThirdPartyPositionInfo(infoForm);
            return recv_getThirdPartyPositionInfo();
        }

        public void send_getThirdPartyPositionInfo(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm) throws org.apache.thrift.TException
        {
            getThirdPartyPositionInfo_args args = new getThirdPartyPositionInfo_args();
            args.setInfoForm(infoForm);
            sendBase("getThirdPartyPositionInfo", args);
        }

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult recv_getThirdPartyPositionInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getThirdPartyPositionInfo_result result = new getThirdPartyPositionInfo_result();
            receiveBase(result, "getThirdPartyPositionInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThirdPartyPositionInfo failed: unknown result");
        }

        public int updateThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateThirdPartyPosition(thirdPartyPosition, extData);
            return recv_updateThirdPartyPosition();
        }

        public void send_updateThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData) throws org.apache.thrift.TException
        {
            updateThirdPartyPosition_args args = new updateThirdPartyPosition_args();
            args.setThirdPartyPosition(thirdPartyPosition);
            args.setExtData(extData);
            sendBase("updateThirdPartyPosition", args);
        }

        public int recv_updateThirdPartyPosition() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateThirdPartyPosition_result result = new updateThirdPartyPosition_result();
            receiveBase(result, "updateThirdPartyPosition");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateThirdPartyPosition failed: unknown result");
        }

        public int updateThirdPartyPositionWithAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateThirdPartyPositionWithAccount(thirdPartyPosition, thirdPartyAccount, extData);
            return recv_updateThirdPartyPositionWithAccount();
        }

        public void send_updateThirdPartyPositionWithAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData) throws org.apache.thrift.TException
        {
            updateThirdPartyPositionWithAccount_args args = new updateThirdPartyPositionWithAccount_args();
            args.setThirdPartyPosition(thirdPartyPosition);
            args.setThirdPartyAccount(thirdPartyAccount);
            args.setExtData(extData);
            sendBase("updateThirdPartyPositionWithAccount", args);
        }

        public int recv_updateThirdPartyPositionWithAccount() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateThirdPartyPositionWithAccount_result result = new updateThirdPartyPositionWithAccount_result();
            receiveBase(result, "updateThirdPartyPositionWithAccount");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateThirdPartyPositionWithAccount failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommand(int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getPcRecommand(page, pageSize);
            return recv_getPcRecommand();
        }

        public void send_getPcRecommand(int page, int pageSize) throws org.apache.thrift.TException
        {
            getPcRecommand_args args = new getPcRecommand_args();
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getPcRecommand", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcRecommand() throws org.apache.thrift.TException
        {
            getPcRecommand_result result = new getPcRecommand_result();
            receiveBase(result, "getPcRecommand");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcRecommand failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommandCompany(int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getPcRecommandCompany(page, pageSize);
            return recv_getPcRecommandCompany();
        }

        public void send_getPcRecommandCompany(int page, int pageSize) throws org.apache.thrift.TException
        {
            getPcRecommandCompany_args args = new getPcRecommandCompany_args();
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getPcRecommandCompany", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcRecommandCompany() throws org.apache.thrift.TException
        {
            getPcRecommandCompany_result result = new getPcRecommandCompany_result();
            receiveBase(result, "getPcRecommandCompany");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcRecommandCompany failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommandCompanyAll(int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getPcRecommandCompanyAll(page, pageSize);
            return recv_getPcRecommandCompanyAll();
        }

        public void send_getPcRecommandCompanyAll(int page, int pageSize) throws org.apache.thrift.TException
        {
            getPcRecommandCompanyAll_args args = new getPcRecommandCompanyAll_args();
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getPcRecommandCompanyAll", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcRecommandCompanyAll() throws org.apache.thrift.TException
        {
            getPcRecommandCompanyAll_result result = new getPcRecommandCompanyAll_result();
            receiveBase(result, "getPcRecommandCompanyAll");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcRecommandCompanyAll failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcPositionDetail(int positionId) throws org.apache.thrift.TException
        {
            send_getPcPositionDetail(positionId);
            return recv_getPcPositionDetail();
        }

        public void send_getPcPositionDetail(int positionId) throws org.apache.thrift.TException
        {
            getPcPositionDetail_args args = new getPcPositionDetail_args();
            args.setPositionId(positionId);
            sendBase("getPcPositionDetail", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcPositionDetail() throws org.apache.thrift.TException
        {
            getPcPositionDetail_result result = new getPcPositionDetail_result();
            receiveBase(result, "getPcPositionDetail");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcPositionDetail failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcRecommendPosition(int positionId, int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getPcRecommendPosition(positionId, page, pageSize);
            return recv_getPcRecommendPosition();
        }

        public void send_getPcRecommendPosition(int positionId, int page, int pageSize) throws org.apache.thrift.TException
        {
            getPcRecommendPosition_args args = new getPcRecommendPosition_args();
            args.setPositionId(positionId);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getPcRecommendPosition", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcRecommendPosition() throws org.apache.thrift.TException
        {
            getPcRecommendPosition_result result = new getPcRecommendPosition_result();
            receiveBase(result, "getPcRecommendPosition");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcRecommendPosition failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addPcReport(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO) throws org.apache.thrift.TException
        {
            send_addPcReport(jobPcReportedDO);
            return recv_addPcReport();
        }

        public void send_addPcReport(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO) throws org.apache.thrift.TException
        {
            addPcReport_args args = new addPcReport_args();
            args.setJobPcReportedDO(jobPcReportedDO);
            sendBase("addPcReport", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addPcReport() throws org.apache.thrift.TException
        {
            addPcReport_result result = new addPcReport_result();
            receiveBase(result, "addPcReport");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPcReport failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPcAdvertisement(int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getPcAdvertisement(page, pageSize);
            return recv_getPcAdvertisement();
        }

        public void send_getPcAdvertisement(int page, int pageSize) throws org.apache.thrift.TException
        {
            getPcAdvertisement_args args = new getPcAdvertisement_args();
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getPcAdvertisement", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPcAdvertisement() throws org.apache.thrift.TException
        {
            getPcAdvertisement_result result = new getPcAdvertisement_result();
            receiveBase(result, "getPcAdvertisement");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPcAdvertisement failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionRecommendByModuleId(int page, int pageSize, int moduleId) throws org.apache.thrift.TException
        {
            send_getPositionRecommendByModuleId(page, pageSize, moduleId);
            return recv_getPositionRecommendByModuleId();
        }

        public void send_getPositionRecommendByModuleId(int page, int pageSize, int moduleId) throws org.apache.thrift.TException
        {
            getPositionRecommendByModuleId_args args = new getPositionRecommendByModuleId_args();
            args.setPage(page);
            args.setPageSize(pageSize);
            args.setModuleId(moduleId);
            sendBase("getPositionRecommendByModuleId", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionRecommendByModuleId() throws org.apache.thrift.TException
        {
            getPositionRecommendByModuleId_result result = new getPositionRecommendByModuleId_result();
            receiveBase(result, "getPositionRecommendByModuleId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionRecommendByModuleId failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getThirdpartySyncedPositions(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getThirdpartySyncedPositions(channel, publisher, companyId, candidateSource, page, pageSize);
            return recv_getThirdpartySyncedPositions();
        }

        public void send_getThirdpartySyncedPositions(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize) throws org.apache.thrift.TException
        {
            getThirdpartySyncedPositions_args args = new getThirdpartySyncedPositions_args();
            args.setChannel(channel);
            args.setPublisher(publisher);
            args.setCompanyId(companyId);
            args.setCandidateSource(candidateSource);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getThirdpartySyncedPositions", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getThirdpartySyncedPositions() throws org.apache.thrift.TException
        {
            getThirdpartySyncedPositions_result result = new getThirdpartySyncedPositions_result();
            receiveBase(result, "getThirdpartySyncedPositions");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThirdpartySyncedPositions failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response putAlipayResult(int channel, int positionId, int alipayJobId) throws org.apache.thrift.TException
        {
            send_putAlipayResult(channel, positionId, alipayJobId);
            return recv_putAlipayResult();
        }

        public void send_putAlipayResult(int channel, int positionId, int alipayJobId) throws org.apache.thrift.TException
        {
            putAlipayResult_args args = new putAlipayResult_args();
            args.setChannel(channel);
            args.setPositionId(positionId);
            args.setAlipayJobId(alipayJobId);
            sendBase("putAlipayResult", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_putAlipayResult() throws org.apache.thrift.TException
        {
            putAlipayResult_result result = new putAlipayResult_result();
            receiveBase(result, "putAlipayResult");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putAlipayResult failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPersonaRecomPositionList(int userId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            send_getPersonaRecomPositionList(userId, companyId, type, pageNum, pageSize);
            return recv_getPersonaRecomPositionList();
        }

        public void send_getPersonaRecomPositionList(int userId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            getPersonaRecomPositionList_args args = new getPersonaRecomPositionList_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setType(type);
            args.setPageNum(pageNum);
            args.setPageSize(pageSize);
            sendBase("getPersonaRecomPositionList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPersonaRecomPositionList() throws org.apache.thrift.TException
        {
            getPersonaRecomPositionList_result result = new getPersonaRecomPositionList_result();
            receiveBase(result, "getPersonaRecomPositionList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPersonaRecomPositionList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response positionCvConf(int positionId) throws org.apache.thrift.TException
        {
            send_positionCvConf(positionId);
            return recv_positionCvConf();
        }

        public void send_positionCvConf(int positionId) throws org.apache.thrift.TException
        {
            positionCvConf_args args = new positionCvConf_args();
            args.setPositionId(positionId);
            sendBase("positionCvConf", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_positionCvConf() throws org.apache.thrift.TException
        {
            positionCvConf_result result = new positionCvConf_result();
            receiveBase(result, "positionCvConf");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "positionCvConf failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmployeeRecomPositionByIds(int recomPushId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            send_getEmployeeRecomPositionByIds(recomPushId, companyId, type, pageNum, pageSize);
            return recv_getEmployeeRecomPositionByIds();
        }

        public void send_getEmployeeRecomPositionByIds(int recomPushId, int companyId, int type, int pageNum, int pageSize) throws org.apache.thrift.TException
        {
            getEmployeeRecomPositionByIds_args args = new getEmployeeRecomPositionByIds_args();
            args.setRecomPushId(recomPushId);
            args.setCompanyId(companyId);
            args.setType(type);
            args.setPageNum(pageNum);
            args.setPageSize(pageSize);
            sendBase("getEmployeeRecomPositionByIds", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmployeeRecomPositionByIds() throws org.apache.thrift.TException
        {
            getEmployeeRecomPositionByIds_result result = new getEmployeeRecomPositionByIds_result();
            receiveBase(result, "getEmployeeRecomPositionByIds");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmployeeRecomPositionByIds failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updatePosition(java.lang.String param) throws org.apache.thrift.TException
        {
            send_updatePosition(param);
            return recv_updatePosition();
        }

        public void send_updatePosition(java.lang.String param) throws org.apache.thrift.TException
        {
            updatePosition_args args = new updatePosition_args();
            args.setParam(param);
            sendBase("updatePosition", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updatePosition() throws org.apache.thrift.TException
        {
            updatePosition_result result = new updatePosition_result();
            receiveBase(result, "updatePosition");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePosition failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionList(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getMiniPositionList(accountId, keyword, page, pageSize);
            return recv_getMiniPositionList();
        }

        public void send_getMiniPositionList(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            getMiniPositionList_args args = new getMiniPositionList_args();
            args.setAccountId(accountId);
            args.setKeyword(keyword);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getMiniPositionList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getMiniPositionList() throws org.apache.thrift.TException
        {
            getMiniPositionList_result result = new getMiniPositionList_result();
            receiveBase(result, "getMiniPositionList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiniPositionList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionSuggest(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getMiniPositionSuggest(accountId, keyword, page, pageSize);
            return recv_getMiniPositionSuggest();
        }

        public void send_getMiniPositionSuggest(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            getMiniPositionSuggest_args args = new getMiniPositionSuggest_args();
            args.setAccountId(accountId);
            args.setKeyword(keyword);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getMiniPositionSuggest", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getMiniPositionSuggest() throws org.apache.thrift.TException
        {
            getMiniPositionSuggest_result result = new getMiniPositionSuggest_result();
            receiveBase(result, "getMiniPositionSuggest");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiniPositionSuggest failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionNumStatus(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            send_getMiniPositionNumStatus(accountId, keyword, page, pageSize);
            return recv_getMiniPositionNumStatus();
        }

        public void send_getMiniPositionNumStatus(int accountId, java.lang.String keyword, int page, int pageSize) throws org.apache.thrift.TException
        {
            getMiniPositionNumStatus_args args = new getMiniPositionNumStatus_args();
            args.setAccountId(accountId);
            args.setKeyword(keyword);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("getMiniPositionNumStatus", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getMiniPositionNumStatus() throws org.apache.thrift.TException
        {
            getMiniPositionNumStatus_result result = new getMiniPositionNumStatus_result();
            receiveBase(result, "getMiniPositionNumStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiniPositionNumStatus failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionDetail(int positionId) throws org.apache.thrift.TException
        {
            send_getMiniPositionDetail(positionId);
            return recv_getMiniPositionDetail();
        }

        public void send_getMiniPositionDetail(int positionId) throws org.apache.thrift.TException
        {
            getMiniPositionDetail_args args = new getMiniPositionDetail_args();
            args.setPositionId(positionId);
            sendBase("getMiniPositionDetail", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getMiniPositionDetail() throws org.apache.thrift.TException
        {
            getMiniPositionDetail_result result = new getMiniPositionDetail_result();
            receiveBase(result, "getMiniPositionDetail");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiniPositionDetail failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getMiniPositionShare(int positionId) throws org.apache.thrift.TException
        {
            send_getMiniPositionShare(positionId);
            return recv_getMiniPositionShare();
        }

        public void send_getMiniPositionShare(int positionId) throws org.apache.thrift.TException
        {
            getMiniPositionShare_args args = new getMiniPositionShare_args();
            args.setPositionId(positionId);
            sendBase("getMiniPositionShare", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getMiniPositionShare() throws org.apache.thrift.TException
        {
            getMiniPositionShare_result result = new getMiniPositionShare_result();
            receiveBase(result, "getMiniPositionShare");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMiniPositionShare failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getFeatureByPId(int pid) throws org.apache.thrift.TException
        {
            send_getFeatureByPId(pid);
            return recv_getFeatureByPId();
        }

        public void send_getFeatureByPId(int pid) throws org.apache.thrift.TException
        {
            getFeatureByPId_args args = new getFeatureByPId_args();
            args.setPid(pid);
            sendBase("getFeatureByPId", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getFeatureByPId() throws org.apache.thrift.TException
        {
            getFeatureByPId_result result = new getFeatureByPId_result();
            receiveBase(result, "getFeatureByPId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeatureByPId failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeature(int pid, int fid) throws org.apache.thrift.TException
        {
            send_updatePositionFeature(pid, fid);
            return recv_updatePositionFeature();
        }

        public void send_updatePositionFeature(int pid, int fid) throws org.apache.thrift.TException
        {
            updatePositionFeature_args args = new updatePositionFeature_args();
            args.setPid(pid);
            args.setFid(fid);
            sendBase("updatePositionFeature", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updatePositionFeature() throws org.apache.thrift.TException
        {
            updatePositionFeature_result result = new updatePositionFeature_result();
            receiveBase(result, "updatePositionFeature");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePositionFeature failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeatures(int pid, java.util.List<java.lang.Integer> fidList) throws org.apache.thrift.TException
        {
            send_updatePositionFeatures(pid, fidList);
            return recv_updatePositionFeatures();
        }

        public void send_updatePositionFeatures(int pid, java.util.List<java.lang.Integer> fidList) throws org.apache.thrift.TException
        {
            updatePositionFeatures_args args = new updatePositionFeatures_args();
            args.setPid(pid);
            args.setFidList(fidList);
            sendBase("updatePositionFeatures", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updatePositionFeatures() throws org.apache.thrift.TException
        {
            updatePositionFeatures_result result = new updatePositionFeatures_result();
            receiveBase(result, "updatePositionFeatures");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePositionFeatures failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updatePositionFeatureBatch(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList) throws org.apache.thrift.TException
        {
            send_updatePositionFeatureBatch(featureList);
            return recv_updatePositionFeatureBatch();
        }

        public void send_updatePositionFeatureBatch(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList) throws org.apache.thrift.TException
        {
            updatePositionFeatureBatch_args args = new updatePositionFeatureBatch_args();
            args.setFeatureList(featureList);
            sendBase("updatePositionFeatureBatch", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updatePositionFeatureBatch() throws org.apache.thrift.TException
        {
            updatePositionFeatureBatch_result result = new updatePositionFeatureBatch_result();
            receiveBase(result, "updatePositionFeatureBatch");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePositionFeatureBatch failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionFeatureBetch(java.util.List<java.lang.Integer> pidList) throws org.apache.thrift.TException
        {
            send_getPositionFeatureBetch(pidList);
            return recv_getPositionFeatureBetch();
        }

        public void send_getPositionFeatureBetch(java.util.List<java.lang.Integer> pidList) throws org.apache.thrift.TException
        {
            getPositionFeatureBetch_args args = new getPositionFeatureBetch_args();
            args.setPidList(pidList);
            sendBase("getPositionFeatureBetch", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionFeatureBetch() throws org.apache.thrift.TException
        {
            getPositionFeatureBetch_result result = new getPositionFeatureBetch_result();
            receiveBase(result, "getPositionFeatureBetch");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionFeatureBetch failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getResources_call method_call = new getResources_call(query, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getResources_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.common.struct.CommonQuery query;
            public getResources_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.query = query;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getResources_args args = new getResources_args();
                args.setQuery(query);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getResources();
            }
        }

        public void getRecommendedPositions(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecommendedPositions_call method_call = new getRecommendedPositions_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecommendedPositions_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int pid;
            public getRecommendedPositions_call(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecommendedPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecommendedPositions_args args = new getRecommendedPositions_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecommendedPositions();
            }
        }

        public void verifyCustomize(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            verifyCustomize_call method_call = new verifyCustomize_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class verifyCustomize_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public verifyCustomize_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyCustomize", org.apache.thrift.protocol.TMessageType.CALL, 0));
                verifyCustomize_args args = new verifyCustomize_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_verifyCustomize();
            }
        }

        public void getPositionById(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionById_call method_call = new getPositionById_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionById_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public getPositionById_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionById_args args = new getPositionById_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionById();
            }
        }

        public void CustomField(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            CustomField_call method_call = new CustomField_call(param, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class CustomField_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String param;
            public CustomField_call(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param = param;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CustomField", org.apache.thrift.protocol.TMessageType.CALL, 0));
                CustomField_args args = new CustomField_args();
                args.setParam(param);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_CustomField();
            }
        }

        public void ifAllowRefresh(int positionId, int account_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ifAllowRefresh_call method_call = new ifAllowRefresh_call(positionId, account_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ifAllowRefresh_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
            private int positionId;
            private int account_id;
            public ifAllowRefresh_call(int positionId, int account_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
                this.account_id = account_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ifAllowRefresh", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ifAllowRefresh_args args = new ifAllowRefresh_args();
                args.setPositionId(positionId);
                args.setAccount_id(account_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ifAllowRefresh();
            }
        }

        public void getThirdPartyPositions(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getThirdPartyPositions_call method_call = new getThirdPartyPositions_call(query, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getThirdPartyPositions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
            private com.moseeker.thrift.gen.common.struct.CommonQuery query;
            public getThirdPartyPositions_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.query = query;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThirdPartyPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getThirdPartyPositions_args args = new getThirdPartyPositions_args();
                args.setQuery(query);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getThirdPartyPositions();
            }
        }

        public void batchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchHandlerJobPostion_call method_call = new batchHandlerJobPostion_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchHandlerJobPostion_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
            public batchHandlerJobPostion_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.batchHandlerJobPostion = batchHandlerJobPostion;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchHandlerJobPostion", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchHandlerJobPostion_args args = new batchHandlerJobPostion_args();
                args.setBatchHandlerJobPostion(batchHandlerJobPostion);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchHandlerJobPostion();
            }
        }

        public void saveAndSync(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            saveAndSync_call method_call = new saveAndSync_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class saveAndSync_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
            public saveAndSync_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.batchHandlerJobPostion = batchHandlerJobPostion;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAndSync", org.apache.thrift.protocol.TMessageType.CALL, 0));
                saveAndSync_args args = new saveAndSync_args();
                args.setBatchHandlerJobPostion(batchHandlerJobPostion);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_saveAndSync();
            }
        }

        public void deleteJobposition(com.moseeker.thrift.gen.position.struct.DelePostion delePostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteJobposition_call method_call = new deleteJobposition_call(delePostion, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteJobposition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.position.struct.DelePostion delePostion;
            public deleteJobposition_call(com.moseeker.thrift.gen.position.struct.DelePostion delePostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.delePostion = delePostion;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteJobposition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteJobposition_args args = new deleteJobposition_args();
                args.setDelePostion(delePostion);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteJobposition();
            }
        }

        public void getTeamIdByDepartmentName(int companyId, java.lang.String departmentName, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTeamIdByDepartmentName_call method_call = new getTeamIdByDepartmentName_call(companyId, departmentName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTeamIdByDepartmentName_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int companyId;
            private java.lang.String departmentName;
            public getTeamIdByDepartmentName_call(int companyId, java.lang.String departmentName, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.departmentName = departmentName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeamIdByDepartmentName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTeamIdByDepartmentName_args args = new getTeamIdByDepartmentName_args();
                args.setCompanyId(companyId);
                args.setDepartmentName(departmentName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTeamIdByDepartmentName();
            }
        }

        public void getPositionForThirdParty(int positionId, int channel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionForThirdParty_call method_call = new getPositionForThirdParty_call(positionId, channel, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionForThirdParty_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            private int channel;
            public getPositionForThirdParty_call(int positionId, int channel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
                this.channel = channel;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionForThirdParty", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionForThirdParty_args args = new getPositionForThirdParty_args();
                args.setPositionId(positionId);
                args.setChannel(channel);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionForThirdParty();
            }
        }

        public void getPositionListForThirdParty(int channel, int type, java.lang.String start_time, java.lang.String end_time, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionListForThirdParty_call method_call = new getPositionListForThirdParty_call(channel, type, start_time, end_time, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionListForThirdParty_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
            private int channel;
            private int type;
            private java.lang.String start_time;
            private java.lang.String end_time;
            public getPositionListForThirdParty_call(int channel, int type, java.lang.String start_time, java.lang.String end_time, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channel = channel;
                this.type = type;
                this.start_time = start_time;
                this.end_time = end_time;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionListForThirdParty", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionListForThirdParty_args args = new getPositionListForThirdParty_args();
                args.setChannel(channel);
                args.setType(type);
                args.setStart_time(start_time);
                args.setEnd_time(end_time);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionListForThirdParty();
            }
        }

        public void getPositionList(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionList_call method_call = new getPositionList_call(query, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> {
            private com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query;
            public getPositionList_call(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.query = query;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionList_args args = new getPositionList_args();
                args.setQuery(query);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionList();
            }
        }

        public void getPositionListRpExt(java.util.List<java.lang.Integer> pids, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionListRpExt_call method_call = new getPositionListRpExt_call(pids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionListRpExt_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> {
            private java.util.List<java.lang.Integer> pids;
            public getPositionListRpExt_call(java.util.List<java.lang.Integer> pids, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pids = pids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionListRpExt", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionListRpExt_args args = new getPositionListRpExt_args();
                args.setPids(pids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionListRpExt();
            }
        }

        public void getRpPositionList(int hb_config_id, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRpPositionList_call method_call = new getRpPositionList_call(hb_config_id, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRpPositionList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> {
            private int hb_config_id;
            private int pageNum;
            private int pageSize;
            public getRpPositionList_call(int hb_config_id, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hb_config_id = hb_config_id;
                this.pageNum = pageNum;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRpPositionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRpPositionList_args args = new getRpPositionList_args();
                args.setHb_config_id(hb_config_id);
                args.setPageNum(pageNum);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRpPositionList();
            }
        }

        public void getShareInfo(int hb_config_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getShareInfo_call method_call = new getShareInfo_call(hb_config_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getShareInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.position.struct.WechatShareData> {
            private int hb_config_id;
            public getShareInfo_call(int hb_config_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hb_config_id = hb_config_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShareInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getShareInfo_args args = new getShareInfo_args();
                args.setHb_config_id(hb_config_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.position.struct.WechatShareData getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getShareInfo();
            }
        }

        public void headImage(org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            headImage_call method_call = new headImage_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class headImage_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> {
            public headImage_call(org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("headImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                headImage_args args = new headImage_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_headImage();
            }
        }

        public void positionDetails(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            positionDetails_call method_call = new positionDetails_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class positionDetails_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> {
            private int positionId;
            public positionDetails_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("positionDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
                positionDetails_args args = new positionDetails_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.position.struct.PositionDetailsVO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_positionDetails();
            }
        }

        public void companyHotPositionDetailsList(int companyId, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            companyHotPositionDetailsList_call method_call = new companyHotPositionDetailsList_call(companyId, page, per_age, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class companyHotPositionDetailsList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> {
            private int companyId;
            private int page;
            private int per_age;
            public companyHotPositionDetailsList_call(int companyId, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.page = page;
                this.per_age = per_age;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("companyHotPositionDetailsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                companyHotPositionDetailsList_args args = new companyHotPositionDetailsList_args();
                args.setCompanyId(companyId);
                args.setPage(page);
                args.setPer_age(per_age);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_companyHotPositionDetailsList();
            }
        }

        public void similarityPositionDetailsList(int pid, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            similarityPositionDetailsList_call method_call = new similarityPositionDetailsList_call(pid, page, per_age, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class similarityPositionDetailsList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> {
            private int pid;
            private int page;
            private int per_age;
            public similarityPositionDetailsList_call(int pid, int page, int per_age, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.page = page;
                this.per_age = per_age;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("similarityPositionDetailsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                similarityPositionDetailsList_args args = new similarityPositionDetailsList_args();
                args.setPid(pid);
                args.setPage(page);
                args.setPer_age(per_age);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_similarityPositionDetailsList();
            }
        }

        public void getThirdPartyPositionInfo(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getThirdPartyPositionInfo_call method_call = new getThirdPartyPositionInfo_call(infoForm, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getThirdPartyPositionInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> {
            private com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm;
            public getThirdPartyPositionInfo_call(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.infoForm = infoForm;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThirdPartyPositionInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getThirdPartyPositionInfo_args args = new getThirdPartyPositionInfo_args();
                args.setInfoForm(infoForm);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getThirdPartyPositionInfo();
            }
        }

        public void updateThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateThirdPartyPosition_call method_call = new updateThirdPartyPosition_call(thirdPartyPosition, extData, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateThirdPartyPosition_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition;
            private java.util.Map<java.lang.String,java.lang.String> extData;
            public updateThirdPartyPosition_call(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.thirdPartyPosition = thirdPartyPosition;
                this.extData = extData;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateThirdPartyPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateThirdPartyPosition_args args = new updateThirdPartyPosition_args();
                args.setThirdPartyPosition(thirdPartyPosition);
                args.setExtData(extData);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateThirdPartyPosition();
            }
        }

        public void updateThirdPartyPositionWithAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateThirdPartyPositionWithAccount_call method_call = new updateThirdPartyPositionWithAccount_call(thirdPartyPosition, thirdPartyAccount, extData, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateThirdPartyPositionWithAccount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition;
            private com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount;
            private java.util.Map<java.lang.String,java.lang.String> extData;
            public updateThirdPartyPositionWithAccount_call(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount, java.util.Map<java.lang.String,java.lang.String> extData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.thirdPartyPosition = thirdPartyPosition;
                this.thirdPartyAccount = thirdPartyAccount;
                this.extData = extData;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateThirdPartyPositionWithAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateThirdPartyPositionWithAccount_args args = new updateThirdPartyPositionWithAccount_args();
                args.setThirdPartyPosition(thirdPartyPosition);
                args.setThirdPartyAccount(thirdPartyAccount);
                args.setExtData(extData);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateThirdPartyPositionWithAccount();
            }
        }

        public void getPcRecommand(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcRecommand_call method_call = new getPcRecommand_call(page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcRecommand_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int page;
            private int pageSize;
            public getPcRecommand_call(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcRecommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcRecommand_args args = new getPcRecommand_args();
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcRecommand();
            }
        }

        public void getPcRecommandCompany(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcRecommandCompany_call method_call = new getPcRecommandCompany_call(page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcRecommandCompany_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int page;
            private int pageSize;
            public getPcRecommandCompany_call(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcRecommandCompany", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcRecommandCompany_args args = new getPcRecommandCompany_args();
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcRecommandCompany();
            }
        }

        public void getPcRecommandCompanyAll(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcRecommandCompanyAll_call method_call = new getPcRecommandCompanyAll_call(page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcRecommandCompanyAll_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int page;
            private int pageSize;
            public getPcRecommandCompanyAll_call(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcRecommandCompanyAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcRecommandCompanyAll_args args = new getPcRecommandCompanyAll_args();
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcRecommandCompanyAll();
            }
        }

        public void getPcPositionDetail(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcPositionDetail_call method_call = new getPcPositionDetail_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcPositionDetail_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public getPcPositionDetail_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcPositionDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcPositionDetail_args args = new getPcPositionDetail_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcPositionDetail();
            }
        }

        public void getPcRecommendPosition(int positionId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcRecommendPosition_call method_call = new getPcRecommendPosition_call(positionId, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcRecommendPosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            private int page;
            private int pageSize;
            public getPcRecommendPosition_call(int positionId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcRecommendPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcRecommendPosition_args args = new getPcRecommendPosition_args();
                args.setPositionId(positionId);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcRecommendPosition();
            }
        }

        public void addPcReport(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addPcReport_call method_call = new addPcReport_call(jobPcReportedDO, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addPcReport_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO;
            public addPcReport_call(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.jobPcReportedDO = jobPcReportedDO;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPcReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addPcReport_args args = new addPcReport_args();
                args.setJobPcReportedDO(jobPcReportedDO);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addPcReport();
            }
        }

        public void getPcAdvertisement(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPcAdvertisement_call method_call = new getPcAdvertisement_call(page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPcAdvertisement_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int page;
            private int pageSize;
            public getPcAdvertisement_call(int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPcAdvertisement", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPcAdvertisement_args args = new getPcAdvertisement_args();
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPcAdvertisement();
            }
        }

        public void getPositionRecommendByModuleId(int page, int pageSize, int moduleId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionRecommendByModuleId_call method_call = new getPositionRecommendByModuleId_call(page, pageSize, moduleId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionRecommendByModuleId_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int page;
            private int pageSize;
            private int moduleId;
            public getPositionRecommendByModuleId_call(int page, int pageSize, int moduleId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.page = page;
                this.pageSize = pageSize;
                this.moduleId = moduleId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionRecommendByModuleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionRecommendByModuleId_args args = new getPositionRecommendByModuleId_args();
                args.setPage(page);
                args.setPageSize(pageSize);
                args.setModuleId(moduleId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionRecommendByModuleId();
            }
        }

        public void getThirdpartySyncedPositions(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getThirdpartySyncedPositions_call method_call = new getThirdpartySyncedPositions_call(channel, publisher, companyId, candidateSource, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getThirdpartySyncedPositions_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int channel;
            private int publisher;
            private int companyId;
            private int candidateSource;
            private int page;
            private int pageSize;
            public getThirdpartySyncedPositions_call(int channel, int publisher, int companyId, int candidateSource, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channel = channel;
                this.publisher = publisher;
                this.companyId = companyId;
                this.candidateSource = candidateSource;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThirdpartySyncedPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getThirdpartySyncedPositions_args args = new getThirdpartySyncedPositions_args();
                args.setChannel(channel);
                args.setPublisher(publisher);
                args.setCompanyId(companyId);
                args.setCandidateSource(candidateSource);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getThirdpartySyncedPositions();
            }
        }

        public void putAlipayResult(int channel, int positionId, int alipayJobId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            putAlipayResult_call method_call = new putAlipayResult_call(channel, positionId, alipayJobId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class putAlipayResult_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int channel;
            private int positionId;
            private int alipayJobId;
            public putAlipayResult_call(int channel, int positionId, int alipayJobId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channel = channel;
                this.positionId = positionId;
                this.alipayJobId = alipayJobId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putAlipayResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
                putAlipayResult_args args = new putAlipayResult_args();
                args.setChannel(channel);
                args.setPositionId(positionId);
                args.setAlipayJobId(alipayJobId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_putAlipayResult();
            }
        }

        public void getPersonaRecomPositionList(int userId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPersonaRecomPositionList_call method_call = new getPersonaRecomPositionList_call(userId, companyId, type, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPersonaRecomPositionList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int companyId;
            private int type;
            private int pageNum;
            private int pageSize;
            public getPersonaRecomPositionList_call(int userId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.type = type;
                this.pageNum = pageNum;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPersonaRecomPositionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPersonaRecomPositionList_args args = new getPersonaRecomPositionList_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setType(type);
                args.setPageNum(pageNum);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPersonaRecomPositionList();
            }
        }

        public void positionCvConf(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            positionCvConf_call method_call = new positionCvConf_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class positionCvConf_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public positionCvConf_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("positionCvConf", org.apache.thrift.protocol.TMessageType.CALL, 0));
                positionCvConf_args args = new positionCvConf_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_positionCvConf();
            }
        }

        public void getEmployeeRecomPositionByIds(int recomPushId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmployeeRecomPositionByIds_call method_call = new getEmployeeRecomPositionByIds_call(recomPushId, companyId, type, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmployeeRecomPositionByIds_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int recomPushId;
            private int companyId;
            private int type;
            private int pageNum;
            private int pageSize;
            public getEmployeeRecomPositionByIds_call(int recomPushId, int companyId, int type, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.recomPushId = recomPushId;
                this.companyId = companyId;
                this.type = type;
                this.pageNum = pageNum;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmployeeRecomPositionByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmployeeRecomPositionByIds_args args = new getEmployeeRecomPositionByIds_args();
                args.setRecomPushId(recomPushId);
                args.setCompanyId(companyId);
                args.setType(type);
                args.setPageNum(pageNum);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmployeeRecomPositionByIds();
            }
        }

        public void updatePosition(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updatePosition_call method_call = new updatePosition_call(param, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updatePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.lang.String param;
            public updatePosition_call(java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param = param;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updatePosition_args args = new updatePosition_args();
                args.setParam(param);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updatePosition();
            }
        }

        public void getMiniPositionList(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getMiniPositionList_call method_call = new getMiniPositionList_call(accountId, keyword, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getMiniPositionList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int accountId;
            private java.lang.String keyword;
            private int page;
            private int pageSize;
            public getMiniPositionList_call(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.accountId = accountId;
                this.keyword = keyword;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiniPositionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getMiniPositionList_args args = new getMiniPositionList_args();
                args.setAccountId(accountId);
                args.setKeyword(keyword);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getMiniPositionList();
            }
        }

        public void getMiniPositionSuggest(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getMiniPositionSuggest_call method_call = new getMiniPositionSuggest_call(accountId, keyword, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getMiniPositionSuggest_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int accountId;
            private java.lang.String keyword;
            private int page;
            private int pageSize;
            public getMiniPositionSuggest_call(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.accountId = accountId;
                this.keyword = keyword;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiniPositionSuggest", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getMiniPositionSuggest_args args = new getMiniPositionSuggest_args();
                args.setAccountId(accountId);
                args.setKeyword(keyword);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getMiniPositionSuggest();
            }
        }

        public void getMiniPositionNumStatus(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getMiniPositionNumStatus_call method_call = new getMiniPositionNumStatus_call(accountId, keyword, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getMiniPositionNumStatus_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int accountId;
            private java.lang.String keyword;
            private int page;
            private int pageSize;
            public getMiniPositionNumStatus_call(int accountId, java.lang.String keyword, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.accountId = accountId;
                this.keyword = keyword;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiniPositionNumStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getMiniPositionNumStatus_args args = new getMiniPositionNumStatus_args();
                args.setAccountId(accountId);
                args.setKeyword(keyword);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getMiniPositionNumStatus();
            }
        }

        public void getMiniPositionDetail(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getMiniPositionDetail_call method_call = new getMiniPositionDetail_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getMiniPositionDetail_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public getMiniPositionDetail_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiniPositionDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getMiniPositionDetail_args args = new getMiniPositionDetail_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getMiniPositionDetail();
            }
        }

        public void getMiniPositionShare(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getMiniPositionShare_call method_call = new getMiniPositionShare_call(positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getMiniPositionShare_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int positionId;
            public getMiniPositionShare_call(int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMiniPositionShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getMiniPositionShare_args args = new getMiniPositionShare_args();
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getMiniPositionShare();
            }
        }

        public void getFeatureByPId(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getFeatureByPId_call method_call = new getFeatureByPId_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getFeatureByPId_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int pid;
            public getFeatureByPId_call(int pid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeatureByPId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getFeatureByPId_args args = new getFeatureByPId_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFeatureByPId();
            }
        }

        public void updatePositionFeature(int pid, int fid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updatePositionFeature_call method_call = new updatePositionFeature_call(pid, fid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updatePositionFeature_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int pid;
            private int fid;
            public updatePositionFeature_call(int pid, int fid, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.fid = fid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePositionFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updatePositionFeature_args args = new updatePositionFeature_args();
                args.setPid(pid);
                args.setFid(fid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updatePositionFeature();
            }
        }

        public void updatePositionFeatures(int pid, java.util.List<java.lang.Integer> fidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updatePositionFeatures_call method_call = new updatePositionFeatures_call(pid, fidList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updatePositionFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int pid;
            private java.util.List<java.lang.Integer> fidList;
            public updatePositionFeatures_call(int pid, java.util.List<java.lang.Integer> fidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.fidList = fidList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePositionFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updatePositionFeatures_args args = new updatePositionFeatures_args();
                args.setPid(pid);
                args.setFidList(fidList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updatePositionFeatures();
            }
        }

        public void updatePositionFeatureBatch(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updatePositionFeatureBatch_call method_call = new updatePositionFeatureBatch_call(featureList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updatePositionFeatureBatch_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList;
            public updatePositionFeatureBatch_call(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.featureList = featureList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePositionFeatureBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updatePositionFeatureBatch_args args = new updatePositionFeatureBatch_args();
                args.setFeatureList(featureList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updatePositionFeatureBatch();
            }
        }

        public void getPositionFeatureBetch(java.util.List<java.lang.Integer> pidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionFeatureBetch_call method_call = new getPositionFeatureBetch_call(pidList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionFeatureBetch_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.util.List<java.lang.Integer> pidList;
            public getPositionFeatureBetch_call(java.util.List<java.lang.Integer> pidList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pidList = pidList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionFeatureBetch", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionFeatureBetch_args args = new getPositionFeatureBetch_args();
                args.setPidList(pidList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionFeatureBetch();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("getResources", new getResources());
            processMap.put("getRecommendedPositions", new getRecommendedPositions());
            processMap.put("verifyCustomize", new verifyCustomize());
            processMap.put("getPositionById", new getPositionById());
            processMap.put("CustomField", new CustomField());
            processMap.put("ifAllowRefresh", new ifAllowRefresh());
            processMap.put("getThirdPartyPositions", new getThirdPartyPositions());
            processMap.put("batchHandlerJobPostion", new batchHandlerJobPostion());
            processMap.put("saveAndSync", new saveAndSync());
            processMap.put("deleteJobposition", new deleteJobposition());
            processMap.put("getTeamIdByDepartmentName", new getTeamIdByDepartmentName());
            processMap.put("getPositionForThirdParty", new getPositionForThirdParty());
            processMap.put("getPositionListForThirdParty", new getPositionListForThirdParty());
            processMap.put("getPositionList", new getPositionList());
            processMap.put("getPositionListRpExt", new getPositionListRpExt());
            processMap.put("getRpPositionList", new getRpPositionList());
            processMap.put("getShareInfo", new getShareInfo());
            processMap.put("headImage", new headImage());
            processMap.put("positionDetails", new positionDetails());
            processMap.put("companyHotPositionDetailsList", new companyHotPositionDetailsList());
            processMap.put("similarityPositionDetailsList", new similarityPositionDetailsList());
            processMap.put("getThirdPartyPositionInfo", new getThirdPartyPositionInfo());
            processMap.put("updateThirdPartyPosition", new updateThirdPartyPosition());
            processMap.put("updateThirdPartyPositionWithAccount", new updateThirdPartyPositionWithAccount());
            processMap.put("getPcRecommand", new getPcRecommand());
            processMap.put("getPcRecommandCompany", new getPcRecommandCompany());
            processMap.put("getPcRecommandCompanyAll", new getPcRecommandCompanyAll());
            processMap.put("getPcPositionDetail", new getPcPositionDetail());
            processMap.put("getPcRecommendPosition", new getPcRecommendPosition());
            processMap.put("addPcReport", new addPcReport());
            processMap.put("getPcAdvertisement", new getPcAdvertisement());
            processMap.put("getPositionRecommendByModuleId", new getPositionRecommendByModuleId());
            processMap.put("getThirdpartySyncedPositions", new getThirdpartySyncedPositions());
            processMap.put("putAlipayResult", new putAlipayResult());
            processMap.put("getPersonaRecomPositionList", new getPersonaRecomPositionList());
            processMap.put("positionCvConf", new positionCvConf());
            processMap.put("getEmployeeRecomPositionByIds", new getEmployeeRecomPositionByIds());
            processMap.put("updatePosition", new updatePosition());
            processMap.put("getMiniPositionList", new getMiniPositionList());
            processMap.put("getMiniPositionSuggest", new getMiniPositionSuggest());
            processMap.put("getMiniPositionNumStatus", new getMiniPositionNumStatus());
            processMap.put("getMiniPositionDetail", new getMiniPositionDetail());
            processMap.put("getMiniPositionShare", new getMiniPositionShare());
            processMap.put("getFeatureByPId", new getFeatureByPId());
            processMap.put("updatePositionFeature", new updatePositionFeature());
            processMap.put("updatePositionFeatures", new updatePositionFeatures());
            processMap.put("updatePositionFeatureBatch", new updatePositionFeatureBatch());
            processMap.put("getPositionFeatureBetch", new getPositionFeatureBetch());
            return processMap;
        }

        public static class getResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResources_args> {
            public getResources() {
                super("getResources");
            }

            public getResources_args getEmptyArgsInstance() {
                return new getResources_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getResources_result getResult(I iface, getResources_args args) throws org.apache.thrift.TException {
                getResources_result result = new getResources_result();
                result.success = iface.getResources(args.query);
                return result;
            }
        }

        public static class getRecommendedPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecommendedPositions_args> {
            public getRecommendedPositions() {
                super("getRecommendedPositions");
            }

            public getRecommendedPositions_args getEmptyArgsInstance() {
                return new getRecommendedPositions_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecommendedPositions_result getResult(I iface, getRecommendedPositions_args args) throws org.apache.thrift.TException {
                getRecommendedPositions_result result = new getRecommendedPositions_result();
                result.success = iface.getRecommendedPositions(args.pid);
                return result;
            }
        }

        public static class verifyCustomize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyCustomize_args> {
            public verifyCustomize() {
                super("verifyCustomize");
            }

            public verifyCustomize_args getEmptyArgsInstance() {
                return new verifyCustomize_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public verifyCustomize_result getResult(I iface, verifyCustomize_args args) throws org.apache.thrift.TException {
                verifyCustomize_result result = new verifyCustomize_result();
                result.success = iface.verifyCustomize(args.positionId);
                return result;
            }
        }

        public static class getPositionById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionById_args> {
            public getPositionById() {
                super("getPositionById");
            }

            public getPositionById_args getEmptyArgsInstance() {
                return new getPositionById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionById_result getResult(I iface, getPositionById_args args) throws org.apache.thrift.TException {
                getPositionById_result result = new getPositionById_result();
                result.success = iface.getPositionById(args.positionId);
                return result;
            }
        }

        public static class CustomField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CustomField_args> {
            public CustomField() {
                super("CustomField");
            }

            public CustomField_args getEmptyArgsInstance() {
                return new CustomField_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public CustomField_result getResult(I iface, CustomField_args args) throws org.apache.thrift.TException {
                CustomField_result result = new CustomField_result();
                result.success = iface.CustomField(args.param);
                return result;
            }
        }

        public static class ifAllowRefresh<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ifAllowRefresh_args> {
            public ifAllowRefresh() {
                super("ifAllowRefresh");
            }

            public ifAllowRefresh_args getEmptyArgsInstance() {
                return new ifAllowRefresh_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public ifAllowRefresh_result getResult(I iface, ifAllowRefresh_args args) throws org.apache.thrift.TException {
                ifAllowRefresh_result result = new ifAllowRefresh_result();
                result.success = iface.ifAllowRefresh(args.positionId, args.account_id);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getThirdPartyPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThirdPartyPositions_args> {
            public getThirdPartyPositions() {
                super("getThirdPartyPositions");
            }

            public getThirdPartyPositions_args getEmptyArgsInstance() {
                return new getThirdPartyPositions_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getThirdPartyPositions_result getResult(I iface, getThirdPartyPositions_args args) throws org.apache.thrift.TException {
                getThirdPartyPositions_result result = new getThirdPartyPositions_result();
                result.success = iface.getThirdPartyPositions(args.query);
                return result;
            }
        }

        public static class batchHandlerJobPostion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchHandlerJobPostion_args> {
            public batchHandlerJobPostion() {
                super("batchHandlerJobPostion");
            }

            public batchHandlerJobPostion_args getEmptyArgsInstance() {
                return new batchHandlerJobPostion_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchHandlerJobPostion_result getResult(I iface, batchHandlerJobPostion_args args) throws org.apache.thrift.TException {
                batchHandlerJobPostion_result result = new batchHandlerJobPostion_result();
                result.success = iface.batchHandlerJobPostion(args.batchHandlerJobPostion);
                return result;
            }
        }

        public static class saveAndSync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveAndSync_args> {
            public saveAndSync() {
                super("saveAndSync");
            }

            public saveAndSync_args getEmptyArgsInstance() {
                return new saveAndSync_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public saveAndSync_result getResult(I iface, saveAndSync_args args) throws org.apache.thrift.TException {
                saveAndSync_result result = new saveAndSync_result();
                result.success = iface.saveAndSync(args.batchHandlerJobPostion);
                return result;
            }
        }

        public static class deleteJobposition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteJobposition_args> {
            public deleteJobposition() {
                super("deleteJobposition");
            }

            public deleteJobposition_args getEmptyArgsInstance() {
                return new deleteJobposition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteJobposition_result getResult(I iface, deleteJobposition_args args) throws org.apache.thrift.TException {
                deleteJobposition_result result = new deleteJobposition_result();
                result.success = iface.deleteJobposition(args.delePostion);
                return result;
            }
        }

        public static class getTeamIdByDepartmentName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeamIdByDepartmentName_args> {
            public getTeamIdByDepartmentName() {
                super("getTeamIdByDepartmentName");
            }

            public getTeamIdByDepartmentName_args getEmptyArgsInstance() {
                return new getTeamIdByDepartmentName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTeamIdByDepartmentName_result getResult(I iface, getTeamIdByDepartmentName_args args) throws org.apache.thrift.TException {
                getTeamIdByDepartmentName_result result = new getTeamIdByDepartmentName_result();
                result.success = iface.getTeamIdByDepartmentName(args.companyId, args.departmentName);
                return result;
            }
        }

        public static class getPositionForThirdParty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionForThirdParty_args> {
            public getPositionForThirdParty() {
                super("getPositionForThirdParty");
            }

            public getPositionForThirdParty_args getEmptyArgsInstance() {
                return new getPositionForThirdParty_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionForThirdParty_result getResult(I iface, getPositionForThirdParty_args args) throws org.apache.thrift.TException {
                getPositionForThirdParty_result result = new getPositionForThirdParty_result();
                result.success = iface.getPositionForThirdParty(args.positionId, args.channel);
                return result;
            }
        }

        public static class getPositionListForThirdParty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionListForThirdParty_args> {
            public getPositionListForThirdParty() {
                super("getPositionListForThirdParty");
            }

            public getPositionListForThirdParty_args getEmptyArgsInstance() {
                return new getPositionListForThirdParty_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionListForThirdParty_result getResult(I iface, getPositionListForThirdParty_args args) throws org.apache.thrift.TException {
                getPositionListForThirdParty_result result = new getPositionListForThirdParty_result();
                result.success = iface.getPositionListForThirdParty(args.channel, args.type, args.start_time, args.end_time);
                return result;
            }
        }

        public static class getPositionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionList_args> {
            public getPositionList() {
                super("getPositionList");
            }

            public getPositionList_args getEmptyArgsInstance() {
                return new getPositionList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionList_result getResult(I iface, getPositionList_args args) throws org.apache.thrift.TException {
                getPositionList_result result = new getPositionList_result();
                result.success = iface.getPositionList(args.query);
                return result;
            }
        }

        public static class getPositionListRpExt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionListRpExt_args> {
            public getPositionListRpExt() {
                super("getPositionListRpExt");
            }

            public getPositionListRpExt_args getEmptyArgsInstance() {
                return new getPositionListRpExt_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionListRpExt_result getResult(I iface, getPositionListRpExt_args args) throws org.apache.thrift.TException {
                getPositionListRpExt_result result = new getPositionListRpExt_result();
                result.success = iface.getPositionListRpExt(args.pids);
                return result;
            }
        }

        public static class getRpPositionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRpPositionList_args> {
            public getRpPositionList() {
                super("getRpPositionList");
            }

            public getRpPositionList_args getEmptyArgsInstance() {
                return new getRpPositionList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRpPositionList_result getResult(I iface, getRpPositionList_args args) throws org.apache.thrift.TException {
                getRpPositionList_result result = new getRpPositionList_result();
                result.success = iface.getRpPositionList(args.hb_config_id, args.pageNum, args.pageSize);
                return result;
            }
        }

        public static class getShareInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShareInfo_args> {
            public getShareInfo() {
                super("getShareInfo");
            }

            public getShareInfo_args getEmptyArgsInstance() {
                return new getShareInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getShareInfo_result getResult(I iface, getShareInfo_args args) throws org.apache.thrift.TException {
                getShareInfo_result result = new getShareInfo_result();
                result.success = iface.getShareInfo(args.hb_config_id);
                return result;
            }
        }

        public static class headImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, headImage_args> {
            public headImage() {
                super("headImage");
            }

            public headImage_args getEmptyArgsInstance() {
                return new headImage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public headImage_result getResult(I iface, headImage_args args) throws org.apache.thrift.TException {
                headImage_result result = new headImage_result();
                result.success = iface.headImage();
                return result;
            }
        }

        public static class positionDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, positionDetails_args> {
            public positionDetails() {
                super("positionDetails");
            }

            public positionDetails_args getEmptyArgsInstance() {
                return new positionDetails_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public positionDetails_result getResult(I iface, positionDetails_args args) throws org.apache.thrift.TException {
                positionDetails_result result = new positionDetails_result();
                result.success = iface.positionDetails(args.positionId);
                return result;
            }
        }

        public static class companyHotPositionDetailsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, companyHotPositionDetailsList_args> {
            public companyHotPositionDetailsList() {
                super("companyHotPositionDetailsList");
            }

            public companyHotPositionDetailsList_args getEmptyArgsInstance() {
                return new companyHotPositionDetailsList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public companyHotPositionDetailsList_result getResult(I iface, companyHotPositionDetailsList_args args) throws org.apache.thrift.TException {
                companyHotPositionDetailsList_result result = new companyHotPositionDetailsList_result();
                result.success = iface.companyHotPositionDetailsList(args.companyId, args.page, args.per_age);
                return result;
            }
        }

        public static class similarityPositionDetailsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, similarityPositionDetailsList_args> {
            public similarityPositionDetailsList() {
                super("similarityPositionDetailsList");
            }

            public similarityPositionDetailsList_args getEmptyArgsInstance() {
                return new similarityPositionDetailsList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public similarityPositionDetailsList_result getResult(I iface, similarityPositionDetailsList_args args) throws org.apache.thrift.TException {
                similarityPositionDetailsList_result result = new similarityPositionDetailsList_result();
                result.success = iface.similarityPositionDetailsList(args.pid, args.page, args.per_age);
                return result;
            }
        }

        public static class getThirdPartyPositionInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThirdPartyPositionInfo_args> {
            public getThirdPartyPositionInfo() {
                super("getThirdPartyPositionInfo");
            }

            public getThirdPartyPositionInfo_args getEmptyArgsInstance() {
                return new getThirdPartyPositionInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getThirdPartyPositionInfo_result getResult(I iface, getThirdPartyPositionInfo_args args) throws org.apache.thrift.TException {
                getThirdPartyPositionInfo_result result = new getThirdPartyPositionInfo_result();
                try {
                    result.success = iface.getThirdPartyPositionInfo(args.infoForm);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateThirdPartyPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateThirdPartyPosition_args> {
            public updateThirdPartyPosition() {
                super("updateThirdPartyPosition");
            }

            public updateThirdPartyPosition_args getEmptyArgsInstance() {
                return new updateThirdPartyPosition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateThirdPartyPosition_result getResult(I iface, updateThirdPartyPosition_args args) throws org.apache.thrift.TException {
                updateThirdPartyPosition_result result = new updateThirdPartyPosition_result();
                try {
                    result.success = iface.updateThirdPartyPosition(args.thirdPartyPosition, args.extData);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateThirdPartyPositionWithAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateThirdPartyPositionWithAccount_args> {
            public updateThirdPartyPositionWithAccount() {
                super("updateThirdPartyPositionWithAccount");
            }

            public updateThirdPartyPositionWithAccount_args getEmptyArgsInstance() {
                return new updateThirdPartyPositionWithAccount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateThirdPartyPositionWithAccount_result getResult(I iface, updateThirdPartyPositionWithAccount_args args) throws org.apache.thrift.TException {
                updateThirdPartyPositionWithAccount_result result = new updateThirdPartyPositionWithAccount_result();
                try {
                    result.success = iface.updateThirdPartyPositionWithAccount(args.thirdPartyPosition, args.thirdPartyAccount, args.extData);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getPcRecommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcRecommand_args> {
            public getPcRecommand() {
                super("getPcRecommand");
            }

            public getPcRecommand_args getEmptyArgsInstance() {
                return new getPcRecommand_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcRecommand_result getResult(I iface, getPcRecommand_args args) throws org.apache.thrift.TException {
                getPcRecommand_result result = new getPcRecommand_result();
                result.success = iface.getPcRecommand(args.page, args.pageSize);
                return result;
            }
        }

        public static class getPcRecommandCompany<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcRecommandCompany_args> {
            public getPcRecommandCompany() {
                super("getPcRecommandCompany");
            }

            public getPcRecommandCompany_args getEmptyArgsInstance() {
                return new getPcRecommandCompany_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcRecommandCompany_result getResult(I iface, getPcRecommandCompany_args args) throws org.apache.thrift.TException {
                getPcRecommandCompany_result result = new getPcRecommandCompany_result();
                result.success = iface.getPcRecommandCompany(args.page, args.pageSize);
                return result;
            }
        }

        public static class getPcRecommandCompanyAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcRecommandCompanyAll_args> {
            public getPcRecommandCompanyAll() {
                super("getPcRecommandCompanyAll");
            }

            public getPcRecommandCompanyAll_args getEmptyArgsInstance() {
                return new getPcRecommandCompanyAll_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcRecommandCompanyAll_result getResult(I iface, getPcRecommandCompanyAll_args args) throws org.apache.thrift.TException {
                getPcRecommandCompanyAll_result result = new getPcRecommandCompanyAll_result();
                result.success = iface.getPcRecommandCompanyAll(args.page, args.pageSize);
                return result;
            }
        }

        public static class getPcPositionDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcPositionDetail_args> {
            public getPcPositionDetail() {
                super("getPcPositionDetail");
            }

            public getPcPositionDetail_args getEmptyArgsInstance() {
                return new getPcPositionDetail_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcPositionDetail_result getResult(I iface, getPcPositionDetail_args args) throws org.apache.thrift.TException {
                getPcPositionDetail_result result = new getPcPositionDetail_result();
                result.success = iface.getPcPositionDetail(args.positionId);
                return result;
            }
        }

        public static class getPcRecommendPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcRecommendPosition_args> {
            public getPcRecommendPosition() {
                super("getPcRecommendPosition");
            }

            public getPcRecommendPosition_args getEmptyArgsInstance() {
                return new getPcRecommendPosition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcRecommendPosition_result getResult(I iface, getPcRecommendPosition_args args) throws org.apache.thrift.TException {
                getPcRecommendPosition_result result = new getPcRecommendPosition_result();
                result.success = iface.getPcRecommendPosition(args.positionId, args.page, args.pageSize);
                return result;
            }
        }

        public static class addPcReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPcReport_args> {
            public addPcReport() {
                super("addPcReport");
            }

            public addPcReport_args getEmptyArgsInstance() {
                return new addPcReport_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addPcReport_result getResult(I iface, addPcReport_args args) throws org.apache.thrift.TException {
                addPcReport_result result = new addPcReport_result();
                result.success = iface.addPcReport(args.jobPcReportedDO);
                return result;
            }
        }

        public static class getPcAdvertisement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPcAdvertisement_args> {
            public getPcAdvertisement() {
                super("getPcAdvertisement");
            }

            public getPcAdvertisement_args getEmptyArgsInstance() {
                return new getPcAdvertisement_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPcAdvertisement_result getResult(I iface, getPcAdvertisement_args args) throws org.apache.thrift.TException {
                getPcAdvertisement_result result = new getPcAdvertisement_result();
                result.success = iface.getPcAdvertisement(args.page, args.pageSize);
                return result;
            }
        }

        public static class getPositionRecommendByModuleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionRecommendByModuleId_args> {
            public getPositionRecommendByModuleId() {
                super("getPositionRecommendByModuleId");
            }

            public getPositionRecommendByModuleId_args getEmptyArgsInstance() {
                return new getPositionRecommendByModuleId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionRecommendByModuleId_result getResult(I iface, getPositionRecommendByModuleId_args args) throws org.apache.thrift.TException {
                getPositionRecommendByModuleId_result result = new getPositionRecommendByModuleId_result();
                result.success = iface.getPositionRecommendByModuleId(args.page, args.pageSize, args.moduleId);
                return result;
            }
        }

        public static class getThirdpartySyncedPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThirdpartySyncedPositions_args> {
            public getThirdpartySyncedPositions() {
                super("getThirdpartySyncedPositions");
            }

            public getThirdpartySyncedPositions_args getEmptyArgsInstance() {
                return new getThirdpartySyncedPositions_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getThirdpartySyncedPositions_result getResult(I iface, getThirdpartySyncedPositions_args args) throws org.apache.thrift.TException {
                getThirdpartySyncedPositions_result result = new getThirdpartySyncedPositions_result();
                result.success = iface.getThirdpartySyncedPositions(args.channel, args.publisher, args.companyId, args.candidateSource, args.page, args.pageSize);
                return result;
            }
        }

        public static class putAlipayResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putAlipayResult_args> {
            public putAlipayResult() {
                super("putAlipayResult");
            }

            public putAlipayResult_args getEmptyArgsInstance() {
                return new putAlipayResult_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public putAlipayResult_result getResult(I iface, putAlipayResult_args args) throws org.apache.thrift.TException {
                putAlipayResult_result result = new putAlipayResult_result();
                result.success = iface.putAlipayResult(args.channel, args.positionId, args.alipayJobId);
                return result;
            }
        }

        public static class getPersonaRecomPositionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPersonaRecomPositionList_args> {
            public getPersonaRecomPositionList() {
                super("getPersonaRecomPositionList");
            }

            public getPersonaRecomPositionList_args getEmptyArgsInstance() {
                return new getPersonaRecomPositionList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPersonaRecomPositionList_result getResult(I iface, getPersonaRecomPositionList_args args) throws org.apache.thrift.TException {
                getPersonaRecomPositionList_result result = new getPersonaRecomPositionList_result();
                result.success = iface.getPersonaRecomPositionList(args.userId, args.companyId, args.type, args.pageNum, args.pageSize);
                return result;
            }
        }

        public static class positionCvConf<I extends Iface> extends org.apache.thrift.ProcessFunction<I, positionCvConf_args> {
            public positionCvConf() {
                super("positionCvConf");
            }

            public positionCvConf_args getEmptyArgsInstance() {
                return new positionCvConf_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public positionCvConf_result getResult(I iface, positionCvConf_args args) throws org.apache.thrift.TException {
                positionCvConf_result result = new positionCvConf_result();
                result.success = iface.positionCvConf(args.positionId);
                return result;
            }
        }

        public static class getEmployeeRecomPositionByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmployeeRecomPositionByIds_args> {
            public getEmployeeRecomPositionByIds() {
                super("getEmployeeRecomPositionByIds");
            }

            public getEmployeeRecomPositionByIds_args getEmptyArgsInstance() {
                return new getEmployeeRecomPositionByIds_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmployeeRecomPositionByIds_result getResult(I iface, getEmployeeRecomPositionByIds_args args) throws org.apache.thrift.TException {
                getEmployeeRecomPositionByIds_result result = new getEmployeeRecomPositionByIds_result();
                result.success = iface.getEmployeeRecomPositionByIds(args.recomPushId, args.companyId, args.type, args.pageNum, args.pageSize);
                return result;
            }
        }

        public static class updatePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePosition_args> {
            public updatePosition() {
                super("updatePosition");
            }

            public updatePosition_args getEmptyArgsInstance() {
                return new updatePosition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updatePosition_result getResult(I iface, updatePosition_args args) throws org.apache.thrift.TException {
                updatePosition_result result = new updatePosition_result();
                result.success = iface.updatePosition(args.param);
                return result;
            }
        }

        public static class getMiniPositionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiniPositionList_args> {
            public getMiniPositionList() {
                super("getMiniPositionList");
            }

            public getMiniPositionList_args getEmptyArgsInstance() {
                return new getMiniPositionList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getMiniPositionList_result getResult(I iface, getMiniPositionList_args args) throws org.apache.thrift.TException {
                getMiniPositionList_result result = new getMiniPositionList_result();
                result.success = iface.getMiniPositionList(args.accountId, args.keyword, args.page, args.pageSize);
                return result;
            }
        }

        public static class getMiniPositionSuggest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiniPositionSuggest_args> {
            public getMiniPositionSuggest() {
                super("getMiniPositionSuggest");
            }

            public getMiniPositionSuggest_args getEmptyArgsInstance() {
                return new getMiniPositionSuggest_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getMiniPositionSuggest_result getResult(I iface, getMiniPositionSuggest_args args) throws org.apache.thrift.TException {
                getMiniPositionSuggest_result result = new getMiniPositionSuggest_result();
                result.success = iface.getMiniPositionSuggest(args.accountId, args.keyword, args.page, args.pageSize);
                return result;
            }
        }

        public static class getMiniPositionNumStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiniPositionNumStatus_args> {
            public getMiniPositionNumStatus() {
                super("getMiniPositionNumStatus");
            }

            public getMiniPositionNumStatus_args getEmptyArgsInstance() {
                return new getMiniPositionNumStatus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getMiniPositionNumStatus_result getResult(I iface, getMiniPositionNumStatus_args args) throws org.apache.thrift.TException {
                getMiniPositionNumStatus_result result = new getMiniPositionNumStatus_result();
                result.success = iface.getMiniPositionNumStatus(args.accountId, args.keyword, args.page, args.pageSize);
                return result;
            }
        }

        public static class getMiniPositionDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiniPositionDetail_args> {
            public getMiniPositionDetail() {
                super("getMiniPositionDetail");
            }

            public getMiniPositionDetail_args getEmptyArgsInstance() {
                return new getMiniPositionDetail_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getMiniPositionDetail_result getResult(I iface, getMiniPositionDetail_args args) throws org.apache.thrift.TException {
                getMiniPositionDetail_result result = new getMiniPositionDetail_result();
                result.success = iface.getMiniPositionDetail(args.positionId);
                return result;
            }
        }

        public static class getMiniPositionShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMiniPositionShare_args> {
            public getMiniPositionShare() {
                super("getMiniPositionShare");
            }

            public getMiniPositionShare_args getEmptyArgsInstance() {
                return new getMiniPositionShare_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getMiniPositionShare_result getResult(I iface, getMiniPositionShare_args args) throws org.apache.thrift.TException {
                getMiniPositionShare_result result = new getMiniPositionShare_result();
                result.success = iface.getMiniPositionShare(args.positionId);
                return result;
            }
        }

        public static class getFeatureByPId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFeatureByPId_args> {
            public getFeatureByPId() {
                super("getFeatureByPId");
            }

            public getFeatureByPId_args getEmptyArgsInstance() {
                return new getFeatureByPId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getFeatureByPId_result getResult(I iface, getFeatureByPId_args args) throws org.apache.thrift.TException {
                getFeatureByPId_result result = new getFeatureByPId_result();
                result.success = iface.getFeatureByPId(args.pid);
                return result;
            }
        }

        public static class updatePositionFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePositionFeature_args> {
            public updatePositionFeature() {
                super("updatePositionFeature");
            }

            public updatePositionFeature_args getEmptyArgsInstance() {
                return new updatePositionFeature_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updatePositionFeature_result getResult(I iface, updatePositionFeature_args args) throws org.apache.thrift.TException {
                updatePositionFeature_result result = new updatePositionFeature_result();
                result.success = iface.updatePositionFeature(args.pid, args.fid);
                return result;
            }
        }

        public static class updatePositionFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePositionFeatures_args> {
            public updatePositionFeatures() {
                super("updatePositionFeatures");
            }

            public updatePositionFeatures_args getEmptyArgsInstance() {
                return new updatePositionFeatures_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updatePositionFeatures_result getResult(I iface, updatePositionFeatures_args args) throws org.apache.thrift.TException {
                updatePositionFeatures_result result = new updatePositionFeatures_result();
                result.success = iface.updatePositionFeatures(args.pid, args.fidList);
                return result;
            }
        }

        public static class updatePositionFeatureBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePositionFeatureBatch_args> {
            public updatePositionFeatureBatch() {
                super("updatePositionFeatureBatch");
            }

            public updatePositionFeatureBatch_args getEmptyArgsInstance() {
                return new updatePositionFeatureBatch_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updatePositionFeatureBatch_result getResult(I iface, updatePositionFeatureBatch_args args) throws org.apache.thrift.TException {
                updatePositionFeatureBatch_result result = new updatePositionFeatureBatch_result();
                result.success = iface.updatePositionFeatureBatch(args.featureList);
                return result;
            }
        }

        public static class getPositionFeatureBetch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionFeatureBetch_args> {
            public getPositionFeatureBetch() {
                super("getPositionFeatureBetch");
            }

            public getPositionFeatureBetch_args getEmptyArgsInstance() {
                return new getPositionFeatureBetch_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionFeatureBetch_result getResult(I iface, getPositionFeatureBetch_args args) throws org.apache.thrift.TException {
                getPositionFeatureBetch_result result = new getPositionFeatureBetch_result();
                result.success = iface.getPositionFeatureBetch(args.pidList);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getResources", new getResources());
            processMap.put("getRecommendedPositions", new getRecommendedPositions());
            processMap.put("verifyCustomize", new verifyCustomize());
            processMap.put("getPositionById", new getPositionById());
            processMap.put("CustomField", new CustomField());
            processMap.put("ifAllowRefresh", new ifAllowRefresh());
            processMap.put("getThirdPartyPositions", new getThirdPartyPositions());
            processMap.put("batchHandlerJobPostion", new batchHandlerJobPostion());
            processMap.put("saveAndSync", new saveAndSync());
            processMap.put("deleteJobposition", new deleteJobposition());
            processMap.put("getTeamIdByDepartmentName", new getTeamIdByDepartmentName());
            processMap.put("getPositionForThirdParty", new getPositionForThirdParty());
            processMap.put("getPositionListForThirdParty", new getPositionListForThirdParty());
            processMap.put("getPositionList", new getPositionList());
            processMap.put("getPositionListRpExt", new getPositionListRpExt());
            processMap.put("getRpPositionList", new getRpPositionList());
            processMap.put("getShareInfo", new getShareInfo());
            processMap.put("headImage", new headImage());
            processMap.put("positionDetails", new positionDetails());
            processMap.put("companyHotPositionDetailsList", new companyHotPositionDetailsList());
            processMap.put("similarityPositionDetailsList", new similarityPositionDetailsList());
            processMap.put("getThirdPartyPositionInfo", new getThirdPartyPositionInfo());
            processMap.put("updateThirdPartyPosition", new updateThirdPartyPosition());
            processMap.put("updateThirdPartyPositionWithAccount", new updateThirdPartyPositionWithAccount());
            processMap.put("getPcRecommand", new getPcRecommand());
            processMap.put("getPcRecommandCompany", new getPcRecommandCompany());
            processMap.put("getPcRecommandCompanyAll", new getPcRecommandCompanyAll());
            processMap.put("getPcPositionDetail", new getPcPositionDetail());
            processMap.put("getPcRecommendPosition", new getPcRecommendPosition());
            processMap.put("addPcReport", new addPcReport());
            processMap.put("getPcAdvertisement", new getPcAdvertisement());
            processMap.put("getPositionRecommendByModuleId", new getPositionRecommendByModuleId());
            processMap.put("getThirdpartySyncedPositions", new getThirdpartySyncedPositions());
            processMap.put("putAlipayResult", new putAlipayResult());
            processMap.put("getPersonaRecomPositionList", new getPersonaRecomPositionList());
            processMap.put("positionCvConf", new positionCvConf());
            processMap.put("getEmployeeRecomPositionByIds", new getEmployeeRecomPositionByIds());
            processMap.put("updatePosition", new updatePosition());
            processMap.put("getMiniPositionList", new getMiniPositionList());
            processMap.put("getMiniPositionSuggest", new getMiniPositionSuggest());
            processMap.put("getMiniPositionNumStatus", new getMiniPositionNumStatus());
            processMap.put("getMiniPositionDetail", new getMiniPositionDetail());
            processMap.put("getMiniPositionShare", new getMiniPositionShare());
            processMap.put("getFeatureByPId", new getFeatureByPId());
            processMap.put("updatePositionFeature", new updatePositionFeature());
            processMap.put("updatePositionFeatures", new updatePositionFeatures());
            processMap.put("updatePositionFeatureBatch", new updatePositionFeatureBatch());
            processMap.put("getPositionFeatureBetch", new getPositionFeatureBetch());
            return processMap;
        }

        public static class getResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResources_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getResources() {
                super("getResources");
            }

            public getResources_args getEmptyArgsInstance() {
                return new getResources_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getResources_result result = new getResources_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getResources_result result = new getResources_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getResources_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getResources(args.query,resultHandler);
            }
        }

        public static class getRecommendedPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecommendedPositions_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getRecommendedPositions() {
                super("getRecommendedPositions");
            }

            public getRecommendedPositions_args getEmptyArgsInstance() {
                return new getRecommendedPositions_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getRecommendedPositions_result result = new getRecommendedPositions_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRecommendedPositions_result result = new getRecommendedPositions_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecommendedPositions_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getRecommendedPositions(args.pid,resultHandler);
            }
        }

        public static class verifyCustomize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyCustomize_args, com.moseeker.thrift.gen.common.struct.Response> {
            public verifyCustomize() {
                super("verifyCustomize");
            }

            public verifyCustomize_args getEmptyArgsInstance() {
                return new verifyCustomize_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        verifyCustomize_result result = new verifyCustomize_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        verifyCustomize_result result = new verifyCustomize_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, verifyCustomize_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.verifyCustomize(args.positionId,resultHandler);
            }
        }

        public static class getPositionById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionById_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionById() {
                super("getPositionById");
            }

            public getPositionById_args getEmptyArgsInstance() {
                return new getPositionById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionById_result result = new getPositionById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionById_result result = new getPositionById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionById_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionById(args.positionId,resultHandler);
            }
        }

        public static class CustomField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CustomField_args, com.moseeker.thrift.gen.common.struct.Response> {
            public CustomField() {
                super("CustomField");
            }

            public CustomField_args getEmptyArgsInstance() {
                return new CustomField_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        CustomField_result result = new CustomField_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        CustomField_result result = new CustomField_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, CustomField_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.CustomField(args.param,resultHandler);
            }
        }

        public static class ifAllowRefresh<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ifAllowRefresh_args, java.lang.Boolean> {
            public ifAllowRefresh() {
                super("ifAllowRefresh");
            }

            public ifAllowRefresh_args getEmptyArgsInstance() {
                return new ifAllowRefresh_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
                    public void onComplete(java.lang.Boolean o) {
                        ifAllowRefresh_result result = new ifAllowRefresh_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ifAllowRefresh_result result = new ifAllowRefresh_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ifAllowRefresh_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
                iface.ifAllowRefresh(args.positionId, args.account_id,resultHandler);
            }
        }

        public static class getThirdPartyPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThirdPartyPositions_args, java.util.List<java.lang.String>> {
            public getThirdPartyPositions() {
                super("getThirdPartyPositions");
            }

            public getThirdPartyPositions_args getEmptyArgsInstance() {
                return new getThirdPartyPositions_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
                    public void onComplete(java.util.List<java.lang.String> o) {
                        getThirdPartyPositions_result result = new getThirdPartyPositions_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getThirdPartyPositions_result result = new getThirdPartyPositions_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getThirdPartyPositions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
                iface.getThirdPartyPositions(args.query,resultHandler);
            }
        }

        public static class batchHandlerJobPostion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchHandlerJobPostion_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchHandlerJobPostion() {
                super("batchHandlerJobPostion");
            }

            public batchHandlerJobPostion_args getEmptyArgsInstance() {
                return new batchHandlerJobPostion_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchHandlerJobPostion_result result = new batchHandlerJobPostion_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchHandlerJobPostion_result result = new batchHandlerJobPostion_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchHandlerJobPostion_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchHandlerJobPostion(args.batchHandlerJobPostion,resultHandler);
            }
        }

        public static class saveAndSync<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveAndSync_args, com.moseeker.thrift.gen.common.struct.Response> {
            public saveAndSync() {
                super("saveAndSync");
            }

            public saveAndSync_args getEmptyArgsInstance() {
                return new saveAndSync_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        saveAndSync_result result = new saveAndSync_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        saveAndSync_result result = new saveAndSync_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, saveAndSync_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.saveAndSync(args.batchHandlerJobPostion,resultHandler);
            }
        }

        public static class deleteJobposition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteJobposition_args, com.moseeker.thrift.gen.common.struct.Response> {
            public deleteJobposition() {
                super("deleteJobposition");
            }

            public deleteJobposition_args getEmptyArgsInstance() {
                return new deleteJobposition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        deleteJobposition_result result = new deleteJobposition_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteJobposition_result result = new deleteJobposition_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteJobposition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.deleteJobposition(args.delePostion,resultHandler);
            }
        }

        public static class getTeamIdByDepartmentName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeamIdByDepartmentName_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTeamIdByDepartmentName() {
                super("getTeamIdByDepartmentName");
            }

            public getTeamIdByDepartmentName_args getEmptyArgsInstance() {
                return new getTeamIdByDepartmentName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTeamIdByDepartmentName_result result = new getTeamIdByDepartmentName_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTeamIdByDepartmentName_result result = new getTeamIdByDepartmentName_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTeamIdByDepartmentName_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTeamIdByDepartmentName(args.companyId, args.departmentName,resultHandler);
            }
        }

        public static class getPositionForThirdParty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionForThirdParty_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionForThirdParty() {
                super("getPositionForThirdParty");
            }

            public getPositionForThirdParty_args getEmptyArgsInstance() {
                return new getPositionForThirdParty_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionForThirdParty_result result = new getPositionForThirdParty_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionForThirdParty_result result = new getPositionForThirdParty_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionForThirdParty_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionForThirdParty(args.positionId, args.channel,resultHandler);
            }
        }

        public static class getPositionListForThirdParty<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionListForThirdParty_args, java.util.List<java.lang.Integer>> {
            public getPositionListForThirdParty() {
                super("getPositionListForThirdParty");
            }

            public getPositionListForThirdParty_args getEmptyArgsInstance() {
                return new getPositionListForThirdParty_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() {
                    public void onComplete(java.util.List<java.lang.Integer> o) {
                        getPositionListForThirdParty_result result = new getPositionListForThirdParty_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionListForThirdParty_result result = new getPositionListForThirdParty_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionListForThirdParty_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionListForThirdParty(args.channel, args.type, args.start_time, args.end_time,resultHandler);
            }
        }

        public static class getPositionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionList_args, java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> {
            public getPositionList() {
                super("getPositionList");
            }

            public getPositionList_args getEmptyArgsInstance() {
                return new getPositionList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> o) {
                        getPositionList_result result = new getPositionList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionList_result result = new getPositionList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionList(args.query,resultHandler);
            }
        }

        public static class getPositionListRpExt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionListRpExt_args, java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> {
            public getPositionListRpExt() {
                super("getPositionListRpExt");
            }

            public getPositionListRpExt_args getEmptyArgsInstance() {
                return new getPositionListRpExt_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> o) {
                        getPositionListRpExt_result result = new getPositionListRpExt_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionListRpExt_result result = new getPositionListRpExt_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionListRpExt_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionListRpExt(args.pids,resultHandler);
            }
        }

        public static class getRpPositionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRpPositionList_args, java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> {
            public getRpPositionList() {
                super("getRpPositionList");
            }

            public getRpPositionList_args getEmptyArgsInstance() {
                return new getRpPositionList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> o) {
                        getRpPositionList_result result = new getRpPositionList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRpPositionList_result result = new getRpPositionList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRpPositionList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>> resultHandler) throws org.apache.thrift.TException {
                iface.getRpPositionList(args.hb_config_id, args.pageNum, args.pageSize,resultHandler);
            }
        }

        public static class getShareInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getShareInfo_args, com.moseeker.thrift.gen.position.struct.WechatShareData> {
            public getShareInfo() {
                super("getShareInfo");
            }

            public getShareInfo_args getEmptyArgsInstance() {
                return new getShareInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData>() {
                    public void onComplete(com.moseeker.thrift.gen.position.struct.WechatShareData o) {
                        getShareInfo_result result = new getShareInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getShareInfo_result result = new getShareInfo_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getShareInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.WechatShareData> resultHandler) throws org.apache.thrift.TException {
                iface.getShareInfo(args.hb_config_id,resultHandler);
            }
        }

        public static class headImage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, headImage_args, com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> {
            public headImage() {
                super("headImage");
            }

            public headImage_args getEmptyArgsInstance() {
                return new headImage_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO>() {
                    public void onComplete(com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO o) {
                        headImage_result result = new headImage_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        headImage_result result = new headImage_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, headImage_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO> resultHandler) throws org.apache.thrift.TException {
                iface.headImage(resultHandler);
            }
        }

        public static class positionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, positionDetails_args, com.moseeker.thrift.gen.position.struct.PositionDetailsVO> {
            public positionDetails() {
                super("positionDetails");
            }

            public positionDetails_args getEmptyArgsInstance() {
                return new positionDetails_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO>() {
                    public void onComplete(com.moseeker.thrift.gen.position.struct.PositionDetailsVO o) {
                        positionDetails_result result = new positionDetails_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        positionDetails_result result = new positionDetails_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, positionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsVO> resultHandler) throws org.apache.thrift.TException {
                iface.positionDetails(args.positionId,resultHandler);
            }
        }

        public static class companyHotPositionDetailsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, companyHotPositionDetailsList_args, com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> {
            public companyHotPositionDetailsList() {
                super("companyHotPositionDetailsList");
            }

            public companyHotPositionDetailsList_args getEmptyArgsInstance() {
                return new companyHotPositionDetailsList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO>() {
                    public void onComplete(com.moseeker.thrift.gen.position.struct.PositionDetailsListVO o) {
                        companyHotPositionDetailsList_result result = new companyHotPositionDetailsList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        companyHotPositionDetailsList_result result = new companyHotPositionDetailsList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, companyHotPositionDetailsList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException {
                iface.companyHotPositionDetailsList(args.companyId, args.page, args.per_age,resultHandler);
            }
        }

        public static class similarityPositionDetailsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, similarityPositionDetailsList_args, com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> {
            public similarityPositionDetailsList() {
                super("similarityPositionDetailsList");
            }

            public similarityPositionDetailsList_args getEmptyArgsInstance() {
                return new similarityPositionDetailsList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO>() {
                    public void onComplete(com.moseeker.thrift.gen.position.struct.PositionDetailsListVO o) {
                        similarityPositionDetailsList_result result = new similarityPositionDetailsList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        similarityPositionDetailsList_result result = new similarityPositionDetailsList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, similarityPositionDetailsList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.PositionDetailsListVO> resultHandler) throws org.apache.thrift.TException {
                iface.similarityPositionDetailsList(args.pid, args.page, args.per_age,resultHandler);
            }
        }

        public static class getThirdPartyPositionInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThirdPartyPositionInfo_args, com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> {
            public getThirdPartyPositionInfo() {
                super("getThirdPartyPositionInfo");
            }

            public getThirdPartyPositionInfo_args getEmptyArgsInstance() {
                return new getThirdPartyPositionInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult>() {
                    public void onComplete(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult o) {
                        getThirdPartyPositionInfo_result result = new getThirdPartyPositionInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getThirdPartyPositionInfo_result result = new getThirdPartyPositionInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getThirdPartyPositionInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult> resultHandler) throws org.apache.thrift.TException {
                iface.getThirdPartyPositionInfo(args.infoForm,resultHandler);
            }
        }

        public static class updateThirdPartyPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateThirdPartyPosition_args, java.lang.Integer> {
            public updateThirdPartyPosition() {
                super("updateThirdPartyPosition");
            }

            public updateThirdPartyPosition_args getEmptyArgsInstance() {
                return new updateThirdPartyPosition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        updateThirdPartyPosition_result result = new updateThirdPartyPosition_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateThirdPartyPosition_result result = new updateThirdPartyPosition_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateThirdPartyPosition_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.updateThirdPartyPosition(args.thirdPartyPosition, args.extData,resultHandler);
            }
        }

        public static class updateThirdPartyPositionWithAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateThirdPartyPositionWithAccount_args, java.lang.Integer> {
            public updateThirdPartyPositionWithAccount() {
                super("updateThirdPartyPositionWithAccount");
            }

            public updateThirdPartyPositionWithAccount_args getEmptyArgsInstance() {
                return new updateThirdPartyPositionWithAccount_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        updateThirdPartyPositionWithAccount_result result = new updateThirdPartyPositionWithAccount_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateThirdPartyPositionWithAccount_result result = new updateThirdPartyPositionWithAccount_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateThirdPartyPositionWithAccount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.updateThirdPartyPositionWithAccount(args.thirdPartyPosition, args.thirdPartyAccount, args.extData,resultHandler);
            }
        }

        public static class getPcRecommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcRecommand_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcRecommand() {
                super("getPcRecommand");
            }

            public getPcRecommand_args getEmptyArgsInstance() {
                return new getPcRecommand_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcRecommand_result result = new getPcRecommand_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcRecommand_result result = new getPcRecommand_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcRecommand_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcRecommand(args.page, args.pageSize,resultHandler);
            }
        }

        public static class getPcRecommandCompany<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcRecommandCompany_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcRecommandCompany() {
                super("getPcRecommandCompany");
            }

            public getPcRecommandCompany_args getEmptyArgsInstance() {
                return new getPcRecommandCompany_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcRecommandCompany_result result = new getPcRecommandCompany_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcRecommandCompany_result result = new getPcRecommandCompany_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcRecommandCompany_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcRecommandCompany(args.page, args.pageSize,resultHandler);
            }
        }

        public static class getPcRecommandCompanyAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcRecommandCompanyAll_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcRecommandCompanyAll() {
                super("getPcRecommandCompanyAll");
            }

            public getPcRecommandCompanyAll_args getEmptyArgsInstance() {
                return new getPcRecommandCompanyAll_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcRecommandCompanyAll_result result = new getPcRecommandCompanyAll_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcRecommandCompanyAll_result result = new getPcRecommandCompanyAll_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcRecommandCompanyAll_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcRecommandCompanyAll(args.page, args.pageSize,resultHandler);
            }
        }

        public static class getPcPositionDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcPositionDetail_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcPositionDetail() {
                super("getPcPositionDetail");
            }

            public getPcPositionDetail_args getEmptyArgsInstance() {
                return new getPcPositionDetail_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcPositionDetail_result result = new getPcPositionDetail_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcPositionDetail_result result = new getPcPositionDetail_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcPositionDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcPositionDetail(args.positionId,resultHandler);
            }
        }

        public static class getPcRecommendPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcRecommendPosition_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcRecommendPosition() {
                super("getPcRecommendPosition");
            }

            public getPcRecommendPosition_args getEmptyArgsInstance() {
                return new getPcRecommendPosition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcRecommendPosition_result result = new getPcRecommendPosition_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcRecommendPosition_result result = new getPcRecommendPosition_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcRecommendPosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcRecommendPosition(args.positionId, args.page, args.pageSize,resultHandler);
            }
        }

        public static class addPcReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPcReport_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addPcReport() {
                super("addPcReport");
            }

            public addPcReport_args getEmptyArgsInstance() {
                return new addPcReport_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addPcReport_result result = new addPcReport_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addPcReport_result result = new addPcReport_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addPcReport_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addPcReport(args.jobPcReportedDO,resultHandler);
            }
        }

        public static class getPcAdvertisement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPcAdvertisement_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPcAdvertisement() {
                super("getPcAdvertisement");
            }

            public getPcAdvertisement_args getEmptyArgsInstance() {
                return new getPcAdvertisement_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPcAdvertisement_result result = new getPcAdvertisement_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPcAdvertisement_result result = new getPcAdvertisement_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPcAdvertisement_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPcAdvertisement(args.page, args.pageSize,resultHandler);
            }
        }

        public static class getPositionRecommendByModuleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionRecommendByModuleId_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionRecommendByModuleId() {
                super("getPositionRecommendByModuleId");
            }

            public getPositionRecommendByModuleId_args getEmptyArgsInstance() {
                return new getPositionRecommendByModuleId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionRecommendByModuleId_result result = new getPositionRecommendByModuleId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionRecommendByModuleId_result result = new getPositionRecommendByModuleId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionRecommendByModuleId_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionRecommendByModuleId(args.page, args.pageSize, args.moduleId,resultHandler);
            }
        }

        public static class getThirdpartySyncedPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThirdpartySyncedPositions_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getThirdpartySyncedPositions() {
                super("getThirdpartySyncedPositions");
            }

            public getThirdpartySyncedPositions_args getEmptyArgsInstance() {
                return new getThirdpartySyncedPositions_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getThirdpartySyncedPositions_result result = new getThirdpartySyncedPositions_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getThirdpartySyncedPositions_result result = new getThirdpartySyncedPositions_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getThirdpartySyncedPositions_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getThirdpartySyncedPositions(args.channel, args.publisher, args.companyId, args.candidateSource, args.page, args.pageSize,resultHandler);
            }
        }

        public static class putAlipayResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putAlipayResult_args, com.moseeker.thrift.gen.common.struct.Response> {
            public putAlipayResult() {
                super("putAlipayResult");
            }

            public putAlipayResult_args getEmptyArgsInstance() {
                return new putAlipayResult_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        putAlipayResult_result result = new putAlipayResult_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        putAlipayResult_result result = new putAlipayResult_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, putAlipayResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.putAlipayResult(args.channel, args.positionId, args.alipayJobId,resultHandler);
            }
        }

        public static class getPersonaRecomPositionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPersonaRecomPositionList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPersonaRecomPositionList() {
                super("getPersonaRecomPositionList");
            }

            public getPersonaRecomPositionList_args getEmptyArgsInstance() {
                return new getPersonaRecomPositionList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPersonaRecomPositionList_result result = new getPersonaRecomPositionList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPersonaRecomPositionList_result result = new getPersonaRecomPositionList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPersonaRecomPositionList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPersonaRecomPositionList(args.userId, args.companyId, args.type, args.pageNum, args.pageSize,resultHandler);
            }
        }

        public static class positionCvConf<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, positionCvConf_args, com.moseeker.thrift.gen.common.struct.Response> {
            public positionCvConf() {
                super("positionCvConf");
            }

            public positionCvConf_args getEmptyArgsInstance() {
                return new positionCvConf_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        positionCvConf_result result = new positionCvConf_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        positionCvConf_result result = new positionCvConf_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, positionCvConf_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.positionCvConf(args.positionId,resultHandler);
            }
        }

        public static class getEmployeeRecomPositionByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmployeeRecomPositionByIds_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmployeeRecomPositionByIds() {
                super("getEmployeeRecomPositionByIds");
            }

            public getEmployeeRecomPositionByIds_args getEmptyArgsInstance() {
                return new getEmployeeRecomPositionByIds_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmployeeRecomPositionByIds_result result = new getEmployeeRecomPositionByIds_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmployeeRecomPositionByIds_result result = new getEmployeeRecomPositionByIds_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmployeeRecomPositionByIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmployeeRecomPositionByIds(args.recomPushId, args.companyId, args.type, args.pageNum, args.pageSize,resultHandler);
            }
        }

        public static class updatePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePosition_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updatePosition() {
                super("updatePosition");
            }

            public updatePosition_args getEmptyArgsInstance() {
                return new updatePosition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updatePosition_result result = new updatePosition_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updatePosition_result result = new updatePosition_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updatePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updatePosition(args.param,resultHandler);
            }
        }

        public static class getMiniPositionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiniPositionList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getMiniPositionList() {
                super("getMiniPositionList");
            }

            public getMiniPositionList_args getEmptyArgsInstance() {
                return new getMiniPositionList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getMiniPositionList_result result = new getMiniPositionList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getMiniPositionList_result result = new getMiniPositionList_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getMiniPositionList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getMiniPositionList(args.accountId, args.keyword, args.page, args.pageSize,resultHandler);
            }
        }

        public static class getMiniPositionSuggest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiniPositionSuggest_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getMiniPositionSuggest() {
                super("getMiniPositionSuggest");
            }

            public getMiniPositionSuggest_args getEmptyArgsInstance() {
                return new getMiniPositionSuggest_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getMiniPositionSuggest_result result = new getMiniPositionSuggest_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getMiniPositionSuggest_result result = new getMiniPositionSuggest_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getMiniPositionSuggest_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getMiniPositionSuggest(args.accountId, args.keyword, args.page, args.pageSize,resultHandler);
            }
        }

        public static class getMiniPositionNumStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiniPositionNumStatus_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getMiniPositionNumStatus() {
                super("getMiniPositionNumStatus");
            }

            public getMiniPositionNumStatus_args getEmptyArgsInstance() {
                return new getMiniPositionNumStatus_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getMiniPositionNumStatus_result result = new getMiniPositionNumStatus_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getMiniPositionNumStatus_result result = new getMiniPositionNumStatus_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getMiniPositionNumStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getMiniPositionNumStatus(args.accountId, args.keyword, args.page, args.pageSize,resultHandler);
            }
        }

        public static class getMiniPositionDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiniPositionDetail_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getMiniPositionDetail() {
                super("getMiniPositionDetail");
            }

            public getMiniPositionDetail_args getEmptyArgsInstance() {
                return new getMiniPositionDetail_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getMiniPositionDetail_result result = new getMiniPositionDetail_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getMiniPositionDetail_result result = new getMiniPositionDetail_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getMiniPositionDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getMiniPositionDetail(args.positionId,resultHandler);
            }
        }

        public static class getMiniPositionShare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMiniPositionShare_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getMiniPositionShare() {
                super("getMiniPositionShare");
            }

            public getMiniPositionShare_args getEmptyArgsInstance() {
                return new getMiniPositionShare_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getMiniPositionShare_result result = new getMiniPositionShare_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getMiniPositionShare_result result = new getMiniPositionShare_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getMiniPositionShare_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getMiniPositionShare(args.positionId,resultHandler);
            }
        }

        public static class getFeatureByPId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFeatureByPId_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getFeatureByPId() {
                super("getFeatureByPId");
            }

            public getFeatureByPId_args getEmptyArgsInstance() {
                return new getFeatureByPId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getFeatureByPId_result result = new getFeatureByPId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getFeatureByPId_result result = new getFeatureByPId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFeatureByPId_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getFeatureByPId(args.pid,resultHandler);
            }
        }

        public static class updatePositionFeature<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePositionFeature_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updatePositionFeature() {
                super("updatePositionFeature");
            }

            public updatePositionFeature_args getEmptyArgsInstance() {
                return new updatePositionFeature_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updatePositionFeature_result result = new updatePositionFeature_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updatePositionFeature_result result = new updatePositionFeature_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updatePositionFeature_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updatePositionFeature(args.pid, args.fid,resultHandler);
            }
        }

        public static class updatePositionFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePositionFeatures_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updatePositionFeatures() {
                super("updatePositionFeatures");
            }

            public updatePositionFeatures_args getEmptyArgsInstance() {
                return new updatePositionFeatures_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updatePositionFeatures_result result = new updatePositionFeatures_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updatePositionFeatures_result result = new updatePositionFeatures_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updatePositionFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updatePositionFeatures(args.pid, args.fidList,resultHandler);
            }
        }

        public static class updatePositionFeatureBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePositionFeatureBatch_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updatePositionFeatureBatch() {
                super("updatePositionFeatureBatch");
            }

            public updatePositionFeatureBatch_args getEmptyArgsInstance() {
                return new updatePositionFeatureBatch_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updatePositionFeatureBatch_result result = new updatePositionFeatureBatch_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updatePositionFeatureBatch_result result = new updatePositionFeatureBatch_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updatePositionFeatureBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updatePositionFeatureBatch(args.featureList,resultHandler);
            }
        }

        public static class getPositionFeatureBetch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionFeatureBetch_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionFeatureBetch() {
                super("getPositionFeatureBetch");
            }

            public getPositionFeatureBetch_args getEmptyArgsInstance() {
                return new getPositionFeatureBetch_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionFeatureBetch_result result = new getPositionFeatureBetch_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionFeatureBetch_result result = new getPositionFeatureBetch_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionFeatureBetch_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionFeatureBetch(args.pidList,resultHandler);
            }
        }

    }

    public static class getResources_args implements org.apache.thrift.TBase<getResources_args, getResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResources_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResources_args");

        private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResources_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResources_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            QUERY((short)1, "query");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // QUERY
                        return QUERY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResources_args.class, metaDataMap);
        }

        public getResources_args() {
        }

        public getResources_args(
                com.moseeker.thrift.gen.common.struct.CommonQuery query)
        {
            this();
            this.query = query;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResources_args(getResources_args other) {
            if (other.isSetQuery()) {
                this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
            }
        }

        public getResources_args deepCopy() {
            return new getResources_args(this);
        }

        @Override
        public void clear() {
            this.query = null;
        }

        public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
            return this.query;
        }

        public getResources_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
            this.query = query;
            return this;
        }

        public void unsetQuery() {
            this.query = null;
        }

        /** Returns true if field query is set (has been assigned a value) and false otherwise */
        public boolean isSetQuery() {
            return this.query != null;
        }

        public void setQueryIsSet(boolean value) {
            if (!value) {
                this.query = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case QUERY:
                    if (value == null) {
                        unsetQuery();
                    } else {
                        setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case QUERY:
                    return getQuery();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case QUERY:
                    return isSetQuery();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getResources_args)
                return this.equals((getResources_args)that);
            return false;
        }

        public boolean equals(getResources_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_query = true && this.isSetQuery();
            boolean that_present_query = true && that.isSetQuery();
            if (this_present_query || that_present_query) {
                if (!(this_present_query && that_present_query))
                    return false;
                if (!this.query.equals(that.query))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
            if (isSetQuery())
                hashCode = hashCode * 8191 + query.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getResources_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQuery()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getResources_args(");
            boolean first = true;

            sb.append("query:");
            if (this.query == null) {
                sb.append("null");
            } else {
                sb.append(this.query);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (query != null) {
                query.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResources_argsStandardScheme getScheme() {
                return new getResources_argsStandardScheme();
            }
        }

        private static class getResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResources_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResources_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // QUERY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                                struct.query.read(iprot);
                                struct.setQueryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResources_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.query != null) {
                    oprot.writeFieldBegin(QUERY_FIELD_DESC);
                    struct.query.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResources_argsTupleScheme getScheme() {
                return new getResources_argsTupleScheme();
            }
        }

        private static class getResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResources_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResources_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetQuery()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetQuery()) {
                    struct.query.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResources_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                    struct.query.read(iprot);
                    struct.setQueryIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getResources_result implements org.apache.thrift.TBase<getResources_result, getResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResources_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResources_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResources_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResources_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResources_result.class, metaDataMap);
        }

        public getResources_result() {
        }

        public getResources_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getResources_result(getResources_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getResources_result deepCopy() {
            return new getResources_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getResources_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getResources_result)
                return this.equals((getResources_result)that);
            return false;
        }

        public boolean equals(getResources_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getResources_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getResources_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResources_resultStandardScheme getScheme() {
                return new getResources_resultStandardScheme();
            }
        }

        private static class getResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResources_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getResources_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getResources_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getResources_resultTupleScheme getScheme() {
                return new getResources_resultTupleScheme();
            }
        }

        private static class getResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResources_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getResources_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getResources_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendedPositions_args implements org.apache.thrift.TBase<getRecommendedPositions_args, getRecommendedPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendedPositions_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendedPositions_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendedPositions_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendedPositions_argsTupleSchemeFactory();

        public int pid; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short)1, "pid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendedPositions_args.class, metaDataMap);
        }

        public getRecommendedPositions_args() {
        }

        public getRecommendedPositions_args(
                int pid)
        {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendedPositions_args(getRecommendedPositions_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public getRecommendedPositions_args deepCopy() {
            return new getRecommendedPositions_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public getRecommendedPositions_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendedPositions_args)
                return this.equals((getRecommendedPositions_args)that);
            return false;
        }

        public boolean equals(getRecommendedPositions_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + pid;

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendedPositions_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendedPositions_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendedPositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendedPositions_argsStandardScheme getScheme() {
                return new getRecommendedPositions_argsStandardScheme();
            }
        }

        private static class getRecommendedPositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendedPositions_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendedPositions_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendedPositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendedPositions_argsTupleScheme getScheme() {
                return new getRecommendedPositions_argsTupleScheme();
            }
        }

        private static class getRecommendedPositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendedPositions_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendedPositions_result implements org.apache.thrift.TBase<getRecommendedPositions_result, getRecommendedPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendedPositions_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendedPositions_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendedPositions_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendedPositions_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendedPositions_result.class, metaDataMap);
        }

        public getRecommendedPositions_result() {
        }

        public getRecommendedPositions_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendedPositions_result(getRecommendedPositions_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getRecommendedPositions_result deepCopy() {
            return new getRecommendedPositions_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getRecommendedPositions_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendedPositions_result)
                return this.equals((getRecommendedPositions_result)that);
            return false;
        }

        public boolean equals(getRecommendedPositions_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendedPositions_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendedPositions_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendedPositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendedPositions_resultStandardScheme getScheme() {
                return new getRecommendedPositions_resultStandardScheme();
            }
        }

        private static class getRecommendedPositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendedPositions_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendedPositions_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendedPositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendedPositions_resultTupleScheme getScheme() {
                return new getRecommendedPositions_resultTupleScheme();
            }
        }

        private static class getRecommendedPositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendedPositions_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class verifyCustomize_args implements org.apache.thrift.TBase<verifyCustomize_args, verifyCustomize_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCustomize_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCustomize_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyCustomize_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyCustomize_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCustomize_args.class, metaDataMap);
        }

        public verifyCustomize_args() {
        }

        public verifyCustomize_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyCustomize_args(verifyCustomize_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public verifyCustomize_args deepCopy() {
            return new verifyCustomize_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public verifyCustomize_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyCustomize_args)
                return this.equals((verifyCustomize_args)that);
            return false;
        }

        public boolean equals(verifyCustomize_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(verifyCustomize_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyCustomize_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class verifyCustomize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyCustomize_argsStandardScheme getScheme() {
                return new verifyCustomize_argsStandardScheme();
            }
        }

        private static class verifyCustomize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyCustomize_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCustomize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCustomize_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class verifyCustomize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyCustomize_argsTupleScheme getScheme() {
                return new verifyCustomize_argsTupleScheme();
            }
        }

        private static class verifyCustomize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyCustomize_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, verifyCustomize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, verifyCustomize_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class verifyCustomize_result implements org.apache.thrift.TBase<verifyCustomize_result, verifyCustomize_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCustomize_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCustomize_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyCustomize_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyCustomize_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCustomize_result.class, metaDataMap);
        }

        public verifyCustomize_result() {
        }

        public verifyCustomize_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public verifyCustomize_result(verifyCustomize_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public verifyCustomize_result deepCopy() {
            return new verifyCustomize_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public verifyCustomize_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof verifyCustomize_result)
                return this.equals((verifyCustomize_result)that);
            return false;
        }

        public boolean equals(verifyCustomize_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(verifyCustomize_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyCustomize_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class verifyCustomize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyCustomize_resultStandardScheme getScheme() {
                return new verifyCustomize_resultStandardScheme();
            }
        }

        private static class verifyCustomize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyCustomize_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCustomize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCustomize_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class verifyCustomize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public verifyCustomize_resultTupleScheme getScheme() {
                return new verifyCustomize_resultTupleScheme();
            }
        }

        private static class verifyCustomize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyCustomize_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, verifyCustomize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, verifyCustomize_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionById_args implements org.apache.thrift.TBase<getPositionById_args, getPositionById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionById_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionById_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionById_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionById_args.class, metaDataMap);
        }

        public getPositionById_args() {
        }

        public getPositionById_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionById_args(getPositionById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public getPositionById_args deepCopy() {
            return new getPositionById_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getPositionById_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionById_args)
                return this.equals((getPositionById_args)that);
            return false;
        }

        public boolean equals(getPositionById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionById_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionById_argsStandardScheme getScheme() {
                return new getPositionById_argsStandardScheme();
            }
        }

        private static class getPositionById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionById_argsTupleScheme getScheme() {
                return new getPositionById_argsTupleScheme();
            }
        }

        private static class getPositionById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionById_result implements org.apache.thrift.TBase<getPositionById_result, getPositionById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionById_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionById_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionById_result.class, metaDataMap);
        }

        public getPositionById_result() {
        }

        public getPositionById_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionById_result(getPositionById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPositionById_result deepCopy() {
            return new getPositionById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionById_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionById_result)
                return this.equals((getPositionById_result)that);
            return false;
        }

        public boolean equals(getPositionById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionById_resultStandardScheme getScheme() {
                return new getPositionById_resultStandardScheme();
            }
        }

        private static class getPositionById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionById_resultTupleScheme getScheme() {
                return new getPositionById_resultTupleScheme();
            }
        }

        private static class getPositionById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class CustomField_args implements org.apache.thrift.TBase<CustomField_args, CustomField_args._Fields>, java.io.Serializable, Cloneable, Comparable<CustomField_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CustomField_args");

        private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CustomField_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CustomField_argsTupleSchemeFactory();

        public java.lang.String param; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM((short)1, "param");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM
                        return PARAM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CustomField_args.class, metaDataMap);
        }

        public CustomField_args() {
        }

        public CustomField_args(
                java.lang.String param)
        {
            this();
            this.param = param;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public CustomField_args(CustomField_args other) {
            if (other.isSetParam()) {
                this.param = other.param;
            }
        }

        public CustomField_args deepCopy() {
            return new CustomField_args(this);
        }

        @Override
        public void clear() {
            this.param = null;
        }

        public java.lang.String getParam() {
            return this.param;
        }

        public CustomField_args setParam(java.lang.String param) {
            this.param = param;
            return this;
        }

        public void unsetParam() {
            this.param = null;
        }

        /** Returns true if field param is set (has been assigned a value) and false otherwise */
        public boolean isSetParam() {
            return this.param != null;
        }

        public void setParamIsSet(boolean value) {
            if (!value) {
                this.param = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAM:
                    if (value == null) {
                        unsetParam();
                    } else {
                        setParam((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM:
                    return getParam();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAM:
                    return isSetParam();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof CustomField_args)
                return this.equals((CustomField_args)that);
            return false;
        }

        public boolean equals(CustomField_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_param = true && this.isSetParam();
            boolean that_present_param = true && that.isSetParam();
            if (this_present_param || that_present_param) {
                if (!(this_present_param && that_present_param))
                    return false;
                if (!this.param.equals(that.param))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
            if (isSetParam())
                hashCode = hashCode * 8191 + param.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(CustomField_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("CustomField_args(");
            boolean first = true;

            sb.append("param:");
            if (this.param == null) {
                sb.append("null");
            } else {
                sb.append(this.param);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class CustomField_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public CustomField_argsStandardScheme getScheme() {
                return new CustomField_argsStandardScheme();
            }
        }

        private static class CustomField_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CustomField_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, CustomField_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.param = iprot.readString();
                                struct.setParamIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, CustomField_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.param != null) {
                    oprot.writeFieldBegin(PARAM_FIELD_DESC);
                    oprot.writeString(struct.param);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class CustomField_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public CustomField_argsTupleScheme getScheme() {
                return new CustomField_argsTupleScheme();
            }
        }

        private static class CustomField_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CustomField_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, CustomField_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParam()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParam()) {
                    oprot.writeString(struct.param);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, CustomField_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.param = iprot.readString();
                    struct.setParamIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class CustomField_result implements org.apache.thrift.TBase<CustomField_result, CustomField_result._Fields>, java.io.Serializable, Cloneable, Comparable<CustomField_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CustomField_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CustomField_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CustomField_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CustomField_result.class, metaDataMap);
        }

        public CustomField_result() {
        }

        public CustomField_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public CustomField_result(CustomField_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public CustomField_result deepCopy() {
            return new CustomField_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public CustomField_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof CustomField_result)
                return this.equals((CustomField_result)that);
            return false;
        }

        public boolean equals(CustomField_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(CustomField_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("CustomField_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class CustomField_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public CustomField_resultStandardScheme getScheme() {
                return new CustomField_resultStandardScheme();
            }
        }

        private static class CustomField_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CustomField_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, CustomField_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, CustomField_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class CustomField_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public CustomField_resultTupleScheme getScheme() {
                return new CustomField_resultTupleScheme();
            }
        }

        private static class CustomField_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CustomField_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, CustomField_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, CustomField_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ifAllowRefresh_args implements org.apache.thrift.TBase<ifAllowRefresh_args, ifAllowRefresh_args._Fields>, java.io.Serializable, Cloneable, Comparable<ifAllowRefresh_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ifAllowRefresh_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("account_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ifAllowRefresh_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ifAllowRefresh_argsTupleSchemeFactory();

        public int positionId; // required
        public int account_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId"),
            ACCOUNT_ID((short)2, "account_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    case 2: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private static final int __ACCOUNT_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("account_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ifAllowRefresh_args.class, metaDataMap);
        }

        public ifAllowRefresh_args() {
        }

        public ifAllowRefresh_args(
                int positionId,
                int account_id)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.account_id = account_id;
            setAccount_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ifAllowRefresh_args(ifAllowRefresh_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
            this.account_id = other.account_id;
        }

        public ifAllowRefresh_args deepCopy() {
            return new ifAllowRefresh_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
            setAccount_idIsSet(false);
            this.account_id = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public ifAllowRefresh_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getAccount_id() {
            return this.account_id;
        }

        public ifAllowRefresh_args setAccount_id(int account_id) {
            this.account_id = account_id;
            setAccount_idIsSet(true);
            return this;
        }

        public void unsetAccount_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
        }

        /** Returns true if field account_id is set (has been assigned a value) and false otherwise */
        public boolean isSetAccount_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
        }

        public void setAccount_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccount_id();
                    } else {
                        setAccount_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

                case ACCOUNT_ID:
                    return getAccount_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
                case ACCOUNT_ID:
                    return isSetAccount_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ifAllowRefresh_args)
                return this.equals((ifAllowRefresh_args)that);
            return false;
        }

        public boolean equals(ifAllowRefresh_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_account_id = true;
            boolean that_present_account_id = true;
            if (this_present_account_id || that_present_account_id) {
                if (!(this_present_account_id && that_present_account_id))
                    return false;
                if (this.account_id != that.account_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + account_id;

            return hashCode;
        }

        @Override
        public int compareTo(ifAllowRefresh_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetAccount_id()).compareTo(other.isSetAccount_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccount_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_id, other.account_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ifAllowRefresh_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("account_id:");
            sb.append(this.account_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ifAllowRefresh_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ifAllowRefresh_argsStandardScheme getScheme() {
                return new ifAllowRefresh_argsStandardScheme();
            }
        }

        private static class ifAllowRefresh_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ifAllowRefresh_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ifAllowRefresh_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.account_id = iprot.readI32();
                                struct.setAccount_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ifAllowRefresh_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.account_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ifAllowRefresh_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ifAllowRefresh_argsTupleScheme getScheme() {
                return new ifAllowRefresh_argsTupleScheme();
            }
        }

        private static class ifAllowRefresh_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ifAllowRefresh_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ifAllowRefresh_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                if (struct.isSetAccount_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetAccount_id()) {
                    oprot.writeI32(struct.account_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ifAllowRefresh_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.account_id = iprot.readI32();
                    struct.setAccount_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ifAllowRefresh_result implements org.apache.thrift.TBase<ifAllowRefresh_result, ifAllowRefresh_result._Fields>, java.io.Serializable, Cloneable, Comparable<ifAllowRefresh_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ifAllowRefresh_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ifAllowRefresh_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ifAllowRefresh_resultTupleSchemeFactory();

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ifAllowRefresh_result.class, metaDataMap);
        }

        public ifAllowRefresh_result() {
        }

        public ifAllowRefresh_result(
                boolean success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ifAllowRefresh_result(ifAllowRefresh_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public ifAllowRefresh_result deepCopy() {
            return new ifAllowRefresh_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public ifAllowRefresh_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Boolean)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ifAllowRefresh_result)
                return this.equals((ifAllowRefresh_result)that);
            return false;
        }

        public boolean equals(ifAllowRefresh_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

            return hashCode;
        }

        @Override
        public int compareTo(ifAllowRefresh_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ifAllowRefresh_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ifAllowRefresh_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ifAllowRefresh_resultStandardScheme getScheme() {
                return new ifAllowRefresh_resultStandardScheme();
            }
        }

        private static class ifAllowRefresh_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ifAllowRefresh_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ifAllowRefresh_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ifAllowRefresh_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ifAllowRefresh_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ifAllowRefresh_resultTupleScheme getScheme() {
                return new ifAllowRefresh_resultTupleScheme();
            }
        }

        private static class ifAllowRefresh_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ifAllowRefresh_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ifAllowRefresh_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ifAllowRefresh_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdPartyPositions_args implements org.apache.thrift.TBase<getThirdPartyPositions_args, getThirdPartyPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdPartyPositions_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdPartyPositions_args");

        private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdPartyPositions_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdPartyPositions_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            QUERY((short)1, "query");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // QUERY
                        return QUERY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdPartyPositions_args.class, metaDataMap);
        }

        public getThirdPartyPositions_args() {
        }

        public getThirdPartyPositions_args(
                com.moseeker.thrift.gen.common.struct.CommonQuery query)
        {
            this();
            this.query = query;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdPartyPositions_args(getThirdPartyPositions_args other) {
            if (other.isSetQuery()) {
                this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
            }
        }

        public getThirdPartyPositions_args deepCopy() {
            return new getThirdPartyPositions_args(this);
        }

        @Override
        public void clear() {
            this.query = null;
        }

        public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
            return this.query;
        }

        public getThirdPartyPositions_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
            this.query = query;
            return this;
        }

        public void unsetQuery() {
            this.query = null;
        }

        /** Returns true if field query is set (has been assigned a value) and false otherwise */
        public boolean isSetQuery() {
            return this.query != null;
        }

        public void setQueryIsSet(boolean value) {
            if (!value) {
                this.query = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case QUERY:
                    if (value == null) {
                        unsetQuery();
                    } else {
                        setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case QUERY:
                    return getQuery();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case QUERY:
                    return isSetQuery();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdPartyPositions_args)
                return this.equals((getThirdPartyPositions_args)that);
            return false;
        }

        public boolean equals(getThirdPartyPositions_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_query = true && this.isSetQuery();
            boolean that_present_query = true && that.isSetQuery();
            if (this_present_query || that_present_query) {
                if (!(this_present_query && that_present_query))
                    return false;
                if (!this.query.equals(that.query))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
            if (isSetQuery())
                hashCode = hashCode * 8191 + query.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getThirdPartyPositions_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQuery()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdPartyPositions_args(");
            boolean first = true;

            sb.append("query:");
            if (this.query == null) {
                sb.append("null");
            } else {
                sb.append(this.query);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (query != null) {
                query.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdPartyPositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositions_argsStandardScheme getScheme() {
                return new getThirdPartyPositions_argsStandardScheme();
            }
        }

        private static class getThirdPartyPositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdPartyPositions_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdPartyPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // QUERY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                                struct.query.read(iprot);
                                struct.setQueryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdPartyPositions_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.query != null) {
                    oprot.writeFieldBegin(QUERY_FIELD_DESC);
                    struct.query.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdPartyPositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositions_argsTupleScheme getScheme() {
                return new getThirdPartyPositions_argsTupleScheme();
            }
        }

        private static class getThirdPartyPositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdPartyPositions_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetQuery()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetQuery()) {
                    struct.query.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                    struct.query.read(iprot);
                    struct.setQueryIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdPartyPositions_result implements org.apache.thrift.TBase<getThirdPartyPositions_result, getThirdPartyPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdPartyPositions_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdPartyPositions_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdPartyPositions_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdPartyPositions_resultTupleSchemeFactory();

        public java.util.List<java.lang.String> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdPartyPositions_result.class, metaDataMap);
        }

        public getThirdPartyPositions_result() {
        }

        public getThirdPartyPositions_result(
                java.util.List<java.lang.String> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdPartyPositions_result(getThirdPartyPositions_result other) {
            if (other.isSetSuccess()) {
                java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
                this.success = __this__success;
            }
        }

        public getThirdPartyPositions_result deepCopy() {
            return new getThirdPartyPositions_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<java.lang.String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(java.lang.String elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<java.lang.String>();
            }
            this.success.add(elem);
        }

        public java.util.List<java.lang.String> getSuccess() {
            return this.success;
        }

        public getThirdPartyPositions_result setSuccess(java.util.List<java.lang.String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<java.lang.String>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdPartyPositions_result)
                return this.equals((getThirdPartyPositions_result)that);
            return false;
        }

        public boolean equals(getThirdPartyPositions_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getThirdPartyPositions_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdPartyPositions_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdPartyPositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositions_resultStandardScheme getScheme() {
                return new getThirdPartyPositions_resultStandardScheme();
            }
        }

        private static class getThirdPartyPositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdPartyPositions_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdPartyPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                                    java.lang.String _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = iprot.readString();
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdPartyPositions_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (java.lang.String _iter3 : struct.success)
                        {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdPartyPositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositions_resultTupleScheme getScheme() {
                return new getThirdPartyPositions_resultTupleScheme();
            }
        }

        private static class getThirdPartyPositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdPartyPositions_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (java.lang.String _iter4 : struct.success)
                        {
                            oprot.writeString(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
                        java.lang.String _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = iprot.readString();
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchHandlerJobPostion_args implements org.apache.thrift.TBase<batchHandlerJobPostion_args, batchHandlerJobPostion_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchHandlerJobPostion_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchHandlerJobPostion_args");

        private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchHandlerJobPostion_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchHandlerJobPostion_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BATCH_HANDLER_JOB_POSTION
                        return BATCH_HANDLER_JOB_POSTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchHandlerJobPostion_args.class, metaDataMap);
        }

        public batchHandlerJobPostion_args() {
        }

        public batchHandlerJobPostion_args(
                com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
        {
            this();
            this.batchHandlerJobPostion = batchHandlerJobPostion;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchHandlerJobPostion_args(batchHandlerJobPostion_args other) {
            if (other.isSetBatchHandlerJobPostion()) {
                this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
            }
        }

        public batchHandlerJobPostion_args deepCopy() {
            return new batchHandlerJobPostion_args(this);
        }

        @Override
        public void clear() {
            this.batchHandlerJobPostion = null;
        }

        public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
            return this.batchHandlerJobPostion;
        }

        public batchHandlerJobPostion_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
            this.batchHandlerJobPostion = batchHandlerJobPostion;
            return this;
        }

        public void unsetBatchHandlerJobPostion() {
            this.batchHandlerJobPostion = null;
        }

        /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
        public boolean isSetBatchHandlerJobPostion() {
            return this.batchHandlerJobPostion != null;
        }

        public void setBatchHandlerJobPostionIsSet(boolean value) {
            if (!value) {
                this.batchHandlerJobPostion = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    if (value == null) {
                        unsetBatchHandlerJobPostion();
                    } else {
                        setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    return getBatchHandlerJobPostion();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    return isSetBatchHandlerJobPostion();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchHandlerJobPostion_args)
                return this.equals((batchHandlerJobPostion_args)that);
            return false;
        }

        public boolean equals(batchHandlerJobPostion_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
            boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
            if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
                if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
                    return false;
                if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
            if (isSetBatchHandlerJobPostion())
                hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchHandlerJobPostion_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBatchHandlerJobPostion()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchHandlerJobPostion_args(");
            boolean first = true;

            sb.append("batchHandlerJobPostion:");
            if (this.batchHandlerJobPostion == null) {
                sb.append("null");
            } else {
                sb.append(this.batchHandlerJobPostion);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (batchHandlerJobPostion != null) {
                batchHandlerJobPostion.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchHandlerJobPostion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchHandlerJobPostion_argsStandardScheme getScheme() {
                return new batchHandlerJobPostion_argsStandardScheme();
            }
        }

        private static class batchHandlerJobPostion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchHandlerJobPostion_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchHandlerJobPostion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BATCH_HANDLER_JOB_POSTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                                struct.batchHandlerJobPostion.read(iprot);
                                struct.setBatchHandlerJobPostionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchHandlerJobPostion_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.batchHandlerJobPostion != null) {
                    oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
                    struct.batchHandlerJobPostion.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchHandlerJobPostion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchHandlerJobPostion_argsTupleScheme getScheme() {
                return new batchHandlerJobPostion_argsTupleScheme();
            }
        }

        private static class batchHandlerJobPostion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchHandlerJobPostion_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchHandlerJobPostion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBatchHandlerJobPostion()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBatchHandlerJobPostion()) {
                    struct.batchHandlerJobPostion.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchHandlerJobPostion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                    struct.batchHandlerJobPostion.read(iprot);
                    struct.setBatchHandlerJobPostionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchHandlerJobPostion_result implements org.apache.thrift.TBase<batchHandlerJobPostion_result, batchHandlerJobPostion_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchHandlerJobPostion_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchHandlerJobPostion_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchHandlerJobPostion_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchHandlerJobPostion_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchHandlerJobPostion_result.class, metaDataMap);
        }

        public batchHandlerJobPostion_result() {
        }

        public batchHandlerJobPostion_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchHandlerJobPostion_result(batchHandlerJobPostion_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public batchHandlerJobPostion_result deepCopy() {
            return new batchHandlerJobPostion_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchHandlerJobPostion_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchHandlerJobPostion_result)
                return this.equals((batchHandlerJobPostion_result)that);
            return false;
        }

        public boolean equals(batchHandlerJobPostion_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchHandlerJobPostion_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchHandlerJobPostion_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchHandlerJobPostion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchHandlerJobPostion_resultStandardScheme getScheme() {
                return new batchHandlerJobPostion_resultStandardScheme();
            }
        }

        private static class batchHandlerJobPostion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchHandlerJobPostion_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchHandlerJobPostion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchHandlerJobPostion_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchHandlerJobPostion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchHandlerJobPostion_resultTupleScheme getScheme() {
                return new batchHandlerJobPostion_resultTupleScheme();
            }
        }

        private static class batchHandlerJobPostion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchHandlerJobPostion_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchHandlerJobPostion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchHandlerJobPostion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class saveAndSync_args implements org.apache.thrift.TBase<saveAndSync_args, saveAndSync_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveAndSync_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAndSync_args");

        private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveAndSync_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveAndSync_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BATCH_HANDLER_JOB_POSTION
                        return BATCH_HANDLER_JOB_POSTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAndSync_args.class, metaDataMap);
        }

        public saveAndSync_args() {
        }

        public saveAndSync_args(
                com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
        {
            this();
            this.batchHandlerJobPostion = batchHandlerJobPostion;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public saveAndSync_args(saveAndSync_args other) {
            if (other.isSetBatchHandlerJobPostion()) {
                this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
            }
        }

        public saveAndSync_args deepCopy() {
            return new saveAndSync_args(this);
        }

        @Override
        public void clear() {
            this.batchHandlerJobPostion = null;
        }

        public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
            return this.batchHandlerJobPostion;
        }

        public saveAndSync_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
            this.batchHandlerJobPostion = batchHandlerJobPostion;
            return this;
        }

        public void unsetBatchHandlerJobPostion() {
            this.batchHandlerJobPostion = null;
        }

        /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
        public boolean isSetBatchHandlerJobPostion() {
            return this.batchHandlerJobPostion != null;
        }

        public void setBatchHandlerJobPostionIsSet(boolean value) {
            if (!value) {
                this.batchHandlerJobPostion = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    if (value == null) {
                        unsetBatchHandlerJobPostion();
                    } else {
                        setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    return getBatchHandlerJobPostion();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case BATCH_HANDLER_JOB_POSTION:
                    return isSetBatchHandlerJobPostion();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof saveAndSync_args)
                return this.equals((saveAndSync_args)that);
            return false;
        }

        public boolean equals(saveAndSync_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
            boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
            if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
                if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
                    return false;
                if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
            if (isSetBatchHandlerJobPostion())
                hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(saveAndSync_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBatchHandlerJobPostion()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("saveAndSync_args(");
            boolean first = true;

            sb.append("batchHandlerJobPostion:");
            if (this.batchHandlerJobPostion == null) {
                sb.append("null");
            } else {
                sb.append(this.batchHandlerJobPostion);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (batchHandlerJobPostion != null) {
                batchHandlerJobPostion.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class saveAndSync_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveAndSync_argsStandardScheme getScheme() {
                return new saveAndSync_argsStandardScheme();
            }
        }

        private static class saveAndSync_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveAndSync_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, saveAndSync_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BATCH_HANDLER_JOB_POSTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                                struct.batchHandlerJobPostion.read(iprot);
                                struct.setBatchHandlerJobPostionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, saveAndSync_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.batchHandlerJobPostion != null) {
                    oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
                    struct.batchHandlerJobPostion.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class saveAndSync_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveAndSync_argsTupleScheme getScheme() {
                return new saveAndSync_argsTupleScheme();
            }
        }

        private static class saveAndSync_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveAndSync_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, saveAndSync_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBatchHandlerJobPostion()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBatchHandlerJobPostion()) {
                    struct.batchHandlerJobPostion.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, saveAndSync_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                    struct.batchHandlerJobPostion.read(iprot);
                    struct.setBatchHandlerJobPostionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class saveAndSync_result implements org.apache.thrift.TBase<saveAndSync_result, saveAndSync_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveAndSync_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAndSync_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveAndSync_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveAndSync_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAndSync_result.class, metaDataMap);
        }

        public saveAndSync_result() {
        }

        public saveAndSync_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public saveAndSync_result(saveAndSync_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public saveAndSync_result deepCopy() {
            return new saveAndSync_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public saveAndSync_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof saveAndSync_result)
                return this.equals((saveAndSync_result)that);
            return false;
        }

        public boolean equals(saveAndSync_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(saveAndSync_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("saveAndSync_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class saveAndSync_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveAndSync_resultStandardScheme getScheme() {
                return new saveAndSync_resultStandardScheme();
            }
        }

        private static class saveAndSync_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveAndSync_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, saveAndSync_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, saveAndSync_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class saveAndSync_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public saveAndSync_resultTupleScheme getScheme() {
                return new saveAndSync_resultTupleScheme();
            }
        }

        private static class saveAndSync_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveAndSync_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, saveAndSync_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, saveAndSync_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteJobposition_args implements org.apache.thrift.TBase<deleteJobposition_args, deleteJobposition_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJobposition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJobposition_args");

        private static final org.apache.thrift.protocol.TField DELE_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("delePostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteJobposition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteJobposition_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.DelePostion delePostion; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DELE_POSTION((short)1, "delePostion");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DELE_POSTION
                        return DELE_POSTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DELE_POSTION, new org.apache.thrift.meta_data.FieldMetaData("delePostion", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.DelePostion.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJobposition_args.class, metaDataMap);
        }

        public deleteJobposition_args() {
        }

        public deleteJobposition_args(
                com.moseeker.thrift.gen.position.struct.DelePostion delePostion)
        {
            this();
            this.delePostion = delePostion;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteJobposition_args(deleteJobposition_args other) {
            if (other.isSetDelePostion()) {
                this.delePostion = new com.moseeker.thrift.gen.position.struct.DelePostion(other.delePostion);
            }
        }

        public deleteJobposition_args deepCopy() {
            return new deleteJobposition_args(this);
        }

        @Override
        public void clear() {
            this.delePostion = null;
        }

        public com.moseeker.thrift.gen.position.struct.DelePostion getDelePostion() {
            return this.delePostion;
        }

        public deleteJobposition_args setDelePostion(com.moseeker.thrift.gen.position.struct.DelePostion delePostion) {
            this.delePostion = delePostion;
            return this;
        }

        public void unsetDelePostion() {
            this.delePostion = null;
        }

        /** Returns true if field delePostion is set (has been assigned a value) and false otherwise */
        public boolean isSetDelePostion() {
            return this.delePostion != null;
        }

        public void setDelePostionIsSet(boolean value) {
            if (!value) {
                this.delePostion = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case DELE_POSTION:
                    if (value == null) {
                        unsetDelePostion();
                    } else {
                        setDelePostion((com.moseeker.thrift.gen.position.struct.DelePostion)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DELE_POSTION:
                    return getDelePostion();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DELE_POSTION:
                    return isSetDelePostion();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteJobposition_args)
                return this.equals((deleteJobposition_args)that);
            return false;
        }

        public boolean equals(deleteJobposition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_delePostion = true && this.isSetDelePostion();
            boolean that_present_delePostion = true && that.isSetDelePostion();
            if (this_present_delePostion || that_present_delePostion) {
                if (!(this_present_delePostion && that_present_delePostion))
                    return false;
                if (!this.delePostion.equals(that.delePostion))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDelePostion()) ? 131071 : 524287);
            if (isSetDelePostion())
                hashCode = hashCode * 8191 + delePostion.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteJobposition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetDelePostion()).compareTo(other.isSetDelePostion());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDelePostion()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delePostion, other.delePostion);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteJobposition_args(");
            boolean first = true;

            sb.append("delePostion:");
            if (this.delePostion == null) {
                sb.append("null");
            } else {
                sb.append(this.delePostion);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (delePostion != null) {
                delePostion.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteJobposition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteJobposition_argsStandardScheme getScheme() {
                return new deleteJobposition_argsStandardScheme();
            }
        }

        private static class deleteJobposition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteJobposition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJobposition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DELE_POSTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.delePostion = new com.moseeker.thrift.gen.position.struct.DelePostion();
                                struct.delePostion.read(iprot);
                                struct.setDelePostionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJobposition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.delePostion != null) {
                    oprot.writeFieldBegin(DELE_POSTION_FIELD_DESC);
                    struct.delePostion.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteJobposition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteJobposition_argsTupleScheme getScheme() {
                return new deleteJobposition_argsTupleScheme();
            }
        }

        private static class deleteJobposition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteJobposition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteJobposition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDelePostion()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDelePostion()) {
                    struct.delePostion.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteJobposition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.delePostion = new com.moseeker.thrift.gen.position.struct.DelePostion();
                    struct.delePostion.read(iprot);
                    struct.setDelePostionIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteJobposition_result implements org.apache.thrift.TBase<deleteJobposition_result, deleteJobposition_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJobposition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJobposition_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteJobposition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteJobposition_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJobposition_result.class, metaDataMap);
        }

        public deleteJobposition_result() {
        }

        public deleteJobposition_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteJobposition_result(deleteJobposition_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public deleteJobposition_result deepCopy() {
            return new deleteJobposition_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public deleteJobposition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteJobposition_result)
                return this.equals((deleteJobposition_result)that);
            return false;
        }

        public boolean equals(deleteJobposition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteJobposition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteJobposition_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteJobposition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteJobposition_resultStandardScheme getScheme() {
                return new deleteJobposition_resultStandardScheme();
            }
        }

        private static class deleteJobposition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteJobposition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJobposition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJobposition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteJobposition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteJobposition_resultTupleScheme getScheme() {
                return new deleteJobposition_resultTupleScheme();
            }
        }

        private static class deleteJobposition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteJobposition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteJobposition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteJobposition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTeamIdByDepartmentName_args implements org.apache.thrift.TBase<getTeamIdByDepartmentName_args, getTeamIdByDepartmentName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdByDepartmentName_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdByDepartmentName_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTeamIdByDepartmentName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTeamIdByDepartmentName_argsTupleSchemeFactory();

        public int companyId; // required
        public java.lang.String departmentName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            DEPARTMENT_NAME((short)2, "departmentName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // DEPARTMENT_NAME
                        return DEPARTMENT_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdByDepartmentName_args.class, metaDataMap);
        }

        public getTeamIdByDepartmentName_args() {
        }

        public getTeamIdByDepartmentName_args(
                int companyId,
                java.lang.String departmentName)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.departmentName = departmentName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTeamIdByDepartmentName_args(getTeamIdByDepartmentName_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            if (other.isSetDepartmentName()) {
                this.departmentName = other.departmentName;
            }
        }

        public getTeamIdByDepartmentName_args deepCopy() {
            return new getTeamIdByDepartmentName_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            this.departmentName = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getTeamIdByDepartmentName_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public java.lang.String getDepartmentName() {
            return this.departmentName;
        }

        public getTeamIdByDepartmentName_args setDepartmentName(java.lang.String departmentName) {
            this.departmentName = departmentName;
            return this;
        }

        public void unsetDepartmentName() {
            this.departmentName = null;
        }

        /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartmentName() {
            return this.departmentName != null;
        }

        public void setDepartmentNameIsSet(boolean value) {
            if (!value) {
                this.departmentName = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case DEPARTMENT_NAME:
                    if (value == null) {
                        unsetDepartmentName();
                    } else {
                        setDepartmentName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case DEPARTMENT_NAME:
                    return getDepartmentName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case DEPARTMENT_NAME:
                    return isSetDepartmentName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTeamIdByDepartmentName_args)
                return this.equals((getTeamIdByDepartmentName_args)that);
            return false;
        }

        public boolean equals(getTeamIdByDepartmentName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_departmentName = true && this.isSetDepartmentName();
            boolean that_present_departmentName = true && that.isSetDepartmentName();
            if (this_present_departmentName || that_present_departmentName) {
                if (!(this_present_departmentName && that_present_departmentName))
                    return false;
                if (!this.departmentName.equals(that.departmentName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + ((isSetDepartmentName()) ? 131071 : 524287);
            if (isSetDepartmentName())
                hashCode = hashCode * 8191 + departmentName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTeamIdByDepartmentName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDepartmentName()).compareTo(other.isSetDepartmentName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartmentName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, other.departmentName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTeamIdByDepartmentName_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("departmentName:");
            if (this.departmentName == null) {
                sb.append("null");
            } else {
                sb.append(this.departmentName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTeamIdByDepartmentName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTeamIdByDepartmentName_argsStandardScheme getScheme() {
                return new getTeamIdByDepartmentName_argsStandardScheme();
            }
        }

        private static class getTeamIdByDepartmentName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTeamIdByDepartmentName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdByDepartmentName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DEPARTMENT_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.departmentName = iprot.readString();
                                struct.setDepartmentNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdByDepartmentName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                if (struct.departmentName != null) {
                    oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
                    oprot.writeString(struct.departmentName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTeamIdByDepartmentName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTeamIdByDepartmentName_argsTupleScheme getScheme() {
                return new getTeamIdByDepartmentName_argsTupleScheme();
            }
        }

        private static class getTeamIdByDepartmentName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTeamIdByDepartmentName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdByDepartmentName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetDepartmentName()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetDepartmentName()) {
                    oprot.writeString(struct.departmentName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdByDepartmentName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.departmentName = iprot.readString();
                    struct.setDepartmentNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTeamIdByDepartmentName_result implements org.apache.thrift.TBase<getTeamIdByDepartmentName_result, getTeamIdByDepartmentName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdByDepartmentName_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdByDepartmentName_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTeamIdByDepartmentName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTeamIdByDepartmentName_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdByDepartmentName_result.class, metaDataMap);
        }

        public getTeamIdByDepartmentName_result() {
        }

        public getTeamIdByDepartmentName_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTeamIdByDepartmentName_result(getTeamIdByDepartmentName_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getTeamIdByDepartmentName_result deepCopy() {
            return new getTeamIdByDepartmentName_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTeamIdByDepartmentName_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTeamIdByDepartmentName_result)
                return this.equals((getTeamIdByDepartmentName_result)that);
            return false;
        }

        public boolean equals(getTeamIdByDepartmentName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTeamIdByDepartmentName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTeamIdByDepartmentName_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTeamIdByDepartmentName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTeamIdByDepartmentName_resultStandardScheme getScheme() {
                return new getTeamIdByDepartmentName_resultStandardScheme();
            }
        }

        private static class getTeamIdByDepartmentName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTeamIdByDepartmentName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdByDepartmentName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdByDepartmentName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTeamIdByDepartmentName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTeamIdByDepartmentName_resultTupleScheme getScheme() {
                return new getTeamIdByDepartmentName_resultTupleScheme();
            }
        }

        private static class getTeamIdByDepartmentName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTeamIdByDepartmentName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdByDepartmentName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdByDepartmentName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionForThirdParty_args implements org.apache.thrift.TBase<getPositionForThirdParty_args, getPositionForThirdParty_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionForThirdParty_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionForThirdParty_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionForThirdParty_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionForThirdParty_argsTupleSchemeFactory();

        public int positionId; // required
        public int channel; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId"),
            CHANNEL((short)2, "channel");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    case 2: // CHANNEL
                        return CHANNEL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private static final int __CHANNEL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionForThirdParty_args.class, metaDataMap);
        }

        public getPositionForThirdParty_args() {
        }

        public getPositionForThirdParty_args(
                int positionId,
                int channel)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.channel = channel;
            setChannelIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionForThirdParty_args(getPositionForThirdParty_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
            this.channel = other.channel;
        }

        public getPositionForThirdParty_args deepCopy() {
            return new getPositionForThirdParty_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
            setChannelIsSet(false);
            this.channel = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getPositionForThirdParty_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getChannel() {
            return this.channel;
        }

        public getPositionForThirdParty_args setChannel(int channel) {
            this.channel = channel;
            setChannelIsSet(true);
            return this;
        }

        public void unsetChannel() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        /** Returns true if field channel is set (has been assigned a value) and false otherwise */
        public boolean isSetChannel() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        public void setChannelIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case CHANNEL:
                    if (value == null) {
                        unsetChannel();
                    } else {
                        setChannel((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

                case CHANNEL:
                    return getChannel();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
                case CHANNEL:
                    return isSetChannel();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionForThirdParty_args)
                return this.equals((getPositionForThirdParty_args)that);
            return false;
        }

        public boolean equals(getPositionForThirdParty_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_channel = true;
            boolean that_present_channel = true;
            if (this_present_channel || that_present_channel) {
                if (!(this_present_channel && that_present_channel))
                    return false;
                if (this.channel != that.channel)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + channel;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionForThirdParty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannel()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionForThirdParty_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("channel:");
            sb.append(this.channel);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionForThirdParty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionForThirdParty_argsStandardScheme getScheme() {
                return new getPositionForThirdParty_argsStandardScheme();
            }
        }

        private static class getPositionForThirdParty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionForThirdParty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CHANNEL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.channel = iprot.readI32();
                                struct.setChannelIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionForThirdParty_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                oprot.writeI32(struct.channel);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionForThirdParty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionForThirdParty_argsTupleScheme getScheme() {
                return new getPositionForThirdParty_argsTupleScheme();
            }
        }

        private static class getPositionForThirdParty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionForThirdParty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                if (struct.isSetChannel()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetChannel()) {
                    oprot.writeI32(struct.channel);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.channel = iprot.readI32();
                    struct.setChannelIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionForThirdParty_result implements org.apache.thrift.TBase<getPositionForThirdParty_result, getPositionForThirdParty_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionForThirdParty_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionForThirdParty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionForThirdParty_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionForThirdParty_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionForThirdParty_result.class, metaDataMap);
        }

        public getPositionForThirdParty_result() {
        }

        public getPositionForThirdParty_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionForThirdParty_result(getPositionForThirdParty_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPositionForThirdParty_result deepCopy() {
            return new getPositionForThirdParty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionForThirdParty_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionForThirdParty_result)
                return this.equals((getPositionForThirdParty_result)that);
            return false;
        }

        public boolean equals(getPositionForThirdParty_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionForThirdParty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionForThirdParty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionForThirdParty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionForThirdParty_resultStandardScheme getScheme() {
                return new getPositionForThirdParty_resultStandardScheme();
            }
        }

        private static class getPositionForThirdParty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionForThirdParty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionForThirdParty_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionForThirdParty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionForThirdParty_resultTupleScheme getScheme() {
                return new getPositionForThirdParty_resultTupleScheme();
            }
        }

        private static class getPositionForThirdParty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionForThirdParty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionListForThirdParty_args implements org.apache.thrift.TBase<getPositionListForThirdParty_args, getPositionListForThirdParty_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionListForThirdParty_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionListForThirdParty_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionListForThirdParty_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionListForThirdParty_argsTupleSchemeFactory();

        public int channel; // required
        public int type; // required
        public java.lang.String start_time; // required
        public java.lang.String end_time; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL((short)1, "channel"),
            TYPE((short)2, "type"),
            START_TIME((short)3, "start_time"),
            END_TIME((short)4, "end_time");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHANNEL
                        return CHANNEL;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // START_TIME
                        return START_TIME;
                    case 4: // END_TIME
                        return END_TIME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CHANNEL_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("end_time", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionListForThirdParty_args.class, metaDataMap);
        }

        public getPositionListForThirdParty_args() {
        }

        public getPositionListForThirdParty_args(
                int channel,
                int type,
                java.lang.String start_time,
                java.lang.String end_time)
        {
            this();
            this.channel = channel;
            setChannelIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.start_time = start_time;
            this.end_time = end_time;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionListForThirdParty_args(getPositionListForThirdParty_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.channel = other.channel;
            this.type = other.type;
            if (other.isSetStart_time()) {
                this.start_time = other.start_time;
            }
            if (other.isSetEnd_time()) {
                this.end_time = other.end_time;
            }
        }

        public getPositionListForThirdParty_args deepCopy() {
            return new getPositionListForThirdParty_args(this);
        }

        @Override
        public void clear() {
            setChannelIsSet(false);
            this.channel = 0;
            setTypeIsSet(false);
            this.type = 0;
            this.start_time = null;
            this.end_time = null;
        }

        public int getChannel() {
            return this.channel;
        }

        public getPositionListForThirdParty_args setChannel(int channel) {
            this.channel = channel;
            setChannelIsSet(true);
            return this;
        }

        public void unsetChannel() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        /** Returns true if field channel is set (has been assigned a value) and false otherwise */
        public boolean isSetChannel() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        public void setChannelIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getPositionListForThirdParty_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public java.lang.String getStart_time() {
            return this.start_time;
        }

        public getPositionListForThirdParty_args setStart_time(java.lang.String start_time) {
            this.start_time = start_time;
            return this;
        }

        public void unsetStart_time() {
            this.start_time = null;
        }

        /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
        public boolean isSetStart_time() {
            return this.start_time != null;
        }

        public void setStart_timeIsSet(boolean value) {
            if (!value) {
                this.start_time = null;
            }
        }

        public java.lang.String getEnd_time() {
            return this.end_time;
        }

        public getPositionListForThirdParty_args setEnd_time(java.lang.String end_time) {
            this.end_time = end_time;
            return this;
        }

        public void unsetEnd_time() {
            this.end_time = null;
        }

        /** Returns true if field end_time is set (has been assigned a value) and false otherwise */
        public boolean isSetEnd_time() {
            return this.end_time != null;
        }

        public void setEnd_timeIsSet(boolean value) {
            if (!value) {
                this.end_time = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CHANNEL:
                    if (value == null) {
                        unsetChannel();
                    } else {
                        setChannel((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case START_TIME:
                    if (value == null) {
                        unsetStart_time();
                    } else {
                        setStart_time((java.lang.String)value);
                    }
                    break;

                case END_TIME:
                    if (value == null) {
                        unsetEnd_time();
                    } else {
                        setEnd_time((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHANNEL:
                    return getChannel();

                case TYPE:
                    return getType();

                case START_TIME:
                    return getStart_time();

                case END_TIME:
                    return getEnd_time();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHANNEL:
                    return isSetChannel();
                case TYPE:
                    return isSetType();
                case START_TIME:
                    return isSetStart_time();
                case END_TIME:
                    return isSetEnd_time();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionListForThirdParty_args)
                return this.equals((getPositionListForThirdParty_args)that);
            return false;
        }

        public boolean equals(getPositionListForThirdParty_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_channel = true;
            boolean that_present_channel = true;
            if (this_present_channel || that_present_channel) {
                if (!(this_present_channel && that_present_channel))
                    return false;
                if (this.channel != that.channel)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_start_time = true && this.isSetStart_time();
            boolean that_present_start_time = true && that.isSetStart_time();
            if (this_present_start_time || that_present_start_time) {
                if (!(this_present_start_time && that_present_start_time))
                    return false;
                if (!this.start_time.equals(that.start_time))
                    return false;
            }

            boolean this_present_end_time = true && this.isSetEnd_time();
            boolean that_present_end_time = true && that.isSetEnd_time();
            if (this_present_end_time || that_present_end_time) {
                if (!(this_present_end_time && that_present_end_time))
                    return false;
                if (!this.end_time.equals(that.end_time))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + channel;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + ((isSetStart_time()) ? 131071 : 524287);
            if (isSetStart_time())
                hashCode = hashCode * 8191 + start_time.hashCode();

            hashCode = hashCode * 8191 + ((isSetEnd_time()) ? 131071 : 524287);
            if (isSetEnd_time())
                hashCode = hashCode * 8191 + end_time.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionListForThirdParty_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannel()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStart_time()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEnd_time()).compareTo(other.isSetEnd_time());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEnd_time()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time, other.end_time);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionListForThirdParty_args(");
            boolean first = true;

            sb.append("channel:");
            sb.append(this.channel);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("start_time:");
            if (this.start_time == null) {
                sb.append("null");
            } else {
                sb.append(this.start_time);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("end_time:");
            if (this.end_time == null) {
                sb.append("null");
            } else {
                sb.append(this.end_time);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionListForThirdParty_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListForThirdParty_argsStandardScheme getScheme() {
                return new getPositionListForThirdParty_argsStandardScheme();
            }
        }

        private static class getPositionListForThirdParty_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionListForThirdParty_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionListForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHANNEL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.channel = iprot.readI32();
                                struct.setChannelIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // START_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.start_time = iprot.readString();
                                struct.setStart_timeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // END_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.end_time = iprot.readString();
                                struct.setEnd_timeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionListForThirdParty_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                oprot.writeI32(struct.channel);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                if (struct.start_time != null) {
                    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
                    oprot.writeString(struct.start_time);
                    oprot.writeFieldEnd();
                }
                if (struct.end_time != null) {
                    oprot.writeFieldBegin(END_TIME_FIELD_DESC);
                    oprot.writeString(struct.end_time);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionListForThirdParty_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListForThirdParty_argsTupleScheme getScheme() {
                return new getPositionListForThirdParty_argsTupleScheme();
            }
        }

        private static class getPositionListForThirdParty_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionListForThirdParty_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionListForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetChannel()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetStart_time()) {
                    optionals.set(2);
                }
                if (struct.isSetEnd_time()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetChannel()) {
                    oprot.writeI32(struct.channel);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetStart_time()) {
                    oprot.writeString(struct.start_time);
                }
                if (struct.isSetEnd_time()) {
                    oprot.writeString(struct.end_time);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionListForThirdParty_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.channel = iprot.readI32();
                    struct.setChannelIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.start_time = iprot.readString();
                    struct.setStart_timeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.end_time = iprot.readString();
                    struct.setEnd_timeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionListForThirdParty_result implements org.apache.thrift.TBase<getPositionListForThirdParty_result, getPositionListForThirdParty_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionListForThirdParty_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionListForThirdParty_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionListForThirdParty_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionListForThirdParty_resultTupleSchemeFactory();

        public java.util.List<java.lang.Integer> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionListForThirdParty_result.class, metaDataMap);
        }

        public getPositionListForThirdParty_result() {
        }

        public getPositionListForThirdParty_result(
                java.util.List<java.lang.Integer> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionListForThirdParty_result(getPositionListForThirdParty_result other) {
            if (other.isSetSuccess()) {
                java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success);
                this.success = __this__success;
            }
        }

        public getPositionListForThirdParty_result deepCopy() {
            return new getPositionListForThirdParty_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<java.lang.Integer>();
            }
            this.success.add(elem);
        }

        public java.util.List<java.lang.Integer> getSuccess() {
            return this.success;
        }

        public getPositionListForThirdParty_result setSuccess(java.util.List<java.lang.Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionListForThirdParty_result)
                return this.equals((getPositionListForThirdParty_result)that);
            return false;
        }

        public boolean equals(getPositionListForThirdParty_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionListForThirdParty_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionListForThirdParty_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionListForThirdParty_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListForThirdParty_resultStandardScheme getScheme() {
                return new getPositionListForThirdParty_resultStandardScheme();
            }
        }

        private static class getPositionListForThirdParty_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionListForThirdParty_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionListForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<java.lang.Integer>(_list8.size);
                                    int _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                                    {
                                        _elem9 = iprot.readI32();
                                        struct.success.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionListForThirdParty_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter11 : struct.success)
                        {
                            oprot.writeI32(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionListForThirdParty_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListForThirdParty_resultTupleScheme getScheme() {
                return new getPositionListForThirdParty_resultTupleScheme();
            }
        }

        private static class getPositionListForThirdParty_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionListForThirdParty_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionListForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (int _iter12 : struct.success)
                        {
                            oprot.writeI32(_iter12);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionListForThirdParty_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new java.util.ArrayList<java.lang.Integer>(_list13.size);
                        int _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                        {
                            _elem14 = iprot.readI32();
                            struct.success.add(_elem14);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionList_args implements org.apache.thrift.TBase<getPositionList_args, getPositionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionList_args");

        private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionList_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            QUERY((short)1, "query");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // QUERY
                        return QUERY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.WechatPositionListQuery.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionList_args.class, metaDataMap);
        }

        public getPositionList_args() {
        }

        public getPositionList_args(
                com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query)
        {
            this();
            this.query = query;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionList_args(getPositionList_args other) {
            if (other.isSetQuery()) {
                this.query = new com.moseeker.thrift.gen.position.struct.WechatPositionListQuery(other.query);
            }
        }

        public getPositionList_args deepCopy() {
            return new getPositionList_args(this);
        }

        @Override
        public void clear() {
            this.query = null;
        }

        public com.moseeker.thrift.gen.position.struct.WechatPositionListQuery getQuery() {
            return this.query;
        }

        public getPositionList_args setQuery(com.moseeker.thrift.gen.position.struct.WechatPositionListQuery query) {
            this.query = query;
            return this;
        }

        public void unsetQuery() {
            this.query = null;
        }

        /** Returns true if field query is set (has been assigned a value) and false otherwise */
        public boolean isSetQuery() {
            return this.query != null;
        }

        public void setQueryIsSet(boolean value) {
            if (!value) {
                this.query = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case QUERY:
                    if (value == null) {
                        unsetQuery();
                    } else {
                        setQuery((com.moseeker.thrift.gen.position.struct.WechatPositionListQuery)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case QUERY:
                    return getQuery();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case QUERY:
                    return isSetQuery();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionList_args)
                return this.equals((getPositionList_args)that);
            return false;
        }

        public boolean equals(getPositionList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_query = true && this.isSetQuery();
            boolean that_present_query = true && that.isSetQuery();
            if (this_present_query || that_present_query) {
                if (!(this_present_query && that_present_query))
                    return false;
                if (!this.query.equals(that.query))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
            if (isSetQuery())
                hashCode = hashCode * 8191 + query.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQuery()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionList_args(");
            boolean first = true;

            sb.append("query:");
            if (this.query == null) {
                sb.append("null");
            } else {
                sb.append(this.query);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (query != null) {
                query.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionList_argsStandardScheme getScheme() {
                return new getPositionList_argsStandardScheme();
            }
        }

        private static class getPositionList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // QUERY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.query = new com.moseeker.thrift.gen.position.struct.WechatPositionListQuery();
                                struct.query.read(iprot);
                                struct.setQueryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.query != null) {
                    oprot.writeFieldBegin(QUERY_FIELD_DESC);
                    struct.query.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionList_argsTupleScheme getScheme() {
                return new getPositionList_argsTupleScheme();
            }
        }

        private static class getPositionList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetQuery()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetQuery()) {
                    struct.query.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.query = new com.moseeker.thrift.gen.position.struct.WechatPositionListQuery();
                    struct.query.read(iprot);
                    struct.setQueryIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionList_result implements org.apache.thrift.TBase<getPositionList_result, getPositionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionList_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.WechatPositionListData.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionList_result.class, metaDataMap);
        }

        public getPositionList_result() {
        }

        public getPositionList_result(
                java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionList_result(getPositionList_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatPositionListData>(other.success.size());
                for (com.moseeker.thrift.gen.position.struct.WechatPositionListData other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.position.struct.WechatPositionListData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getPositionList_result deepCopy() {
            return new getPositionList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.position.struct.WechatPositionListData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.position.struct.WechatPositionListData elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatPositionListData>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> getSuccess() {
            return this.success;
        }

        public getPositionList_result setSuccess(java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.position.struct.WechatPositionListData>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionList_result)
                return this.equals((getPositionList_result)that);
            return false;
        }

        public boolean equals(getPositionList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionList_resultStandardScheme getScheme() {
                return new getPositionList_resultStandardScheme();
            }
        }

        private static class getPositionList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatPositionListData>(_list16.size);
                                    com.moseeker.thrift.gen.position.struct.WechatPositionListData _elem17;
                                    for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                                    {
                                        _elem17 = new com.moseeker.thrift.gen.position.struct.WechatPositionListData();
                                        _elem17.read(iprot);
                                        struct.success.add(_elem17);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.position.struct.WechatPositionListData _iter19 : struct.success)
                        {
                            _iter19.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionList_resultTupleScheme getScheme() {
                return new getPositionList_resultTupleScheme();
            }
        }

        private static class getPositionList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.position.struct.WechatPositionListData _iter20 : struct.success)
                        {
                            _iter20.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatPositionListData>(_list21.size);
                        com.moseeker.thrift.gen.position.struct.WechatPositionListData _elem22;
                        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                        {
                            _elem22 = new com.moseeker.thrift.gen.position.struct.WechatPositionListData();
                            _elem22.read(iprot);
                            struct.success.add(_elem22);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionListRpExt_args implements org.apache.thrift.TBase<getPositionListRpExt_args, getPositionListRpExt_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionListRpExt_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionListRpExt_args");

        private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.LIST, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionListRpExt_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionListRpExt_argsTupleSchemeFactory();

        public java.util.List<java.lang.Integer> pids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PIDS((short)1, "pids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PIDS
                        return PIDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionListRpExt_args.class, metaDataMap);
        }

        public getPositionListRpExt_args() {
        }

        public getPositionListRpExt_args(
                java.util.List<java.lang.Integer> pids)
        {
            this();
            this.pids = pids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionListRpExt_args(getPositionListRpExt_args other) {
            if (other.isSetPids()) {
                java.util.List<java.lang.Integer> __this__pids = new java.util.ArrayList<java.lang.Integer>(other.pids);
                this.pids = __this__pids;
            }
        }

        public getPositionListRpExt_args deepCopy() {
            return new getPositionListRpExt_args(this);
        }

        @Override
        public void clear() {
            this.pids = null;
        }

        public int getPidsSize() {
            return (this.pids == null) ? 0 : this.pids.size();
        }

        public java.util.Iterator<java.lang.Integer> getPidsIterator() {
            return (this.pids == null) ? null : this.pids.iterator();
        }

        public void addToPids(int elem) {
            if (this.pids == null) {
                this.pids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.pids.add(elem);
        }

        public java.util.List<java.lang.Integer> getPids() {
            return this.pids;
        }

        public getPositionListRpExt_args setPids(java.util.List<java.lang.Integer> pids) {
            this.pids = pids;
            return this;
        }

        public void unsetPids() {
            this.pids = null;
        }

        /** Returns true if field pids is set (has been assigned a value) and false otherwise */
        public boolean isSetPids() {
            return this.pids != null;
        }

        public void setPidsIsSet(boolean value) {
            if (!value) {
                this.pids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PIDS:
                    if (value == null) {
                        unsetPids();
                    } else {
                        setPids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PIDS:
                    return getPids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PIDS:
                    return isSetPids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionListRpExt_args)
                return this.equals((getPositionListRpExt_args)that);
            return false;
        }

        public boolean equals(getPositionListRpExt_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pids = true && this.isSetPids();
            boolean that_present_pids = true && that.isSetPids();
            if (this_present_pids || that_present_pids) {
                if (!(this_present_pids && that_present_pids))
                    return false;
                if (!this.pids.equals(that.pids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetPids()) ? 131071 : 524287);
            if (isSetPids())
                hashCode = hashCode * 8191 + pids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionListRpExt_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionListRpExt_args(");
            boolean first = true;

            sb.append("pids:");
            if (this.pids == null) {
                sb.append("null");
            } else {
                sb.append(this.pids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionListRpExt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListRpExt_argsStandardScheme getScheme() {
                return new getPositionListRpExt_argsStandardScheme();
            }
        }

        private static class getPositionListRpExt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionListRpExt_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionListRpExt_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                    struct.pids = new java.util.ArrayList<java.lang.Integer>(_list24.size);
                                    int _elem25;
                                    for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                                    {
                                        _elem25 = iprot.readI32();
                                        struct.pids.add(_elem25);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionListRpExt_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.pids != null) {
                    oprot.writeFieldBegin(PIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pids.size()));
                        for (int _iter27 : struct.pids)
                        {
                            oprot.writeI32(_iter27);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionListRpExt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListRpExt_argsTupleScheme getScheme() {
                return new getPositionListRpExt_argsTupleScheme();
            }
        }

        private static class getPositionListRpExt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionListRpExt_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionListRpExt_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPids()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPids()) {
                    {
                        oprot.writeI32(struct.pids.size());
                        for (int _iter28 : struct.pids)
                        {
                            oprot.writeI32(_iter28);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionListRpExt_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.pids = new java.util.ArrayList<java.lang.Integer>(_list29.size);
                        int _elem30;
                        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                        {
                            _elem30 = iprot.readI32();
                            struct.pids.add(_elem30);
                        }
                    }
                    struct.setPidsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionListRpExt_result implements org.apache.thrift.TBase<getPositionListRpExt_result, getPositionListRpExt_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionListRpExt_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionListRpExt_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionListRpExt_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionListRpExt_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.RpExtInfo.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionListRpExt_result.class, metaDataMap);
        }

        public getPositionListRpExt_result() {
        }

        public getPositionListRpExt_result(
                java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionListRpExt_result(getPositionListRpExt_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.RpExtInfo>(other.success.size());
                for (com.moseeker.thrift.gen.position.struct.RpExtInfo other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.position.struct.RpExtInfo(other_element));
                }
                this.success = __this__success;
            }
        }

        public getPositionListRpExt_result deepCopy() {
            return new getPositionListRpExt_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.position.struct.RpExtInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.position.struct.RpExtInfo elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.RpExtInfo>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> getSuccess() {
            return this.success;
        }

        public getPositionListRpExt_result setSuccess(java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.position.struct.RpExtInfo>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionListRpExt_result)
                return this.equals((getPositionListRpExt_result)that);
            return false;
        }

        public boolean equals(getPositionListRpExt_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionListRpExt_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionListRpExt_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionListRpExt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListRpExt_resultStandardScheme getScheme() {
                return new getPositionListRpExt_resultStandardScheme();
            }
        }

        private static class getPositionListRpExt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionListRpExt_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionListRpExt_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.RpExtInfo>(_list32.size);
                                    com.moseeker.thrift.gen.position.struct.RpExtInfo _elem33;
                                    for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                                    {
                                        _elem33 = new com.moseeker.thrift.gen.position.struct.RpExtInfo();
                                        _elem33.read(iprot);
                                        struct.success.add(_elem33);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionListRpExt_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.position.struct.RpExtInfo _iter35 : struct.success)
                        {
                            _iter35.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionListRpExt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionListRpExt_resultTupleScheme getScheme() {
                return new getPositionListRpExt_resultTupleScheme();
            }
        }

        private static class getPositionListRpExt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionListRpExt_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionListRpExt_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.position.struct.RpExtInfo _iter36 : struct.success)
                        {
                            _iter36.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionListRpExt_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.RpExtInfo>(_list37.size);
                        com.moseeker.thrift.gen.position.struct.RpExtInfo _elem38;
                        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                        {
                            _elem38 = new com.moseeker.thrift.gen.position.struct.RpExtInfo();
                            _elem38.read(iprot);
                            struct.success.add(_elem38);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRpPositionList_args implements org.apache.thrift.TBase<getRpPositionList_args, getRpPositionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRpPositionList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRpPositionList_args");

        private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_config_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRpPositionList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRpPositionList_argsTupleSchemeFactory();

        public int hb_config_id; // required
        public int pageNum; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HB_CONFIG_ID((short)1, "hb_config_id"),
            PAGE_NUM((short)2, "pageNum"),
            PAGE_SIZE((short)3, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HB_CONFIG_ID
                        return HB_CONFIG_ID;
                    case 2: // PAGE_NUM
                        return PAGE_NUM;
                    case 3: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HB_CONFIG_ID_ISSET_ID = 0;
        private static final int __PAGENUM_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hb_config_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRpPositionList_args.class, metaDataMap);
        }

        public getRpPositionList_args() {
        }

        public getRpPositionList_args(
                int hb_config_id,
                int pageNum,
                int pageSize)
        {
            this();
            this.hb_config_id = hb_config_id;
            setHb_config_idIsSet(true);
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRpPositionList_args(getRpPositionList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hb_config_id = other.hb_config_id;
            this.pageNum = other.pageNum;
            this.pageSize = other.pageSize;
        }

        public getRpPositionList_args deepCopy() {
            return new getRpPositionList_args(this);
        }

        @Override
        public void clear() {
            setHb_config_idIsSet(false);
            this.hb_config_id = 0;
            setPageNumIsSet(false);
            this.pageNum = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getHb_config_id() {
            return this.hb_config_id;
        }

        public getRpPositionList_args setHb_config_id(int hb_config_id) {
            this.hb_config_id = hb_config_id;
            setHb_config_idIsSet(true);
            return this;
        }

        public void unsetHb_config_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
        }

        /** Returns true if field hb_config_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHb_config_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
        }

        public void setHb_config_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID, value);
        }

        public int getPageNum() {
            return this.pageNum;
        }

        public getRpPositionList_args setPageNum(int pageNum) {
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            return this;
        }

        public void unsetPageNum() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNum() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        public void setPageNumIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getRpPositionList_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HB_CONFIG_ID:
                    if (value == null) {
                        unsetHb_config_id();
                    } else {
                        setHb_config_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUM:
                    if (value == null) {
                        unsetPageNum();
                    } else {
                        setPageNum((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HB_CONFIG_ID:
                    return getHb_config_id();

                case PAGE_NUM:
                    return getPageNum();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HB_CONFIG_ID:
                    return isSetHb_config_id();
                case PAGE_NUM:
                    return isSetPageNum();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRpPositionList_args)
                return this.equals((getRpPositionList_args)that);
            return false;
        }

        public boolean equals(getRpPositionList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hb_config_id = true;
            boolean that_present_hb_config_id = true;
            if (this_present_hb_config_id || that_present_hb_config_id) {
                if (!(this_present_hb_config_id && that_present_hb_config_id))
                    return false;
                if (this.hb_config_id != that.hb_config_id)
                    return false;
            }

            boolean this_present_pageNum = true;
            boolean that_present_pageNum = true;
            if (this_present_pageNum || that_present_pageNum) {
                if (!(this_present_pageNum && that_present_pageNum))
                    return false;
                if (this.pageNum != that.pageNum)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hb_config_id;

            hashCode = hashCode * 8191 + pageNum;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getRpPositionList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHb_config_id()).compareTo(other.isSetHb_config_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHb_config_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_config_id, other.hb_config_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRpPositionList_args(");
            boolean first = true;

            sb.append("hb_config_id:");
            sb.append(this.hb_config_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNum:");
            sb.append(this.pageNum);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRpPositionList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRpPositionList_argsStandardScheme getScheme() {
                return new getRpPositionList_argsStandardScheme();
            }
        }

        private static class getRpPositionList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRpPositionList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRpPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HB_CONFIG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hb_config_id = iprot.readI32();
                                struct.setHb_config_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNum = iprot.readI32();
                                struct.setPageNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRpPositionList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
                oprot.writeI32(struct.hb_config_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
                oprot.writeI32(struct.pageNum);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRpPositionList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRpPositionList_argsTupleScheme getScheme() {
                return new getRpPositionList_argsTupleScheme();
            }
        }

        private static class getRpPositionList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRpPositionList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRpPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHb_config_id()) {
                    optionals.set(0);
                }
                if (struct.isSetPageNum()) {
                    optionals.set(1);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHb_config_id()) {
                    oprot.writeI32(struct.hb_config_id);
                }
                if (struct.isSetPageNum()) {
                    oprot.writeI32(struct.pageNum);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRpPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hb_config_id = iprot.readI32();
                    struct.setHb_config_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageNum = iprot.readI32();
                    struct.setPageNumIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRpPositionList_result implements org.apache.thrift.TBase<getRpPositionList_result, getRpPositionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRpPositionList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRpPositionList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRpPositionList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRpPositionList_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.WechatRpPositionListData.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRpPositionList_result.class, metaDataMap);
        }

        public getRpPositionList_result() {
        }

        public getRpPositionList_result(
                java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRpPositionList_result(getRpPositionList_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>(other.success.size());
                for (com.moseeker.thrift.gen.position.struct.WechatRpPositionListData other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.position.struct.WechatRpPositionListData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getRpPositionList_result deepCopy() {
            return new getRpPositionList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.position.struct.WechatRpPositionListData elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> getSuccess() {
            return this.success;
        }

        public getRpPositionList_result setSuccess(java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRpPositionList_result)
                return this.equals((getRpPositionList_result)that);
            return false;
        }

        public boolean equals(getRpPositionList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRpPositionList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRpPositionList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRpPositionList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRpPositionList_resultStandardScheme getScheme() {
                return new getRpPositionList_resultStandardScheme();
            }
        }

        private static class getRpPositionList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRpPositionList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRpPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>(_list40.size);
                                    com.moseeker.thrift.gen.position.struct.WechatRpPositionListData _elem41;
                                    for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                                    {
                                        _elem41 = new com.moseeker.thrift.gen.position.struct.WechatRpPositionListData();
                                        _elem41.read(iprot);
                                        struct.success.add(_elem41);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRpPositionList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.position.struct.WechatRpPositionListData _iter43 : struct.success)
                        {
                            _iter43.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRpPositionList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRpPositionList_resultTupleScheme getScheme() {
                return new getRpPositionList_resultTupleScheme();
            }
        }

        private static class getRpPositionList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRpPositionList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRpPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.position.struct.WechatRpPositionListData _iter44 : struct.success)
                        {
                            _iter44.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRpPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.WechatRpPositionListData>(_list45.size);
                        com.moseeker.thrift.gen.position.struct.WechatRpPositionListData _elem46;
                        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                        {
                            _elem46 = new com.moseeker.thrift.gen.position.struct.WechatRpPositionListData();
                            _elem46.read(iprot);
                            struct.success.add(_elem46);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getShareInfo_args implements org.apache.thrift.TBase<getShareInfo_args, getShareInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getShareInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShareInfo_args");

        private static final org.apache.thrift.protocol.TField HB_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_config_id", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getShareInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getShareInfo_argsTupleSchemeFactory();

        public int hb_config_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HB_CONFIG_ID((short)1, "hb_config_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HB_CONFIG_ID
                        return HB_CONFIG_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HB_CONFIG_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HB_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("hb_config_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShareInfo_args.class, metaDataMap);
        }

        public getShareInfo_args() {
        }

        public getShareInfo_args(
                int hb_config_id)
        {
            this();
            this.hb_config_id = hb_config_id;
            setHb_config_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getShareInfo_args(getShareInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hb_config_id = other.hb_config_id;
        }

        public getShareInfo_args deepCopy() {
            return new getShareInfo_args(this);
        }

        @Override
        public void clear() {
            setHb_config_idIsSet(false);
            this.hb_config_id = 0;
        }

        public int getHb_config_id() {
            return this.hb_config_id;
        }

        public getShareInfo_args setHb_config_id(int hb_config_id) {
            this.hb_config_id = hb_config_id;
            setHb_config_idIsSet(true);
            return this;
        }

        public void unsetHb_config_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
        }

        /** Returns true if field hb_config_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHb_config_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID);
        }

        public void setHb_config_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_CONFIG_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HB_CONFIG_ID:
                    if (value == null) {
                        unsetHb_config_id();
                    } else {
                        setHb_config_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HB_CONFIG_ID:
                    return getHb_config_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HB_CONFIG_ID:
                    return isSetHb_config_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getShareInfo_args)
                return this.equals((getShareInfo_args)that);
            return false;
        }

        public boolean equals(getShareInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hb_config_id = true;
            boolean that_present_hb_config_id = true;
            if (this_present_hb_config_id || that_present_hb_config_id) {
                if (!(this_present_hb_config_id && that_present_hb_config_id))
                    return false;
                if (this.hb_config_id != that.hb_config_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hb_config_id;

            return hashCode;
        }

        @Override
        public int compareTo(getShareInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHb_config_id()).compareTo(other.isSetHb_config_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHb_config_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_config_id, other.hb_config_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getShareInfo_args(");
            boolean first = true;

            sb.append("hb_config_id:");
            sb.append(this.hb_config_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getShareInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getShareInfo_argsStandardScheme getScheme() {
                return new getShareInfo_argsStandardScheme();
            }
        }

        private static class getShareInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getShareInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getShareInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HB_CONFIG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hb_config_id = iprot.readI32();
                                struct.setHb_config_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getShareInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HB_CONFIG_ID_FIELD_DESC);
                oprot.writeI32(struct.hb_config_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getShareInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getShareInfo_argsTupleScheme getScheme() {
                return new getShareInfo_argsTupleScheme();
            }
        }

        private static class getShareInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getShareInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getShareInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHb_config_id()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetHb_config_id()) {
                    oprot.writeI32(struct.hb_config_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getShareInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.hb_config_id = iprot.readI32();
                    struct.setHb_config_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getShareInfo_result implements org.apache.thrift.TBase<getShareInfo_result, getShareInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getShareInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShareInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getShareInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getShareInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.WechatShareData success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.WechatShareData.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShareInfo_result.class, metaDataMap);
        }

        public getShareInfo_result() {
        }

        public getShareInfo_result(
                com.moseeker.thrift.gen.position.struct.WechatShareData success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getShareInfo_result(getShareInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.position.struct.WechatShareData(other.success);
            }
        }

        public getShareInfo_result deepCopy() {
            return new getShareInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.position.struct.WechatShareData getSuccess() {
            return this.success;
        }

        public getShareInfo_result setSuccess(com.moseeker.thrift.gen.position.struct.WechatShareData success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.position.struct.WechatShareData)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getShareInfo_result)
                return this.equals((getShareInfo_result)that);
            return false;
        }

        public boolean equals(getShareInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getShareInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getShareInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getShareInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getShareInfo_resultStandardScheme getScheme() {
                return new getShareInfo_resultStandardScheme();
            }
        }

        private static class getShareInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getShareInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getShareInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.position.struct.WechatShareData();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getShareInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getShareInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getShareInfo_resultTupleScheme getScheme() {
                return new getShareInfo_resultTupleScheme();
            }
        }

        private static class getShareInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getShareInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getShareInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getShareInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.position.struct.WechatShareData();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class headImage_args implements org.apache.thrift.TBase<headImage_args, headImage_args._Fields>, java.io.Serializable, Cloneable, Comparable<headImage_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headImage_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new headImage_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new headImage_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headImage_args.class, metaDataMap);
        }

        public headImage_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public headImage_args(headImage_args other) {
        }

        public headImage_args deepCopy() {
            return new headImage_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof headImage_args)
                return this.equals((headImage_args)that);
            return false;
        }

        public boolean equals(headImage_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(headImage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("headImage_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class headImage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public headImage_argsStandardScheme getScheme() {
                return new headImage_argsStandardScheme();
            }
        }

        private static class headImage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<headImage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, headImage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, headImage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class headImage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public headImage_argsTupleScheme getScheme() {
                return new headImage_argsTupleScheme();
            }
        }

        private static class headImage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<headImage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, headImage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, headImage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class headImage_result implements org.apache.thrift.TBase<headImage_result, headImage_result._Fields>, java.io.Serializable, Cloneable, Comparable<headImage_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headImage_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new headImage_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new headImage_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headImage_result.class, metaDataMap);
        }

        public headImage_result() {
        }

        public headImage_result(
                com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public headImage_result(headImage_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO(other.success);
            }
        }

        public headImage_result deepCopy() {
            return new headImage_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO getSuccess() {
            return this.success;
        }

        public headImage_result setSuccess(com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof headImage_result)
                return this.equals((headImage_result)that);
            return false;
        }

        public boolean equals(headImage_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(headImage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("headImage_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class headImage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public headImage_resultStandardScheme getScheme() {
                return new headImage_resultStandardScheme();
            }
        }

        private static class headImage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<headImage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, headImage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, headImage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class headImage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public headImage_resultTupleScheme getScheme() {
                return new headImage_resultTupleScheme();
            }
        }

        private static class headImage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<headImage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, headImage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, headImage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.dao.struct.CampaignHeadImageVO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class positionDetails_args implements org.apache.thrift.TBase<positionDetails_args, positionDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<positionDetails_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("positionDetails_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new positionDetails_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new positionDetails_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(positionDetails_args.class, metaDataMap);
        }

        public positionDetails_args() {
        }

        public positionDetails_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public positionDetails_args(positionDetails_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public positionDetails_args deepCopy() {
            return new positionDetails_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public positionDetails_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof positionDetails_args)
                return this.equals((positionDetails_args)that);
            return false;
        }

        public boolean equals(positionDetails_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(positionDetails_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("positionDetails_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class positionDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionDetails_argsStandardScheme getScheme() {
                return new positionDetails_argsStandardScheme();
            }
        }

        private static class positionDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<positionDetails_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, positionDetails_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, positionDetails_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class positionDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionDetails_argsTupleScheme getScheme() {
                return new positionDetails_argsTupleScheme();
            }
        }

        private static class positionDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<positionDetails_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, positionDetails_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, positionDetails_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class positionDetails_result implements org.apache.thrift.TBase<positionDetails_result, positionDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<positionDetails_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("positionDetails_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new positionDetails_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new positionDetails_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.PositionDetailsVO success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.PositionDetailsVO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(positionDetails_result.class, metaDataMap);
        }

        public positionDetails_result() {
        }

        public positionDetails_result(
                com.moseeker.thrift.gen.position.struct.PositionDetailsVO success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public positionDetails_result(positionDetails_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsVO(other.success);
            }
        }

        public positionDetails_result deepCopy() {
            return new positionDetails_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsVO getSuccess() {
            return this.success;
        }

        public positionDetails_result setSuccess(com.moseeker.thrift.gen.position.struct.PositionDetailsVO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.position.struct.PositionDetailsVO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof positionDetails_result)
                return this.equals((positionDetails_result)that);
            return false;
        }

        public boolean equals(positionDetails_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(positionDetails_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("positionDetails_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class positionDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionDetails_resultStandardScheme getScheme() {
                return new positionDetails_resultStandardScheme();
            }
        }

        private static class positionDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<positionDetails_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, positionDetails_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsVO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, positionDetails_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class positionDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionDetails_resultTupleScheme getScheme() {
                return new positionDetails_resultTupleScheme();
            }
        }

        private static class positionDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<positionDetails_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, positionDetails_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, positionDetails_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsVO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class companyHotPositionDetailsList_args implements org.apache.thrift.TBase<companyHotPositionDetailsList_args, companyHotPositionDetailsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<companyHotPositionDetailsList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("companyHotPositionDetailsList_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PER_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("per_age", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new companyHotPositionDetailsList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new companyHotPositionDetailsList_argsTupleSchemeFactory();

        public int companyId; // required
        public int page; // required
        public int per_age; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            PAGE((short)2, "page"),
            PER_AGE((short)3, "per_age");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // PAGE
                        return PAGE;
                    case 3: // PER_AGE
                        return PER_AGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PER_AGE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PER_AGE, new org.apache.thrift.meta_data.FieldMetaData("per_age", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(companyHotPositionDetailsList_args.class, metaDataMap);
        }

        public companyHotPositionDetailsList_args() {
        }

        public companyHotPositionDetailsList_args(
                int companyId,
                int page,
                int per_age)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.per_age = per_age;
            setPer_ageIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public companyHotPositionDetailsList_args(companyHotPositionDetailsList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.page = other.page;
            this.per_age = other.per_age;
        }

        public companyHotPositionDetailsList_args deepCopy() {
            return new companyHotPositionDetailsList_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPageIsSet(false);
            this.page = 0;
            setPer_ageIsSet(false);
            this.per_age = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public companyHotPositionDetailsList_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public companyHotPositionDetailsList_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPer_age() {
            return this.per_age;
        }

        public companyHotPositionDetailsList_args setPer_age(int per_age) {
            this.per_age = per_age;
            setPer_ageIsSet(true);
            return this;
        }

        public void unsetPer_age() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PER_AGE_ISSET_ID);
        }

        /** Returns true if field per_age is set (has been assigned a value) and false otherwise */
        public boolean isSetPer_age() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PER_AGE_ISSET_ID);
        }

        public void setPer_ageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PER_AGE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PER_AGE:
                    if (value == null) {
                        unsetPer_age();
                    } else {
                        setPer_age((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case PAGE:
                    return getPage();

                case PER_AGE:
                    return getPer_age();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case PAGE:
                    return isSetPage();
                case PER_AGE:
                    return isSetPer_age();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof companyHotPositionDetailsList_args)
                return this.equals((companyHotPositionDetailsList_args)that);
            return false;
        }

        public boolean equals(companyHotPositionDetailsList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_per_age = true;
            boolean that_present_per_age = true;
            if (this_present_per_age || that_present_per_age) {
                if (!(this_present_per_age && that_present_per_age))
                    return false;
                if (this.per_age != that.per_age)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + per_age;

            return hashCode;
        }

        @Override
        public int compareTo(companyHotPositionDetailsList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPer_age()).compareTo(other.isSetPer_age());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPer_age()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_age, other.per_age);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("companyHotPositionDetailsList_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("per_age:");
            sb.append(this.per_age);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class companyHotPositionDetailsList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public companyHotPositionDetailsList_argsStandardScheme getScheme() {
                return new companyHotPositionDetailsList_argsStandardScheme();
            }
        }

        private static class companyHotPositionDetailsList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<companyHotPositionDetailsList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, companyHotPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PER_AGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.per_age = iprot.readI32();
                                struct.setPer_ageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, companyHotPositionDetailsList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PER_AGE_FIELD_DESC);
                oprot.writeI32(struct.per_age);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class companyHotPositionDetailsList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public companyHotPositionDetailsList_argsTupleScheme getScheme() {
                return new companyHotPositionDetailsList_argsTupleScheme();
            }
        }

        private static class companyHotPositionDetailsList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<companyHotPositionDetailsList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, companyHotPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPage()) {
                    optionals.set(1);
                }
                if (struct.isSetPer_age()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPer_age()) {
                    oprot.writeI32(struct.per_age);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, companyHotPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.per_age = iprot.readI32();
                    struct.setPer_ageIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class companyHotPositionDetailsList_result implements org.apache.thrift.TBase<companyHotPositionDetailsList_result, companyHotPositionDetailsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<companyHotPositionDetailsList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("companyHotPositionDetailsList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new companyHotPositionDetailsList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new companyHotPositionDetailsList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.PositionDetailsListVO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(companyHotPositionDetailsList_result.class, metaDataMap);
        }

        public companyHotPositionDetailsList_result() {
        }

        public companyHotPositionDetailsList_result(
                com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public companyHotPositionDetailsList_result(companyHotPositionDetailsList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO(other.success);
            }
        }

        public companyHotPositionDetailsList_result deepCopy() {
            return new companyHotPositionDetailsList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO getSuccess() {
            return this.success;
        }

        public companyHotPositionDetailsList_result setSuccess(com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.position.struct.PositionDetailsListVO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof companyHotPositionDetailsList_result)
                return this.equals((companyHotPositionDetailsList_result)that);
            return false;
        }

        public boolean equals(companyHotPositionDetailsList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(companyHotPositionDetailsList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("companyHotPositionDetailsList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class companyHotPositionDetailsList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public companyHotPositionDetailsList_resultStandardScheme getScheme() {
                return new companyHotPositionDetailsList_resultStandardScheme();
            }
        }

        private static class companyHotPositionDetailsList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<companyHotPositionDetailsList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, companyHotPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, companyHotPositionDetailsList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class companyHotPositionDetailsList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public companyHotPositionDetailsList_resultTupleScheme getScheme() {
                return new companyHotPositionDetailsList_resultTupleScheme();
            }
        }

        private static class companyHotPositionDetailsList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<companyHotPositionDetailsList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, companyHotPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, companyHotPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class similarityPositionDetailsList_args implements org.apache.thrift.TBase<similarityPositionDetailsList_args, similarityPositionDetailsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<similarityPositionDetailsList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("similarityPositionDetailsList_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PER_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("per_age", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new similarityPositionDetailsList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new similarityPositionDetailsList_argsTupleSchemeFactory();

        public int pid; // required
        public int page; // required
        public int per_age; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short)1, "pid"),
            PAGE((short)2, "page"),
            PER_AGE((short)3, "per_age");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // PAGE
                        return PAGE;
                    case 3: // PER_AGE
                        return PER_AGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PER_AGE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PER_AGE, new org.apache.thrift.meta_data.FieldMetaData("per_age", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(similarityPositionDetailsList_args.class, metaDataMap);
        }

        public similarityPositionDetailsList_args() {
        }

        public similarityPositionDetailsList_args(
                int pid,
                int page,
                int per_age)
        {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.per_age = per_age;
            setPer_ageIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public similarityPositionDetailsList_args(similarityPositionDetailsList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            this.page = other.page;
            this.per_age = other.per_age;
        }

        public similarityPositionDetailsList_args deepCopy() {
            return new similarityPositionDetailsList_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            setPageIsSet(false);
            this.page = 0;
            setPer_ageIsSet(false);
            this.per_age = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public similarityPositionDetailsList_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public similarityPositionDetailsList_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPer_age() {
            return this.per_age;
        }

        public similarityPositionDetailsList_args setPer_age(int per_age) {
            this.per_age = per_age;
            setPer_ageIsSet(true);
            return this;
        }

        public void unsetPer_age() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PER_AGE_ISSET_ID);
        }

        /** Returns true if field per_age is set (has been assigned a value) and false otherwise */
        public boolean isSetPer_age() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PER_AGE_ISSET_ID);
        }

        public void setPer_ageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PER_AGE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((java.lang.Integer)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PER_AGE:
                    if (value == null) {
                        unsetPer_age();
                    } else {
                        setPer_age((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case PAGE:
                    return getPage();

                case PER_AGE:
                    return getPer_age();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case PAGE:
                    return isSetPage();
                case PER_AGE:
                    return isSetPer_age();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof similarityPositionDetailsList_args)
                return this.equals((similarityPositionDetailsList_args)that);
            return false;
        }

        public boolean equals(similarityPositionDetailsList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_per_age = true;
            boolean that_present_per_age = true;
            if (this_present_per_age || that_present_per_age) {
                if (!(this_present_per_age && that_present_per_age))
                    return false;
                if (this.per_age != that.per_age)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + pid;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + per_age;

            return hashCode;
        }

        @Override
        public int compareTo(similarityPositionDetailsList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPer_age()).compareTo(other.isSetPer_age());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPer_age()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_age, other.per_age);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("similarityPositionDetailsList_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("per_age:");
            sb.append(this.per_age);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class similarityPositionDetailsList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public similarityPositionDetailsList_argsStandardScheme getScheme() {
                return new similarityPositionDetailsList_argsStandardScheme();
            }
        }

        private static class similarityPositionDetailsList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<similarityPositionDetailsList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, similarityPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PER_AGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.per_age = iprot.readI32();
                                struct.setPer_ageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, similarityPositionDetailsList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PER_AGE_FIELD_DESC);
                oprot.writeI32(struct.per_age);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class similarityPositionDetailsList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public similarityPositionDetailsList_argsTupleScheme getScheme() {
                return new similarityPositionDetailsList_argsTupleScheme();
            }
        }

        private static class similarityPositionDetailsList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<similarityPositionDetailsList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, similarityPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetPage()) {
                    optionals.set(1);
                }
                if (struct.isSetPer_age()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPer_age()) {
                    oprot.writeI32(struct.per_age);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, similarityPositionDetailsList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.per_age = iprot.readI32();
                    struct.setPer_ageIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class similarityPositionDetailsList_result implements org.apache.thrift.TBase<similarityPositionDetailsList_result, similarityPositionDetailsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<similarityPositionDetailsList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("similarityPositionDetailsList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new similarityPositionDetailsList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new similarityPositionDetailsList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.PositionDetailsListVO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(similarityPositionDetailsList_result.class, metaDataMap);
        }

        public similarityPositionDetailsList_result() {
        }

        public similarityPositionDetailsList_result(
                com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public similarityPositionDetailsList_result(similarityPositionDetailsList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO(other.success);
            }
        }

        public similarityPositionDetailsList_result deepCopy() {
            return new similarityPositionDetailsList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.position.struct.PositionDetailsListVO getSuccess() {
            return this.success;
        }

        public similarityPositionDetailsList_result setSuccess(com.moseeker.thrift.gen.position.struct.PositionDetailsListVO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.position.struct.PositionDetailsListVO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof similarityPositionDetailsList_result)
                return this.equals((similarityPositionDetailsList_result)that);
            return false;
        }

        public boolean equals(similarityPositionDetailsList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(similarityPositionDetailsList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("similarityPositionDetailsList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class similarityPositionDetailsList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public similarityPositionDetailsList_resultStandardScheme getScheme() {
                return new similarityPositionDetailsList_resultStandardScheme();
            }
        }

        private static class similarityPositionDetailsList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<similarityPositionDetailsList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, similarityPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, similarityPositionDetailsList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class similarityPositionDetailsList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public similarityPositionDetailsList_resultTupleScheme getScheme() {
                return new similarityPositionDetailsList_resultTupleScheme();
            }
        }

        private static class similarityPositionDetailsList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<similarityPositionDetailsList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, similarityPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, similarityPositionDetailsList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.position.struct.PositionDetailsListVO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdPartyPositionInfo_args implements org.apache.thrift.TBase<getThirdPartyPositionInfo_args, getThirdPartyPositionInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdPartyPositionInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdPartyPositionInfo_args");

        private static final org.apache.thrift.protocol.TField INFO_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("infoForm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdPartyPositionInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdPartyPositionInfo_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            INFO_FORM((short)1, "infoForm");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // INFO_FORM
                        return INFO_FORM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.INFO_FORM, new org.apache.thrift.meta_data.FieldMetaData("infoForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdPartyPositionInfo_args.class, metaDataMap);
        }

        public getThirdPartyPositionInfo_args() {
        }

        public getThirdPartyPositionInfo_args(
                com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm)
        {
            this();
            this.infoForm = infoForm;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdPartyPositionInfo_args(getThirdPartyPositionInfo_args other) {
            if (other.isSetInfoForm()) {
                this.infoForm = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm(other.infoForm);
            }
        }

        public getThirdPartyPositionInfo_args deepCopy() {
            return new getThirdPartyPositionInfo_args(this);
        }

        @Override
        public void clear() {
            this.infoForm = null;
        }

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm getInfoForm() {
            return this.infoForm;
        }

        public getThirdPartyPositionInfo_args setInfoForm(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm infoForm) {
            this.infoForm = infoForm;
            return this;
        }

        public void unsetInfoForm() {
            this.infoForm = null;
        }

        /** Returns true if field infoForm is set (has been assigned a value) and false otherwise */
        public boolean isSetInfoForm() {
            return this.infoForm != null;
        }

        public void setInfoFormIsSet(boolean value) {
            if (!value) {
                this.infoForm = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case INFO_FORM:
                    if (value == null) {
                        unsetInfoForm();
                    } else {
                        setInfoForm((com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case INFO_FORM:
                    return getInfoForm();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case INFO_FORM:
                    return isSetInfoForm();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdPartyPositionInfo_args)
                return this.equals((getThirdPartyPositionInfo_args)that);
            return false;
        }

        public boolean equals(getThirdPartyPositionInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_infoForm = true && this.isSetInfoForm();
            boolean that_present_infoForm = true && that.isSetInfoForm();
            if (this_present_infoForm || that_present_infoForm) {
                if (!(this_present_infoForm && that_present_infoForm))
                    return false;
                if (!this.infoForm.equals(that.infoForm))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetInfoForm()) ? 131071 : 524287);
            if (isSetInfoForm())
                hashCode = hashCode * 8191 + infoForm.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getThirdPartyPositionInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetInfoForm()).compareTo(other.isSetInfoForm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInfoForm()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoForm, other.infoForm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdPartyPositionInfo_args(");
            boolean first = true;

            sb.append("infoForm:");
            if (this.infoForm == null) {
                sb.append("null");
            } else {
                sb.append(this.infoForm);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (infoForm != null) {
                infoForm.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdPartyPositionInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositionInfo_argsStandardScheme getScheme() {
                return new getThirdPartyPositionInfo_argsStandardScheme();
            }
        }

        private static class getThirdPartyPositionInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdPartyPositionInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdPartyPositionInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // INFO_FORM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.infoForm = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm();
                                struct.infoForm.read(iprot);
                                struct.setInfoFormIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdPartyPositionInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.infoForm != null) {
                    oprot.writeFieldBegin(INFO_FORM_FIELD_DESC);
                    struct.infoForm.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdPartyPositionInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositionInfo_argsTupleScheme getScheme() {
                return new getThirdPartyPositionInfo_argsTupleScheme();
            }
        }

        private static class getThirdPartyPositionInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdPartyPositionInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositionInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetInfoForm()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetInfoForm()) {
                    struct.infoForm.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositionInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.infoForm = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionInfoForm();
                    struct.infoForm.read(iprot);
                    struct.setInfoFormIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdPartyPositionInfo_result implements org.apache.thrift.TBase<getThirdPartyPositionInfo_result, getThirdPartyPositionInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdPartyPositionInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdPartyPositionInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdPartyPositionInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdPartyPositionInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdPartyPositionInfo_result.class, metaDataMap);
        }

        public getThirdPartyPositionInfo_result() {
        }

        public getThirdPartyPositionInfo_result(
                com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdPartyPositionInfo_result(getThirdPartyPositionInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getThirdPartyPositionInfo_result deepCopy() {
            return new getThirdPartyPositionInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult getSuccess() {
            return this.success;
        }

        public getThirdPartyPositionInfo_result setSuccess(com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getThirdPartyPositionInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdPartyPositionInfo_result)
                return this.equals((getThirdPartyPositionInfo_result)that);
            return false;
        }

        public boolean equals(getThirdPartyPositionInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getThirdPartyPositionInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdPartyPositionInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdPartyPositionInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositionInfo_resultStandardScheme getScheme() {
                return new getThirdPartyPositionInfo_resultStandardScheme();
            }
        }

        private static class getThirdPartyPositionInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdPartyPositionInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdPartyPositionInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdPartyPositionInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdPartyPositionInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdPartyPositionInfo_resultTupleScheme getScheme() {
                return new getThirdPartyPositionInfo_resultTupleScheme();
            }
        }

        private static class getThirdPartyPositionInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdPartyPositionInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositionInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdPartyPositionInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.position.struct.ThirdPartyPositionResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateThirdPartyPosition_args implements org.apache.thrift.TBase<updateThirdPartyPosition_args, updateThirdPartyPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateThirdPartyPosition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateThirdPartyPosition_args");

        private static final org.apache.thrift.protocol.TField THIRD_PARTY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyPosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField EXT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("extData", org.apache.thrift.protocol.TType.MAP, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateThirdPartyPosition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateThirdPartyPosition_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition; // required
        public java.util.Map<java.lang.String,java.lang.String> extData; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            THIRD_PARTY_POSITION((short)1, "thirdPartyPosition"),
            EXT_DATA((short)2, "extData");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // THIRD_PARTY_POSITION
                        return THIRD_PARTY_POSITION;
                    case 2: // EXT_DATA
                        return EXT_DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.THIRD_PARTY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyPosition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO.class)));
            tmpMap.put(_Fields.EXT_DATA, new org.apache.thrift.meta_data.FieldMetaData("extData", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateThirdPartyPosition_args.class, metaDataMap);
        }

        public updateThirdPartyPosition_args() {
        }

        public updateThirdPartyPosition_args(
                com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition,
                java.util.Map<java.lang.String,java.lang.String> extData)
        {
            this();
            this.thirdPartyPosition = thirdPartyPosition;
            this.extData = extData;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateThirdPartyPosition_args(updateThirdPartyPosition_args other) {
            if (other.isSetThirdPartyPosition()) {
                this.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO(other.thirdPartyPosition);
            }
            if (other.isSetExtData()) {
                java.util.Map<java.lang.String,java.lang.String> __this__extData = new java.util.HashMap<java.lang.String,java.lang.String>(other.extData);
                this.extData = __this__extData;
            }
        }

        public updateThirdPartyPosition_args deepCopy() {
            return new updateThirdPartyPosition_args(this);
        }

        @Override
        public void clear() {
            this.thirdPartyPosition = null;
            this.extData = null;
        }

        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO getThirdPartyPosition() {
            return this.thirdPartyPosition;
        }

        public updateThirdPartyPosition_args setThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition) {
            this.thirdPartyPosition = thirdPartyPosition;
            return this;
        }

        public void unsetThirdPartyPosition() {
            this.thirdPartyPosition = null;
        }

        /** Returns true if field thirdPartyPosition is set (has been assigned a value) and false otherwise */
        public boolean isSetThirdPartyPosition() {
            return this.thirdPartyPosition != null;
        }

        public void setThirdPartyPositionIsSet(boolean value) {
            if (!value) {
                this.thirdPartyPosition = null;
            }
        }

        public int getExtDataSize() {
            return (this.extData == null) ? 0 : this.extData.size();
        }

        public void putToExtData(java.lang.String key, java.lang.String val) {
            if (this.extData == null) {
                this.extData = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.extData.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getExtData() {
            return this.extData;
        }

        public updateThirdPartyPosition_args setExtData(java.util.Map<java.lang.String,java.lang.String> extData) {
            this.extData = extData;
            return this;
        }

        public void unsetExtData() {
            this.extData = null;
        }

        /** Returns true if field extData is set (has been assigned a value) and false otherwise */
        public boolean isSetExtData() {
            return this.extData != null;
        }

        public void setExtDataIsSet(boolean value) {
            if (!value) {
                this.extData = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case THIRD_PARTY_POSITION:
                    if (value == null) {
                        unsetThirdPartyPosition();
                    } else {
                        setThirdPartyPosition((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO)value);
                    }
                    break;

                case EXT_DATA:
                    if (value == null) {
                        unsetExtData();
                    } else {
                        setExtData((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case THIRD_PARTY_POSITION:
                    return getThirdPartyPosition();

                case EXT_DATA:
                    return getExtData();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case THIRD_PARTY_POSITION:
                    return isSetThirdPartyPosition();
                case EXT_DATA:
                    return isSetExtData();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateThirdPartyPosition_args)
                return this.equals((updateThirdPartyPosition_args)that);
            return false;
        }

        public boolean equals(updateThirdPartyPosition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_thirdPartyPosition = true && this.isSetThirdPartyPosition();
            boolean that_present_thirdPartyPosition = true && that.isSetThirdPartyPosition();
            if (this_present_thirdPartyPosition || that_present_thirdPartyPosition) {
                if (!(this_present_thirdPartyPosition && that_present_thirdPartyPosition))
                    return false;
                if (!this.thirdPartyPosition.equals(that.thirdPartyPosition))
                    return false;
            }

            boolean this_present_extData = true && this.isSetExtData();
            boolean that_present_extData = true && that.isSetExtData();
            if (this_present_extData || that_present_extData) {
                if (!(this_present_extData && that_present_extData))
                    return false;
                if (!this.extData.equals(that.extData))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetThirdPartyPosition()) ? 131071 : 524287);
            if (isSetThirdPartyPosition())
                hashCode = hashCode * 8191 + thirdPartyPosition.hashCode();

            hashCode = hashCode * 8191 + ((isSetExtData()) ? 131071 : 524287);
            if (isSetExtData())
                hashCode = hashCode * 8191 + extData.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateThirdPartyPosition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetThirdPartyPosition()).compareTo(other.isSetThirdPartyPosition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThirdPartyPosition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyPosition, other.thirdPartyPosition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetExtData()).compareTo(other.isSetExtData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExtData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extData, other.extData);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateThirdPartyPosition_args(");
            boolean first = true;

            sb.append("thirdPartyPosition:");
            if (this.thirdPartyPosition == null) {
                sb.append("null");
            } else {
                sb.append(this.thirdPartyPosition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("extData:");
            if (this.extData == null) {
                sb.append("null");
            } else {
                sb.append(this.extData);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (thirdPartyPosition != null) {
                thirdPartyPosition.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateThirdPartyPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPosition_argsStandardScheme getScheme() {
                return new updateThirdPartyPosition_argsStandardScheme();
            }
        }

        private static class updateThirdPartyPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateThirdPartyPosition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateThirdPartyPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THIRD_PARTY_POSITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO();
                                struct.thirdPartyPosition.read(iprot);
                                struct.setThirdPartyPositionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EXT_DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                                    struct.extData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map48.size);
                                    java.lang.String _key49;
                                    java.lang.String _val50;
                                    for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                                    {
                                        _key49 = iprot.readString();
                                        _val50 = iprot.readString();
                                        struct.extData.put(_key49, _val50);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setExtDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateThirdPartyPosition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thirdPartyPosition != null) {
                    oprot.writeFieldBegin(THIRD_PARTY_POSITION_FIELD_DESC);
                    struct.thirdPartyPosition.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.extData != null) {
                    oprot.writeFieldBegin(EXT_DATA_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extData.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter52 : struct.extData.entrySet())
                        {
                            oprot.writeString(_iter52.getKey());
                            oprot.writeString(_iter52.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateThirdPartyPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPosition_argsTupleScheme getScheme() {
                return new updateThirdPartyPosition_argsTupleScheme();
            }
        }

        private static class updateThirdPartyPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateThirdPartyPosition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetThirdPartyPosition()) {
                    optionals.set(0);
                }
                if (struct.isSetExtData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetThirdPartyPosition()) {
                    struct.thirdPartyPosition.write(oprot);
                }
                if (struct.isSetExtData()) {
                    {
                        oprot.writeI32(struct.extData.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter53 : struct.extData.entrySet())
                        {
                            oprot.writeString(_iter53.getKey());
                            oprot.writeString(_iter53.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO();
                    struct.thirdPartyPosition.read(iprot);
                    struct.setThirdPartyPositionIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.extData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map54.size);
                        java.lang.String _key55;
                        java.lang.String _val56;
                        for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                        {
                            _key55 = iprot.readString();
                            _val56 = iprot.readString();
                            struct.extData.put(_key55, _val56);
                        }
                    }
                    struct.setExtDataIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateThirdPartyPosition_result implements org.apache.thrift.TBase<updateThirdPartyPosition_result, updateThirdPartyPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateThirdPartyPosition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateThirdPartyPosition_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateThirdPartyPosition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateThirdPartyPosition_resultTupleSchemeFactory();

        public int success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateThirdPartyPosition_result.class, metaDataMap);
        }

        public updateThirdPartyPosition_result() {
        }

        public updateThirdPartyPosition_result(
                int success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateThirdPartyPosition_result(updateThirdPartyPosition_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateThirdPartyPosition_result deepCopy() {
            return new updateThirdPartyPosition_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.e = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public updateThirdPartyPosition_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateThirdPartyPosition_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateThirdPartyPosition_result)
                return this.equals((updateThirdPartyPosition_result)that);
            return false;
        }

        public boolean equals(updateThirdPartyPosition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateThirdPartyPosition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateThirdPartyPosition_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateThirdPartyPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPosition_resultStandardScheme getScheme() {
                return new updateThirdPartyPosition_resultStandardScheme();
            }
        }

        private static class updateThirdPartyPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateThirdPartyPosition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateThirdPartyPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateThirdPartyPosition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateThirdPartyPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPosition_resultTupleScheme getScheme() {
                return new updateThirdPartyPosition_resultTupleScheme();
            }
        }

        private static class updateThirdPartyPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateThirdPartyPosition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateThirdPartyPositionWithAccount_args implements org.apache.thrift.TBase<updateThirdPartyPositionWithAccount_args, updateThirdPartyPositionWithAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateThirdPartyPositionWithAccount_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateThirdPartyPositionWithAccount_args");

        private static final org.apache.thrift.protocol.TField THIRD_PARTY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyPosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccount", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField EXT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("extData", org.apache.thrift.protocol.TType.MAP, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateThirdPartyPositionWithAccount_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateThirdPartyPositionWithAccount_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition; // required
        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount; // required
        public java.util.Map<java.lang.String,java.lang.String> extData; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            THIRD_PARTY_POSITION((short)1, "thirdPartyPosition"),
            THIRD_PARTY_ACCOUNT((short)2, "thirdPartyAccount"),
            EXT_DATA((short)3, "extData");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // THIRD_PARTY_POSITION
                        return THIRD_PARTY_POSITION;
                    case 2: // THIRD_PARTY_ACCOUNT
                        return THIRD_PARTY_ACCOUNT;
                    case 3: // EXT_DATA
                        return EXT_DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.THIRD_PARTY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyPosition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO.class)));
            tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccount", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO.class)));
            tmpMap.put(_Fields.EXT_DATA, new org.apache.thrift.meta_data.FieldMetaData("extData", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateThirdPartyPositionWithAccount_args.class, metaDataMap);
        }

        public updateThirdPartyPositionWithAccount_args() {
        }

        public updateThirdPartyPositionWithAccount_args(
                com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition,
                com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount,
                java.util.Map<java.lang.String,java.lang.String> extData)
        {
            this();
            this.thirdPartyPosition = thirdPartyPosition;
            this.thirdPartyAccount = thirdPartyAccount;
            this.extData = extData;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateThirdPartyPositionWithAccount_args(updateThirdPartyPositionWithAccount_args other) {
            if (other.isSetThirdPartyPosition()) {
                this.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO(other.thirdPartyPosition);
            }
            if (other.isSetThirdPartyAccount()) {
                this.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO(other.thirdPartyAccount);
            }
            if (other.isSetExtData()) {
                java.util.Map<java.lang.String,java.lang.String> __this__extData = new java.util.HashMap<java.lang.String,java.lang.String>(other.extData);
                this.extData = __this__extData;
            }
        }

        public updateThirdPartyPositionWithAccount_args deepCopy() {
            return new updateThirdPartyPositionWithAccount_args(this);
        }

        @Override
        public void clear() {
            this.thirdPartyPosition = null;
            this.thirdPartyAccount = null;
            this.extData = null;
        }

        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO getThirdPartyPosition() {
            return this.thirdPartyPosition;
        }

        public updateThirdPartyPositionWithAccount_args setThirdPartyPosition(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO thirdPartyPosition) {
            this.thirdPartyPosition = thirdPartyPosition;
            return this;
        }

        public void unsetThirdPartyPosition() {
            this.thirdPartyPosition = null;
        }

        /** Returns true if field thirdPartyPosition is set (has been assigned a value) and false otherwise */
        public boolean isSetThirdPartyPosition() {
            return this.thirdPartyPosition != null;
        }

        public void setThirdPartyPositionIsSet(boolean value) {
            if (!value) {
                this.thirdPartyPosition = null;
            }
        }

        public com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO getThirdPartyAccount() {
            return this.thirdPartyAccount;
        }

        public updateThirdPartyPositionWithAccount_args setThirdPartyAccount(com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO thirdPartyAccount) {
            this.thirdPartyAccount = thirdPartyAccount;
            return this;
        }

        public void unsetThirdPartyAccount() {
            this.thirdPartyAccount = null;
        }

        /** Returns true if field thirdPartyAccount is set (has been assigned a value) and false otherwise */
        public boolean isSetThirdPartyAccount() {
            return this.thirdPartyAccount != null;
        }

        public void setThirdPartyAccountIsSet(boolean value) {
            if (!value) {
                this.thirdPartyAccount = null;
            }
        }

        public int getExtDataSize() {
            return (this.extData == null) ? 0 : this.extData.size();
        }

        public void putToExtData(java.lang.String key, java.lang.String val) {
            if (this.extData == null) {
                this.extData = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.extData.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getExtData() {
            return this.extData;
        }

        public updateThirdPartyPositionWithAccount_args setExtData(java.util.Map<java.lang.String,java.lang.String> extData) {
            this.extData = extData;
            return this;
        }

        public void unsetExtData() {
            this.extData = null;
        }

        /** Returns true if field extData is set (has been assigned a value) and false otherwise */
        public boolean isSetExtData() {
            return this.extData != null;
        }

        public void setExtDataIsSet(boolean value) {
            if (!value) {
                this.extData = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case THIRD_PARTY_POSITION:
                    if (value == null) {
                        unsetThirdPartyPosition();
                    } else {
                        setThirdPartyPosition((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO)value);
                    }
                    break;

                case THIRD_PARTY_ACCOUNT:
                    if (value == null) {
                        unsetThirdPartyAccount();
                    } else {
                        setThirdPartyAccount((com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO)value);
                    }
                    break;

                case EXT_DATA:
                    if (value == null) {
                        unsetExtData();
                    } else {
                        setExtData((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case THIRD_PARTY_POSITION:
                    return getThirdPartyPosition();

                case THIRD_PARTY_ACCOUNT:
                    return getThirdPartyAccount();

                case EXT_DATA:
                    return getExtData();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case THIRD_PARTY_POSITION:
                    return isSetThirdPartyPosition();
                case THIRD_PARTY_ACCOUNT:
                    return isSetThirdPartyAccount();
                case EXT_DATA:
                    return isSetExtData();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateThirdPartyPositionWithAccount_args)
                return this.equals((updateThirdPartyPositionWithAccount_args)that);
            return false;
        }

        public boolean equals(updateThirdPartyPositionWithAccount_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_thirdPartyPosition = true && this.isSetThirdPartyPosition();
            boolean that_present_thirdPartyPosition = true && that.isSetThirdPartyPosition();
            if (this_present_thirdPartyPosition || that_present_thirdPartyPosition) {
                if (!(this_present_thirdPartyPosition && that_present_thirdPartyPosition))
                    return false;
                if (!this.thirdPartyPosition.equals(that.thirdPartyPosition))
                    return false;
            }

            boolean this_present_thirdPartyAccount = true && this.isSetThirdPartyAccount();
            boolean that_present_thirdPartyAccount = true && that.isSetThirdPartyAccount();
            if (this_present_thirdPartyAccount || that_present_thirdPartyAccount) {
                if (!(this_present_thirdPartyAccount && that_present_thirdPartyAccount))
                    return false;
                if (!this.thirdPartyAccount.equals(that.thirdPartyAccount))
                    return false;
            }

            boolean this_present_extData = true && this.isSetExtData();
            boolean that_present_extData = true && that.isSetExtData();
            if (this_present_extData || that_present_extData) {
                if (!(this_present_extData && that_present_extData))
                    return false;
                if (!this.extData.equals(that.extData))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetThirdPartyPosition()) ? 131071 : 524287);
            if (isSetThirdPartyPosition())
                hashCode = hashCode * 8191 + thirdPartyPosition.hashCode();

            hashCode = hashCode * 8191 + ((isSetThirdPartyAccount()) ? 131071 : 524287);
            if (isSetThirdPartyAccount())
                hashCode = hashCode * 8191 + thirdPartyAccount.hashCode();

            hashCode = hashCode * 8191 + ((isSetExtData()) ? 131071 : 524287);
            if (isSetExtData())
                hashCode = hashCode * 8191 + extData.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateThirdPartyPositionWithAccount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetThirdPartyPosition()).compareTo(other.isSetThirdPartyPosition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThirdPartyPosition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyPosition, other.thirdPartyPosition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetThirdPartyAccount()).compareTo(other.isSetThirdPartyAccount());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetThirdPartyAccount()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccount, other.thirdPartyAccount);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetExtData()).compareTo(other.isSetExtData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExtData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extData, other.extData);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateThirdPartyPositionWithAccount_args(");
            boolean first = true;

            sb.append("thirdPartyPosition:");
            if (this.thirdPartyPosition == null) {
                sb.append("null");
            } else {
                sb.append(this.thirdPartyPosition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("thirdPartyAccount:");
            if (this.thirdPartyAccount == null) {
                sb.append("null");
            } else {
                sb.append(this.thirdPartyAccount);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("extData:");
            if (this.extData == null) {
                sb.append("null");
            } else {
                sb.append(this.extData);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (thirdPartyPosition != null) {
                thirdPartyPosition.validate();
            }
            if (thirdPartyAccount != null) {
                thirdPartyAccount.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateThirdPartyPositionWithAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPositionWithAccount_argsStandardScheme getScheme() {
                return new updateThirdPartyPositionWithAccount_argsStandardScheme();
            }
        }

        private static class updateThirdPartyPositionWithAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateThirdPartyPositionWithAccount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateThirdPartyPositionWithAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THIRD_PARTY_POSITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO();
                                struct.thirdPartyPosition.read(iprot);
                                struct.setThirdPartyPositionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // THIRD_PARTY_ACCOUNT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
                                struct.thirdPartyAccount.read(iprot);
                                struct.setThirdPartyAccountIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // EXT_DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                                    struct.extData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map58.size);
                                    java.lang.String _key59;
                                    java.lang.String _val60;
                                    for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                                    {
                                        _key59 = iprot.readString();
                                        _val60 = iprot.readString();
                                        struct.extData.put(_key59, _val60);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setExtDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateThirdPartyPositionWithAccount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thirdPartyPosition != null) {
                    oprot.writeFieldBegin(THIRD_PARTY_POSITION_FIELD_DESC);
                    struct.thirdPartyPosition.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.thirdPartyAccount != null) {
                    oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_FIELD_DESC);
                    struct.thirdPartyAccount.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.extData != null) {
                    oprot.writeFieldBegin(EXT_DATA_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extData.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter62 : struct.extData.entrySet())
                        {
                            oprot.writeString(_iter62.getKey());
                            oprot.writeString(_iter62.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateThirdPartyPositionWithAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPositionWithAccount_argsTupleScheme getScheme() {
                return new updateThirdPartyPositionWithAccount_argsTupleScheme();
            }
        }

        private static class updateThirdPartyPositionWithAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateThirdPartyPositionWithAccount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPositionWithAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetThirdPartyPosition()) {
                    optionals.set(0);
                }
                if (struct.isSetThirdPartyAccount()) {
                    optionals.set(1);
                }
                if (struct.isSetExtData()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetThirdPartyPosition()) {
                    struct.thirdPartyPosition.write(oprot);
                }
                if (struct.isSetThirdPartyAccount()) {
                    struct.thirdPartyAccount.write(oprot);
                }
                if (struct.isSetExtData()) {
                    {
                        oprot.writeI32(struct.extData.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter63 : struct.extData.entrySet())
                        {
                            oprot.writeString(_iter63.getKey());
                            oprot.writeString(_iter63.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPositionWithAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.thirdPartyPosition = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyPositionDO();
                    struct.thirdPartyPosition.read(iprot);
                    struct.setThirdPartyPositionIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.thirdPartyAccount = new com.moseeker.thrift.gen.dao.struct.hrdb.HrThirdPartyAccountDO();
                    struct.thirdPartyAccount.read(iprot);
                    struct.setThirdPartyAccountIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.extData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map64.size);
                        java.lang.String _key65;
                        java.lang.String _val66;
                        for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                        {
                            _key65 = iprot.readString();
                            _val66 = iprot.readString();
                            struct.extData.put(_key65, _val66);
                        }
                    }
                    struct.setExtDataIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateThirdPartyPositionWithAccount_result implements org.apache.thrift.TBase<updateThirdPartyPositionWithAccount_result, updateThirdPartyPositionWithAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateThirdPartyPositionWithAccount_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateThirdPartyPositionWithAccount_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateThirdPartyPositionWithAccount_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateThirdPartyPositionWithAccount_resultTupleSchemeFactory();

        public int success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateThirdPartyPositionWithAccount_result.class, metaDataMap);
        }

        public updateThirdPartyPositionWithAccount_result() {
        }

        public updateThirdPartyPositionWithAccount_result(
                int success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateThirdPartyPositionWithAccount_result(updateThirdPartyPositionWithAccount_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateThirdPartyPositionWithAccount_result deepCopy() {
            return new updateThirdPartyPositionWithAccount_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.e = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public updateThirdPartyPositionWithAccount_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateThirdPartyPositionWithAccount_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateThirdPartyPositionWithAccount_result)
                return this.equals((updateThirdPartyPositionWithAccount_result)that);
            return false;
        }

        public boolean equals(updateThirdPartyPositionWithAccount_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateThirdPartyPositionWithAccount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateThirdPartyPositionWithAccount_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateThirdPartyPositionWithAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPositionWithAccount_resultStandardScheme getScheme() {
                return new updateThirdPartyPositionWithAccount_resultStandardScheme();
            }
        }

        private static class updateThirdPartyPositionWithAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateThirdPartyPositionWithAccount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateThirdPartyPositionWithAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateThirdPartyPositionWithAccount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateThirdPartyPositionWithAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateThirdPartyPositionWithAccount_resultTupleScheme getScheme() {
                return new updateThirdPartyPositionWithAccount_resultTupleScheme();
            }
        }

        private static class updateThirdPartyPositionWithAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateThirdPartyPositionWithAccount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPositionWithAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateThirdPartyPositionWithAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommand_args implements org.apache.thrift.TBase<getPcRecommand_args, getPcRecommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommand_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommand_args");

        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommand_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommand_argsTupleSchemeFactory();

        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAGE((short)1, "page"),
            PAGE_SIZE((short)2, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PAGE
                        return PAGE;
                    case 2: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommand_args.class, metaDataMap);
        }

        public getPcRecommand_args() {
        }

        public getPcRecommand_args(
                int page,
                int pageSize)
        {
            this();
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommand_args(getPcRecommand_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getPcRecommand_args deepCopy() {
            return new getPcRecommand_args(this);
        }

        @Override
        public void clear() {
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getPage() {
            return this.page;
        }

        public getPcRecommand_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPcRecommand_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommand_args)
                return this.equals((getPcRecommand_args)that);
            return false;
        }

        public boolean equals(getPcRecommand_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommand_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommand_args(");
            boolean first = true;

            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommand_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommand_argsStandardScheme getScheme() {
                return new getPcRecommand_argsStandardScheme();
            }
        }

        private static class getPcRecommand_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommand_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommand_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommand_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommand_argsTupleScheme getScheme() {
                return new getPcRecommand_argsTupleScheme();
            }
        }

        private static class getPcRecommand_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommand_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPage()) {
                    optionals.set(0);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommand_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommand_result implements org.apache.thrift.TBase<getPcRecommand_result, getPcRecommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommand_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommand_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommand_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommand_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommand_result.class, metaDataMap);
        }

        public getPcRecommand_result() {
        }

        public getPcRecommand_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommand_result(getPcRecommand_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcRecommand_result deepCopy() {
            return new getPcRecommand_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcRecommand_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommand_result)
                return this.equals((getPcRecommand_result)that);
            return false;
        }

        public boolean equals(getPcRecommand_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommand_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommand_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommand_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommand_resultStandardScheme getScheme() {
                return new getPcRecommand_resultStandardScheme();
            }
        }

        private static class getPcRecommand_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommand_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommand_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommand_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommand_resultTupleScheme getScheme() {
                return new getPcRecommand_resultTupleScheme();
            }
        }

        private static class getPcRecommand_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommand_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommand_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommandCompany_args implements org.apache.thrift.TBase<getPcRecommandCompany_args, getPcRecommandCompany_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommandCompany_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommandCompany_args");

        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommandCompany_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommandCompany_argsTupleSchemeFactory();

        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAGE((short)1, "page"),
            PAGE_SIZE((short)2, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PAGE
                        return PAGE;
                    case 2: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommandCompany_args.class, metaDataMap);
        }

        public getPcRecommandCompany_args() {
        }

        public getPcRecommandCompany_args(
                int page,
                int pageSize)
        {
            this();
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommandCompany_args(getPcRecommandCompany_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getPcRecommandCompany_args deepCopy() {
            return new getPcRecommandCompany_args(this);
        }

        @Override
        public void clear() {
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getPage() {
            return this.page;
        }

        public getPcRecommandCompany_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPcRecommandCompany_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommandCompany_args)
                return this.equals((getPcRecommandCompany_args)that);
            return false;
        }

        public boolean equals(getPcRecommandCompany_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommandCompany_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommandCompany_args(");
            boolean first = true;

            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommandCompany_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompany_argsStandardScheme getScheme() {
                return new getPcRecommandCompany_argsStandardScheme();
            }
        }

        private static class getPcRecommandCompany_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommandCompany_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommandCompany_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommandCompany_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommandCompany_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompany_argsTupleScheme getScheme() {
                return new getPcRecommandCompany_argsTupleScheme();
            }
        }

        private static class getPcRecommandCompany_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommandCompany_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompany_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPage()) {
                    optionals.set(0);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompany_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommandCompany_result implements org.apache.thrift.TBase<getPcRecommandCompany_result, getPcRecommandCompany_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommandCompany_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommandCompany_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommandCompany_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommandCompany_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommandCompany_result.class, metaDataMap);
        }

        public getPcRecommandCompany_result() {
        }

        public getPcRecommandCompany_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommandCompany_result(getPcRecommandCompany_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcRecommandCompany_result deepCopy() {
            return new getPcRecommandCompany_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcRecommandCompany_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommandCompany_result)
                return this.equals((getPcRecommandCompany_result)that);
            return false;
        }

        public boolean equals(getPcRecommandCompany_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommandCompany_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommandCompany_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommandCompany_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompany_resultStandardScheme getScheme() {
                return new getPcRecommandCompany_resultStandardScheme();
            }
        }

        private static class getPcRecommandCompany_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommandCompany_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommandCompany_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommandCompany_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommandCompany_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompany_resultTupleScheme getScheme() {
                return new getPcRecommandCompany_resultTupleScheme();
            }
        }

        private static class getPcRecommandCompany_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommandCompany_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompany_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompany_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommandCompanyAll_args implements org.apache.thrift.TBase<getPcRecommandCompanyAll_args, getPcRecommandCompanyAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommandCompanyAll_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommandCompanyAll_args");

        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommandCompanyAll_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommandCompanyAll_argsTupleSchemeFactory();

        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAGE((short)1, "page"),
            PAGE_SIZE((short)2, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PAGE
                        return PAGE;
                    case 2: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommandCompanyAll_args.class, metaDataMap);
        }

        public getPcRecommandCompanyAll_args() {
        }

        public getPcRecommandCompanyAll_args(
                int page,
                int pageSize)
        {
            this();
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommandCompanyAll_args(getPcRecommandCompanyAll_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getPcRecommandCompanyAll_args deepCopy() {
            return new getPcRecommandCompanyAll_args(this);
        }

        @Override
        public void clear() {
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getPage() {
            return this.page;
        }

        public getPcRecommandCompanyAll_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPcRecommandCompanyAll_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommandCompanyAll_args)
                return this.equals((getPcRecommandCompanyAll_args)that);
            return false;
        }

        public boolean equals(getPcRecommandCompanyAll_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommandCompanyAll_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommandCompanyAll_args(");
            boolean first = true;

            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommandCompanyAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompanyAll_argsStandardScheme getScheme() {
                return new getPcRecommandCompanyAll_argsStandardScheme();
            }
        }

        private static class getPcRecommandCompanyAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommandCompanyAll_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommandCompanyAll_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommandCompanyAll_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommandCompanyAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompanyAll_argsTupleScheme getScheme() {
                return new getPcRecommandCompanyAll_argsTupleScheme();
            }
        }

        private static class getPcRecommandCompanyAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommandCompanyAll_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompanyAll_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPage()) {
                    optionals.set(0);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompanyAll_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommandCompanyAll_result implements org.apache.thrift.TBase<getPcRecommandCompanyAll_result, getPcRecommandCompanyAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommandCompanyAll_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommandCompanyAll_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommandCompanyAll_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommandCompanyAll_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommandCompanyAll_result.class, metaDataMap);
        }

        public getPcRecommandCompanyAll_result() {
        }

        public getPcRecommandCompanyAll_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommandCompanyAll_result(getPcRecommandCompanyAll_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcRecommandCompanyAll_result deepCopy() {
            return new getPcRecommandCompanyAll_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcRecommandCompanyAll_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommandCompanyAll_result)
                return this.equals((getPcRecommandCompanyAll_result)that);
            return false;
        }

        public boolean equals(getPcRecommandCompanyAll_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommandCompanyAll_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommandCompanyAll_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommandCompanyAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompanyAll_resultStandardScheme getScheme() {
                return new getPcRecommandCompanyAll_resultStandardScheme();
            }
        }

        private static class getPcRecommandCompanyAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommandCompanyAll_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommandCompanyAll_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommandCompanyAll_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommandCompanyAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommandCompanyAll_resultTupleScheme getScheme() {
                return new getPcRecommandCompanyAll_resultTupleScheme();
            }
        }

        private static class getPcRecommandCompanyAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommandCompanyAll_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompanyAll_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommandCompanyAll_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcPositionDetail_args implements org.apache.thrift.TBase<getPcPositionDetail_args, getPcPositionDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcPositionDetail_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcPositionDetail_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcPositionDetail_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcPositionDetail_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcPositionDetail_args.class, metaDataMap);
        }

        public getPcPositionDetail_args() {
        }

        public getPcPositionDetail_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcPositionDetail_args(getPcPositionDetail_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public getPcPositionDetail_args deepCopy() {
            return new getPcPositionDetail_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getPcPositionDetail_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcPositionDetail_args)
                return this.equals((getPcPositionDetail_args)that);
            return false;
        }

        public boolean equals(getPcPositionDetail_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getPcPositionDetail_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcPositionDetail_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcPositionDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcPositionDetail_argsStandardScheme getScheme() {
                return new getPcPositionDetail_argsStandardScheme();
            }
        }

        private static class getPcPositionDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcPositionDetail_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcPositionDetail_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcPositionDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcPositionDetail_argsTupleScheme getScheme() {
                return new getPcPositionDetail_argsTupleScheme();
            }
        }

        private static class getPcPositionDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcPositionDetail_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcPositionDetail_result implements org.apache.thrift.TBase<getPcPositionDetail_result, getPcPositionDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcPositionDetail_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcPositionDetail_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcPositionDetail_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcPositionDetail_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcPositionDetail_result.class, metaDataMap);
        }

        public getPcPositionDetail_result() {
        }

        public getPcPositionDetail_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcPositionDetail_result(getPcPositionDetail_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcPositionDetail_result deepCopy() {
            return new getPcPositionDetail_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcPositionDetail_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcPositionDetail_result)
                return this.equals((getPcPositionDetail_result)that);
            return false;
        }

        public boolean equals(getPcPositionDetail_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcPositionDetail_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcPositionDetail_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcPositionDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcPositionDetail_resultStandardScheme getScheme() {
                return new getPcPositionDetail_resultStandardScheme();
            }
        }

        private static class getPcPositionDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcPositionDetail_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcPositionDetail_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcPositionDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcPositionDetail_resultTupleScheme getScheme() {
                return new getPcPositionDetail_resultTupleScheme();
            }
        }

        private static class getPcPositionDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcPositionDetail_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommendPosition_args implements org.apache.thrift.TBase<getPcRecommendPosition_args, getPcRecommendPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommendPosition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommendPosition_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommendPosition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommendPosition_argsTupleSchemeFactory();

        public int positionId; // required
        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId"),
            PAGE((short)2, "page"),
            PAGE_SIZE((short)3, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    case 2: // PAGE
                        return PAGE;
                    case 3: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommendPosition_args.class, metaDataMap);
        }

        public getPcRecommendPosition_args() {
        }

        public getPcRecommendPosition_args(
                int positionId,
                int page,
                int pageSize)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommendPosition_args(getPcRecommendPosition_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getPcRecommendPosition_args deepCopy() {
            return new getPcRecommendPosition_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getPcRecommendPosition_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public getPcRecommendPosition_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPcRecommendPosition_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommendPosition_args)
                return this.equals((getPcRecommendPosition_args)that);
            return false;
        }

        public boolean equals(getPcRecommendPosition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommendPosition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommendPosition_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommendPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommendPosition_argsStandardScheme getScheme() {
                return new getPcRecommendPosition_argsStandardScheme();
            }
        }

        private static class getPcRecommendPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommendPosition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommendPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommendPosition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommendPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommendPosition_argsTupleScheme getScheme() {
                return new getPcRecommendPosition_argsTupleScheme();
            }
        }

        private static class getPcRecommendPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommendPosition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommendPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                if (struct.isSetPage()) {
                    optionals.set(1);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommendPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcRecommendPosition_result implements org.apache.thrift.TBase<getPcRecommendPosition_result, getPcRecommendPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcRecommendPosition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcRecommendPosition_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcRecommendPosition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcRecommendPosition_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcRecommendPosition_result.class, metaDataMap);
        }

        public getPcRecommendPosition_result() {
        }

        public getPcRecommendPosition_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcRecommendPosition_result(getPcRecommendPosition_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcRecommendPosition_result deepCopy() {
            return new getPcRecommendPosition_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcRecommendPosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcRecommendPosition_result)
                return this.equals((getPcRecommendPosition_result)that);
            return false;
        }

        public boolean equals(getPcRecommendPosition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcRecommendPosition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcRecommendPosition_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcRecommendPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommendPosition_resultStandardScheme getScheme() {
                return new getPcRecommendPosition_resultStandardScheme();
            }
        }

        private static class getPcRecommendPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcRecommendPosition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcRecommendPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcRecommendPosition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcRecommendPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcRecommendPosition_resultTupleScheme getScheme() {
                return new getPcRecommendPosition_resultTupleScheme();
            }
        }

        private static class getPcRecommendPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcRecommendPosition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcRecommendPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcRecommendPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPcReport_args implements org.apache.thrift.TBase<addPcReport_args, addPcReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPcReport_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPcReport_args");

        private static final org.apache.thrift.protocol.TField JOB_PC_REPORTED_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPcReportedDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPcReport_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPcReport_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            JOB_PC_REPORTED_DO((short)1, "jobPcReportedDO");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // JOB_PC_REPORTED_DO
                        return JOB_PC_REPORTED_DO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.JOB_PC_REPORTED_DO, new org.apache.thrift.meta_data.FieldMetaData("jobPcReportedDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPcReport_args.class, metaDataMap);
        }

        public addPcReport_args() {
        }

        public addPcReport_args(
                com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO)
        {
            this();
            this.jobPcReportedDO = jobPcReportedDO;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPcReport_args(addPcReport_args other) {
            if (other.isSetJobPcReportedDO()) {
                this.jobPcReportedDO = new com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO(other.jobPcReportedDO);
            }
        }

        public addPcReport_args deepCopy() {
            return new addPcReport_args(this);
        }

        @Override
        public void clear() {
            this.jobPcReportedDO = null;
        }

        public com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO getJobPcReportedDO() {
            return this.jobPcReportedDO;
        }

        public addPcReport_args setJobPcReportedDO(com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO jobPcReportedDO) {
            this.jobPcReportedDO = jobPcReportedDO;
            return this;
        }

        public void unsetJobPcReportedDO() {
            this.jobPcReportedDO = null;
        }

        /** Returns true if field jobPcReportedDO is set (has been assigned a value) and false otherwise */
        public boolean isSetJobPcReportedDO() {
            return this.jobPcReportedDO != null;
        }

        public void setJobPcReportedDOIsSet(boolean value) {
            if (!value) {
                this.jobPcReportedDO = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case JOB_PC_REPORTED_DO:
                    if (value == null) {
                        unsetJobPcReportedDO();
                    } else {
                        setJobPcReportedDO((com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case JOB_PC_REPORTED_DO:
                    return getJobPcReportedDO();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case JOB_PC_REPORTED_DO:
                    return isSetJobPcReportedDO();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPcReport_args)
                return this.equals((addPcReport_args)that);
            return false;
        }

        public boolean equals(addPcReport_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_jobPcReportedDO = true && this.isSetJobPcReportedDO();
            boolean that_present_jobPcReportedDO = true && that.isSetJobPcReportedDO();
            if (this_present_jobPcReportedDO || that_present_jobPcReportedDO) {
                if (!(this_present_jobPcReportedDO && that_present_jobPcReportedDO))
                    return false;
                if (!this.jobPcReportedDO.equals(that.jobPcReportedDO))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetJobPcReportedDO()) ? 131071 : 524287);
            if (isSetJobPcReportedDO())
                hashCode = hashCode * 8191 + jobPcReportedDO.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPcReport_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetJobPcReportedDO()).compareTo(other.isSetJobPcReportedDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetJobPcReportedDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPcReportedDO, other.jobPcReportedDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPcReport_args(");
            boolean first = true;

            sb.append("jobPcReportedDO:");
            if (this.jobPcReportedDO == null) {
                sb.append("null");
            } else {
                sb.append(this.jobPcReportedDO);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (jobPcReportedDO != null) {
                jobPcReportedDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPcReport_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPcReport_argsStandardScheme getScheme() {
                return new addPcReport_argsStandardScheme();
            }
        }

        private static class addPcReport_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPcReport_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPcReport_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // JOB_PC_REPORTED_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.jobPcReportedDO = new com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO();
                                struct.jobPcReportedDO.read(iprot);
                                struct.setJobPcReportedDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPcReport_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.jobPcReportedDO != null) {
                    oprot.writeFieldBegin(JOB_PC_REPORTED_DO_FIELD_DESC);
                    struct.jobPcReportedDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPcReport_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPcReport_argsTupleScheme getScheme() {
                return new addPcReport_argsTupleScheme();
            }
        }

        private static class addPcReport_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPcReport_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPcReport_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetJobPcReportedDO()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetJobPcReportedDO()) {
                    struct.jobPcReportedDO.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPcReport_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.jobPcReportedDO = new com.moseeker.thrift.gen.dao.struct.jobdb.JobPcReportedDO();
                    struct.jobPcReportedDO.read(iprot);
                    struct.setJobPcReportedDOIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPcReport_result implements org.apache.thrift.TBase<addPcReport_result, addPcReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPcReport_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPcReport_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPcReport_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPcReport_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPcReport_result.class, metaDataMap);
        }

        public addPcReport_result() {
        }

        public addPcReport_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPcReport_result(addPcReport_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public addPcReport_result deepCopy() {
            return new addPcReport_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addPcReport_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPcReport_result)
                return this.equals((addPcReport_result)that);
            return false;
        }

        public boolean equals(addPcReport_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPcReport_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPcReport_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPcReport_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPcReport_resultStandardScheme getScheme() {
                return new addPcReport_resultStandardScheme();
            }
        }

        private static class addPcReport_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPcReport_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPcReport_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPcReport_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPcReport_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPcReport_resultTupleScheme getScheme() {
                return new addPcReport_resultTupleScheme();
            }
        }

        private static class addPcReport_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPcReport_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPcReport_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPcReport_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcAdvertisement_args implements org.apache.thrift.TBase<getPcAdvertisement_args, getPcAdvertisement_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPcAdvertisement_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcAdvertisement_args");

        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcAdvertisement_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcAdvertisement_argsTupleSchemeFactory();

        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAGE((short)1, "page"),
            PAGE_SIZE((short)2, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PAGE
                        return PAGE;
                    case 2: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcAdvertisement_args.class, metaDataMap);
        }

        public getPcAdvertisement_args() {
        }

        public getPcAdvertisement_args(
                int page,
                int pageSize)
        {
            this();
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcAdvertisement_args(getPcAdvertisement_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getPcAdvertisement_args deepCopy() {
            return new getPcAdvertisement_args(this);
        }

        @Override
        public void clear() {
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getPage() {
            return this.page;
        }

        public getPcAdvertisement_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPcAdvertisement_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcAdvertisement_args)
                return this.equals((getPcAdvertisement_args)that);
            return false;
        }

        public boolean equals(getPcAdvertisement_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPcAdvertisement_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcAdvertisement_args(");
            boolean first = true;

            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcAdvertisement_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcAdvertisement_argsStandardScheme getScheme() {
                return new getPcAdvertisement_argsStandardScheme();
            }
        }

        private static class getPcAdvertisement_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcAdvertisement_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcAdvertisement_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcAdvertisement_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcAdvertisement_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcAdvertisement_argsTupleScheme getScheme() {
                return new getPcAdvertisement_argsTupleScheme();
            }
        }

        private static class getPcAdvertisement_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcAdvertisement_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcAdvertisement_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPage()) {
                    optionals.set(0);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcAdvertisement_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPcAdvertisement_result implements org.apache.thrift.TBase<getPcAdvertisement_result, getPcAdvertisement_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPcAdvertisement_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPcAdvertisement_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPcAdvertisement_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPcAdvertisement_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPcAdvertisement_result.class, metaDataMap);
        }

        public getPcAdvertisement_result() {
        }

        public getPcAdvertisement_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPcAdvertisement_result(getPcAdvertisement_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPcAdvertisement_result deepCopy() {
            return new getPcAdvertisement_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPcAdvertisement_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPcAdvertisement_result)
                return this.equals((getPcAdvertisement_result)that);
            return false;
        }

        public boolean equals(getPcAdvertisement_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPcAdvertisement_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPcAdvertisement_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPcAdvertisement_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcAdvertisement_resultStandardScheme getScheme() {
                return new getPcAdvertisement_resultStandardScheme();
            }
        }

        private static class getPcAdvertisement_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPcAdvertisement_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPcAdvertisement_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPcAdvertisement_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPcAdvertisement_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPcAdvertisement_resultTupleScheme getScheme() {
                return new getPcAdvertisement_resultTupleScheme();
            }
        }

        private static class getPcAdvertisement_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPcAdvertisement_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPcAdvertisement_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPcAdvertisement_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionRecommendByModuleId_args implements org.apache.thrift.TBase<getPositionRecommendByModuleId_args, getPositionRecommendByModuleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionRecommendByModuleId_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionRecommendByModuleId_args");

        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionRecommendByModuleId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionRecommendByModuleId_argsTupleSchemeFactory();

        public int page; // required
        public int pageSize; // required
        public int moduleId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAGE((short)1, "page"),
            PAGE_SIZE((short)2, "pageSize"),
            MODULE_ID((short)3, "moduleId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PAGE
                        return PAGE;
                    case 2: // PAGE_SIZE
                        return PAGE_SIZE;
                    case 3: // MODULE_ID
                        return MODULE_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private static final int __MODULEID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("moduleId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionRecommendByModuleId_args.class, metaDataMap);
        }

        public getPositionRecommendByModuleId_args() {
        }

        public getPositionRecommendByModuleId_args(
                int page,
                int pageSize,
                int moduleId)
        {
            this();
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            this.moduleId = moduleId;
            setModuleIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionRecommendByModuleId_args(getPositionRecommendByModuleId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.page = other.page;
            this.pageSize = other.pageSize;
            this.moduleId = other.moduleId;
        }

        public getPositionRecommendByModuleId_args deepCopy() {
            return new getPositionRecommendByModuleId_args(this);
        }

        @Override
        public void clear() {
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
            setModuleIdIsSet(false);
            this.moduleId = 0;
        }

        public int getPage() {
            return this.page;
        }

        public getPositionRecommendByModuleId_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPositionRecommendByModuleId_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public int getModuleId() {
            return this.moduleId;
        }

        public getPositionRecommendByModuleId_args setModuleId(int moduleId) {
            this.moduleId = moduleId;
            setModuleIdIsSet(true);
            return this;
        }

        public void unsetModuleId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODULEID_ISSET_ID);
        }

        /** Returns true if field moduleId is set (has been assigned a value) and false otherwise */
        public boolean isSetModuleId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODULEID_ISSET_ID);
        }

        public void setModuleIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODULEID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

                case MODULE_ID:
                    if (value == null) {
                        unsetModuleId();
                    } else {
                        setModuleId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

                case MODULE_ID:
                    return getModuleId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
                case MODULE_ID:
                    return isSetModuleId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionRecommendByModuleId_args)
                return this.equals((getPositionRecommendByModuleId_args)that);
            return false;
        }

        public boolean equals(getPositionRecommendByModuleId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            boolean this_present_moduleId = true;
            boolean that_present_moduleId = true;
            if (this_present_moduleId || that_present_moduleId) {
                if (!(this_present_moduleId && that_present_moduleId))
                    return false;
                if (this.moduleId != that.moduleId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            hashCode = hashCode * 8191 + moduleId;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionRecommendByModuleId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetModuleId()).compareTo(other.isSetModuleId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModuleId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleId, other.moduleId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionRecommendByModuleId_args(");
            boolean first = true;

            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            if (!first) sb.append(", ");
            sb.append("moduleId:");
            sb.append(this.moduleId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionRecommendByModuleId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionRecommendByModuleId_argsStandardScheme getScheme() {
                return new getPositionRecommendByModuleId_argsStandardScheme();
            }
        }

        private static class getPositionRecommendByModuleId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionRecommendByModuleId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionRecommendByModuleId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // MODULE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.moduleId = iprot.readI32();
                                struct.setModuleIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionRecommendByModuleId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(MODULE_ID_FIELD_DESC);
                oprot.writeI32(struct.moduleId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionRecommendByModuleId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionRecommendByModuleId_argsTupleScheme getScheme() {
                return new getPositionRecommendByModuleId_argsTupleScheme();
            }
        }

        private static class getPositionRecommendByModuleId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionRecommendByModuleId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionRecommendByModuleId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPage()) {
                    optionals.set(0);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(1);
                }
                if (struct.isSetModuleId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
                if (struct.isSetModuleId()) {
                    oprot.writeI32(struct.moduleId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionRecommendByModuleId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.moduleId = iprot.readI32();
                    struct.setModuleIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionRecommendByModuleId_result implements org.apache.thrift.TBase<getPositionRecommendByModuleId_result, getPositionRecommendByModuleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionRecommendByModuleId_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionRecommendByModuleId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionRecommendByModuleId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionRecommendByModuleId_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionRecommendByModuleId_result.class, metaDataMap);
        }

        public getPositionRecommendByModuleId_result() {
        }

        public getPositionRecommendByModuleId_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionRecommendByModuleId_result(getPositionRecommendByModuleId_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPositionRecommendByModuleId_result deepCopy() {
            return new getPositionRecommendByModuleId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionRecommendByModuleId_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionRecommendByModuleId_result)
                return this.equals((getPositionRecommendByModuleId_result)that);
            return false;
        }

        public boolean equals(getPositionRecommendByModuleId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionRecommendByModuleId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionRecommendByModuleId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionRecommendByModuleId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionRecommendByModuleId_resultStandardScheme getScheme() {
                return new getPositionRecommendByModuleId_resultStandardScheme();
            }
        }

        private static class getPositionRecommendByModuleId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionRecommendByModuleId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionRecommendByModuleId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionRecommendByModuleId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionRecommendByModuleId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionRecommendByModuleId_resultTupleScheme getScheme() {
                return new getPositionRecommendByModuleId_resultTupleScheme();
            }
        }

        private static class getPositionRecommendByModuleId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionRecommendByModuleId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionRecommendByModuleId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionRecommendByModuleId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdpartySyncedPositions_args implements org.apache.thrift.TBase<getThirdpartySyncedPositions_args, getThirdpartySyncedPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdpartySyncedPositions_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdpartySyncedPositions_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateSource", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)5);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdpartySyncedPositions_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdpartySyncedPositions_argsTupleSchemeFactory();

        public int channel; // required
        public int publisher; // required
        public int companyId; // required
        public int candidateSource; // required
        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL((short)1, "channel"),
            PUBLISHER((short)2, "publisher"),
            COMPANY_ID((short)3, "companyId"),
            CANDIDATE_SOURCE((short)4, "candidateSource"),
            PAGE((short)5, "page"),
            PAGE_SIZE((short)6, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHANNEL
                        return CHANNEL;
                    case 2: // PUBLISHER
                        return PUBLISHER;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // CANDIDATE_SOURCE
                        return CANDIDATE_SOURCE;
                    case 5: // PAGE
                        return PAGE;
                    case 6: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CHANNEL_ISSET_ID = 0;
        private static final int __PUBLISHER_ISSET_ID = 1;
        private static final int __COMPANYID_ISSET_ID = 2;
        private static final int __CANDIDATESOURCE_ISSET_ID = 3;
        private static final int __PAGE_ISSET_ID = 4;
        private static final int __PAGESIZE_ISSET_ID = 5;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidateSource", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdpartySyncedPositions_args.class, metaDataMap);
        }

        public getThirdpartySyncedPositions_args() {
        }

        public getThirdpartySyncedPositions_args(
                int channel,
                int publisher,
                int companyId,
                int candidateSource,
                int page,
                int pageSize)
        {
            this();
            this.channel = channel;
            setChannelIsSet(true);
            this.publisher = publisher;
            setPublisherIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.candidateSource = candidateSource;
            setCandidateSourceIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdpartySyncedPositions_args(getThirdpartySyncedPositions_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.channel = other.channel;
            this.publisher = other.publisher;
            this.companyId = other.companyId;
            this.candidateSource = other.candidateSource;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getThirdpartySyncedPositions_args deepCopy() {
            return new getThirdpartySyncedPositions_args(this);
        }

        @Override
        public void clear() {
            setChannelIsSet(false);
            this.channel = 0;
            setPublisherIsSet(false);
            this.publisher = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setCandidateSourceIsSet(false);
            this.candidateSource = 0;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getChannel() {
            return this.channel;
        }

        public getThirdpartySyncedPositions_args setChannel(int channel) {
            this.channel = channel;
            setChannelIsSet(true);
            return this;
        }

        public void unsetChannel() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        /** Returns true if field channel is set (has been assigned a value) and false otherwise */
        public boolean isSetChannel() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        public void setChannelIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
        }

        public int getPublisher() {
            return this.publisher;
        }

        public getThirdpartySyncedPositions_args setPublisher(int publisher) {
            this.publisher = publisher;
            setPublisherIsSet(true);
            return this;
        }

        public void unsetPublisher() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
        }

        /** Returns true if field publisher is set (has been assigned a value) and false otherwise */
        public boolean isSetPublisher() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
        }

        public void setPublisherIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBLISHER_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getThirdpartySyncedPositions_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getCandidateSource() {
            return this.candidateSource;
        }

        public getThirdpartySyncedPositions_args setCandidateSource(int candidateSource) {
            this.candidateSource = candidateSource;
            setCandidateSourceIsSet(true);
            return this;
        }

        public void unsetCandidateSource() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID);
        }

        /** Returns true if field candidateSource is set (has been assigned a value) and false otherwise */
        public boolean isSetCandidateSource() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID);
        }

        public void setCandidateSourceIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATESOURCE_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public getThirdpartySyncedPositions_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getThirdpartySyncedPositions_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CHANNEL:
                    if (value == null) {
                        unsetChannel();
                    } else {
                        setChannel((java.lang.Integer)value);
                    }
                    break;

                case PUBLISHER:
                    if (value == null) {
                        unsetPublisher();
                    } else {
                        setPublisher((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case CANDIDATE_SOURCE:
                    if (value == null) {
                        unsetCandidateSource();
                    } else {
                        setCandidateSource((java.lang.Integer)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHANNEL:
                    return getChannel();

                case PUBLISHER:
                    return getPublisher();

                case COMPANY_ID:
                    return getCompanyId();

                case CANDIDATE_SOURCE:
                    return getCandidateSource();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHANNEL:
                    return isSetChannel();
                case PUBLISHER:
                    return isSetPublisher();
                case COMPANY_ID:
                    return isSetCompanyId();
                case CANDIDATE_SOURCE:
                    return isSetCandidateSource();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdpartySyncedPositions_args)
                return this.equals((getThirdpartySyncedPositions_args)that);
            return false;
        }

        public boolean equals(getThirdpartySyncedPositions_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_channel = true;
            boolean that_present_channel = true;
            if (this_present_channel || that_present_channel) {
                if (!(this_present_channel && that_present_channel))
                    return false;
                if (this.channel != that.channel)
                    return false;
            }

            boolean this_present_publisher = true;
            boolean that_present_publisher = true;
            if (this_present_publisher || that_present_publisher) {
                if (!(this_present_publisher && that_present_publisher))
                    return false;
                if (this.publisher != that.publisher)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_candidateSource = true;
            boolean that_present_candidateSource = true;
            if (this_present_candidateSource || that_present_candidateSource) {
                if (!(this_present_candidateSource && that_present_candidateSource))
                    return false;
                if (this.candidateSource != that.candidateSource)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + channel;

            hashCode = hashCode * 8191 + publisher;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + candidateSource;

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getThirdpartySyncedPositions_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannel()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPublisher()).compareTo(other.isSetPublisher());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPublisher()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, other.publisher);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCandidateSource()).compareTo(other.isSetCandidateSource());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCandidateSource()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateSource, other.candidateSource);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdpartySyncedPositions_args(");
            boolean first = true;

            sb.append("channel:");
            sb.append(this.channel);
            first = false;
            if (!first) sb.append(", ");
            sb.append("publisher:");
            sb.append(this.publisher);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("candidateSource:");
            sb.append(this.candidateSource);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdpartySyncedPositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdpartySyncedPositions_argsStandardScheme getScheme() {
                return new getThirdpartySyncedPositions_argsStandardScheme();
            }
        }

        private static class getThirdpartySyncedPositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdpartySyncedPositions_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdpartySyncedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHANNEL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.channel = iprot.readI32();
                                struct.setChannelIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PUBLISHER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.publisher = iprot.readI32();
                                struct.setPublisherIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // CANDIDATE_SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.candidateSource = iprot.readI32();
                                struct.setCandidateSourceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdpartySyncedPositions_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                oprot.writeI32(struct.channel);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
                oprot.writeI32(struct.publisher);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
                oprot.writeI32(struct.candidateSource);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdpartySyncedPositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdpartySyncedPositions_argsTupleScheme getScheme() {
                return new getThirdpartySyncedPositions_argsTupleScheme();
            }
        }

        private static class getThirdpartySyncedPositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdpartySyncedPositions_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdpartySyncedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetChannel()) {
                    optionals.set(0);
                }
                if (struct.isSetPublisher()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                if (struct.isSetCandidateSource()) {
                    optionals.set(3);
                }
                if (struct.isSetPage()) {
                    optionals.set(4);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetChannel()) {
                    oprot.writeI32(struct.channel);
                }
                if (struct.isSetPublisher()) {
                    oprot.writeI32(struct.publisher);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetCandidateSource()) {
                    oprot.writeI32(struct.candidateSource);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdpartySyncedPositions_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.channel = iprot.readI32();
                    struct.setChannelIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.publisher = iprot.readI32();
                    struct.setPublisherIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.candidateSource = iprot.readI32();
                    struct.setCandidateSourceIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getThirdpartySyncedPositions_result implements org.apache.thrift.TBase<getThirdpartySyncedPositions_result, getThirdpartySyncedPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThirdpartySyncedPositions_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThirdpartySyncedPositions_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getThirdpartySyncedPositions_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getThirdpartySyncedPositions_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThirdpartySyncedPositions_result.class, metaDataMap);
        }

        public getThirdpartySyncedPositions_result() {
        }

        public getThirdpartySyncedPositions_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getThirdpartySyncedPositions_result(getThirdpartySyncedPositions_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getThirdpartySyncedPositions_result deepCopy() {
            return new getThirdpartySyncedPositions_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getThirdpartySyncedPositions_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getThirdpartySyncedPositions_result)
                return this.equals((getThirdpartySyncedPositions_result)that);
            return false;
        }

        public boolean equals(getThirdpartySyncedPositions_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getThirdpartySyncedPositions_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getThirdpartySyncedPositions_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getThirdpartySyncedPositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdpartySyncedPositions_resultStandardScheme getScheme() {
                return new getThirdpartySyncedPositions_resultStandardScheme();
            }
        }

        private static class getThirdpartySyncedPositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getThirdpartySyncedPositions_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getThirdpartySyncedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getThirdpartySyncedPositions_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getThirdpartySyncedPositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getThirdpartySyncedPositions_resultTupleScheme getScheme() {
                return new getThirdpartySyncedPositions_resultTupleScheme();
            }
        }

        private static class getThirdpartySyncedPositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getThirdpartySyncedPositions_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getThirdpartySyncedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getThirdpartySyncedPositions_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class putAlipayResult_args implements org.apache.thrift.TBase<putAlipayResult_args, putAlipayResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<putAlipayResult_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putAlipayResult_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField ALIPAY_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayJobId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putAlipayResult_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putAlipayResult_argsTupleSchemeFactory();

        public int channel; // required
        public int positionId; // required
        public int alipayJobId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL((short)1, "channel"),
            POSITION_ID((short)2, "positionId"),
            ALIPAY_JOB_ID((short)3, "alipayJobId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHANNEL
                        return CHANNEL;
                    case 2: // POSITION_ID
                        return POSITION_ID;
                    case 3: // ALIPAY_JOB_ID
                        return ALIPAY_JOB_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CHANNEL_ISSET_ID = 0;
        private static final int __POSITIONID_ISSET_ID = 1;
        private static final int __ALIPAYJOBID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ALIPAY_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("alipayJobId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putAlipayResult_args.class, metaDataMap);
        }

        public putAlipayResult_args() {
        }

        public putAlipayResult_args(
                int channel,
                int positionId,
                int alipayJobId)
        {
            this();
            this.channel = channel;
            setChannelIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.alipayJobId = alipayJobId;
            setAlipayJobIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public putAlipayResult_args(putAlipayResult_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.channel = other.channel;
            this.positionId = other.positionId;
            this.alipayJobId = other.alipayJobId;
        }

        public putAlipayResult_args deepCopy() {
            return new putAlipayResult_args(this);
        }

        @Override
        public void clear() {
            setChannelIsSet(false);
            this.channel = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setAlipayJobIdIsSet(false);
            this.alipayJobId = 0;
        }

        public int getChannel() {
            return this.channel;
        }

        public putAlipayResult_args setChannel(int channel) {
            this.channel = channel;
            setChannelIsSet(true);
            return this;
        }

        public void unsetChannel() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        /** Returns true if field channel is set (has been assigned a value) and false otherwise */
        public boolean isSetChannel() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
        }

        public void setChannelIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public putAlipayResult_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getAlipayJobId() {
            return this.alipayJobId;
        }

        public putAlipayResult_args setAlipayJobId(int alipayJobId) {
            this.alipayJobId = alipayJobId;
            setAlipayJobIdIsSet(true);
            return this;
        }

        public void unsetAlipayJobId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALIPAYJOBID_ISSET_ID);
        }

        /** Returns true if field alipayJobId is set (has been assigned a value) and false otherwise */
        public boolean isSetAlipayJobId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALIPAYJOBID_ISSET_ID);
        }

        public void setAlipayJobIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALIPAYJOBID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CHANNEL:
                    if (value == null) {
                        unsetChannel();
                    } else {
                        setChannel((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case ALIPAY_JOB_ID:
                    if (value == null) {
                        unsetAlipayJobId();
                    } else {
                        setAlipayJobId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHANNEL:
                    return getChannel();

                case POSITION_ID:
                    return getPositionId();

                case ALIPAY_JOB_ID:
                    return getAlipayJobId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHANNEL:
                    return isSetChannel();
                case POSITION_ID:
                    return isSetPositionId();
                case ALIPAY_JOB_ID:
                    return isSetAlipayJobId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof putAlipayResult_args)
                return this.equals((putAlipayResult_args)that);
            return false;
        }

        public boolean equals(putAlipayResult_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_channel = true;
            boolean that_present_channel = true;
            if (this_present_channel || that_present_channel) {
                if (!(this_present_channel && that_present_channel))
                    return false;
                if (this.channel != that.channel)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_alipayJobId = true;
            boolean that_present_alipayJobId = true;
            if (this_present_alipayJobId || that_present_alipayJobId) {
                if (!(this_present_alipayJobId && that_present_alipayJobId))
                    return false;
                if (this.alipayJobId != that.alipayJobId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + channel;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + alipayJobId;

            return hashCode;
        }

        @Override
        public int compareTo(putAlipayResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannel()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetAlipayJobId()).compareTo(other.isSetAlipayJobId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAlipayJobId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayJobId, other.alipayJobId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("putAlipayResult_args(");
            boolean first = true;

            sb.append("channel:");
            sb.append(this.channel);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("alipayJobId:");
            sb.append(this.alipayJobId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class putAlipayResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putAlipayResult_argsStandardScheme getScheme() {
                return new putAlipayResult_argsStandardScheme();
            }
        }

        private static class putAlipayResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putAlipayResult_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, putAlipayResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHANNEL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.channel = iprot.readI32();
                                struct.setChannelIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ALIPAY_JOB_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.alipayJobId = iprot.readI32();
                                struct.setAlipayJobIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, putAlipayResult_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                oprot.writeI32(struct.channel);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ALIPAY_JOB_ID_FIELD_DESC);
                oprot.writeI32(struct.alipayJobId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class putAlipayResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putAlipayResult_argsTupleScheme getScheme() {
                return new putAlipayResult_argsTupleScheme();
            }
        }

        private static class putAlipayResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putAlipayResult_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, putAlipayResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetChannel()) {
                    optionals.set(0);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(1);
                }
                if (struct.isSetAlipayJobId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetChannel()) {
                    oprot.writeI32(struct.channel);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetAlipayJobId()) {
                    oprot.writeI32(struct.alipayJobId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, putAlipayResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.channel = iprot.readI32();
                    struct.setChannelIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.alipayJobId = iprot.readI32();
                    struct.setAlipayJobIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class putAlipayResult_result implements org.apache.thrift.TBase<putAlipayResult_result, putAlipayResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<putAlipayResult_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putAlipayResult_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putAlipayResult_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putAlipayResult_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putAlipayResult_result.class, metaDataMap);
        }

        public putAlipayResult_result() {
        }

        public putAlipayResult_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public putAlipayResult_result(putAlipayResult_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public putAlipayResult_result deepCopy() {
            return new putAlipayResult_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public putAlipayResult_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof putAlipayResult_result)
                return this.equals((putAlipayResult_result)that);
            return false;
        }

        public boolean equals(putAlipayResult_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(putAlipayResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("putAlipayResult_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class putAlipayResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putAlipayResult_resultStandardScheme getScheme() {
                return new putAlipayResult_resultStandardScheme();
            }
        }

        private static class putAlipayResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putAlipayResult_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, putAlipayResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, putAlipayResult_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class putAlipayResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public putAlipayResult_resultTupleScheme getScheme() {
                return new putAlipayResult_resultTupleScheme();
            }
        }

        private static class putAlipayResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putAlipayResult_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, putAlipayResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, putAlipayResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPersonaRecomPositionList_args implements org.apache.thrift.TBase<getPersonaRecomPositionList_args, getPersonaRecomPositionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPersonaRecomPositionList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonaRecomPositionList_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonaRecomPositionList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonaRecomPositionList_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int type; // required
        public int pageNum; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            TYPE((short)3, "type"),
            PAGE_NUM((short)4, "pageNum"),
            PAGE_SIZE((short)5, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    case 4: // PAGE_NUM
                        return PAGE_NUM;
                    case 5: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private static final int __PAGENUM_ISSET_ID = 3;
        private static final int __PAGESIZE_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonaRecomPositionList_args.class, metaDataMap);
        }

        public getPersonaRecomPositionList_args() {
        }

        public getPersonaRecomPositionList_args(
                int userId,
                int companyId,
                int type,
                int pageNum,
                int pageSize)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPersonaRecomPositionList_args(getPersonaRecomPositionList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.type = other.type;
            this.pageNum = other.pageNum;
            this.pageSize = other.pageSize;
        }

        public getPersonaRecomPositionList_args deepCopy() {
            return new getPersonaRecomPositionList_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
            setPageNumIsSet(false);
            this.pageNum = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getPersonaRecomPositionList_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getPersonaRecomPositionList_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getPersonaRecomPositionList_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getPageNum() {
            return this.pageNum;
        }

        public getPersonaRecomPositionList_args setPageNum(int pageNum) {
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            return this;
        }

        public void unsetPageNum() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNum() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        public void setPageNumIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getPersonaRecomPositionList_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUM:
                    if (value == null) {
                        unsetPageNum();
                    } else {
                        setPageNum((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

                case PAGE_NUM:
                    return getPageNum();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
                case PAGE_NUM:
                    return isSetPageNum();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPersonaRecomPositionList_args)
                return this.equals((getPersonaRecomPositionList_args)that);
            return false;
        }

        public boolean equals(getPersonaRecomPositionList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_pageNum = true;
            boolean that_present_pageNum = true;
            if (this_present_pageNum || that_present_pageNum) {
                if (!(this_present_pageNum && that_present_pageNum))
                    return false;
                if (this.pageNum != that.pageNum)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + pageNum;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getPersonaRecomPositionList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPersonaRecomPositionList_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNum:");
            sb.append(this.pageNum);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPersonaRecomPositionList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPersonaRecomPositionList_argsStandardScheme getScheme() {
                return new getPersonaRecomPositionList_argsStandardScheme();
            }
        }

        private static class getPersonaRecomPositionList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPersonaRecomPositionList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonaRecomPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNum = iprot.readI32();
                                struct.setPageNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonaRecomPositionList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
                oprot.writeI32(struct.pageNum);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPersonaRecomPositionList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPersonaRecomPositionList_argsTupleScheme getScheme() {
                return new getPersonaRecomPositionList_argsTupleScheme();
            }
        }

        private static class getPersonaRecomPositionList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPersonaRecomPositionList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPersonaRecomPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetPageNum()) {
                    optionals.set(3);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetPageNum()) {
                    oprot.writeI32(struct.pageNum);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPersonaRecomPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageNum = iprot.readI32();
                    struct.setPageNumIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPersonaRecomPositionList_result implements org.apache.thrift.TBase<getPersonaRecomPositionList_result, getPersonaRecomPositionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPersonaRecomPositionList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonaRecomPositionList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonaRecomPositionList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonaRecomPositionList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonaRecomPositionList_result.class, metaDataMap);
        }

        public getPersonaRecomPositionList_result() {
        }

        public getPersonaRecomPositionList_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPersonaRecomPositionList_result(getPersonaRecomPositionList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPersonaRecomPositionList_result deepCopy() {
            return new getPersonaRecomPositionList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPersonaRecomPositionList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPersonaRecomPositionList_result)
                return this.equals((getPersonaRecomPositionList_result)that);
            return false;
        }

        public boolean equals(getPersonaRecomPositionList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPersonaRecomPositionList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPersonaRecomPositionList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPersonaRecomPositionList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPersonaRecomPositionList_resultStandardScheme getScheme() {
                return new getPersonaRecomPositionList_resultStandardScheme();
            }
        }

        private static class getPersonaRecomPositionList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPersonaRecomPositionList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonaRecomPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonaRecomPositionList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPersonaRecomPositionList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPersonaRecomPositionList_resultTupleScheme getScheme() {
                return new getPersonaRecomPositionList_resultTupleScheme();
            }
        }

        private static class getPersonaRecomPositionList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPersonaRecomPositionList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPersonaRecomPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPersonaRecomPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class positionCvConf_args implements org.apache.thrift.TBase<positionCvConf_args, positionCvConf_args._Fields>, java.io.Serializable, Cloneable, Comparable<positionCvConf_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("positionCvConf_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new positionCvConf_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new positionCvConf_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(positionCvConf_args.class, metaDataMap);
        }

        public positionCvConf_args() {
        }

        public positionCvConf_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public positionCvConf_args(positionCvConf_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public positionCvConf_args deepCopy() {
            return new positionCvConf_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public positionCvConf_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof positionCvConf_args)
                return this.equals((positionCvConf_args)that);
            return false;
        }

        public boolean equals(positionCvConf_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(positionCvConf_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("positionCvConf_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class positionCvConf_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionCvConf_argsStandardScheme getScheme() {
                return new positionCvConf_argsStandardScheme();
            }
        }

        private static class positionCvConf_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<positionCvConf_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, positionCvConf_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, positionCvConf_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class positionCvConf_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionCvConf_argsTupleScheme getScheme() {
                return new positionCvConf_argsTupleScheme();
            }
        }

        private static class positionCvConf_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<positionCvConf_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, positionCvConf_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, positionCvConf_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class positionCvConf_result implements org.apache.thrift.TBase<positionCvConf_result, positionCvConf_result._Fields>, java.io.Serializable, Cloneable, Comparable<positionCvConf_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("positionCvConf_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new positionCvConf_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new positionCvConf_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(positionCvConf_result.class, metaDataMap);
        }

        public positionCvConf_result() {
        }

        public positionCvConf_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public positionCvConf_result(positionCvConf_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public positionCvConf_result deepCopy() {
            return new positionCvConf_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public positionCvConf_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof positionCvConf_result)
                return this.equals((positionCvConf_result)that);
            return false;
        }

        public boolean equals(positionCvConf_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(positionCvConf_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("positionCvConf_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class positionCvConf_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionCvConf_resultStandardScheme getScheme() {
                return new positionCvConf_resultStandardScheme();
            }
        }

        private static class positionCvConf_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<positionCvConf_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, positionCvConf_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, positionCvConf_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class positionCvConf_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public positionCvConf_resultTupleScheme getScheme() {
                return new positionCvConf_resultTupleScheme();
            }
        }

        private static class positionCvConf_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<positionCvConf_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, positionCvConf_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, positionCvConf_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmployeeRecomPositionByIds_args implements org.apache.thrift.TBase<getEmployeeRecomPositionByIds_args, getEmployeeRecomPositionByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployeeRecomPositionByIds_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployeeRecomPositionByIds_args");

        private static final org.apache.thrift.protocol.TField RECOM_PUSH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recomPushId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployeeRecomPositionByIds_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployeeRecomPositionByIds_argsTupleSchemeFactory();

        public int recomPushId; // required
        public int companyId; // required
        public int type; // required
        public int pageNum; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RECOM_PUSH_ID((short)1, "recomPushId"),
            COMPANY_ID((short)2, "companyId"),
            TYPE((short)3, "type"),
            PAGE_NUM((short)4, "pageNum"),
            PAGE_SIZE((short)5, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // RECOM_PUSH_ID
                        return RECOM_PUSH_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    case 4: // PAGE_NUM
                        return PAGE_NUM;
                    case 5: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __RECOMPUSHID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private static final int __PAGENUM_ISSET_ID = 3;
        private static final int __PAGESIZE_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RECOM_PUSH_ID, new org.apache.thrift.meta_data.FieldMetaData("recomPushId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployeeRecomPositionByIds_args.class, metaDataMap);
        }

        public getEmployeeRecomPositionByIds_args() {
        }

        public getEmployeeRecomPositionByIds_args(
                int recomPushId,
                int companyId,
                int type,
                int pageNum,
                int pageSize)
        {
            this();
            this.recomPushId = recomPushId;
            setRecomPushIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmployeeRecomPositionByIds_args(getEmployeeRecomPositionByIds_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.recomPushId = other.recomPushId;
            this.companyId = other.companyId;
            this.type = other.type;
            this.pageNum = other.pageNum;
            this.pageSize = other.pageSize;
        }

        public getEmployeeRecomPositionByIds_args deepCopy() {
            return new getEmployeeRecomPositionByIds_args(this);
        }

        @Override
        public void clear() {
            setRecomPushIdIsSet(false);
            this.recomPushId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
            setPageNumIsSet(false);
            this.pageNum = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getRecomPushId() {
            return this.recomPushId;
        }

        public getEmployeeRecomPositionByIds_args setRecomPushId(int recomPushId) {
            this.recomPushId = recomPushId;
            setRecomPushIdIsSet(true);
            return this;
        }

        public void unsetRecomPushId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOMPUSHID_ISSET_ID);
        }

        /** Returns true if field recomPushId is set (has been assigned a value) and false otherwise */
        public boolean isSetRecomPushId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOMPUSHID_ISSET_ID);
        }

        public void setRecomPushIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOMPUSHID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getEmployeeRecomPositionByIds_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getEmployeeRecomPositionByIds_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getPageNum() {
            return this.pageNum;
        }

        public getEmployeeRecomPositionByIds_args setPageNum(int pageNum) {
            this.pageNum = pageNum;
            setPageNumIsSet(true);
            return this;
        }

        public void unsetPageNum() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNum() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
        }

        public void setPageNumIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getEmployeeRecomPositionByIds_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case RECOM_PUSH_ID:
                    if (value == null) {
                        unsetRecomPushId();
                    } else {
                        setRecomPushId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUM:
                    if (value == null) {
                        unsetPageNum();
                    } else {
                        setPageNum((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case RECOM_PUSH_ID:
                    return getRecomPushId();

                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

                case PAGE_NUM:
                    return getPageNum();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case RECOM_PUSH_ID:
                    return isSetRecomPushId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
                case PAGE_NUM:
                    return isSetPageNum();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmployeeRecomPositionByIds_args)
                return this.equals((getEmployeeRecomPositionByIds_args)that);
            return false;
        }

        public boolean equals(getEmployeeRecomPositionByIds_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_recomPushId = true;
            boolean that_present_recomPushId = true;
            if (this_present_recomPushId || that_present_recomPushId) {
                if (!(this_present_recomPushId && that_present_recomPushId))
                    return false;
                if (this.recomPushId != that.recomPushId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_pageNum = true;
            boolean that_present_pageNum = true;
            if (this_present_pageNum || that_present_pageNum) {
                if (!(this_present_pageNum && that_present_pageNum))
                    return false;
                if (this.pageNum != that.pageNum)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + recomPushId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + pageNum;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getEmployeeRecomPositionByIds_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetRecomPushId()).compareTo(other.isSetRecomPushId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRecomPushId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomPushId, other.recomPushId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployeeRecomPositionByIds_args(");
            boolean first = true;

            sb.append("recomPushId:");
            sb.append(this.recomPushId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNum:");
            sb.append(this.pageNum);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmployeeRecomPositionByIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmployeeRecomPositionByIds_argsStandardScheme getScheme() {
                return new getEmployeeRecomPositionByIds_argsStandardScheme();
            }
        }

        private static class getEmployeeRecomPositionByIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployeeRecomPositionByIds_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployeeRecomPositionByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RECOM_PUSH_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.recomPushId = iprot.readI32();
                                struct.setRecomPushIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_NUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNum = iprot.readI32();
                                struct.setPageNumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployeeRecomPositionByIds_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(RECOM_PUSH_ID_FIELD_DESC);
                oprot.writeI32(struct.recomPushId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
                oprot.writeI32(struct.pageNum);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmployeeRecomPositionByIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmployeeRecomPositionByIds_argsTupleScheme getScheme() {
                return new getEmployeeRecomPositionByIds_argsTupleScheme();
            }
        }

        private static class getEmployeeRecomPositionByIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployeeRecomPositionByIds_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmployeeRecomPositionByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetRecomPushId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetPageNum()) {
                    optionals.set(3);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetRecomPushId()) {
                    oprot.writeI32(struct.recomPushId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetPageNum()) {
                    oprot.writeI32(struct.pageNum);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmployeeRecomPositionByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.recomPushId = iprot.readI32();
                    struct.setRecomPushIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageNum = iprot.readI32();
                    struct.setPageNumIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmployeeRecomPositionByIds_result implements org.apache.thrift.TBase<getEmployeeRecomPositionByIds_result, getEmployeeRecomPositionByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployeeRecomPositionByIds_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployeeRecomPositionByIds_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployeeRecomPositionByIds_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployeeRecomPositionByIds_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployeeRecomPositionByIds_result.class, metaDataMap);
        }

        public getEmployeeRecomPositionByIds_result() {
        }

        public getEmployeeRecomPositionByIds_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmployeeRecomPositionByIds_result(getEmployeeRecomPositionByIds_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getEmployeeRecomPositionByIds_result deepCopy() {
            return new getEmployeeRecomPositionByIds_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmployeeRecomPositionByIds_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmployeeRecomPositionByIds_result)
                return this.equals((getEmployeeRecomPositionByIds_result)that);
            return false;
        }

        public boolean equals(getEmployeeRecomPositionByIds_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmployeeRecomPositionByIds_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployeeRecomPositionByIds_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmployeeRecomPositionByIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmployeeRecomPositionByIds_resultStandardScheme getScheme() {
                return new getEmployeeRecomPositionByIds_resultStandardScheme();
            }
        }

        private static class getEmployeeRecomPositionByIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployeeRecomPositionByIds_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployeeRecomPositionByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployeeRecomPositionByIds_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmployeeRecomPositionByIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmployeeRecomPositionByIds_resultTupleScheme getScheme() {
                return new getEmployeeRecomPositionByIds_resultTupleScheme();
            }
        }

        private static class getEmployeeRecomPositionByIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployeeRecomPositionByIds_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmployeeRecomPositionByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmployeeRecomPositionByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePosition_args implements org.apache.thrift.TBase<updatePosition_args, updatePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePosition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePosition_args");

        private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePosition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePosition_argsTupleSchemeFactory();

        public java.lang.String param; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM((short)1, "param");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM
                        return PARAM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePosition_args.class, metaDataMap);
        }

        public updatePosition_args() {
        }

        public updatePosition_args(
                java.lang.String param)
        {
            this();
            this.param = param;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePosition_args(updatePosition_args other) {
            if (other.isSetParam()) {
                this.param = other.param;
            }
        }

        public updatePosition_args deepCopy() {
            return new updatePosition_args(this);
        }

        @Override
        public void clear() {
            this.param = null;
        }

        public java.lang.String getParam() {
            return this.param;
        }

        public updatePosition_args setParam(java.lang.String param) {
            this.param = param;
            return this;
        }

        public void unsetParam() {
            this.param = null;
        }

        /** Returns true if field param is set (has been assigned a value) and false otherwise */
        public boolean isSetParam() {
            return this.param != null;
        }

        public void setParamIsSet(boolean value) {
            if (!value) {
                this.param = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAM:
                    if (value == null) {
                        unsetParam();
                    } else {
                        setParam((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM:
                    return getParam();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAM:
                    return isSetParam();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePosition_args)
                return this.equals((updatePosition_args)that);
            return false;
        }

        public boolean equals(updatePosition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_param = true && this.isSetParam();
            boolean that_present_param = true && that.isSetParam();
            if (this_present_param || that_present_param) {
                if (!(this_present_param && that_present_param))
                    return false;
                if (!this.param.equals(that.param))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
            if (isSetParam())
                hashCode = hashCode * 8191 + param.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePosition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePosition_args(");
            boolean first = true;

            sb.append("param:");
            if (this.param == null) {
                sb.append("null");
            } else {
                sb.append(this.param);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePosition_argsStandardScheme getScheme() {
                return new updatePosition_argsStandardScheme();
            }
        }

        private static class updatePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePosition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.param = iprot.readString();
                                struct.setParamIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePosition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.param != null) {
                    oprot.writeFieldBegin(PARAM_FIELD_DESC);
                    oprot.writeString(struct.param);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePosition_argsTupleScheme getScheme() {
                return new updatePosition_argsTupleScheme();
            }
        }

        private static class updatePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePosition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParam()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParam()) {
                    oprot.writeString(struct.param);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.param = iprot.readString();
                    struct.setParamIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePosition_result implements org.apache.thrift.TBase<updatePosition_result, updatePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePosition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePosition_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePosition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePosition_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePosition_result.class, metaDataMap);
        }

        public updatePosition_result() {
        }

        public updatePosition_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePosition_result(updatePosition_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public updatePosition_result deepCopy() {
            return new updatePosition_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updatePosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePosition_result)
                return this.equals((updatePosition_result)that);
            return false;
        }

        public boolean equals(updatePosition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePosition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePosition_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePosition_resultStandardScheme getScheme() {
                return new updatePosition_resultStandardScheme();
            }
        }

        private static class updatePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePosition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePosition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePosition_resultTupleScheme getScheme() {
                return new updatePosition_resultTupleScheme();
            }
        }

        private static class updatePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePosition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionList_args implements org.apache.thrift.TBase<getMiniPositionList_args, getMiniPositionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionList_args");

        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionList_argsTupleSchemeFactory();

        public int accountId; // required
        public java.lang.String keyword; // required
        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ACCOUNT_ID((short)1, "accountId"),
            KEYWORD((short)2, "keyword"),
            PAGE((short)3, "page"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    case 2: // KEYWORD
                        return KEYWORD;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ACCOUNTID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionList_args.class, metaDataMap);
        }

        public getMiniPositionList_args() {
        }

        public getMiniPositionList_args(
                int accountId,
                java.lang.String keyword,
                int page,
                int pageSize)
        {
            this();
            this.accountId = accountId;
            setAccountIdIsSet(true);
            this.keyword = keyword;
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionList_args(getMiniPositionList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.accountId = other.accountId;
            if (other.isSetKeyword()) {
                this.keyword = other.keyword;
            }
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getMiniPositionList_args deepCopy() {
            return new getMiniPositionList_args(this);
        }

        @Override
        public void clear() {
            setAccountIdIsSet(false);
            this.accountId = 0;
            this.keyword = null;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getAccountId() {
            return this.accountId;
        }

        public getMiniPositionList_args setAccountId(int accountId) {
            this.accountId = accountId;
            setAccountIdIsSet(true);
            return this;
        }

        public void unsetAccountId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
        public boolean isSetAccountId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        public void setAccountIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
        }

        public java.lang.String getKeyword() {
            return this.keyword;
        }

        public getMiniPositionList_args setKeyword(java.lang.String keyword) {
            this.keyword = keyword;
            return this;
        }

        public void unsetKeyword() {
            this.keyword = null;
        }

        /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
        public boolean isSetKeyword() {
            return this.keyword != null;
        }

        public void setKeywordIsSet(boolean value) {
            if (!value) {
                this.keyword = null;
            }
        }

        public int getPage() {
            return this.page;
        }

        public getMiniPositionList_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getMiniPositionList_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccountId();
                    } else {
                        setAccountId((java.lang.Integer)value);
                    }
                    break;

                case KEYWORD:
                    if (value == null) {
                        unsetKeyword();
                    } else {
                        setKeyword((java.lang.String)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ACCOUNT_ID:
                    return getAccountId();

                case KEYWORD:
                    return getKeyword();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ACCOUNT_ID:
                    return isSetAccountId();
                case KEYWORD:
                    return isSetKeyword();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionList_args)
                return this.equals((getMiniPositionList_args)that);
            return false;
        }

        public boolean equals(getMiniPositionList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_accountId = true;
            boolean that_present_accountId = true;
            if (this_present_accountId || that_present_accountId) {
                if (!(this_present_accountId && that_present_accountId))
                    return false;
                if (this.accountId != that.accountId)
                    return false;
            }

            boolean this_present_keyword = true && this.isSetKeyword();
            boolean that_present_keyword = true && that.isSetKeyword();
            if (this_present_keyword || that_present_keyword) {
                if (!(this_present_keyword && that_present_keyword))
                    return false;
                if (!this.keyword.equals(that.keyword))
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + accountId;

            hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
            if (isSetKeyword())
                hashCode = hashCode * 8191 + keyword.hashCode();

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccountId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKeyword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionList_args(");
            boolean first = true;

            sb.append("accountId:");
            sb.append(this.accountId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("keyword:");
            if (this.keyword == null) {
                sb.append("null");
            } else {
                sb.append(this.keyword);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionList_argsStandardScheme getScheme() {
                return new getMiniPositionList_argsStandardScheme();
            }
        }

        private static class getMiniPositionList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.accountId = iprot.readI32();
                                struct.setAccountIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEYWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.keyword = iprot.readString();
                                struct.setKeywordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.accountId);
                oprot.writeFieldEnd();
                if (struct.keyword != null) {
                    oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
                    oprot.writeString(struct.keyword);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionList_argsTupleScheme getScheme() {
                return new getMiniPositionList_argsTupleScheme();
            }
        }

        private static class getMiniPositionList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAccountId()) {
                    optionals.set(0);
                }
                if (struct.isSetKeyword()) {
                    optionals.set(1);
                }
                if (struct.isSetPage()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetAccountId()) {
                    oprot.writeI32(struct.accountId);
                }
                if (struct.isSetKeyword()) {
                    oprot.writeString(struct.keyword);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.accountId = iprot.readI32();
                    struct.setAccountIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.keyword = iprot.readString();
                    struct.setKeywordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionList_result implements org.apache.thrift.TBase<getMiniPositionList_result, getMiniPositionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionList_result.class, metaDataMap);
        }

        public getMiniPositionList_result() {
        }

        public getMiniPositionList_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionList_result(getMiniPositionList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getMiniPositionList_result deepCopy() {
            return new getMiniPositionList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getMiniPositionList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionList_result)
                return this.equals((getMiniPositionList_result)that);
            return false;
        }

        public boolean equals(getMiniPositionList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionList_resultStandardScheme getScheme() {
                return new getMiniPositionList_resultStandardScheme();
            }
        }

        private static class getMiniPositionList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionList_resultTupleScheme getScheme() {
                return new getMiniPositionList_resultTupleScheme();
            }
        }

        private static class getMiniPositionList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionSuggest_args implements org.apache.thrift.TBase<getMiniPositionSuggest_args, getMiniPositionSuggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionSuggest_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionSuggest_args");

        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionSuggest_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionSuggest_argsTupleSchemeFactory();

        public int accountId; // required
        public java.lang.String keyword; // required
        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ACCOUNT_ID((short)1, "accountId"),
            KEYWORD((short)2, "keyword"),
            PAGE((short)3, "page"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    case 2: // KEYWORD
                        return KEYWORD;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ACCOUNTID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionSuggest_args.class, metaDataMap);
        }

        public getMiniPositionSuggest_args() {
        }

        public getMiniPositionSuggest_args(
                int accountId,
                java.lang.String keyword,
                int page,
                int pageSize)
        {
            this();
            this.accountId = accountId;
            setAccountIdIsSet(true);
            this.keyword = keyword;
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionSuggest_args(getMiniPositionSuggest_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.accountId = other.accountId;
            if (other.isSetKeyword()) {
                this.keyword = other.keyword;
            }
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getMiniPositionSuggest_args deepCopy() {
            return new getMiniPositionSuggest_args(this);
        }

        @Override
        public void clear() {
            setAccountIdIsSet(false);
            this.accountId = 0;
            this.keyword = null;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getAccountId() {
            return this.accountId;
        }

        public getMiniPositionSuggest_args setAccountId(int accountId) {
            this.accountId = accountId;
            setAccountIdIsSet(true);
            return this;
        }

        public void unsetAccountId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
        public boolean isSetAccountId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        public void setAccountIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
        }

        public java.lang.String getKeyword() {
            return this.keyword;
        }

        public getMiniPositionSuggest_args setKeyword(java.lang.String keyword) {
            this.keyword = keyword;
            return this;
        }

        public void unsetKeyword() {
            this.keyword = null;
        }

        /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
        public boolean isSetKeyword() {
            return this.keyword != null;
        }

        public void setKeywordIsSet(boolean value) {
            if (!value) {
                this.keyword = null;
            }
        }

        public int getPage() {
            return this.page;
        }

        public getMiniPositionSuggest_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getMiniPositionSuggest_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccountId();
                    } else {
                        setAccountId((java.lang.Integer)value);
                    }
                    break;

                case KEYWORD:
                    if (value == null) {
                        unsetKeyword();
                    } else {
                        setKeyword((java.lang.String)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ACCOUNT_ID:
                    return getAccountId();

                case KEYWORD:
                    return getKeyword();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ACCOUNT_ID:
                    return isSetAccountId();
                case KEYWORD:
                    return isSetKeyword();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionSuggest_args)
                return this.equals((getMiniPositionSuggest_args)that);
            return false;
        }

        public boolean equals(getMiniPositionSuggest_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_accountId = true;
            boolean that_present_accountId = true;
            if (this_present_accountId || that_present_accountId) {
                if (!(this_present_accountId && that_present_accountId))
                    return false;
                if (this.accountId != that.accountId)
                    return false;
            }

            boolean this_present_keyword = true && this.isSetKeyword();
            boolean that_present_keyword = true && that.isSetKeyword();
            if (this_present_keyword || that_present_keyword) {
                if (!(this_present_keyword && that_present_keyword))
                    return false;
                if (!this.keyword.equals(that.keyword))
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + accountId;

            hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
            if (isSetKeyword())
                hashCode = hashCode * 8191 + keyword.hashCode();

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionSuggest_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccountId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKeyword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionSuggest_args(");
            boolean first = true;

            sb.append("accountId:");
            sb.append(this.accountId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("keyword:");
            if (this.keyword == null) {
                sb.append("null");
            } else {
                sb.append(this.keyword);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionSuggest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionSuggest_argsStandardScheme getScheme() {
                return new getMiniPositionSuggest_argsStandardScheme();
            }
        }

        private static class getMiniPositionSuggest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionSuggest_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionSuggest_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.accountId = iprot.readI32();
                                struct.setAccountIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEYWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.keyword = iprot.readString();
                                struct.setKeywordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionSuggest_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.accountId);
                oprot.writeFieldEnd();
                if (struct.keyword != null) {
                    oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
                    oprot.writeString(struct.keyword);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionSuggest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionSuggest_argsTupleScheme getScheme() {
                return new getMiniPositionSuggest_argsTupleScheme();
            }
        }

        private static class getMiniPositionSuggest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionSuggest_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionSuggest_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAccountId()) {
                    optionals.set(0);
                }
                if (struct.isSetKeyword()) {
                    optionals.set(1);
                }
                if (struct.isSetPage()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetAccountId()) {
                    oprot.writeI32(struct.accountId);
                }
                if (struct.isSetKeyword()) {
                    oprot.writeString(struct.keyword);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionSuggest_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.accountId = iprot.readI32();
                    struct.setAccountIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.keyword = iprot.readString();
                    struct.setKeywordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionSuggest_result implements org.apache.thrift.TBase<getMiniPositionSuggest_result, getMiniPositionSuggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionSuggest_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionSuggest_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionSuggest_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionSuggest_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionSuggest_result.class, metaDataMap);
        }

        public getMiniPositionSuggest_result() {
        }

        public getMiniPositionSuggest_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionSuggest_result(getMiniPositionSuggest_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getMiniPositionSuggest_result deepCopy() {
            return new getMiniPositionSuggest_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getMiniPositionSuggest_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionSuggest_result)
                return this.equals((getMiniPositionSuggest_result)that);
            return false;
        }

        public boolean equals(getMiniPositionSuggest_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionSuggest_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionSuggest_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionSuggest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionSuggest_resultStandardScheme getScheme() {
                return new getMiniPositionSuggest_resultStandardScheme();
            }
        }

        private static class getMiniPositionSuggest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionSuggest_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionSuggest_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionSuggest_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionSuggest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionSuggest_resultTupleScheme getScheme() {
                return new getMiniPositionSuggest_resultTupleScheme();
            }
        }

        private static class getMiniPositionSuggest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionSuggest_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionSuggest_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionSuggest_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionNumStatus_args implements org.apache.thrift.TBase<getMiniPositionNumStatus_args, getMiniPositionNumStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionNumStatus_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionNumStatus_args");

        private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionNumStatus_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionNumStatus_argsTupleSchemeFactory();

        public int accountId; // required
        public java.lang.String keyword; // required
        public int page; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ACCOUNT_ID((short)1, "accountId"),
            KEYWORD((short)2, "keyword"),
            PAGE((short)3, "page"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ACCOUNT_ID
                        return ACCOUNT_ID;
                    case 2: // KEYWORD
                        return KEYWORD;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ACCOUNTID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionNumStatus_args.class, metaDataMap);
        }

        public getMiniPositionNumStatus_args() {
        }

        public getMiniPositionNumStatus_args(
                int accountId,
                java.lang.String keyword,
                int page,
                int pageSize)
        {
            this();
            this.accountId = accountId;
            setAccountIdIsSet(true);
            this.keyword = keyword;
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionNumStatus_args(getMiniPositionNumStatus_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.accountId = other.accountId;
            if (other.isSetKeyword()) {
                this.keyword = other.keyword;
            }
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public getMiniPositionNumStatus_args deepCopy() {
            return new getMiniPositionNumStatus_args(this);
        }

        @Override
        public void clear() {
            setAccountIdIsSet(false);
            this.accountId = 0;
            this.keyword = null;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getAccountId() {
            return this.accountId;
        }

        public getMiniPositionNumStatus_args setAccountId(int accountId) {
            this.accountId = accountId;
            setAccountIdIsSet(true);
            return this;
        }

        public void unsetAccountId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
        public boolean isSetAccountId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
        }

        public void setAccountIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
        }

        public java.lang.String getKeyword() {
            return this.keyword;
        }

        public getMiniPositionNumStatus_args setKeyword(java.lang.String keyword) {
            this.keyword = keyword;
            return this;
        }

        public void unsetKeyword() {
            this.keyword = null;
        }

        /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
        public boolean isSetKeyword() {
            return this.keyword != null;
        }

        public void setKeywordIsSet(boolean value) {
            if (!value) {
                this.keyword = null;
            }
        }

        public int getPage() {
            return this.page;
        }

        public getMiniPositionNumStatus_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public getMiniPositionNumStatus_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ACCOUNT_ID:
                    if (value == null) {
                        unsetAccountId();
                    } else {
                        setAccountId((java.lang.Integer)value);
                    }
                    break;

                case KEYWORD:
                    if (value == null) {
                        unsetKeyword();
                    } else {
                        setKeyword((java.lang.String)value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ACCOUNT_ID:
                    return getAccountId();

                case KEYWORD:
                    return getKeyword();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ACCOUNT_ID:
                    return isSetAccountId();
                case KEYWORD:
                    return isSetKeyword();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionNumStatus_args)
                return this.equals((getMiniPositionNumStatus_args)that);
            return false;
        }

        public boolean equals(getMiniPositionNumStatus_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_accountId = true;
            boolean that_present_accountId = true;
            if (this_present_accountId || that_present_accountId) {
                if (!(this_present_accountId && that_present_accountId))
                    return false;
                if (this.accountId != that.accountId)
                    return false;
            }

            boolean this_present_keyword = true && this.isSetKeyword();
            boolean that_present_keyword = true && that.isSetKeyword();
            if (this_present_keyword || that_present_keyword) {
                if (!(this_present_keyword && that_present_keyword))
                    return false;
                if (!this.keyword.equals(that.keyword))
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + accountId;

            hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
            if (isSetKeyword())
                hashCode = hashCode * 8191 + keyword.hashCode();

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionNumStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccountId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKeyword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionNumStatus_args(");
            boolean first = true;

            sb.append("accountId:");
            sb.append(this.accountId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("keyword:");
            if (this.keyword == null) {
                sb.append("null");
            } else {
                sb.append(this.keyword);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionNumStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionNumStatus_argsStandardScheme getScheme() {
                return new getMiniPositionNumStatus_argsStandardScheme();
            }
        }

        private static class getMiniPositionNumStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionNumStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionNumStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ACCOUNT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.accountId = iprot.readI32();
                                struct.setAccountIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // KEYWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.keyword = iprot.readString();
                                struct.setKeywordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionNumStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
                oprot.writeI32(struct.accountId);
                oprot.writeFieldEnd();
                if (struct.keyword != null) {
                    oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
                    oprot.writeString(struct.keyword);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionNumStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionNumStatus_argsTupleScheme getScheme() {
                return new getMiniPositionNumStatus_argsTupleScheme();
            }
        }

        private static class getMiniPositionNumStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionNumStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionNumStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAccountId()) {
                    optionals.set(0);
                }
                if (struct.isSetKeyword()) {
                    optionals.set(1);
                }
                if (struct.isSetPage()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetAccountId()) {
                    oprot.writeI32(struct.accountId);
                }
                if (struct.isSetKeyword()) {
                    oprot.writeString(struct.keyword);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionNumStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.accountId = iprot.readI32();
                    struct.setAccountIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.keyword = iprot.readString();
                    struct.setKeywordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionNumStatus_result implements org.apache.thrift.TBase<getMiniPositionNumStatus_result, getMiniPositionNumStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionNumStatus_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionNumStatus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionNumStatus_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionNumStatus_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionNumStatus_result.class, metaDataMap);
        }

        public getMiniPositionNumStatus_result() {
        }

        public getMiniPositionNumStatus_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionNumStatus_result(getMiniPositionNumStatus_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getMiniPositionNumStatus_result deepCopy() {
            return new getMiniPositionNumStatus_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getMiniPositionNumStatus_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionNumStatus_result)
                return this.equals((getMiniPositionNumStatus_result)that);
            return false;
        }

        public boolean equals(getMiniPositionNumStatus_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionNumStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionNumStatus_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionNumStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionNumStatus_resultStandardScheme getScheme() {
                return new getMiniPositionNumStatus_resultStandardScheme();
            }
        }

        private static class getMiniPositionNumStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionNumStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionNumStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionNumStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionNumStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionNumStatus_resultTupleScheme getScheme() {
                return new getMiniPositionNumStatus_resultTupleScheme();
            }
        }

        private static class getMiniPositionNumStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionNumStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionNumStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionNumStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionDetail_args implements org.apache.thrift.TBase<getMiniPositionDetail_args, getMiniPositionDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionDetail_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionDetail_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionDetail_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionDetail_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionDetail_args.class, metaDataMap);
        }

        public getMiniPositionDetail_args() {
        }

        public getMiniPositionDetail_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionDetail_args(getMiniPositionDetail_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public getMiniPositionDetail_args deepCopy() {
            return new getMiniPositionDetail_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getMiniPositionDetail_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionDetail_args)
                return this.equals((getMiniPositionDetail_args)that);
            return false;
        }

        public boolean equals(getMiniPositionDetail_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionDetail_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionDetail_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionDetail_argsStandardScheme getScheme() {
                return new getMiniPositionDetail_argsStandardScheme();
            }
        }

        private static class getMiniPositionDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionDetail_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionDetail_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionDetail_argsTupleScheme getScheme() {
                return new getMiniPositionDetail_argsTupleScheme();
            }
        }

        private static class getMiniPositionDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionDetail_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionDetail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionDetail_result implements org.apache.thrift.TBase<getMiniPositionDetail_result, getMiniPositionDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionDetail_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionDetail_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionDetail_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionDetail_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionDetail_result.class, metaDataMap);
        }

        public getMiniPositionDetail_result() {
        }

        public getMiniPositionDetail_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionDetail_result(getMiniPositionDetail_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getMiniPositionDetail_result deepCopy() {
            return new getMiniPositionDetail_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getMiniPositionDetail_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionDetail_result)
                return this.equals((getMiniPositionDetail_result)that);
            return false;
        }

        public boolean equals(getMiniPositionDetail_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionDetail_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionDetail_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionDetail_resultStandardScheme getScheme() {
                return new getMiniPositionDetail_resultStandardScheme();
            }
        }

        private static class getMiniPositionDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionDetail_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionDetail_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionDetail_resultTupleScheme getScheme() {
                return new getMiniPositionDetail_resultTupleScheme();
            }
        }

        private static class getMiniPositionDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionDetail_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionDetail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionShare_args implements org.apache.thrift.TBase<getMiniPositionShare_args, getMiniPositionShare_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionShare_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionShare_args");

        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionShare_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionShare_argsTupleSchemeFactory();

        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POSITION_ID((short)1, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSITIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionShare_args.class, metaDataMap);
        }

        public getMiniPositionShare_args() {
        }

        public getMiniPositionShare_args(
                int positionId)
        {
            this();
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionShare_args(getMiniPositionShare_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.positionId = other.positionId;
        }

        public getMiniPositionShare_args deepCopy() {
            return new getMiniPositionShare_args(this);
        }

        @Override
        public void clear() {
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getMiniPositionShare_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionShare_args)
                return this.equals((getMiniPositionShare_args)that);
            return false;
        }

        public boolean equals(getMiniPositionShare_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionShare_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionShare_args(");
            boolean first = true;

            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionShare_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionShare_argsStandardScheme getScheme() {
                return new getMiniPositionShare_argsStandardScheme();
            }
        }

        private static class getMiniPositionShare_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionShare_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionShare_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionShare_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionShare_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionShare_argsTupleScheme getScheme() {
                return new getMiniPositionShare_argsTupleScheme();
            }
        }

        private static class getMiniPositionShare_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionShare_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionShare_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPositionId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionShare_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getMiniPositionShare_result implements org.apache.thrift.TBase<getMiniPositionShare_result, getMiniPositionShare_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMiniPositionShare_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMiniPositionShare_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMiniPositionShare_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMiniPositionShare_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMiniPositionShare_result.class, metaDataMap);
        }

        public getMiniPositionShare_result() {
        }

        public getMiniPositionShare_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getMiniPositionShare_result(getMiniPositionShare_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getMiniPositionShare_result deepCopy() {
            return new getMiniPositionShare_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getMiniPositionShare_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getMiniPositionShare_result)
                return this.equals((getMiniPositionShare_result)that);
            return false;
        }

        public boolean equals(getMiniPositionShare_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getMiniPositionShare_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getMiniPositionShare_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getMiniPositionShare_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionShare_resultStandardScheme getScheme() {
                return new getMiniPositionShare_resultStandardScheme();
            }
        }

        private static class getMiniPositionShare_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMiniPositionShare_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getMiniPositionShare_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getMiniPositionShare_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getMiniPositionShare_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getMiniPositionShare_resultTupleScheme getScheme() {
                return new getMiniPositionShare_resultTupleScheme();
            }
        }

        private static class getMiniPositionShare_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMiniPositionShare_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getMiniPositionShare_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getMiniPositionShare_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getFeatureByPId_args implements org.apache.thrift.TBase<getFeatureByPId_args, getFeatureByPId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureByPId_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureByPId_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFeatureByPId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFeatureByPId_argsTupleSchemeFactory();

        public int pid; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short)1, "pid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureByPId_args.class, metaDataMap);
        }

        public getFeatureByPId_args() {
        }

        public getFeatureByPId_args(
                int pid)
        {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFeatureByPId_args(getFeatureByPId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public getFeatureByPId_args deepCopy() {
            return new getFeatureByPId_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public getFeatureByPId_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getFeatureByPId_args)
                return this.equals((getFeatureByPId_args)that);
            return false;
        }

        public boolean equals(getFeatureByPId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + pid;

            return hashCode;
        }

        @Override
        public int compareTo(getFeatureByPId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getFeatureByPId_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFeatureByPId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFeatureByPId_argsStandardScheme getScheme() {
                return new getFeatureByPId_argsStandardScheme();
            }
        }

        private static class getFeatureByPId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFeatureByPId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureByPId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureByPId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFeatureByPId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFeatureByPId_argsTupleScheme getScheme() {
                return new getFeatureByPId_argsTupleScheme();
            }
        }

        private static class getFeatureByPId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFeatureByPId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureByPId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureByPId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getFeatureByPId_result implements org.apache.thrift.TBase<getFeatureByPId_result, getFeatureByPId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureByPId_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureByPId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFeatureByPId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFeatureByPId_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureByPId_result.class, metaDataMap);
        }

        public getFeatureByPId_result() {
        }

        public getFeatureByPId_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFeatureByPId_result(getFeatureByPId_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getFeatureByPId_result deepCopy() {
            return new getFeatureByPId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getFeatureByPId_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getFeatureByPId_result)
                return this.equals((getFeatureByPId_result)that);
            return false;
        }

        public boolean equals(getFeatureByPId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getFeatureByPId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getFeatureByPId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFeatureByPId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFeatureByPId_resultStandardScheme getScheme() {
                return new getFeatureByPId_resultStandardScheme();
            }
        }

        private static class getFeatureByPId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFeatureByPId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureByPId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureByPId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFeatureByPId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getFeatureByPId_resultTupleScheme getScheme() {
                return new getFeatureByPId_resultTupleScheme();
            }
        }

        private static class getFeatureByPId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFeatureByPId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureByPId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureByPId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeature_args implements org.apache.thrift.TBase<updatePositionFeature_args, updatePositionFeature_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeature_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeature_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeature_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeature_argsTupleSchemeFactory();

        public int pid; // required
        public int fid; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short)1, "pid"),
            FID((short)2, "fid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // FID
                        return FID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private static final int __FID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeature_args.class, metaDataMap);
        }

        public updatePositionFeature_args() {
        }

        public updatePositionFeature_args(
                int pid,
                int fid)
        {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.fid = fid;
            setFidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeature_args(updatePositionFeature_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            this.fid = other.fid;
        }

        public updatePositionFeature_args deepCopy() {
            return new updatePositionFeature_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            setFidIsSet(false);
            this.fid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public updatePositionFeature_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public int getFid() {
            return this.fid;
        }

        public updatePositionFeature_args setFid(int fid) {
            this.fid = fid;
            setFidIsSet(true);
            return this;
        }

        public void unsetFid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
        }

        /** Returns true if field fid is set (has been assigned a value) and false otherwise */
        public boolean isSetFid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
        }

        public void setFidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((java.lang.Integer)value);
                    }
                    break;

                case FID:
                    if (value == null) {
                        unsetFid();
                    } else {
                        setFid((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case FID:
                    return getFid();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case FID:
                    return isSetFid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeature_args)
                return this.equals((updatePositionFeature_args)that);
            return false;
        }

        public boolean equals(updatePositionFeature_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_fid = true;
            boolean that_present_fid = true;
            if (this_present_fid || that_present_fid) {
                if (!(this_present_fid && that_present_fid))
                    return false;
                if (this.fid != that.fid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + pid;

            hashCode = hashCode * 8191 + fid;

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeature_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeature_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("fid:");
            sb.append(this.fid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeature_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeature_argsStandardScheme getScheme() {
                return new updatePositionFeature_argsStandardScheme();
            }
        }

        private static class updatePositionFeature_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeature_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeature_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fid = iprot.readI32();
                                struct.setFidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeature_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FID_FIELD_DESC);
                oprot.writeI32(struct.fid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeature_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeature_argsTupleScheme getScheme() {
                return new updatePositionFeature_argsTupleScheme();
            }
        }

        private static class updatePositionFeature_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeature_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeature_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetFid()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetFid()) {
                    oprot.writeI32(struct.fid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeature_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.fid = iprot.readI32();
                    struct.setFidIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeature_result implements org.apache.thrift.TBase<updatePositionFeature_result, updatePositionFeature_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeature_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeature_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeature_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeature_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeature_result.class, metaDataMap);
        }

        public updatePositionFeature_result() {
        }

        public updatePositionFeature_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeature_result(updatePositionFeature_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public updatePositionFeature_result deepCopy() {
            return new updatePositionFeature_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updatePositionFeature_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeature_result)
                return this.equals((updatePositionFeature_result)that);
            return false;
        }

        public boolean equals(updatePositionFeature_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeature_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeature_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeature_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeature_resultStandardScheme getScheme() {
                return new updatePositionFeature_resultStandardScheme();
            }
        }

        private static class updatePositionFeature_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeature_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeature_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeature_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeature_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeature_resultTupleScheme getScheme() {
                return new updatePositionFeature_resultTupleScheme();
            }
        }

        private static class updatePositionFeature_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeature_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeature_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeature_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeatures_args implements org.apache.thrift.TBase<updatePositionFeatures_args, updatePositionFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeatures_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeatures_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField FID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fidList", org.apache.thrift.protocol.TType.LIST, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeatures_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeatures_argsTupleSchemeFactory();

        public int pid; // required
        public java.util.List<java.lang.Integer> fidList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short)1, "pid"),
            FID_LIST((short)2, "fidList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // FID_LIST
                        return FID_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FID_LIST, new org.apache.thrift.meta_data.FieldMetaData("fidList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeatures_args.class, metaDataMap);
        }

        public updatePositionFeatures_args() {
        }

        public updatePositionFeatures_args(
                int pid,
                java.util.List<java.lang.Integer> fidList)
        {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.fidList = fidList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeatures_args(updatePositionFeatures_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            if (other.isSetFidList()) {
                java.util.List<java.lang.Integer> __this__fidList = new java.util.ArrayList<java.lang.Integer>(other.fidList);
                this.fidList = __this__fidList;
            }
        }

        public updatePositionFeatures_args deepCopy() {
            return new updatePositionFeatures_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            this.fidList = null;
        }

        public int getPid() {
            return this.pid;
        }

        public updatePositionFeatures_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public int getFidListSize() {
            return (this.fidList == null) ? 0 : this.fidList.size();
        }

        public java.util.Iterator<java.lang.Integer> getFidListIterator() {
            return (this.fidList == null) ? null : this.fidList.iterator();
        }

        public void addToFidList(int elem) {
            if (this.fidList == null) {
                this.fidList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.fidList.add(elem);
        }

        public java.util.List<java.lang.Integer> getFidList() {
            return this.fidList;
        }

        public updatePositionFeatures_args setFidList(java.util.List<java.lang.Integer> fidList) {
            this.fidList = fidList;
            return this;
        }

        public void unsetFidList() {
            this.fidList = null;
        }

        /** Returns true if field fidList is set (has been assigned a value) and false otherwise */
        public boolean isSetFidList() {
            return this.fidList != null;
        }

        public void setFidListIsSet(boolean value) {
            if (!value) {
                this.fidList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((java.lang.Integer)value);
                    }
                    break;

                case FID_LIST:
                    if (value == null) {
                        unsetFidList();
                    } else {
                        setFidList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case FID_LIST:
                    return getFidList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case FID_LIST:
                    return isSetFidList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeatures_args)
                return this.equals((updatePositionFeatures_args)that);
            return false;
        }

        public boolean equals(updatePositionFeatures_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_fidList = true && this.isSetFidList();
            boolean that_present_fidList = true && that.isSetFidList();
            if (this_present_fidList || that_present_fidList) {
                if (!(this_present_fidList && that_present_fidList))
                    return false;
                if (!this.fidList.equals(that.fidList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + pid;

            hashCode = hashCode * 8191 + ((isSetFidList()) ? 131071 : 524287);
            if (isSetFidList())
                hashCode = hashCode * 8191 + fidList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeatures_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFidList()).compareTo(other.isSetFidList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFidList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fidList, other.fidList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeatures_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("fidList:");
            if (this.fidList == null) {
                sb.append("null");
            } else {
                sb.append(this.fidList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatures_argsStandardScheme getScheme() {
                return new updatePositionFeatures_argsStandardScheme();
            }
        }

        private static class updatePositionFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeatures_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeatures_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                                    struct.fidList = new java.util.ArrayList<java.lang.Integer>(_list68.size);
                                    int _elem69;
                                    for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                                    {
                                        _elem69 = iprot.readI32();
                                        struct.fidList.add(_elem69);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFidListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeatures_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                if (struct.fidList != null) {
                    oprot.writeFieldBegin(FID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fidList.size()));
                        for (int _iter71 : struct.fidList)
                        {
                            oprot.writeI32(_iter71);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatures_argsTupleScheme getScheme() {
                return new updatePositionFeatures_argsTupleScheme();
            }
        }

        private static class updatePositionFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeatures_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatures_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetFidList()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetFidList()) {
                    {
                        oprot.writeI32(struct.fidList.size());
                        for (int _iter72 : struct.fidList)
                        {
                            oprot.writeI32(_iter72);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatures_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.fidList = new java.util.ArrayList<java.lang.Integer>(_list73.size);
                        int _elem74;
                        for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                        {
                            _elem74 = iprot.readI32();
                            struct.fidList.add(_elem74);
                        }
                    }
                    struct.setFidListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeatures_result implements org.apache.thrift.TBase<updatePositionFeatures_result, updatePositionFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeatures_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeatures_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeatures_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeatures_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeatures_result.class, metaDataMap);
        }

        public updatePositionFeatures_result() {
        }

        public updatePositionFeatures_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeatures_result(updatePositionFeatures_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public updatePositionFeatures_result deepCopy() {
            return new updatePositionFeatures_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updatePositionFeatures_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeatures_result)
                return this.equals((updatePositionFeatures_result)that);
            return false;
        }

        public boolean equals(updatePositionFeatures_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeatures_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeatures_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatures_resultStandardScheme getScheme() {
                return new updatePositionFeatures_resultStandardScheme();
            }
        }

        private static class updatePositionFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeatures_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeatures_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeatures_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatures_resultTupleScheme getScheme() {
                return new updatePositionFeatures_resultTupleScheme();
            }
        }

        private static class updatePositionFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeatures_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatures_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatures_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeatureBatch_args implements org.apache.thrift.TBase<updatePositionFeatureBatch_args, updatePositionFeatureBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeatureBatch_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeatureBatch_args");

        private static final org.apache.thrift.protocol.TField FEATURE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("featureList", org.apache.thrift.protocol.TType.LIST, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeatureBatch_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeatureBatch_argsTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FEATURE_LIST((short)1, "featureList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // FEATURE_LIST
                        return FEATURE_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FEATURE_LIST, new org.apache.thrift.meta_data.FieldMetaData("featureList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeatureBatch_args.class, metaDataMap);
        }

        public updatePositionFeatureBatch_args() {
        }

        public updatePositionFeatureBatch_args(
                java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList)
        {
            this();
            this.featureList = featureList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeatureBatch_args(updatePositionFeatureBatch_args other) {
            if (other.isSetFeatureList()) {
                java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> __this__featureList = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO>(other.featureList.size());
                for (com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO other_element : other.featureList) {
                    __this__featureList.add(new com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO(other_element));
                }
                this.featureList = __this__featureList;
            }
        }

        public updatePositionFeatureBatch_args deepCopy() {
            return new updatePositionFeatureBatch_args(this);
        }

        @Override
        public void clear() {
            this.featureList = null;
        }

        public int getFeatureListSize() {
            return (this.featureList == null) ? 0 : this.featureList.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> getFeatureListIterator() {
            return (this.featureList == null) ? null : this.featureList.iterator();
        }

        public void addToFeatureList(com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO elem) {
            if (this.featureList == null) {
                this.featureList = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO>();
            }
            this.featureList.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> getFeatureList() {
            return this.featureList;
        }

        public updatePositionFeatureBatch_args setFeatureList(java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO> featureList) {
            this.featureList = featureList;
            return this;
        }

        public void unsetFeatureList() {
            this.featureList = null;
        }

        /** Returns true if field featureList is set (has been assigned a value) and false otherwise */
        public boolean isSetFeatureList() {
            return this.featureList != null;
        }

        public void setFeatureListIsSet(boolean value) {
            if (!value) {
                this.featureList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case FEATURE_LIST:
                    if (value == null) {
                        unsetFeatureList();
                    } else {
                        setFeatureList((java.util.List<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case FEATURE_LIST:
                    return getFeatureList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case FEATURE_LIST:
                    return isSetFeatureList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeatureBatch_args)
                return this.equals((updatePositionFeatureBatch_args)that);
            return false;
        }

        public boolean equals(updatePositionFeatureBatch_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_featureList = true && this.isSetFeatureList();
            boolean that_present_featureList = true && that.isSetFeatureList();
            if (this_present_featureList || that_present_featureList) {
                if (!(this_present_featureList && that_present_featureList))
                    return false;
                if (!this.featureList.equals(that.featureList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetFeatureList()) ? 131071 : 524287);
            if (isSetFeatureList())
                hashCode = hashCode * 8191 + featureList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeatureBatch_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetFeatureList()).compareTo(other.isSetFeatureList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFeatureList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureList, other.featureList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeatureBatch_args(");
            boolean first = true;

            sb.append("featureList:");
            if (this.featureList == null) {
                sb.append("null");
            } else {
                sb.append(this.featureList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeatureBatch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatureBatch_argsStandardScheme getScheme() {
                return new updatePositionFeatureBatch_argsStandardScheme();
            }
        }

        private static class updatePositionFeatureBatch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeatureBatch_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeatureBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FEATURE_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                                    struct.featureList = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO>(_list76.size);
                                    com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO _elem77;
                                    for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                                    {
                                        _elem77 = new com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO();
                                        _elem77.read(iprot);
                                        struct.featureList.add(_elem77);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFeatureListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeatureBatch_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.featureList != null) {
                    oprot.writeFieldBegin(FEATURE_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.featureList.size()));
                        for (com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO _iter79 : struct.featureList)
                        {
                            _iter79.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeatureBatch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatureBatch_argsTupleScheme getScheme() {
                return new updatePositionFeatureBatch_argsTupleScheme();
            }
        }

        private static class updatePositionFeatureBatch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeatureBatch_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatureBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetFeatureList()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFeatureList()) {
                    {
                        oprot.writeI32(struct.featureList.size());
                        for (com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO _iter80 : struct.featureList)
                        {
                            _iter80.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatureBatch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.featureList = new java.util.ArrayList<com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO>(_list81.size);
                        com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO _elem82;
                        for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                        {
                            _elem82 = new com.moseeker.thrift.gen.position.struct.JobPositionHrCompanyFeatureDO();
                            _elem82.read(iprot);
                            struct.featureList.add(_elem82);
                        }
                    }
                    struct.setFeatureListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updatePositionFeatureBatch_result implements org.apache.thrift.TBase<updatePositionFeatureBatch_result, updatePositionFeatureBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositionFeatureBatch_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositionFeatureBatch_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePositionFeatureBatch_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePositionFeatureBatch_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositionFeatureBatch_result.class, metaDataMap);
        }

        public updatePositionFeatureBatch_result() {
        }

        public updatePositionFeatureBatch_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updatePositionFeatureBatch_result(updatePositionFeatureBatch_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public updatePositionFeatureBatch_result deepCopy() {
            return new updatePositionFeatureBatch_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updatePositionFeatureBatch_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updatePositionFeatureBatch_result)
                return this.equals((updatePositionFeatureBatch_result)that);
            return false;
        }

        public boolean equals(updatePositionFeatureBatch_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updatePositionFeatureBatch_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePositionFeatureBatch_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updatePositionFeatureBatch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatureBatch_resultStandardScheme getScheme() {
                return new updatePositionFeatureBatch_resultStandardScheme();
            }
        }

        private static class updatePositionFeatureBatch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePositionFeatureBatch_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositionFeatureBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositionFeatureBatch_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updatePositionFeatureBatch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updatePositionFeatureBatch_resultTupleScheme getScheme() {
                return new updatePositionFeatureBatch_resultTupleScheme();
            }
        }

        private static class updatePositionFeatureBatch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePositionFeatureBatch_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatureBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updatePositionFeatureBatch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionFeatureBetch_args implements org.apache.thrift.TBase<getPositionFeatureBetch_args, getPositionFeatureBetch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionFeatureBetch_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionFeatureBetch_args");

        private static final org.apache.thrift.protocol.TField PID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pidList", org.apache.thrift.protocol.TType.LIST, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionFeatureBetch_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionFeatureBetch_argsTupleSchemeFactory();

        public java.util.List<java.lang.Integer> pidList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID_LIST((short)1, "pidList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PID_LIST
                        return PID_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID_LIST, new org.apache.thrift.meta_data.FieldMetaData("pidList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionFeatureBetch_args.class, metaDataMap);
        }

        public getPositionFeatureBetch_args() {
        }

        public getPositionFeatureBetch_args(
                java.util.List<java.lang.Integer> pidList)
        {
            this();
            this.pidList = pidList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionFeatureBetch_args(getPositionFeatureBetch_args other) {
            if (other.isSetPidList()) {
                java.util.List<java.lang.Integer> __this__pidList = new java.util.ArrayList<java.lang.Integer>(other.pidList);
                this.pidList = __this__pidList;
            }
        }

        public getPositionFeatureBetch_args deepCopy() {
            return new getPositionFeatureBetch_args(this);
        }

        @Override
        public void clear() {
            this.pidList = null;
        }

        public int getPidListSize() {
            return (this.pidList == null) ? 0 : this.pidList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPidListIterator() {
            return (this.pidList == null) ? null : this.pidList.iterator();
        }

        public void addToPidList(int elem) {
            if (this.pidList == null) {
                this.pidList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.pidList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPidList() {
            return this.pidList;
        }

        public getPositionFeatureBetch_args setPidList(java.util.List<java.lang.Integer> pidList) {
            this.pidList = pidList;
            return this;
        }

        public void unsetPidList() {
            this.pidList = null;
        }

        /** Returns true if field pidList is set (has been assigned a value) and false otherwise */
        public boolean isSetPidList() {
            return this.pidList != null;
        }

        public void setPidListIsSet(boolean value) {
            if (!value) {
                this.pidList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PID_LIST:
                    if (value == null) {
                        unsetPidList();
                    } else {
                        setPidList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PID_LIST:
                    return getPidList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PID_LIST:
                    return isSetPidList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionFeatureBetch_args)
                return this.equals((getPositionFeatureBetch_args)that);
            return false;
        }

        public boolean equals(getPositionFeatureBetch_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_pidList = true && this.isSetPidList();
            boolean that_present_pidList = true && that.isSetPidList();
            if (this_present_pidList || that_present_pidList) {
                if (!(this_present_pidList && that_present_pidList))
                    return false;
                if (!this.pidList.equals(that.pidList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetPidList()) ? 131071 : 524287);
            if (isSetPidList())
                hashCode = hashCode * 8191 + pidList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionFeatureBetch_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPidList()).compareTo(other.isSetPidList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPidList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidList, other.pidList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionFeatureBetch_args(");
            boolean first = true;

            sb.append("pidList:");
            if (this.pidList == null) {
                sb.append("null");
            } else {
                sb.append(this.pidList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionFeatureBetch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionFeatureBetch_argsStandardScheme getScheme() {
                return new getPositionFeatureBetch_argsStandardScheme();
            }
        }

        private static class getPositionFeatureBetch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionFeatureBetch_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionFeatureBetch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                                    struct.pidList = new java.util.ArrayList<java.lang.Integer>(_list84.size);
                                    int _elem85;
                                    for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                                    {
                                        _elem85 = iprot.readI32();
                                        struct.pidList.add(_elem85);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPidListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionFeatureBetch_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.pidList != null) {
                    oprot.writeFieldBegin(PID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pidList.size()));
                        for (int _iter87 : struct.pidList)
                        {
                            oprot.writeI32(_iter87);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionFeatureBetch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionFeatureBetch_argsTupleScheme getScheme() {
                return new getPositionFeatureBetch_argsTupleScheme();
            }
        }

        private static class getPositionFeatureBetch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionFeatureBetch_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionFeatureBetch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPidList()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPidList()) {
                    {
                        oprot.writeI32(struct.pidList.size());
                        for (int _iter88 : struct.pidList)
                        {
                            oprot.writeI32(_iter88);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionFeatureBetch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.pidList = new java.util.ArrayList<java.lang.Integer>(_list89.size);
                        int _elem90;
                        for (int _i91 = 0; _i91 < _list89.size; ++_i91)
                        {
                            _elem90 = iprot.readI32();
                            struct.pidList.add(_elem90);
                        }
                    }
                    struct.setPidListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionFeatureBetch_result implements org.apache.thrift.TBase<getPositionFeatureBetch_result, getPositionFeatureBetch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionFeatureBetch_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionFeatureBetch_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionFeatureBetch_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionFeatureBetch_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionFeatureBetch_result.class, metaDataMap);
        }

        public getPositionFeatureBetch_result() {
        }

        public getPositionFeatureBetch_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionFeatureBetch_result(getPositionFeatureBetch_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public getPositionFeatureBetch_result deepCopy() {
            return new getPositionFeatureBetch_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionFeatureBetch_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionFeatureBetch_result)
                return this.equals((getPositionFeatureBetch_result)that);
            return false;
        }

        public boolean equals(getPositionFeatureBetch_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionFeatureBetch_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionFeatureBetch_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionFeatureBetch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionFeatureBetch_resultStandardScheme getScheme() {
                return new getPositionFeatureBetch_resultStandardScheme();
            }
        }

        private static class getPositionFeatureBetch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionFeatureBetch_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionFeatureBetch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionFeatureBetch_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionFeatureBetch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionFeatureBetch_resultTupleScheme getScheme() {
                return new getPositionFeatureBetch_resultTupleScheme();
            }
        }

        private static class getPositionFeatureBetch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionFeatureBetch_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionFeatureBetch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionFeatureBetch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
