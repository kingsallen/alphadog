/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-12")
public class HrCmsMediaDO implements org.apache.thrift.TBase<HrCmsMediaDO, HrCmsMediaDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrCmsMediaDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrCmsMediaDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LONGTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("longtexts", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("subTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("isShow", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrCmsMediaDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrCmsMediaDOTupleSchemeFactory();

  public int id; // optional
  public int moduleId; // optional
  public java.lang.String longtexts; // optional
  public java.lang.String attrs; // optional
  public java.lang.String title; // optional
  public java.lang.String subTitle; // optional
  public java.lang.String link; // optional
  public int resId; // optional
  public int orders; // optional
  public int isShow; // optional
  public int disable; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MODULE_ID((short)2, "moduleId"),
    LONGTEXTS((short)3, "longtexts"),
    ATTRS((short)4, "attrs"),
    TITLE((short)5, "title"),
    SUB_TITLE((short)6, "subTitle"),
    LINK((short)7, "link"),
    RES_ID((short)8, "resId"),
    ORDERS((short)9, "orders"),
    IS_SHOW((short)10, "isShow"),
    DISABLE((short)11, "disable"),
    CREATE_TIME((short)12, "createTime"),
    UPDATE_TIME((short)13, "updateTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MODULE_ID
          return MODULE_ID;
        case 3: // LONGTEXTS
          return LONGTEXTS;
        case 4: // ATTRS
          return ATTRS;
        case 5: // TITLE
          return TITLE;
        case 6: // SUB_TITLE
          return SUB_TITLE;
        case 7: // LINK
          return LINK;
        case 8: // RES_ID
          return RES_ID;
        case 9: // ORDERS
          return ORDERS;
        case 10: // IS_SHOW
          return IS_SHOW;
        case 11: // DISABLE
          return DISABLE;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MODULEID_ISSET_ID = 1;
  private static final int __RESID_ISSET_ID = 2;
  private static final int __ORDERS_ISSET_ID = 3;
  private static final int __ISSHOW_ISSET_ID = 4;
  private static final int __DISABLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.MODULE_ID,_Fields.LONGTEXTS,_Fields.ATTRS,_Fields.TITLE,_Fields.SUB_TITLE,_Fields.LINK,_Fields.RES_ID,_Fields.ORDERS,_Fields.IS_SHOW,_Fields.DISABLE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("moduleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONGTEXTS, new org.apache.thrift.meta_data.FieldMetaData("longtexts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TITLE, new org.apache.thrift.meta_data.FieldMetaData("subTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RES_ID, new org.apache.thrift.meta_data.FieldMetaData("resId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SHOW, new org.apache.thrift.meta_data.FieldMetaData("isShow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrCmsMediaDO.class, metaDataMap);
  }

  public HrCmsMediaDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrCmsMediaDO(HrCmsMediaDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.moduleId = other.moduleId;
    if (other.isSetLongtexts()) {
      this.longtexts = other.longtexts;
    }
    if (other.isSetAttrs()) {
      this.attrs = other.attrs;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSubTitle()) {
      this.subTitle = other.subTitle;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    this.resId = other.resId;
    this.orders = other.orders;
    this.isShow = other.isShow;
    this.disable = other.disable;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public HrCmsMediaDO deepCopy() {
    return new HrCmsMediaDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setModuleIdIsSet(false);
    this.moduleId = 0;
    this.longtexts = null;
    this.attrs = null;
    this.title = null;
    this.subTitle = null;
    this.link = null;
    setResIdIsSet(false);
    this.resId = 0;
    setOrdersIsSet(false);
    this.orders = 0;
    setIsShowIsSet(false);
    this.isShow = 0;
    setDisableIsSet(false);
    this.disable = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public HrCmsMediaDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getModuleId() {
    return this.moduleId;
  }

  public HrCmsMediaDO setModuleId(int moduleId) {
    this.moduleId = moduleId;
    setModuleIdIsSet(true);
    return this;
  }

  public void unsetModuleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODULEID_ISSET_ID);
  }

  /** Returns true if field moduleId is set (has been assigned a value) and false otherwise */
  public boolean isSetModuleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODULEID_ISSET_ID);
  }

  public void setModuleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODULEID_ISSET_ID, value);
  }

  public java.lang.String getLongtexts() {
    return this.longtexts;
  }

  public HrCmsMediaDO setLongtexts(java.lang.String longtexts) {
    this.longtexts = longtexts;
    return this;
  }

  public void unsetLongtexts() {
    this.longtexts = null;
  }

  /** Returns true if field longtexts is set (has been assigned a value) and false otherwise */
  public boolean isSetLongtexts() {
    return this.longtexts != null;
  }

  public void setLongtextsIsSet(boolean value) {
    if (!value) {
      this.longtexts = null;
    }
  }

  public java.lang.String getAttrs() {
    return this.attrs;
  }

  public HrCmsMediaDO setAttrs(java.lang.String attrs) {
    this.attrs = attrs;
    return this;
  }

  public void unsetAttrs() {
    this.attrs = null;
  }

  /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrs() {
    return this.attrs != null;
  }

  public void setAttrsIsSet(boolean value) {
    if (!value) {
      this.attrs = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public HrCmsMediaDO setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getSubTitle() {
    return this.subTitle;
  }

  public HrCmsMediaDO setSubTitle(java.lang.String subTitle) {
    this.subTitle = subTitle;
    return this;
  }

  public void unsetSubTitle() {
    this.subTitle = null;
  }

  /** Returns true if field subTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTitle() {
    return this.subTitle != null;
  }

  public void setSubTitleIsSet(boolean value) {
    if (!value) {
      this.subTitle = null;
    }
  }

  public java.lang.String getLink() {
    return this.link;
  }

  public HrCmsMediaDO setLink(java.lang.String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public int getResId() {
    return this.resId;
  }

  public HrCmsMediaDO setResId(int resId) {
    this.resId = resId;
    setResIdIsSet(true);
    return this;
  }

  public void unsetResId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESID_ISSET_ID);
  }

  /** Returns true if field resId is set (has been assigned a value) and false otherwise */
  public boolean isSetResId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESID_ISSET_ID);
  }

  public void setResIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESID_ISSET_ID, value);
  }

  public int getOrders() {
    return this.orders;
  }

  public HrCmsMediaDO setOrders(int orders) {
    this.orders = orders;
    setOrdersIsSet(true);
    return this;
  }

  public void unsetOrders() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERS_ISSET_ID);
  }

  /** Returns true if field orders is set (has been assigned a value) and false otherwise */
  public boolean isSetOrders() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERS_ISSET_ID);
  }

  public void setOrdersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERS_ISSET_ID, value);
  }

  public int getIsShow() {
    return this.isShow;
  }

  public HrCmsMediaDO setIsShow(int isShow) {
    this.isShow = isShow;
    setIsShowIsSet(true);
    return this;
  }

  public void unsetIsShow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSHOW_ISSET_ID);
  }

  /** Returns true if field isShow is set (has been assigned a value) and false otherwise */
  public boolean isSetIsShow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSHOW_ISSET_ID);
  }

  public void setIsShowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSHOW_ISSET_ID, value);
  }

  public int getDisable() {
    return this.disable;
  }

  public HrCmsMediaDO setDisable(int disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public HrCmsMediaDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public HrCmsMediaDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case MODULE_ID:
      if (value == null) {
        unsetModuleId();
      } else {
        setModuleId((java.lang.Integer)value);
      }
      break;

    case LONGTEXTS:
      if (value == null) {
        unsetLongtexts();
      } else {
        setLongtexts((java.lang.String)value);
      }
      break;

    case ATTRS:
      if (value == null) {
        unsetAttrs();
      } else {
        setAttrs((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case SUB_TITLE:
      if (value == null) {
        unsetSubTitle();
      } else {
        setSubTitle((java.lang.String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((java.lang.String)value);
      }
      break;

    case RES_ID:
      if (value == null) {
        unsetResId();
      } else {
        setResId((java.lang.Integer)value);
      }
      break;

    case ORDERS:
      if (value == null) {
        unsetOrders();
      } else {
        setOrders((java.lang.Integer)value);
      }
      break;

    case IS_SHOW:
      if (value == null) {
        unsetIsShow();
      } else {
        setIsShow((java.lang.Integer)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MODULE_ID:
      return getModuleId();

    case LONGTEXTS:
      return getLongtexts();

    case ATTRS:
      return getAttrs();

    case TITLE:
      return getTitle();

    case SUB_TITLE:
      return getSubTitle();

    case LINK:
      return getLink();

    case RES_ID:
      return getResId();

    case ORDERS:
      return getOrders();

    case IS_SHOW:
      return getIsShow();

    case DISABLE:
      return getDisable();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MODULE_ID:
      return isSetModuleId();
    case LONGTEXTS:
      return isSetLongtexts();
    case ATTRS:
      return isSetAttrs();
    case TITLE:
      return isSetTitle();
    case SUB_TITLE:
      return isSetSubTitle();
    case LINK:
      return isSetLink();
    case RES_ID:
      return isSetResId();
    case ORDERS:
      return isSetOrders();
    case IS_SHOW:
      return isSetIsShow();
    case DISABLE:
      return isSetDisable();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrCmsMediaDO)
      return this.equals((HrCmsMediaDO)that);
    return false;
  }

  public boolean equals(HrCmsMediaDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_moduleId = true && this.isSetModuleId();
    boolean that_present_moduleId = true && that.isSetModuleId();
    if (this_present_moduleId || that_present_moduleId) {
      if (!(this_present_moduleId && that_present_moduleId))
        return false;
      if (this.moduleId != that.moduleId)
        return false;
    }

    boolean this_present_longtexts = true && this.isSetLongtexts();
    boolean that_present_longtexts = true && that.isSetLongtexts();
    if (this_present_longtexts || that_present_longtexts) {
      if (!(this_present_longtexts && that_present_longtexts))
        return false;
      if (!this.longtexts.equals(that.longtexts))
        return false;
    }

    boolean this_present_attrs = true && this.isSetAttrs();
    boolean that_present_attrs = true && that.isSetAttrs();
    if (this_present_attrs || that_present_attrs) {
      if (!(this_present_attrs && that_present_attrs))
        return false;
      if (!this.attrs.equals(that.attrs))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_subTitle = true && this.isSetSubTitle();
    boolean that_present_subTitle = true && that.isSetSubTitle();
    if (this_present_subTitle || that_present_subTitle) {
      if (!(this_present_subTitle && that_present_subTitle))
        return false;
      if (!this.subTitle.equals(that.subTitle))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_resId = true && this.isSetResId();
    boolean that_present_resId = true && that.isSetResId();
    if (this_present_resId || that_present_resId) {
      if (!(this_present_resId && that_present_resId))
        return false;
      if (this.resId != that.resId)
        return false;
    }

    boolean this_present_orders = true && this.isSetOrders();
    boolean that_present_orders = true && that.isSetOrders();
    if (this_present_orders || that_present_orders) {
      if (!(this_present_orders && that_present_orders))
        return false;
      if (this.orders != that.orders)
        return false;
    }

    boolean this_present_isShow = true && this.isSetIsShow();
    boolean that_present_isShow = true && that.isSetIsShow();
    if (this_present_isShow || that_present_isShow) {
      if (!(this_present_isShow && that_present_isShow))
        return false;
      if (this.isShow != that.isShow)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetModuleId()) ? 131071 : 524287);
    if (isSetModuleId())
      hashCode = hashCode * 8191 + moduleId;

    hashCode = hashCode * 8191 + ((isSetLongtexts()) ? 131071 : 524287);
    if (isSetLongtexts())
      hashCode = hashCode * 8191 + longtexts.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttrs()) ? 131071 : 524287);
    if (isSetAttrs())
      hashCode = hashCode * 8191 + attrs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubTitle()) ? 131071 : 524287);
    if (isSetSubTitle())
      hashCode = hashCode * 8191 + subTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetLink()) ? 131071 : 524287);
    if (isSetLink())
      hashCode = hashCode * 8191 + link.hashCode();

    hashCode = hashCode * 8191 + ((isSetResId()) ? 131071 : 524287);
    if (isSetResId())
      hashCode = hashCode * 8191 + resId;

    hashCode = hashCode * 8191 + ((isSetOrders()) ? 131071 : 524287);
    if (isSetOrders())
      hashCode = hashCode * 8191 + orders;

    hashCode = hashCode * 8191 + ((isSetIsShow()) ? 131071 : 524287);
    if (isSetIsShow())
      hashCode = hashCode * 8191 + isShow;

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + disable;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrCmsMediaDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModuleId()).compareTo(other.isSetModuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleId, other.moduleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongtexts()).compareTo(other.isSetLongtexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongtexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longtexts, other.longtexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttrs()).compareTo(other.isSetAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, other.attrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubTitle()).compareTo(other.isSetSubTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTitle, other.subTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResId()).compareTo(other.isSetResId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resId, other.resId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsShow()).compareTo(other.isSetIsShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isShow, other.isShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrCmsMediaDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetModuleId()) {
      if (!first) sb.append(", ");
      sb.append("moduleId:");
      sb.append(this.moduleId);
      first = false;
    }
    if (isSetLongtexts()) {
      if (!first) sb.append(", ");
      sb.append("longtexts:");
      if (this.longtexts == null) {
        sb.append("null");
      } else {
        sb.append(this.longtexts);
      }
      first = false;
    }
    if (isSetAttrs()) {
      if (!first) sb.append(", ");
      sb.append("attrs:");
      if (this.attrs == null) {
        sb.append("null");
      } else {
        sb.append(this.attrs);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSubTitle()) {
      if (!first) sb.append(", ");
      sb.append("subTitle:");
      if (this.subTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.subTitle);
      }
      first = false;
    }
    if (isSetLink()) {
      if (!first) sb.append(", ");
      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
    }
    if (isSetResId()) {
      if (!first) sb.append(", ");
      sb.append("resId:");
      sb.append(this.resId);
      first = false;
    }
    if (isSetOrders()) {
      if (!first) sb.append(", ");
      sb.append("orders:");
      sb.append(this.orders);
      first = false;
    }
    if (isSetIsShow()) {
      if (!first) sb.append(", ");
      sb.append("isShow:");
      sb.append(this.isShow);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrCmsMediaDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCmsMediaDOStandardScheme getScheme() {
      return new HrCmsMediaDOStandardScheme();
    }
  }

  private static class HrCmsMediaDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrCmsMediaDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrCmsMediaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.moduleId = iprot.readI32();
              struct.setModuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LONGTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.longtexts = iprot.readString();
              struct.setLongtextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTRS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attrs = iprot.readString();
              struct.setAttrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subTitle = iprot.readString();
              struct.setSubTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.link = iprot.readString();
              struct.setLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resId = iprot.readI32();
              struct.setResIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orders = iprot.readI32();
              struct.setOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isShow = iprot.readI32();
              struct.setIsShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disable = iprot.readI32();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrCmsMediaDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModuleId()) {
        oprot.writeFieldBegin(MODULE_ID_FIELD_DESC);
        oprot.writeI32(struct.moduleId);
        oprot.writeFieldEnd();
      }
      if (struct.longtexts != null) {
        if (struct.isSetLongtexts()) {
          oprot.writeFieldBegin(LONGTEXTS_FIELD_DESC);
          oprot.writeString(struct.longtexts);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attrs != null) {
        if (struct.isSetAttrs()) {
          oprot.writeFieldBegin(ATTRS_FIELD_DESC);
          oprot.writeString(struct.attrs);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subTitle != null) {
        if (struct.isSetSubTitle()) {
          oprot.writeFieldBegin(SUB_TITLE_FIELD_DESC);
          oprot.writeString(struct.subTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.link != null) {
        if (struct.isSetLink()) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          oprot.writeString(struct.link);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResId()) {
        oprot.writeFieldBegin(RES_ID_FIELD_DESC);
        oprot.writeI32(struct.resId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrders()) {
        oprot.writeFieldBegin(ORDERS_FIELD_DESC);
        oprot.writeI32(struct.orders);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsShow()) {
        oprot.writeFieldBegin(IS_SHOW_FIELD_DESC);
        oprot.writeI32(struct.isShow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeI32(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrCmsMediaDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrCmsMediaDOTupleScheme getScheme() {
      return new HrCmsMediaDOTupleScheme();
    }
  }

  private static class HrCmsMediaDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrCmsMediaDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrCmsMediaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetModuleId()) {
        optionals.set(1);
      }
      if (struct.isSetLongtexts()) {
        optionals.set(2);
      }
      if (struct.isSetAttrs()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetSubTitle()) {
        optionals.set(5);
      }
      if (struct.isSetLink()) {
        optionals.set(6);
      }
      if (struct.isSetResId()) {
        optionals.set(7);
      }
      if (struct.isSetOrders()) {
        optionals.set(8);
      }
      if (struct.isSetIsShow()) {
        optionals.set(9);
      }
      if (struct.isSetDisable()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetModuleId()) {
        oprot.writeI32(struct.moduleId);
      }
      if (struct.isSetLongtexts()) {
        oprot.writeString(struct.longtexts);
      }
      if (struct.isSetAttrs()) {
        oprot.writeString(struct.attrs);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSubTitle()) {
        oprot.writeString(struct.subTitle);
      }
      if (struct.isSetLink()) {
        oprot.writeString(struct.link);
      }
      if (struct.isSetResId()) {
        oprot.writeI32(struct.resId);
      }
      if (struct.isSetOrders()) {
        oprot.writeI32(struct.orders);
      }
      if (struct.isSetIsShow()) {
        oprot.writeI32(struct.isShow);
      }
      if (struct.isSetDisable()) {
        oprot.writeI32(struct.disable);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrCmsMediaDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.moduleId = iprot.readI32();
        struct.setModuleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.longtexts = iprot.readString();
        struct.setLongtextsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.attrs = iprot.readString();
        struct.setAttrsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subTitle = iprot.readString();
        struct.setSubTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.link = iprot.readString();
        struct.setLinkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resId = iprot.readI32();
        struct.setResIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orders = iprot.readI32();
        struct.setOrdersIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isShow = iprot.readI32();
        struct.setIsShowIsSet(true);
      }
      if (incoming.get(10)) {
        struct.disable = iprot.readI32();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

