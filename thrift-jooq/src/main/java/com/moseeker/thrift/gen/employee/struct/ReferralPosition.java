/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.employee.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-06")
public class ReferralPosition implements org.apache.thrift.TBase<ReferralPosition, ReferralPosition._Fields>, java.io.Serializable, Cloneable, Comparable<ReferralPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferralPosition");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("companyAbbreviation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryBottom", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryTop", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("experienceAbove", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cities", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReferralPositionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReferralPositionTupleSchemeFactory();

  public int id; // optional
  public java.lang.String title; // optional
  public java.lang.String companyName; // optional
  public java.lang.String companyAbbreviation; // optional
  public int salaryBottom; // optional
  public int salaryTop; // optional
  public int experience; // optional
  public boolean experienceAbove; // optional
  public java.lang.String team; // optional
  public java.lang.String logo; // optional
  public java.util.List<City> cities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    COMPANY_NAME((short)3, "companyName"),
    COMPANY_ABBREVIATION((short)4, "companyAbbreviation"),
    SALARY_BOTTOM((short)5, "salaryBottom"),
    SALARY_TOP((short)6, "salaryTop"),
    EXPERIENCE((short)7, "experience"),
    EXPERIENCE_ABOVE((short)8, "experienceAbove"),
    TEAM((short)9, "team"),
    LOGO((short)10, "logo"),
    CITIES((short)11, "cities");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // COMPANY_NAME
          return COMPANY_NAME;
        case 4: // COMPANY_ABBREVIATION
          return COMPANY_ABBREVIATION;
        case 5: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 6: // SALARY_TOP
          return SALARY_TOP;
        case 7: // EXPERIENCE
          return EXPERIENCE;
        case 8: // EXPERIENCE_ABOVE
          return EXPERIENCE_ABOVE;
        case 9: // TEAM
          return TEAM;
        case 10: // LOGO
          return LOGO;
        case 11: // CITIES
          return CITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SALARYBOTTOM_ISSET_ID = 1;
  private static final int __SALARYTOP_ISSET_ID = 2;
  private static final int __EXPERIENCE_ISSET_ID = 3;
  private static final int __EXPERIENCEABOVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.COMPANY_NAME,_Fields.COMPANY_ABBREVIATION,_Fields.SALARY_BOTTOM,_Fields.SALARY_TOP,_Fields.EXPERIENCE,_Fields.EXPERIENCE_ABOVE,_Fields.TEAM,_Fields.LOGO,_Fields.CITIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("companyAbbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salaryBottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salaryTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIENCE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("experienceAbove", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITIES, new org.apache.thrift.meta_data.FieldMetaData("cities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, City.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferralPosition.class, metaDataMap);
  }

  public ReferralPosition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferralPosition(ReferralPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    if (other.isSetCompanyAbbreviation()) {
      this.companyAbbreviation = other.companyAbbreviation;
    }
    this.salaryBottom = other.salaryBottom;
    this.salaryTop = other.salaryTop;
    this.experience = other.experience;
    this.experienceAbove = other.experienceAbove;
    if (other.isSetTeam()) {
      this.team = other.team;
    }
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    if (other.isSetCities()) {
      java.util.List<City> __this__cities = new java.util.ArrayList<City>(other.cities.size());
      for (City other_element : other.cities) {
        __this__cities.add(new City(other_element));
      }
      this.cities = __this__cities;
    }
  }

  public ReferralPosition deepCopy() {
    return new ReferralPosition(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.companyName = null;
    this.companyAbbreviation = null;
    setSalaryBottomIsSet(false);
    this.salaryBottom = 0;
    setSalaryTopIsSet(false);
    this.salaryTop = 0;
    setExperienceIsSet(false);
    this.experience = 0;
    setExperienceAboveIsSet(false);
    this.experienceAbove = false;
    this.team = null;
    this.logo = null;
    this.cities = null;
  }

  public int getId() {
    return this.id;
  }

  public ReferralPosition setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public ReferralPosition setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getCompanyName() {
    return this.companyName;
  }

  public ReferralPosition setCompanyName(java.lang.String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public java.lang.String getCompanyAbbreviation() {
    return this.companyAbbreviation;
  }

  public ReferralPosition setCompanyAbbreviation(java.lang.String companyAbbreviation) {
    this.companyAbbreviation = companyAbbreviation;
    return this;
  }

  public void unsetCompanyAbbreviation() {
    this.companyAbbreviation = null;
  }

  /** Returns true if field companyAbbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyAbbreviation() {
    return this.companyAbbreviation != null;
  }

  public void setCompanyAbbreviationIsSet(boolean value) {
    if (!value) {
      this.companyAbbreviation = null;
    }
  }

  public int getSalaryBottom() {
    return this.salaryBottom;
  }

  public ReferralPosition setSalaryBottom(int salaryBottom) {
    this.salaryBottom = salaryBottom;
    setSalaryBottomIsSet(true);
    return this;
  }

  public void unsetSalaryBottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  /** Returns true if field salaryBottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryBottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  public void setSalaryBottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID, value);
  }

  public int getSalaryTop() {
    return this.salaryTop;
  }

  public ReferralPosition setSalaryTop(int salaryTop) {
    this.salaryTop = salaryTop;
    setSalaryTopIsSet(true);
    return this;
  }

  public void unsetSalaryTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  /** Returns true if field salaryTop is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  public void setSalaryTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYTOP_ISSET_ID, value);
  }

  public int getExperience() {
    return this.experience;
  }

  public ReferralPosition setExperience(int experience) {
    this.experience = experience;
    setExperienceIsSet(true);
    return this;
  }

  public void unsetExperience() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCE_ISSET_ID);
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPERIENCE_ISSET_ID);
  }

  public void setExperienceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPERIENCE_ISSET_ID, value);
  }

  public boolean isExperienceAbove() {
    return this.experienceAbove;
  }

  public ReferralPosition setExperienceAbove(boolean experienceAbove) {
    this.experienceAbove = experienceAbove;
    setExperienceAboveIsSet(true);
    return this;
  }

  public void unsetExperienceAbove() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID);
  }

  /** Returns true if field experienceAbove is set (has been assigned a value) and false otherwise */
  public boolean isSetExperienceAbove() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID);
  }

  public void setExperienceAboveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPERIENCEABOVE_ISSET_ID, value);
  }

  public java.lang.String getTeam() {
    return this.team;
  }

  public ReferralPosition setTeam(java.lang.String team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public java.lang.String getLogo() {
    return this.logo;
  }

  public ReferralPosition setLogo(java.lang.String logo) {
    this.logo = logo;
    return this;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public int getCitiesSize() {
    return (this.cities == null) ? 0 : this.cities.size();
  }

  public java.util.Iterator<City> getCitiesIterator() {
    return (this.cities == null) ? null : this.cities.iterator();
  }

  public void addToCities(City elem) {
    if (this.cities == null) {
      this.cities = new java.util.ArrayList<City>();
    }
    this.cities.add(elem);
  }

  public java.util.List<City> getCities() {
    return this.cities;
  }

  public ReferralPosition setCities(java.util.List<City> cities) {
    this.cities = cities;
    return this;
  }

  public void unsetCities() {
    this.cities = null;
  }

  /** Returns true if field cities is set (has been assigned a value) and false otherwise */
  public boolean isSetCities() {
    return this.cities != null;
  }

  public void setCitiesIsSet(boolean value) {
    if (!value) {
      this.cities = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((java.lang.String)value);
      }
      break;

    case COMPANY_ABBREVIATION:
      if (value == null) {
        unsetCompanyAbbreviation();
      } else {
        setCompanyAbbreviation((java.lang.String)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalaryBottom();
      } else {
        setSalaryBottom((java.lang.Integer)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalaryTop();
      } else {
        setSalaryTop((java.lang.Integer)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((java.lang.Integer)value);
      }
      break;

    case EXPERIENCE_ABOVE:
      if (value == null) {
        unsetExperienceAbove();
      } else {
        setExperienceAbove((java.lang.Boolean)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((java.lang.String)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((java.lang.String)value);
      }
      break;

    case CITIES:
      if (value == null) {
        unsetCities();
      } else {
        setCities((java.util.List<City>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case COMPANY_NAME:
      return getCompanyName();

    case COMPANY_ABBREVIATION:
      return getCompanyAbbreviation();

    case SALARY_BOTTOM:
      return getSalaryBottom();

    case SALARY_TOP:
      return getSalaryTop();

    case EXPERIENCE:
      return getExperience();

    case EXPERIENCE_ABOVE:
      return isExperienceAbove();

    case TEAM:
      return getTeam();

    case LOGO:
      return getLogo();

    case CITIES:
      return getCities();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case COMPANY_NAME:
      return isSetCompanyName();
    case COMPANY_ABBREVIATION:
      return isSetCompanyAbbreviation();
    case SALARY_BOTTOM:
      return isSetSalaryBottom();
    case SALARY_TOP:
      return isSetSalaryTop();
    case EXPERIENCE:
      return isSetExperience();
    case EXPERIENCE_ABOVE:
      return isSetExperienceAbove();
    case TEAM:
      return isSetTeam();
    case LOGO:
      return isSetLogo();
    case CITIES:
      return isSetCities();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferralPosition)
      return this.equals((ReferralPosition)that);
    return false;
  }

  public boolean equals(ReferralPosition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_companyAbbreviation = true && this.isSetCompanyAbbreviation();
    boolean that_present_companyAbbreviation = true && that.isSetCompanyAbbreviation();
    if (this_present_companyAbbreviation || that_present_companyAbbreviation) {
      if (!(this_present_companyAbbreviation && that_present_companyAbbreviation))
        return false;
      if (!this.companyAbbreviation.equals(that.companyAbbreviation))
        return false;
    }

    boolean this_present_salaryBottom = true && this.isSetSalaryBottom();
    boolean that_present_salaryBottom = true && that.isSetSalaryBottom();
    if (this_present_salaryBottom || that_present_salaryBottom) {
      if (!(this_present_salaryBottom && that_present_salaryBottom))
        return false;
      if (this.salaryBottom != that.salaryBottom)
        return false;
    }

    boolean this_present_salaryTop = true && this.isSetSalaryTop();
    boolean that_present_salaryTop = true && that.isSetSalaryTop();
    if (this_present_salaryTop || that_present_salaryTop) {
      if (!(this_present_salaryTop && that_present_salaryTop))
        return false;
      if (this.salaryTop != that.salaryTop)
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (this.experience != that.experience)
        return false;
    }

    boolean this_present_experienceAbove = true && this.isSetExperienceAbove();
    boolean that_present_experienceAbove = true && that.isSetExperienceAbove();
    if (this_present_experienceAbove || that_present_experienceAbove) {
      if (!(this_present_experienceAbove && that_present_experienceAbove))
        return false;
      if (this.experienceAbove != that.experienceAbove)
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_cities = true && this.isSetCities();
    boolean that_present_cities = true && that.isSetCities();
    if (this_present_cities || that_present_cities) {
      if (!(this_present_cities && that_present_cities))
        return false;
      if (!this.cities.equals(that.cities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyName()) ? 131071 : 524287);
    if (isSetCompanyName())
      hashCode = hashCode * 8191 + companyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyAbbreviation()) ? 131071 : 524287);
    if (isSetCompanyAbbreviation())
      hashCode = hashCode * 8191 + companyAbbreviation.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalaryBottom()) ? 131071 : 524287);
    if (isSetSalaryBottom())
      hashCode = hashCode * 8191 + salaryBottom;

    hashCode = hashCode * 8191 + ((isSetSalaryTop()) ? 131071 : 524287);
    if (isSetSalaryTop())
      hashCode = hashCode * 8191 + salaryTop;

    hashCode = hashCode * 8191 + ((isSetExperience()) ? 131071 : 524287);
    if (isSetExperience())
      hashCode = hashCode * 8191 + experience;

    hashCode = hashCode * 8191 + ((isSetExperienceAbove()) ? 131071 : 524287);
    if (isSetExperienceAbove())
      hashCode = hashCode * 8191 + ((experienceAbove) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTeam()) ? 131071 : 524287);
    if (isSetTeam())
      hashCode = hashCode * 8191 + team.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogo()) ? 131071 : 524287);
    if (isSetLogo())
      hashCode = hashCode * 8191 + logo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCities()) ? 131071 : 524287);
    if (isSetCities())
      hashCode = hashCode * 8191 + cities.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReferralPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyAbbreviation()).compareTo(other.isSetCompanyAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyAbbreviation, other.companyAbbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalaryBottom()).compareTo(other.isSetSalaryBottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryBottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryBottom, other.salaryBottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalaryTop()).compareTo(other.isSetSalaryTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryTop, other.salaryTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExperienceAbove()).compareTo(other.isSetExperienceAbove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperienceAbove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experienceAbove, other.experienceAbove);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCities()).compareTo(other.isSetCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cities, other.cities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReferralPosition(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetCompanyName()) {
      if (!first) sb.append(", ");
      sb.append("companyName:");
      if (this.companyName == null) {
        sb.append("null");
      } else {
        sb.append(this.companyName);
      }
      first = false;
    }
    if (isSetCompanyAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("companyAbbreviation:");
      if (this.companyAbbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.companyAbbreviation);
      }
      first = false;
    }
    if (isSetSalaryBottom()) {
      if (!first) sb.append(", ");
      sb.append("salaryBottom:");
      sb.append(this.salaryBottom);
      first = false;
    }
    if (isSetSalaryTop()) {
      if (!first) sb.append(", ");
      sb.append("salaryTop:");
      sb.append(this.salaryTop);
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      sb.append(this.experience);
      first = false;
    }
    if (isSetExperienceAbove()) {
      if (!first) sb.append(", ");
      sb.append("experienceAbove:");
      sb.append(this.experienceAbove);
      first = false;
    }
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetLogo()) {
      if (!first) sb.append(", ");
      sb.append("logo:");
      if (this.logo == null) {
        sb.append("null");
      } else {
        sb.append(this.logo);
      }
      first = false;
    }
    if (isSetCities()) {
      if (!first) sb.append(", ");
      sb.append("cities:");
      if (this.cities == null) {
        sb.append("null");
      } else {
        sb.append(this.cities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferralPositionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionStandardScheme getScheme() {
      return new ReferralPositionStandardScheme();
    }
  }

  private static class ReferralPositionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReferralPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferralPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyAbbreviation = iprot.readString();
              struct.setCompanyAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryBottom = iprot.readI32();
              struct.setSalaryBottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryTop = iprot.readI32();
              struct.setSalaryTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experience = iprot.readI32();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPERIENCE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.experienceAbove = iprot.readBool();
              struct.setExperienceAboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.team = iprot.readString();
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.cities = new java.util.ArrayList<City>(_list66.size);
                City _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = new City();
                  _elem67.read(iprot);
                  struct.cities.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferralPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyName != null) {
        if (struct.isSetCompanyName()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.companyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyAbbreviation != null) {
        if (struct.isSetCompanyAbbreviation()) {
          oprot.writeFieldBegin(COMPANY_ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.companyAbbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salaryBottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salaryTop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExperience()) {
        oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
        oprot.writeI32(struct.experience);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExperienceAbove()) {
        oprot.writeFieldBegin(EXPERIENCE_ABOVE_FIELD_DESC);
        oprot.writeBool(struct.experienceAbove);
        oprot.writeFieldEnd();
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          oprot.writeString(struct.team);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logo != null) {
        if (struct.isSetLogo()) {
          oprot.writeFieldBegin(LOGO_FIELD_DESC);
          oprot.writeString(struct.logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cities != null) {
        if (struct.isSetCities()) {
          oprot.writeFieldBegin(CITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cities.size()));
            for (City _iter69 : struct.cities)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferralPositionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionTupleScheme getScheme() {
      return new ReferralPositionTupleScheme();
    }
  }

  private static class ReferralPositionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReferralPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferralPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(2);
      }
      if (struct.isSetCompanyAbbreviation()) {
        optionals.set(3);
      }
      if (struct.isSetSalaryBottom()) {
        optionals.set(4);
      }
      if (struct.isSetSalaryTop()) {
        optionals.set(5);
      }
      if (struct.isSetExperience()) {
        optionals.set(6);
      }
      if (struct.isSetExperienceAbove()) {
        optionals.set(7);
      }
      if (struct.isSetTeam()) {
        optionals.set(8);
      }
      if (struct.isSetLogo()) {
        optionals.set(9);
      }
      if (struct.isSetCities()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetCompanyAbbreviation()) {
        oprot.writeString(struct.companyAbbreviation);
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeI32(struct.salaryBottom);
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeI32(struct.salaryTop);
      }
      if (struct.isSetExperience()) {
        oprot.writeI32(struct.experience);
      }
      if (struct.isSetExperienceAbove()) {
        oprot.writeBool(struct.experienceAbove);
      }
      if (struct.isSetTeam()) {
        oprot.writeString(struct.team);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetCities()) {
        {
          oprot.writeI32(struct.cities.size());
          for (City _iter70 : struct.cities)
          {
            _iter70.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferralPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.companyAbbreviation = iprot.readString();
        struct.setCompanyAbbreviationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salaryBottom = iprot.readI32();
        struct.setSalaryBottomIsSet(true);
      }
      if (incoming.get(5)) {
        struct.salaryTop = iprot.readI32();
        struct.setSalaryTopIsSet(true);
      }
      if (incoming.get(6)) {
        struct.experience = iprot.readI32();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.experienceAbove = iprot.readBool();
        struct.setExperienceAboveIsSet(true);
      }
      if (incoming.get(8)) {
        struct.team = iprot.readString();
        struct.setTeamIsSet(true);
      }
      if (incoming.get(9)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cities = new java.util.ArrayList<City>(_list71.size);
          City _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new City();
            _elem72.read(iprot);
            struct.cities.add(_elem72);
          }
        }
        struct.setCitiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

