/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-16")
public class UserRecommendRefusalService {

  public interface Iface {

    public void refuseRecommend(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO getLastestRecommendRefusal(int userId, int wechatId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void refuseRecommend(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getLastestRecommendRefusal(int userId, int wechatId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void refuseRecommend(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal) throws org.apache.thrift.TException
    {
      send_refuseRecommend(userRecommendRefusal);
      recv_refuseRecommend();
    }

    public void send_refuseRecommend(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal) throws org.apache.thrift.TException
    {
      refuseRecommend_args args = new refuseRecommend_args();
      args.setUserRecommendRefusal(userRecommendRefusal);
      sendBase("refuseRecommend", args);
    }

    public void recv_refuseRecommend() throws org.apache.thrift.TException
    {
      refuseRecommend_result result = new refuseRecommend_result();
      receiveBase(result, "refuseRecommend");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO getLastestRecommendRefusal(int userId, int wechatId) throws org.apache.thrift.TException
    {
      send_getLastestRecommendRefusal(userId, wechatId);
      return recv_getLastestRecommendRefusal();
    }

    public void send_getLastestRecommendRefusal(int userId, int wechatId) throws org.apache.thrift.TException
    {
      getLastestRecommendRefusal_args args = new getLastestRecommendRefusal_args();
      args.setUserId(userId);
      args.setWechatId(wechatId);
      sendBase("getLastestRecommendRefusal", args);
    }

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO recv_getLastestRecommendRefusal() throws org.apache.thrift.TException
    {
      getLastestRecommendRefusal_result result = new getLastestRecommendRefusal_result();
      receiveBase(result, "getLastestRecommendRefusal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastestRecommendRefusal failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void refuseRecommend(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refuseRecommend_call method_call = new refuseRecommend_call(userRecommendRefusal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refuseRecommend_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal;
      public refuseRecommend_call(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userRecommendRefusal = userRecommendRefusal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refuseRecommend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refuseRecommend_args args = new refuseRecommend_args();
        args.setUserRecommendRefusal(userRecommendRefusal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getLastestRecommendRefusal(int userId, int wechatId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastestRecommendRefusal_call method_call = new getLastestRecommendRefusal_call(userId, wechatId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastestRecommendRefusal_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> {
      private int userId;
      private int wechatId;
      public getLastestRecommendRefusal_call(int userId, int wechatId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.wechatId = wechatId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastestRecommendRefusal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastestRecommendRefusal_args args = new getLastestRecommendRefusal_args();
        args.setUserId(userId);
        args.setWechatId(wechatId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastestRecommendRefusal();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("refuseRecommend", new refuseRecommend());
      processMap.put("getLastestRecommendRefusal", new getLastestRecommendRefusal());
      return processMap;
    }

    public static class refuseRecommend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refuseRecommend_args> {
      public refuseRecommend() {
        super("refuseRecommend");
      }

      public refuseRecommend_args getEmptyArgsInstance() {
        return new refuseRecommend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public refuseRecommend_result getResult(I iface, refuseRecommend_args args) throws org.apache.thrift.TException {
        refuseRecommend_result result = new refuseRecommend_result();
        iface.refuseRecommend(args.userRecommendRefusal);
        return result;
      }
    }

    public static class getLastestRecommendRefusal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastestRecommendRefusal_args> {
      public getLastestRecommendRefusal() {
        super("getLastestRecommendRefusal");
      }

      public getLastestRecommendRefusal_args getEmptyArgsInstance() {
        return new getLastestRecommendRefusal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getLastestRecommendRefusal_result getResult(I iface, getLastestRecommendRefusal_args args) throws org.apache.thrift.TException {
        getLastestRecommendRefusal_result result = new getLastestRecommendRefusal_result();
        result.success = iface.getLastestRecommendRefusal(args.userId, args.wechatId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("refuseRecommend", new refuseRecommend());
      processMap.put("getLastestRecommendRefusal", new getLastestRecommendRefusal());
      return processMap;
    }

    public static class refuseRecommend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refuseRecommend_args, Void> {
      public refuseRecommend() {
        super("refuseRecommend");
      }

      public refuseRecommend_args getEmptyArgsInstance() {
        return new refuseRecommend_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            refuseRecommend_result result = new refuseRecommend_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            refuseRecommend_result result = new refuseRecommend_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refuseRecommend_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.refuseRecommend(args.userRecommendRefusal,resultHandler);
      }
    }

    public static class getLastestRecommendRefusal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastestRecommendRefusal_args, com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> {
      public getLastestRecommendRefusal() {
        super("getLastestRecommendRefusal");
      }

      public getLastestRecommendRefusal_args getEmptyArgsInstance() {
        return new getLastestRecommendRefusal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO o) {
            getLastestRecommendRefusal_result result = new getLastestRecommendRefusal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLastestRecommendRefusal_result result = new getLastestRecommendRefusal_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastestRecommendRefusal_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO> resultHandler) throws org.apache.thrift.TException {
        iface.getLastestRecommendRefusal(args.userId, args.wechatId,resultHandler);
      }
    }

  }

  public static class refuseRecommend_args implements org.apache.thrift.TBase<refuseRecommend_args, refuseRecommend_args._Fields>, java.io.Serializable, Cloneable, Comparable<refuseRecommend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refuseRecommend_args");

    private static final org.apache.thrift.protocol.TField USER_RECOMMEND_REFUSAL_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecommendRefusal", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new refuseRecommend_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new refuseRecommend_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_RECOMMEND_REFUSAL((short)1, "userRecommendRefusal");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_RECOMMEND_REFUSAL
            return USER_RECOMMEND_REFUSAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_RECOMMEND_REFUSAL, new org.apache.thrift.meta_data.FieldMetaData("userRecommendRefusal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refuseRecommend_args.class, metaDataMap);
    }

    public refuseRecommend_args() {
    }

    public refuseRecommend_args(
      com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal)
    {
      this();
      this.userRecommendRefusal = userRecommendRefusal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refuseRecommend_args(refuseRecommend_args other) {
      if (other.isSetUserRecommendRefusal()) {
        this.userRecommendRefusal = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO(other.userRecommendRefusal);
      }
    }

    public refuseRecommend_args deepCopy() {
      return new refuseRecommend_args(this);
    }

    @Override
    public void clear() {
      this.userRecommendRefusal = null;
    }

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO getUserRecommendRefusal() {
      return this.userRecommendRefusal;
    }

    public refuseRecommend_args setUserRecommendRefusal(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO userRecommendRefusal) {
      this.userRecommendRefusal = userRecommendRefusal;
      return this;
    }

    public void unsetUserRecommendRefusal() {
      this.userRecommendRefusal = null;
    }

    /** Returns true if field userRecommendRefusal is set (has been assigned a value) and false otherwise */
    public boolean isSetUserRecommendRefusal() {
      return this.userRecommendRefusal != null;
    }

    public void setUserRecommendRefusalIsSet(boolean value) {
      if (!value) {
        this.userRecommendRefusal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_RECOMMEND_REFUSAL:
        if (value == null) {
          unsetUserRecommendRefusal();
        } else {
          setUserRecommendRefusal((com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_RECOMMEND_REFUSAL:
        return getUserRecommendRefusal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_RECOMMEND_REFUSAL:
        return isSetUserRecommendRefusal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refuseRecommend_args)
        return this.equals((refuseRecommend_args)that);
      return false;
    }

    public boolean equals(refuseRecommend_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userRecommendRefusal = true && this.isSetUserRecommendRefusal();
      boolean that_present_userRecommendRefusal = true && that.isSetUserRecommendRefusal();
      if (this_present_userRecommendRefusal || that_present_userRecommendRefusal) {
        if (!(this_present_userRecommendRefusal && that_present_userRecommendRefusal))
          return false;
        if (!this.userRecommendRefusal.equals(that.userRecommendRefusal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserRecommendRefusal()) ? 131071 : 524287);
      if (isSetUserRecommendRefusal())
        hashCode = hashCode * 8191 + userRecommendRefusal.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(refuseRecommend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserRecommendRefusal()).compareTo(other.isSetUserRecommendRefusal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserRecommendRefusal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecommendRefusal, other.userRecommendRefusal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refuseRecommend_args(");
      boolean first = true;

      sb.append("userRecommendRefusal:");
      if (this.userRecommendRefusal == null) {
        sb.append("null");
      } else {
        sb.append(this.userRecommendRefusal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userRecommendRefusal != null) {
        userRecommendRefusal.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refuseRecommend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refuseRecommend_argsStandardScheme getScheme() {
        return new refuseRecommend_argsStandardScheme();
      }
    }

    private static class refuseRecommend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<refuseRecommend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refuseRecommend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_RECOMMEND_REFUSAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userRecommendRefusal = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO();
                struct.userRecommendRefusal.read(iprot);
                struct.setUserRecommendRefusalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refuseRecommend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userRecommendRefusal != null) {
          oprot.writeFieldBegin(USER_RECOMMEND_REFUSAL_FIELD_DESC);
          struct.userRecommendRefusal.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refuseRecommend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refuseRecommend_argsTupleScheme getScheme() {
        return new refuseRecommend_argsTupleScheme();
      }
    }

    private static class refuseRecommend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<refuseRecommend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refuseRecommend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserRecommendRefusal()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserRecommendRefusal()) {
          struct.userRecommendRefusal.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refuseRecommend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userRecommendRefusal = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO();
          struct.userRecommendRefusal.read(iprot);
          struct.setUserRecommendRefusalIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class refuseRecommend_result implements org.apache.thrift.TBase<refuseRecommend_result, refuseRecommend_result._Fields>, java.io.Serializable, Cloneable, Comparable<refuseRecommend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refuseRecommend_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new refuseRecommend_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new refuseRecommend_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refuseRecommend_result.class, metaDataMap);
    }

    public refuseRecommend_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refuseRecommend_result(refuseRecommend_result other) {
    }

    public refuseRecommend_result deepCopy() {
      return new refuseRecommend_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refuseRecommend_result)
        return this.equals((refuseRecommend_result)that);
      return false;
    }

    public boolean equals(refuseRecommend_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(refuseRecommend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refuseRecommend_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refuseRecommend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refuseRecommend_resultStandardScheme getScheme() {
        return new refuseRecommend_resultStandardScheme();
      }
    }

    private static class refuseRecommend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<refuseRecommend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refuseRecommend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refuseRecommend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refuseRecommend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refuseRecommend_resultTupleScheme getScheme() {
        return new refuseRecommend_resultTupleScheme();
      }
    }

    private static class refuseRecommend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<refuseRecommend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refuseRecommend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refuseRecommend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLastestRecommendRefusal_args implements org.apache.thrift.TBase<getLastestRecommendRefusal_args, getLastestRecommendRefusal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastestRecommendRefusal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastestRecommendRefusal_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLastestRecommendRefusal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLastestRecommendRefusal_argsTupleSchemeFactory();

    public int userId; // required
    public int wechatId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      WECHAT_ID((short)2, "wechatId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // WECHAT_ID
            return WECHAT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __WECHATID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastestRecommendRefusal_args.class, metaDataMap);
    }

    public getLastestRecommendRefusal_args() {
    }

    public getLastestRecommendRefusal_args(
      int userId,
      int wechatId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.wechatId = wechatId;
      setWechatIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastestRecommendRefusal_args(getLastestRecommendRefusal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.wechatId = other.wechatId;
    }

    public getLastestRecommendRefusal_args deepCopy() {
      return new getLastestRecommendRefusal_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setWechatIdIsSet(false);
      this.wechatId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getLastestRecommendRefusal_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getWechatId() {
      return this.wechatId;
    }

    public getLastestRecommendRefusal_args setWechatId(int wechatId) {
      this.wechatId = wechatId;
      setWechatIdIsSet(true);
      return this;
    }

    public void unsetWechatId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
    }

    /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
    public boolean isSetWechatId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
    }

    public void setWechatIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case WECHAT_ID:
        if (value == null) {
          unsetWechatId();
        } else {
          setWechatId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case WECHAT_ID:
        return getWechatId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case WECHAT_ID:
        return isSetWechatId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastestRecommendRefusal_args)
        return this.equals((getLastestRecommendRefusal_args)that);
      return false;
    }

    public boolean equals(getLastestRecommendRefusal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_wechatId = true;
      boolean that_present_wechatId = true;
      if (this_present_wechatId || that_present_wechatId) {
        if (!(this_present_wechatId && that_present_wechatId))
          return false;
        if (this.wechatId != that.wechatId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + wechatId;

      return hashCode;
    }

    @Override
    public int compareTo(getLastestRecommendRefusal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWechatId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastestRecommendRefusal_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastestRecommendRefusal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastestRecommendRefusal_argsStandardScheme getScheme() {
        return new getLastestRecommendRefusal_argsStandardScheme();
      }
    }

    private static class getLastestRecommendRefusal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLastestRecommendRefusal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastestRecommendRefusal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WECHAT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.wechatId = iprot.readI32();
                struct.setWechatIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastestRecommendRefusal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastestRecommendRefusal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastestRecommendRefusal_argsTupleScheme getScheme() {
        return new getLastestRecommendRefusal_argsTupleScheme();
      }
    }

    private static class getLastestRecommendRefusal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLastestRecommendRefusal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastestRecommendRefusal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetWechatId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetWechatId()) {
          oprot.writeI32(struct.wechatId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastestRecommendRefusal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wechatId = iprot.readI32();
          struct.setWechatIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLastestRecommendRefusal_result implements org.apache.thrift.TBase<getLastestRecommendRefusal_result, getLastestRecommendRefusal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastestRecommendRefusal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastestRecommendRefusal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLastestRecommendRefusal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLastestRecommendRefusal_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastestRecommendRefusal_result.class, metaDataMap);
    }

    public getLastestRecommendRefusal_result() {
    }

    public getLastestRecommendRefusal_result(
      com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastestRecommendRefusal_result(getLastestRecommendRefusal_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO(other.success);
      }
    }

    public getLastestRecommendRefusal_result deepCopy() {
      return new getLastestRecommendRefusal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO getSuccess() {
      return this.success;
    }

    public getLastestRecommendRefusal_result setSuccess(com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastestRecommendRefusal_result)
        return this.equals((getLastestRecommendRefusal_result)that);
      return false;
    }

    public boolean equals(getLastestRecommendRefusal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLastestRecommendRefusal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastestRecommendRefusal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastestRecommendRefusal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastestRecommendRefusal_resultStandardScheme getScheme() {
        return new getLastestRecommendRefusal_resultStandardScheme();
      }
    }

    private static class getLastestRecommendRefusal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLastestRecommendRefusal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastestRecommendRefusal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastestRecommendRefusal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastestRecommendRefusal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastestRecommendRefusal_resultTupleScheme getScheme() {
        return new getLastestRecommendRefusal_resultTupleScheme();
      }
    }

    private static class getLastestRecommendRefusal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLastestRecommendRefusal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastestRecommendRefusal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastestRecommendRefusal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.userdb.UserRecommendRefusalDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
