/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ProfileIntentionDO implements org.apache.thrift.TBase<ProfileIntentionDO, ProfileIntentionDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileIntentionDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileIntentionDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WORKTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("worktype", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField WORKSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("workstate", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryCode", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("considerVentureCompanyOpportunities", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileIntentionDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileIntentionDOTupleSchemeFactory();

  public int id; // optional
  public int profileId; // optional
  public byte worktype; // optional
  public byte workstate; // optional
  public byte salaryCode; // optional
  public String tag; // optional
  public byte considerVentureCompanyOpportunities; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profileId"),
    WORKTYPE((short)3, "worktype"),
    WORKSTATE((short)4, "workstate"),
    SALARY_CODE((short)5, "salaryCode"),
    TAG((short)6, "tag"),
    CONSIDER_VENTURE_COMPANY_OPPORTUNITIES((short)7, "considerVentureCompanyOpportunities"),
    CREATE_TIME((short)8, "createTime"),
    UPDATE_TIME((short)9, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // WORKTYPE
          return WORKTYPE;
        case 4: // WORKSTATE
          return WORKSTATE;
        case 5: // SALARY_CODE
          return SALARY_CODE;
        case 6: // TAG
          return TAG;
        case 7: // CONSIDER_VENTURE_COMPANY_OPPORTUNITIES
          return CONSIDER_VENTURE_COMPANY_OPPORTUNITIES;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILEID_ISSET_ID = 1;
  private static final int __WORKTYPE_ISSET_ID = 2;
  private static final int __WORKSTATE_ISSET_ID = 3;
  private static final int __SALARYCODE_ISSET_ID = 4;
  private static final int __CONSIDERVENTURECOMPANYOPPORTUNITIES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_ID,_Fields.WORKTYPE,_Fields.WORKSTATE,_Fields.SALARY_CODE,_Fields.TAG,_Fields.CONSIDER_VENTURE_COMPANY_OPPORTUNITIES,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKTYPE, new org.apache.thrift.meta_data.FieldMetaData("worktype", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WORKSTATE, new org.apache.thrift.meta_data.FieldMetaData("workstate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SALARY_CODE, new org.apache.thrift.meta_data.FieldMetaData("salaryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSIDER_VENTURE_COMPANY_OPPORTUNITIES, new org.apache.thrift.meta_data.FieldMetaData("considerVentureCompanyOpportunities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileIntentionDO.class, metaDataMap);
  }

  public ProfileIntentionDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileIntentionDO(ProfileIntentionDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profileId = other.profileId;
    this.worktype = other.worktype;
    this.workstate = other.workstate;
    this.salaryCode = other.salaryCode;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.considerVentureCompanyOpportunities = other.considerVentureCompanyOpportunities;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public ProfileIntentionDO deepCopy() {
    return new ProfileIntentionDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfileIdIsSet(false);
    this.profileId = 0;
    setWorktypeIsSet(false);
    this.worktype = 0;
    setWorkstateIsSet(false);
    this.workstate = 0;
    setSalaryCodeIsSet(false);
    this.salaryCode = 0;
    this.tag = null;
    setConsiderVentureCompanyOpportunitiesIsSet(false);
    this.considerVentureCompanyOpportunities = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public ProfileIntentionDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfileId() {
    return this.profileId;
  }

  public ProfileIntentionDO setProfileId(int profileId) {
    this.profileId = profileId;
    setProfileIdIsSet(true);
    return this;
  }

  public void unsetProfileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  public void setProfileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
  }

  public byte getWorktype() {
    return this.worktype;
  }

  public ProfileIntentionDO setWorktype(byte worktype) {
    this.worktype = worktype;
    setWorktypeIsSet(true);
    return this;
  }

  public void unsetWorktype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  /** Returns true if field worktype is set (has been assigned a value) and false otherwise */
  public boolean isSetWorktype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  public void setWorktypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WORKTYPE_ISSET_ID, value);
  }

  public byte getWorkstate() {
    return this.workstate;
  }

  public ProfileIntentionDO setWorkstate(byte workstate) {
    this.workstate = workstate;
    setWorkstateIsSet(true);
    return this;
  }

  public void unsetWorkstate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  /** Returns true if field workstate is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkstate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  public void setWorkstateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WORKSTATE_ISSET_ID, value);
  }

  public byte getSalaryCode() {
    return this.salaryCode;
  }

  public ProfileIntentionDO setSalaryCode(byte salaryCode) {
    this.salaryCode = salaryCode;
    setSalaryCodeIsSet(true);
    return this;
  }

  public void unsetSalaryCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYCODE_ISSET_ID);
  }

  /** Returns true if field salaryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYCODE_ISSET_ID);
  }

  public void setSalaryCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYCODE_ISSET_ID, value);
  }

  public String getTag() {
    return this.tag;
  }

  public ProfileIntentionDO setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public byte getConsiderVentureCompanyOpportunities() {
    return this.considerVentureCompanyOpportunities;
  }

  public ProfileIntentionDO setConsiderVentureCompanyOpportunities(byte considerVentureCompanyOpportunities) {
    this.considerVentureCompanyOpportunities = considerVentureCompanyOpportunities;
    setConsiderVentureCompanyOpportunitiesIsSet(true);
    return this;
  }

  public void unsetConsiderVentureCompanyOpportunities() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSIDERVENTURECOMPANYOPPORTUNITIES_ISSET_ID);
  }

  /** Returns true if field considerVentureCompanyOpportunities is set (has been assigned a value) and false otherwise */
  public boolean isSetConsiderVentureCompanyOpportunities() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSIDERVENTURECOMPANYOPPORTUNITIES_ISSET_ID);
  }

  public void setConsiderVentureCompanyOpportunitiesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSIDERVENTURECOMPANYOPPORTUNITIES_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProfileIntentionDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProfileIntentionDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((Integer)value);
      }
      break;

    case WORKTYPE:
      if (value == null) {
        unsetWorktype();
      } else {
        setWorktype((Byte)value);
      }
      break;

    case WORKSTATE:
      if (value == null) {
        unsetWorkstate();
      } else {
        setWorkstate((Byte)value);
      }
      break;

    case SALARY_CODE:
      if (value == null) {
        unsetSalaryCode();
      } else {
        setSalaryCode((Byte)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      if (value == null) {
        unsetConsiderVentureCompanyOpportunities();
      } else {
        setConsiderVentureCompanyOpportunities((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_ID:
      return getProfileId();

    case WORKTYPE:
      return getWorktype();

    case WORKSTATE:
      return getWorkstate();

    case SALARY_CODE:
      return getSalaryCode();

    case TAG:
      return getTag();

    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      return getConsiderVentureCompanyOpportunities();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfileId();
    case WORKTYPE:
      return isSetWorktype();
    case WORKSTATE:
      return isSetWorkstate();
    case SALARY_CODE:
      return isSetSalaryCode();
    case TAG:
      return isSetTag();
    case CONSIDER_VENTURE_COMPANY_OPPORTUNITIES:
      return isSetConsiderVentureCompanyOpportunities();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileIntentionDO)
      return this.equals((ProfileIntentionDO)that);
    return false;
  }

  public boolean equals(ProfileIntentionDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (this.profileId != that.profileId)
        return false;
    }

    boolean this_present_worktype = true && this.isSetWorktype();
    boolean that_present_worktype = true && that.isSetWorktype();
    if (this_present_worktype || that_present_worktype) {
      if (!(this_present_worktype && that_present_worktype))
        return false;
      if (this.worktype != that.worktype)
        return false;
    }

    boolean this_present_workstate = true && this.isSetWorkstate();
    boolean that_present_workstate = true && that.isSetWorkstate();
    if (this_present_workstate || that_present_workstate) {
      if (!(this_present_workstate && that_present_workstate))
        return false;
      if (this.workstate != that.workstate)
        return false;
    }

    boolean this_present_salaryCode = true && this.isSetSalaryCode();
    boolean that_present_salaryCode = true && that.isSetSalaryCode();
    if (this_present_salaryCode || that_present_salaryCode) {
      if (!(this_present_salaryCode && that_present_salaryCode))
        return false;
      if (this.salaryCode != that.salaryCode)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_considerVentureCompanyOpportunities = true && this.isSetConsiderVentureCompanyOpportunities();
    boolean that_present_considerVentureCompanyOpportunities = true && that.isSetConsiderVentureCompanyOpportunities();
    if (this_present_considerVentureCompanyOpportunities || that_present_considerVentureCompanyOpportunities) {
      if (!(this_present_considerVentureCompanyOpportunities && that_present_considerVentureCompanyOpportunities))
        return false;
      if (this.considerVentureCompanyOpportunities != that.considerVentureCompanyOpportunities)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId;

    hashCode = hashCode * 8191 + ((isSetWorktype()) ? 131071 : 524287);
    if (isSetWorktype())
      hashCode = hashCode * 8191 + (int) (worktype);

    hashCode = hashCode * 8191 + ((isSetWorkstate()) ? 131071 : 524287);
    if (isSetWorkstate())
      hashCode = hashCode * 8191 + (int) (workstate);

    hashCode = hashCode * 8191 + ((isSetSalaryCode()) ? 131071 : 524287);
    if (isSetSalaryCode())
      hashCode = hashCode * 8191 + (int) (salaryCode);

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + tag.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsiderVentureCompanyOpportunities()) ? 131071 : 524287);
    if (isSetConsiderVentureCompanyOpportunities())
      hashCode = hashCode * 8191 + (int) (considerVentureCompanyOpportunities);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileIntentionDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorktype()).compareTo(other.isSetWorktype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorktype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worktype, other.worktype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkstate()).compareTo(other.isSetWorkstate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkstate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workstate, other.workstate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryCode()).compareTo(other.isSetSalaryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryCode, other.salaryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsiderVentureCompanyOpportunities()).compareTo(other.isSetConsiderVentureCompanyOpportunities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsiderVentureCompanyOpportunities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.considerVentureCompanyOpportunities, other.considerVentureCompanyOpportunities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileIntentionDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfileId()) {
      if (!first) sb.append(", ");
      sb.append("profileId:");
      sb.append(this.profileId);
      first = false;
    }
    if (isSetWorktype()) {
      if (!first) sb.append(", ");
      sb.append("worktype:");
      sb.append(this.worktype);
      first = false;
    }
    if (isSetWorkstate()) {
      if (!first) sb.append(", ");
      sb.append("workstate:");
      sb.append(this.workstate);
      first = false;
    }
    if (isSetSalaryCode()) {
      if (!first) sb.append(", ");
      sb.append("salaryCode:");
      sb.append(this.salaryCode);
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetConsiderVentureCompanyOpportunities()) {
      if (!first) sb.append(", ");
      sb.append("considerVentureCompanyOpportunities:");
      sb.append(this.considerVentureCompanyOpportunities);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileIntentionDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileIntentionDOStandardScheme getScheme() {
      return new ProfileIntentionDOStandardScheme();
    }
  }

  private static class ProfileIntentionDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileIntentionDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileIntentionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileId = iprot.readI32();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.worktype = iprot.readByte();
              struct.setWorktypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WORKSTATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.workstate = iprot.readByte();
              struct.setWorkstateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.salaryCode = iprot.readByte();
              struct.setSalaryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONSIDER_VENTURE_COMPANY_OPPORTUNITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.considerVentureCompanyOpportunities = iprot.readByte();
              struct.setConsiderVentureCompanyOpportunitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileIntentionDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfileId()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorktype()) {
        oprot.writeFieldBegin(WORKTYPE_FIELD_DESC);
        oprot.writeByte(struct.worktype);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkstate()) {
        oprot.writeFieldBegin(WORKSTATE_FIELD_DESC);
        oprot.writeByte(struct.workstate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryCode()) {
        oprot.writeFieldBegin(SALARY_CODE_FIELD_DESC);
        oprot.writeByte(struct.salaryCode);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConsiderVentureCompanyOpportunities()) {
        oprot.writeFieldBegin(CONSIDER_VENTURE_COMPANY_OPPORTUNITIES_FIELD_DESC);
        oprot.writeByte(struct.considerVentureCompanyOpportunities);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileIntentionDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileIntentionDOTupleScheme getScheme() {
      return new ProfileIntentionDOTupleScheme();
    }
  }

  private static class ProfileIntentionDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileIntentionDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileIntentionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfileId()) {
        optionals.set(1);
      }
      if (struct.isSetWorktype()) {
        optionals.set(2);
      }
      if (struct.isSetWorkstate()) {
        optionals.set(3);
      }
      if (struct.isSetSalaryCode()) {
        optionals.set(4);
      }
      if (struct.isSetTag()) {
        optionals.set(5);
      }
      if (struct.isSetConsiderVentureCompanyOpportunities()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfileId()) {
        oprot.writeI32(struct.profileId);
      }
      if (struct.isSetWorktype()) {
        oprot.writeByte(struct.worktype);
      }
      if (struct.isSetWorkstate()) {
        oprot.writeByte(struct.workstate);
      }
      if (struct.isSetSalaryCode()) {
        oprot.writeByte(struct.salaryCode);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetConsiderVentureCompanyOpportunities()) {
        oprot.writeByte(struct.considerVentureCompanyOpportunities);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileIntentionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileId = iprot.readI32();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.worktype = iprot.readByte();
        struct.setWorktypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.workstate = iprot.readByte();
        struct.setWorkstateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salaryCode = iprot.readByte();
        struct.setSalaryCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.considerVentureCompanyOpportunities = iprot.readByte();
        struct.setConsiderVentureCompanyOpportunitiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

