/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-2")
public class Position implements org.apache.thrift.TBase<Position, Position._Fields>, java.io.Serializable, Cloneable, Comparable<Position> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Position");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOBNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("jobnumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField L_JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("l_jobid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_date", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STOP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_date", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACCOUNTABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accountabilities", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("requirement", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField VISITNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("visitnum", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("source_id", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField EMPLOYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("employment_type", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField HR_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_email", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_source", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("industry", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField EMAIL_RESUME_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("email_resume_conf", org.apache.thrift.protocol.TType.BYTE, (short)25);
  private static final org.apache.thrift.protocol.TField L__POSTING_TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("l_PostingTargetId", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField SHARE_TPL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("share_tpl_id", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_top", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_bottom", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience_above", org.apache.thrift.protocol.TType.BYTE, (short)32);
  private static final org.apache.thrift.protocol.TField DEGREE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree_above", org.apache.thrift.protocol.TType.BYTE, (short)33);
  private static final org.apache.thrift.protocol.TField MANAGEMENT_EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("management_experience", org.apache.thrift.protocol.TType.BYTE, (short)34);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, (short)35);
  private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField APP_CV_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("app_cv_config_id", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField HB_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_status", org.apache.thrift.protocol.TType.BYTE, (short)39);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField MAJOR_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("major_required", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField WORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("work_address", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField REPORTING_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("reporting_to", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField IS_HIRING_FIELD_DESC = new org.apache.thrift.protocol.TField("is_hiring", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField UNDERLINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("underlings", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField LANGUAGE_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("language_required", org.apache.thrift.protocol.TType.BYTE, (short)47);
  private static final org.apache.thrift.protocol.TField TARGET_INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("target_industry", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField CURRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("current_status", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cities", org.apache.thrift.protocol.TType.MAP, (short)50);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionTupleSchemeFactory());
  }

  public int id; // optional
  public String jobnumber; // optional
  public int company_id; // optional
  public String title; // optional
  public String city; // optional
  public String department; // optional
  public int l_jobid; // optional
  public String publish_date; // optional
  public String stop_date; // optional
  public String accountabilities; // optional
  public String experience; // optional
  public String requirement; // optional
  public String language; // optional
  public int status; // optional
  public int visitnum; // optional
  public int source_id; // optional
  public String update_time; // optional
  public byte employment_type; // optional
  public String hr_email; // optional
  public int degree; // optional
  public String feature; // optional
  public byte candidate_source; // optional
  public String occupation; // optional
  public String industry; // optional
  public byte email_resume_conf; // optional
  public int l_PostingTargetId; // optional
  public int priority; // optional
  public int share_tpl_id; // optional
  public int count; // optional
  public int salary_top; // optional
  public int salary_bottom; // optional
  public byte experience_above; // optional
  public byte degree_above; // optional
  public byte management_experience; // optional
  public byte gender; // optional
  public int publisher; // optional
  public int app_cv_config_id; // optional
  public int source; // optional
  public byte hb_status; // optional
  public int age; // optional
  public String major_required; // optional
  public String work_address; // optional
  public String keyword; // optional
  public String reporting_to; // optional
  public int is_hiring; // optional
  public int underlings; // optional
  public byte language_required; // optional
  public int target_industry; // optional
  public int current_status; // optional
  public Map<Integer,String> cities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    JOBNUMBER((short)2, "jobnumber"),
    COMPANY_ID((short)3, "company_id"),
    TITLE((short)4, "title"),
    CITY((short)5, "city"),
    DEPARTMENT((short)6, "department"),
    L_JOBID((short)7, "l_jobid"),
    PUBLISH_DATE((short)8, "publish_date"),
    STOP_DATE((short)9, "stop_date"),
    ACCOUNTABILITIES((short)10, "accountabilities"),
    EXPERIENCE((short)11, "experience"),
    REQUIREMENT((short)12, "requirement"),
    LANGUAGE((short)13, "language"),
    STATUS((short)14, "status"),
    VISITNUM((short)15, "visitnum"),
    SOURCE_ID((short)16, "source_id"),
    UPDATE_TIME((short)17, "update_time"),
    EMPLOYMENT_TYPE((short)18, "employment_type"),
    HR_EMAIL((short)19, "hr_email"),
    DEGREE((short)20, "degree"),
    FEATURE((short)21, "feature"),
    CANDIDATE_SOURCE((short)22, "candidate_source"),
    OCCUPATION((short)23, "occupation"),
    INDUSTRY((short)24, "industry"),
    EMAIL_RESUME_CONF((short)25, "email_resume_conf"),
    L__POSTING_TARGET_ID((short)26, "l_PostingTargetId"),
    PRIORITY((short)27, "priority"),
    SHARE_TPL_ID((short)28, "share_tpl_id"),
    COUNT((short)29, "count"),
    SALARY_TOP((short)30, "salary_top"),
    SALARY_BOTTOM((short)31, "salary_bottom"),
    EXPERIENCE_ABOVE((short)32, "experience_above"),
    DEGREE_ABOVE((short)33, "degree_above"),
    MANAGEMENT_EXPERIENCE((short)34, "management_experience"),
    GENDER((short)35, "gender"),
    PUBLISHER((short)36, "publisher"),
    APP_CV_CONFIG_ID((short)37, "app_cv_config_id"),
    SOURCE((short)38, "source"),
    HB_STATUS((short)39, "hb_status"),
    AGE((short)40, "age"),
    MAJOR_REQUIRED((short)41, "major_required"),
    WORK_ADDRESS((short)42, "work_address"),
    KEYWORD((short)43, "keyword"),
    REPORTING_TO((short)44, "reporting_to"),
    IS_HIRING((short)45, "is_hiring"),
    UNDERLINGS((short)46, "underlings"),
    LANGUAGE_REQUIRED((short)47, "language_required"),
    TARGET_INDUSTRY((short)48, "target_industry"),
    CURRENT_STATUS((short)49, "current_status"),
    CITIES((short)50, "cities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // JOBNUMBER
          return JOBNUMBER;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // TITLE
          return TITLE;
        case 5: // CITY
          return CITY;
        case 6: // DEPARTMENT
          return DEPARTMENT;
        case 7: // L_JOBID
          return L_JOBID;
        case 8: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 9: // STOP_DATE
          return STOP_DATE;
        case 10: // ACCOUNTABILITIES
          return ACCOUNTABILITIES;
        case 11: // EXPERIENCE
          return EXPERIENCE;
        case 12: // REQUIREMENT
          return REQUIREMENT;
        case 13: // LANGUAGE
          return LANGUAGE;
        case 14: // STATUS
          return STATUS;
        case 15: // VISITNUM
          return VISITNUM;
        case 16: // SOURCE_ID
          return SOURCE_ID;
        case 17: // UPDATE_TIME
          return UPDATE_TIME;
        case 18: // EMPLOYMENT_TYPE
          return EMPLOYMENT_TYPE;
        case 19: // HR_EMAIL
          return HR_EMAIL;
        case 20: // DEGREE
          return DEGREE;
        case 21: // FEATURE
          return FEATURE;
        case 22: // CANDIDATE_SOURCE
          return CANDIDATE_SOURCE;
        case 23: // OCCUPATION
          return OCCUPATION;
        case 24: // INDUSTRY
          return INDUSTRY;
        case 25: // EMAIL_RESUME_CONF
          return EMAIL_RESUME_CONF;
        case 26: // L__POSTING_TARGET_ID
          return L__POSTING_TARGET_ID;
        case 27: // PRIORITY
          return PRIORITY;
        case 28: // SHARE_TPL_ID
          return SHARE_TPL_ID;
        case 29: // COUNT
          return COUNT;
        case 30: // SALARY_TOP
          return SALARY_TOP;
        case 31: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 32: // EXPERIENCE_ABOVE
          return EXPERIENCE_ABOVE;
        case 33: // DEGREE_ABOVE
          return DEGREE_ABOVE;
        case 34: // MANAGEMENT_EXPERIENCE
          return MANAGEMENT_EXPERIENCE;
        case 35: // GENDER
          return GENDER;
        case 36: // PUBLISHER
          return PUBLISHER;
        case 37: // APP_CV_CONFIG_ID
          return APP_CV_CONFIG_ID;
        case 38: // SOURCE
          return SOURCE;
        case 39: // HB_STATUS
          return HB_STATUS;
        case 40: // AGE
          return AGE;
        case 41: // MAJOR_REQUIRED
          return MAJOR_REQUIRED;
        case 42: // WORK_ADDRESS
          return WORK_ADDRESS;
        case 43: // KEYWORD
          return KEYWORD;
        case 44: // REPORTING_TO
          return REPORTING_TO;
        case 45: // IS_HIRING
          return IS_HIRING;
        case 46: // UNDERLINGS
          return UNDERLINGS;
        case 47: // LANGUAGE_REQUIRED
          return LANGUAGE_REQUIRED;
        case 48: // TARGET_INDUSTRY
          return TARGET_INDUSTRY;
        case 49: // CURRENT_STATUS
          return CURRENT_STATUS;
        case 50: // CITIES
          return CITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANY_ID_ISSET_ID = 1;
  private static final int __L_JOBID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __VISITNUM_ISSET_ID = 4;
  private static final int __SOURCE_ID_ISSET_ID = 5;
  private static final int __EMPLOYMENT_TYPE_ISSET_ID = 6;
  private static final int __DEGREE_ISSET_ID = 7;
  private static final int __CANDIDATE_SOURCE_ISSET_ID = 8;
  private static final int __EMAIL_RESUME_CONF_ISSET_ID = 9;
  private static final int __L_POSTINGTARGETID_ISSET_ID = 10;
  private static final int __PRIORITY_ISSET_ID = 11;
  private static final int __SHARE_TPL_ID_ISSET_ID = 12;
  private static final int __COUNT_ISSET_ID = 13;
  private static final int __SALARY_TOP_ISSET_ID = 14;
  private static final int __SALARY_BOTTOM_ISSET_ID = 15;
  private static final int __EXPERIENCE_ABOVE_ISSET_ID = 16;
  private static final int __DEGREE_ABOVE_ISSET_ID = 17;
  private static final int __MANAGEMENT_EXPERIENCE_ISSET_ID = 18;
  private static final int __GENDER_ISSET_ID = 19;
  private static final int __PUBLISHER_ISSET_ID = 20;
  private static final int __APP_CV_CONFIG_ID_ISSET_ID = 21;
  private static final int __SOURCE_ISSET_ID = 22;
  private static final int __HB_STATUS_ISSET_ID = 23;
  private static final int __AGE_ISSET_ID = 24;
  private static final int __IS_HIRING_ISSET_ID = 25;
  private static final int __UNDERLINGS_ISSET_ID = 26;
  private static final int __LANGUAGE_REQUIRED_ISSET_ID = 27;
  private static final int __TARGET_INDUSTRY_ISSET_ID = 28;
  private static final int __CURRENT_STATUS_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.JOBNUMBER,_Fields.COMPANY_ID,_Fields.TITLE,_Fields.CITY,_Fields.DEPARTMENT,_Fields.L_JOBID,_Fields.PUBLISH_DATE,_Fields.STOP_DATE,_Fields.ACCOUNTABILITIES,_Fields.EXPERIENCE,_Fields.REQUIREMENT,_Fields.LANGUAGE,_Fields.STATUS,_Fields.VISITNUM,_Fields.SOURCE_ID,_Fields.UPDATE_TIME,_Fields.EMPLOYMENT_TYPE,_Fields.HR_EMAIL,_Fields.DEGREE,_Fields.FEATURE,_Fields.CANDIDATE_SOURCE,_Fields.OCCUPATION,_Fields.INDUSTRY,_Fields.EMAIL_RESUME_CONF,_Fields.L__POSTING_TARGET_ID,_Fields.PRIORITY,_Fields.SHARE_TPL_ID,_Fields.COUNT,_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.EXPERIENCE_ABOVE,_Fields.DEGREE_ABOVE,_Fields.MANAGEMENT_EXPERIENCE,_Fields.GENDER,_Fields.PUBLISHER,_Fields.APP_CV_CONFIG_ID,_Fields.SOURCE,_Fields.HB_STATUS,_Fields.AGE,_Fields.MAJOR_REQUIRED,_Fields.WORK_ADDRESS,_Fields.KEYWORD,_Fields.REPORTING_TO,_Fields.IS_HIRING,_Fields.UNDERLINGS,_Fields.LANGUAGE_REQUIRED,_Fields.TARGET_INDUSTRY,_Fields.CURRENT_STATUS,_Fields.CITIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOBNUMBER, new org.apache.thrift.meta_data.FieldMetaData("jobnumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.L_JOBID, new org.apache.thrift.meta_data.FieldMetaData("l_jobid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publish_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_DATE, new org.apache.thrift.meta_data.FieldMetaData("stop_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNTABILITIES, new org.apache.thrift.meta_data.FieldMetaData("accountabilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("requirement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VISITNUM, new org.apache.thrift.meta_data.FieldMetaData("visitnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("source_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("employment_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HR_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("hr_email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidate_source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("industry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_RESUME_CONF, new org.apache.thrift.meta_data.FieldMetaData("email_resume_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.L__POSTING_TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("l_PostingTargetId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_TPL_ID, new org.apache.thrift.meta_data.FieldMetaData("share_tpl_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salary_top", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salary_bottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIENCE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("experience_above", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DEGREE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("degree_above", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MANAGEMENT_EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("management_experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_CV_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("app_cv_config_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HB_STATUS, new org.apache.thrift.meta_data.FieldMetaData("hb_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAJOR_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("major_required", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("work_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORTING_TO, new org.apache.thrift.meta_data.FieldMetaData("reporting_to", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HIRING, new org.apache.thrift.meta_data.FieldMetaData("is_hiring", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNDERLINGS, new org.apache.thrift.meta_data.FieldMetaData("underlings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANGUAGE_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("language_required", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TARGET_INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("target_industry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("current_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITIES, new org.apache.thrift.meta_data.FieldMetaData("cities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Position.class, metaDataMap);
  }

  public Position() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Position(Position other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetJobnumber()) {
      this.jobnumber = other.jobnumber;
    }
    this.company_id = other.company_id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    this.l_jobid = other.l_jobid;
    if (other.isSetPublish_date()) {
      this.publish_date = other.publish_date;
    }
    if (other.isSetStop_date()) {
      this.stop_date = other.stop_date;
    }
    if (other.isSetAccountabilities()) {
      this.accountabilities = other.accountabilities;
    }
    if (other.isSetExperience()) {
      this.experience = other.experience;
    }
    if (other.isSetRequirement()) {
      this.requirement = other.requirement;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    this.status = other.status;
    this.visitnum = other.visitnum;
    this.source_id = other.source_id;
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    this.employment_type = other.employment_type;
    if (other.isSetHr_email()) {
      this.hr_email = other.hr_email;
    }
    this.degree = other.degree;
    if (other.isSetFeature()) {
      this.feature = other.feature;
    }
    this.candidate_source = other.candidate_source;
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    if (other.isSetIndustry()) {
      this.industry = other.industry;
    }
    this.email_resume_conf = other.email_resume_conf;
    this.l_PostingTargetId = other.l_PostingTargetId;
    this.priority = other.priority;
    this.share_tpl_id = other.share_tpl_id;
    this.count = other.count;
    this.salary_top = other.salary_top;
    this.salary_bottom = other.salary_bottom;
    this.experience_above = other.experience_above;
    this.degree_above = other.degree_above;
    this.management_experience = other.management_experience;
    this.gender = other.gender;
    this.publisher = other.publisher;
    this.app_cv_config_id = other.app_cv_config_id;
    this.source = other.source;
    this.hb_status = other.hb_status;
    this.age = other.age;
    if (other.isSetMajor_required()) {
      this.major_required = other.major_required;
    }
    if (other.isSetWork_address()) {
      this.work_address = other.work_address;
    }
    if (other.isSetKeyword()) {
      this.keyword = other.keyword;
    }
    if (other.isSetReporting_to()) {
      this.reporting_to = other.reporting_to;
    }
    this.is_hiring = other.is_hiring;
    this.underlings = other.underlings;
    this.language_required = other.language_required;
    this.target_industry = other.target_industry;
    this.current_status = other.current_status;
    if (other.isSetCities()) {
      Map<Integer,String> __this__cities = new HashMap<Integer,String>(other.cities);
      this.cities = __this__cities;
    }
  }

  public Position deepCopy() {
    return new Position(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.jobnumber = null;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.title = null;
    this.city = null;
    this.department = null;
    setL_jobidIsSet(false);
    this.l_jobid = 0;
    this.publish_date = null;
    this.stop_date = null;
    this.accountabilities = null;
    this.experience = null;
    this.requirement = null;
    this.language = null;
    setStatusIsSet(false);
    this.status = 0;
    setVisitnumIsSet(false);
    this.visitnum = 0;
    setSource_idIsSet(false);
    this.source_id = 0;
    this.update_time = null;
    setEmployment_typeIsSet(false);
    this.employment_type = 0;
    this.hr_email = null;
    setDegreeIsSet(false);
    this.degree = 0;
    this.feature = null;
    setCandidate_sourceIsSet(false);
    this.candidate_source = 0;
    this.occupation = null;
    this.industry = null;
    setEmail_resume_confIsSet(false);
    this.email_resume_conf = 0;
    setL_PostingTargetIdIsSet(false);
    this.l_PostingTargetId = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setShare_tpl_idIsSet(false);
    this.share_tpl_id = 0;
    setCountIsSet(false);
    this.count = 0;
    setSalary_topIsSet(false);
    this.salary_top = 0;
    setSalary_bottomIsSet(false);
    this.salary_bottom = 0;
    setExperience_aboveIsSet(false);
    this.experience_above = 0;
    setDegree_aboveIsSet(false);
    this.degree_above = 0;
    setManagement_experienceIsSet(false);
    this.management_experience = 0;
    setGenderIsSet(false);
    this.gender = 0;
    setPublisherIsSet(false);
    this.publisher = 0;
    setApp_cv_config_idIsSet(false);
    this.app_cv_config_id = 0;
    setSourceIsSet(false);
    this.source = 0;
    setHb_statusIsSet(false);
    this.hb_status = 0;
    setAgeIsSet(false);
    this.age = 0;
    this.major_required = null;
    this.work_address = null;
    this.keyword = null;
    this.reporting_to = null;
    setIs_hiringIsSet(false);
    this.is_hiring = 0;
    setUnderlingsIsSet(false);
    this.underlings = 0;
    setLanguage_requiredIsSet(false);
    this.language_required = 0;
    setTarget_industryIsSet(false);
    this.target_industry = 0;
    setCurrent_statusIsSet(false);
    this.current_status = 0;
    this.cities = null;
  }

  public int getId() {
    return this.id;
  }

  public Position setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getJobnumber() {
    return this.jobnumber;
  }

  public Position setJobnumber(String jobnumber) {
    this.jobnumber = jobnumber;
    return this;
  }

  public void unsetJobnumber() {
    this.jobnumber = null;
  }

  /** Returns true if field jobnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetJobnumber() {
    return this.jobnumber != null;
  }

  public void setJobnumberIsSet(boolean value) {
    if (!value) {
      this.jobnumber = null;
    }
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public Position setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Position setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Position setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public Position setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public int getL_jobid() {
    return this.l_jobid;
  }

  public Position setL_jobid(int l_jobid) {
    this.l_jobid = l_jobid;
    setL_jobidIsSet(true);
    return this;
  }

  public void unsetL_jobid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L_JOBID_ISSET_ID);
  }

  /** Returns true if field l_jobid is set (has been assigned a value) and false otherwise */
  public boolean isSetL_jobid() {
    return EncodingUtils.testBit(__isset_bitfield, __L_JOBID_ISSET_ID);
  }

  public void setL_jobidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L_JOBID_ISSET_ID, value);
  }

  public String getPublish_date() {
    return this.publish_date;
  }

  public Position setPublish_date(String publish_date) {
    this.publish_date = publish_date;
    return this;
  }

  public void unsetPublish_date() {
    this.publish_date = null;
  }

  /** Returns true if field publish_date is set (has been assigned a value) and false otherwise */
  public boolean isSetPublish_date() {
    return this.publish_date != null;
  }

  public void setPublish_dateIsSet(boolean value) {
    if (!value) {
      this.publish_date = null;
    }
  }

  public String getStop_date() {
    return this.stop_date;
  }

  public Position setStop_date(String stop_date) {
    this.stop_date = stop_date;
    return this;
  }

  public void unsetStop_date() {
    this.stop_date = null;
  }

  /** Returns true if field stop_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_date() {
    return this.stop_date != null;
  }

  public void setStop_dateIsSet(boolean value) {
    if (!value) {
      this.stop_date = null;
    }
  }

  public String getAccountabilities() {
    return this.accountabilities;
  }

  public Position setAccountabilities(String accountabilities) {
    this.accountabilities = accountabilities;
    return this;
  }

  public void unsetAccountabilities() {
    this.accountabilities = null;
  }

  /** Returns true if field accountabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountabilities() {
    return this.accountabilities != null;
  }

  public void setAccountabilitiesIsSet(boolean value) {
    if (!value) {
      this.accountabilities = null;
    }
  }

  public String getExperience() {
    return this.experience;
  }

  public Position setExperience(String experience) {
    this.experience = experience;
    return this;
  }

  public void unsetExperience() {
    this.experience = null;
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return this.experience != null;
  }

  public void setExperienceIsSet(boolean value) {
    if (!value) {
      this.experience = null;
    }
  }

  public String getRequirement() {
    return this.requirement;
  }

  public Position setRequirement(String requirement) {
    this.requirement = requirement;
    return this;
  }

  public void unsetRequirement() {
    this.requirement = null;
  }

  /** Returns true if field requirement is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirement() {
    return this.requirement != null;
  }

  public void setRequirementIsSet(boolean value) {
    if (!value) {
      this.requirement = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public Position setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Position setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getVisitnum() {
    return this.visitnum;
  }

  public Position setVisitnum(int visitnum) {
    this.visitnum = visitnum;
    setVisitnumIsSet(true);
    return this;
  }

  public void unsetVisitnum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  /** Returns true if field visitnum is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitnum() {
    return EncodingUtils.testBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  public void setVisitnumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISITNUM_ISSET_ID, value);
  }

  public int getSource_id() {
    return this.source_id;
  }

  public Position setSource_id(int source_id) {
    this.source_id = source_id;
    setSource_idIsSet(true);
    return this;
  }

  public void unsetSource_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ID_ISSET_ID);
  }

  /** Returns true if field source_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ID_ISSET_ID);
  }

  public void setSource_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ID_ISSET_ID, value);
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public Position setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public byte getEmployment_type() {
    return this.employment_type;
  }

  public Position setEmployment_type(byte employment_type) {
    this.employment_type = employment_type;
    setEmployment_typeIsSet(true);
    return this;
  }

  public void unsetEmployment_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  /** Returns true if field employment_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployment_type() {
    return EncodingUtils.testBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  public void setEmployment_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID, value);
  }

  public String getHr_email() {
    return this.hr_email;
  }

  public Position setHr_email(String hr_email) {
    this.hr_email = hr_email;
    return this;
  }

  public void unsetHr_email() {
    this.hr_email = null;
  }

  /** Returns true if field hr_email is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_email() {
    return this.hr_email != null;
  }

  public void setHr_emailIsSet(boolean value) {
    if (!value) {
      this.hr_email = null;
    }
  }

  public int getDegree() {
    return this.degree;
  }

  public Position setDegree(int degree) {
    this.degree = degree;
    setDegreeIsSet(true);
    return this;
  }

  public void unsetDegree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
  }

  public String getFeature() {
    return this.feature;
  }

  public Position setFeature(String feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public byte getCandidate_source() {
    return this.candidate_source;
  }

  public Position setCandidate_source(byte candidate_source) {
    this.candidate_source = candidate_source;
    setCandidate_sourceIsSet(true);
    return this;
  }

  public void unsetCandidate_source() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  /** Returns true if field candidate_source is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_source() {
    return EncodingUtils.testBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  public void setCandidate_sourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID, value);
  }

  public String getOccupation() {
    return this.occupation;
  }

  public Position setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public String getIndustry() {
    return this.industry;
  }

  public Position setIndustry(String industry) {
    this.industry = industry;
    return this;
  }

  public void unsetIndustry() {
    this.industry = null;
  }

  /** Returns true if field industry is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustry() {
    return this.industry != null;
  }

  public void setIndustryIsSet(boolean value) {
    if (!value) {
      this.industry = null;
    }
  }

  public byte getEmail_resume_conf() {
    return this.email_resume_conf;
  }

  public Position setEmail_resume_conf(byte email_resume_conf) {
    this.email_resume_conf = email_resume_conf;
    setEmail_resume_confIsSet(true);
    return this;
  }

  public void unsetEmail_resume_conf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMAIL_RESUME_CONF_ISSET_ID);
  }

  /** Returns true if field email_resume_conf is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail_resume_conf() {
    return EncodingUtils.testBit(__isset_bitfield, __EMAIL_RESUME_CONF_ISSET_ID);
  }

  public void setEmail_resume_confIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMAIL_RESUME_CONF_ISSET_ID, value);
  }

  public int getL_PostingTargetId() {
    return this.l_PostingTargetId;
  }

  public Position setL_PostingTargetId(int l_PostingTargetId) {
    this.l_PostingTargetId = l_PostingTargetId;
    setL_PostingTargetIdIsSet(true);
    return this;
  }

  public void unsetL_PostingTargetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L_POSTINGTARGETID_ISSET_ID);
  }

  /** Returns true if field l_PostingTargetId is set (has been assigned a value) and false otherwise */
  public boolean isSetL_PostingTargetId() {
    return EncodingUtils.testBit(__isset_bitfield, __L_POSTINGTARGETID_ISSET_ID);
  }

  public void setL_PostingTargetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L_POSTINGTARGETID_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public Position setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getShare_tpl_id() {
    return this.share_tpl_id;
  }

  public Position setShare_tpl_id(int share_tpl_id) {
    this.share_tpl_id = share_tpl_id;
    setShare_tpl_idIsSet(true);
    return this;
  }

  public void unsetShare_tpl_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARE_TPL_ID_ISSET_ID);
  }

  /** Returns true if field share_tpl_id is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_tpl_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARE_TPL_ID_ISSET_ID);
  }

  public void setShare_tpl_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARE_TPL_ID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public Position setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getSalary_top() {
    return this.salary_top;
  }

  public Position setSalary_top(int salary_top) {
    this.salary_top = salary_top;
    setSalary_topIsSet(true);
    return this;
  }

  public void unsetSalary_top() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  /** Returns true if field salary_top is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_top() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  public void setSalary_topIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_TOP_ISSET_ID, value);
  }

  public int getSalary_bottom() {
    return this.salary_bottom;
  }

  public Position setSalary_bottom(int salary_bottom) {
    this.salary_bottom = salary_bottom;
    setSalary_bottomIsSet(true);
    return this;
  }

  public void unsetSalary_bottom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  /** Returns true if field salary_bottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_bottom() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  public void setSalary_bottomIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID, value);
  }

  public byte getExperience_above() {
    return this.experience_above;
  }

  public Position setExperience_above(byte experience_above) {
    this.experience_above = experience_above;
    setExperience_aboveIsSet(true);
    return this;
  }

  public void unsetExperience_above() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID);
  }

  /** Returns true if field experience_above is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience_above() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID);
  }

  public void setExperience_aboveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID, value);
  }

  public byte getDegree_above() {
    return this.degree_above;
  }

  public Position setDegree_above(byte degree_above) {
    this.degree_above = degree_above;
    setDegree_aboveIsSet(true);
    return this;
  }

  public void unsetDegree_above() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID);
  }

  /** Returns true if field degree_above is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree_above() {
    return EncodingUtils.testBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID);
  }

  public void setDegree_aboveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID, value);
  }

  public byte getManagement_experience() {
    return this.management_experience;
  }

  public Position setManagement_experience(byte management_experience) {
    this.management_experience = management_experience;
    setManagement_experienceIsSet(true);
    return this;
  }

  public void unsetManagement_experience() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANAGEMENT_EXPERIENCE_ISSET_ID);
  }

  /** Returns true if field management_experience is set (has been assigned a value) and false otherwise */
  public boolean isSetManagement_experience() {
    return EncodingUtils.testBit(__isset_bitfield, __MANAGEMENT_EXPERIENCE_ISSET_ID);
  }

  public void setManagement_experienceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANAGEMENT_EXPERIENCE_ISSET_ID, value);
  }

  public byte getGender() {
    return this.gender;
  }

  public Position setGender(byte gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getPublisher() {
    return this.publisher;
  }

  public Position setPublisher(int publisher) {
    this.publisher = publisher;
    setPublisherIsSet(true);
    return this;
  }

  public void unsetPublisher() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  /** Returns true if field publisher is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisher() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  public void setPublisherIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHER_ISSET_ID, value);
  }

  public int getApp_cv_config_id() {
    return this.app_cv_config_id;
  }

  public Position setApp_cv_config_id(int app_cv_config_id) {
    this.app_cv_config_id = app_cv_config_id;
    setApp_cv_config_idIsSet(true);
    return this;
  }

  public void unsetApp_cv_config_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APP_CV_CONFIG_ID_ISSET_ID);
  }

  /** Returns true if field app_cv_config_id is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_cv_config_id() {
    return EncodingUtils.testBit(__isset_bitfield, __APP_CV_CONFIG_ID_ISSET_ID);
  }

  public void setApp_cv_config_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APP_CV_CONFIG_ID_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public Position setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public byte getHb_status() {
    return this.hb_status;
  }

  public Position setHb_status(byte hb_status) {
    this.hb_status = hb_status;
    setHb_statusIsSet(true);
    return this;
  }

  public void unsetHb_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HB_STATUS_ISSET_ID);
  }

  /** Returns true if field hb_status is set (has been assigned a value) and false otherwise */
  public boolean isSetHb_status() {
    return EncodingUtils.testBit(__isset_bitfield, __HB_STATUS_ISSET_ID);
  }

  public void setHb_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HB_STATUS_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public Position setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public String getMajor_required() {
    return this.major_required;
  }

  public Position setMajor_required(String major_required) {
    this.major_required = major_required;
    return this;
  }

  public void unsetMajor_required() {
    this.major_required = null;
  }

  /** Returns true if field major_required is set (has been assigned a value) and false otherwise */
  public boolean isSetMajor_required() {
    return this.major_required != null;
  }

  public void setMajor_requiredIsSet(boolean value) {
    if (!value) {
      this.major_required = null;
    }
  }

  public String getWork_address() {
    return this.work_address;
  }

  public Position setWork_address(String work_address) {
    this.work_address = work_address;
    return this;
  }

  public void unsetWork_address() {
    this.work_address = null;
  }

  /** Returns true if field work_address is set (has been assigned a value) and false otherwise */
  public boolean isSetWork_address() {
    return this.work_address != null;
  }

  public void setWork_addressIsSet(boolean value) {
    if (!value) {
      this.work_address = null;
    }
  }

  public String getKeyword() {
    return this.keyword;
  }

  public Position setKeyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  public void unsetKeyword() {
    this.keyword = null;
  }

  /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.keyword = null;
    }
  }

  public String getReporting_to() {
    return this.reporting_to;
  }

  public Position setReporting_to(String reporting_to) {
    this.reporting_to = reporting_to;
    return this;
  }

  public void unsetReporting_to() {
    this.reporting_to = null;
  }

  /** Returns true if field reporting_to is set (has been assigned a value) and false otherwise */
  public boolean isSetReporting_to() {
    return this.reporting_to != null;
  }

  public void setReporting_toIsSet(boolean value) {
    if (!value) {
      this.reporting_to = null;
    }
  }

  public int getIs_hiring() {
    return this.is_hiring;
  }

  public Position setIs_hiring(int is_hiring) {
    this.is_hiring = is_hiring;
    setIs_hiringIsSet(true);
    return this;
  }

  public void unsetIs_hiring() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_HIRING_ISSET_ID);
  }

  /** Returns true if field is_hiring is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_hiring() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_HIRING_ISSET_ID);
  }

  public void setIs_hiringIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_HIRING_ISSET_ID, value);
  }

  public int getUnderlings() {
    return this.underlings;
  }

  public Position setUnderlings(int underlings) {
    this.underlings = underlings;
    setUnderlingsIsSet(true);
    return this;
  }

  public void unsetUnderlings() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  /** Returns true if field underlings is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlings() {
    return EncodingUtils.testBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  public void setUnderlingsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNDERLINGS_ISSET_ID, value);
  }

  public byte getLanguage_required() {
    return this.language_required;
  }

  public Position setLanguage_required(byte language_required) {
    this.language_required = language_required;
    setLanguage_requiredIsSet(true);
    return this;
  }

  public void unsetLanguage_required() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANGUAGE_REQUIRED_ISSET_ID);
  }

  /** Returns true if field language_required is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage_required() {
    return EncodingUtils.testBit(__isset_bitfield, __LANGUAGE_REQUIRED_ISSET_ID);
  }

  public void setLanguage_requiredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANGUAGE_REQUIRED_ISSET_ID, value);
  }

  public int getTarget_industry() {
    return this.target_industry;
  }

  public Position setTarget_industry(int target_industry) {
    this.target_industry = target_industry;
    setTarget_industryIsSet(true);
    return this;
  }

  public void unsetTarget_industry() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGET_INDUSTRY_ISSET_ID);
  }

  /** Returns true if field target_industry is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_industry() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGET_INDUSTRY_ISSET_ID);
  }

  public void setTarget_industryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGET_INDUSTRY_ISSET_ID, value);
  }

  public int getCurrent_status() {
    return this.current_status;
  }

  public Position setCurrent_status(int current_status) {
    this.current_status = current_status;
    setCurrent_statusIsSet(true);
    return this;
  }

  public void unsetCurrent_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENT_STATUS_ISSET_ID);
  }

  /** Returns true if field current_status is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_status() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENT_STATUS_ISSET_ID);
  }

  public void setCurrent_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENT_STATUS_ISSET_ID, value);
  }

  public int getCitiesSize() {
    return (this.cities == null) ? 0 : this.cities.size();
  }

  public void putToCities(int key, String val) {
    if (this.cities == null) {
      this.cities = new HashMap<Integer,String>();
    }
    this.cities.put(key, val);
  }

  public Map<Integer,String> getCities() {
    return this.cities;
  }

  public Position setCities(Map<Integer,String> cities) {
    this.cities = cities;
    return this;
  }

  public void unsetCities() {
    this.cities = null;
  }

  /** Returns true if field cities is set (has been assigned a value) and false otherwise */
  public boolean isSetCities() {
    return this.cities != null;
  }

  public void setCitiesIsSet(boolean value) {
    if (!value) {
      this.cities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case JOBNUMBER:
      if (value == null) {
        unsetJobnumber();
      } else {
        setJobnumber((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case L_JOBID:
      if (value == null) {
        unsetL_jobid();
      } else {
        setL_jobid((Integer)value);
      }
      break;

    case PUBLISH_DATE:
      if (value == null) {
        unsetPublish_date();
      } else {
        setPublish_date((String)value);
      }
      break;

    case STOP_DATE:
      if (value == null) {
        unsetStop_date();
      } else {
        setStop_date((String)value);
      }
      break;

    case ACCOUNTABILITIES:
      if (value == null) {
        unsetAccountabilities();
      } else {
        setAccountabilities((String)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((String)value);
      }
      break;

    case REQUIREMENT:
      if (value == null) {
        unsetRequirement();
      } else {
        setRequirement((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case VISITNUM:
      if (value == null) {
        unsetVisitnum();
      } else {
        setVisitnum((Integer)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSource_id();
      } else {
        setSource_id((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    case EMPLOYMENT_TYPE:
      if (value == null) {
        unsetEmployment_type();
      } else {
        setEmployment_type((Byte)value);
      }
      break;

    case HR_EMAIL:
      if (value == null) {
        unsetHr_email();
      } else {
        setHr_email((String)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Integer)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((String)value);
      }
      break;

    case CANDIDATE_SOURCE:
      if (value == null) {
        unsetCandidate_source();
      } else {
        setCandidate_source((Byte)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    case INDUSTRY:
      if (value == null) {
        unsetIndustry();
      } else {
        setIndustry((String)value);
      }
      break;

    case EMAIL_RESUME_CONF:
      if (value == null) {
        unsetEmail_resume_conf();
      } else {
        setEmail_resume_conf((Byte)value);
      }
      break;

    case L__POSTING_TARGET_ID:
      if (value == null) {
        unsetL_PostingTargetId();
      } else {
        setL_PostingTargetId((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case SHARE_TPL_ID:
      if (value == null) {
        unsetShare_tpl_id();
      } else {
        setShare_tpl_id((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalary_top();
      } else {
        setSalary_top((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalary_bottom();
      } else {
        setSalary_bottom((Integer)value);
      }
      break;

    case EXPERIENCE_ABOVE:
      if (value == null) {
        unsetExperience_above();
      } else {
        setExperience_above((Byte)value);
      }
      break;

    case DEGREE_ABOVE:
      if (value == null) {
        unsetDegree_above();
      } else {
        setDegree_above((Byte)value);
      }
      break;

    case MANAGEMENT_EXPERIENCE:
      if (value == null) {
        unsetManagement_experience();
      } else {
        setManagement_experience((Byte)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Byte)value);
      }
      break;

    case PUBLISHER:
      if (value == null) {
        unsetPublisher();
      } else {
        setPublisher((Integer)value);
      }
      break;

    case APP_CV_CONFIG_ID:
      if (value == null) {
        unsetApp_cv_config_id();
      } else {
        setApp_cv_config_id((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case HB_STATUS:
      if (value == null) {
        unsetHb_status();
      } else {
        setHb_status((Byte)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case MAJOR_REQUIRED:
      if (value == null) {
        unsetMajor_required();
      } else {
        setMajor_required((String)value);
      }
      break;

    case WORK_ADDRESS:
      if (value == null) {
        unsetWork_address();
      } else {
        setWork_address((String)value);
      }
      break;

    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    case REPORTING_TO:
      if (value == null) {
        unsetReporting_to();
      } else {
        setReporting_to((String)value);
      }
      break;

    case IS_HIRING:
      if (value == null) {
        unsetIs_hiring();
      } else {
        setIs_hiring((Integer)value);
      }
      break;

    case UNDERLINGS:
      if (value == null) {
        unsetUnderlings();
      } else {
        setUnderlings((Integer)value);
      }
      break;

    case LANGUAGE_REQUIRED:
      if (value == null) {
        unsetLanguage_required();
      } else {
        setLanguage_required((Byte)value);
      }
      break;

    case TARGET_INDUSTRY:
      if (value == null) {
        unsetTarget_industry();
      } else {
        setTarget_industry((Integer)value);
      }
      break;

    case CURRENT_STATUS:
      if (value == null) {
        unsetCurrent_status();
      } else {
        setCurrent_status((Integer)value);
      }
      break;

    case CITIES:
      if (value == null) {
        unsetCities();
      } else {
        setCities((Map<Integer,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case JOBNUMBER:
      return getJobnumber();

    case COMPANY_ID:
      return Integer.valueOf(getCompany_id());

    case TITLE:
      return getTitle();

    case CITY:
      return getCity();

    case DEPARTMENT:
      return getDepartment();

    case L_JOBID:
      return Integer.valueOf(getL_jobid());

    case PUBLISH_DATE:
      return getPublish_date();

    case STOP_DATE:
      return getStop_date();

    case ACCOUNTABILITIES:
      return getAccountabilities();

    case EXPERIENCE:
      return getExperience();

    case REQUIREMENT:
      return getRequirement();

    case LANGUAGE:
      return getLanguage();

    case STATUS:
      return Integer.valueOf(getStatus());

    case VISITNUM:
      return Integer.valueOf(getVisitnum());

    case SOURCE_ID:
      return Integer.valueOf(getSource_id());

    case UPDATE_TIME:
      return getUpdate_time();

    case EMPLOYMENT_TYPE:
      return Byte.valueOf(getEmployment_type());

    case HR_EMAIL:
      return getHr_email();

    case DEGREE:
      return Integer.valueOf(getDegree());

    case FEATURE:
      return getFeature();

    case CANDIDATE_SOURCE:
      return Byte.valueOf(getCandidate_source());

    case OCCUPATION:
      return getOccupation();

    case INDUSTRY:
      return getIndustry();

    case EMAIL_RESUME_CONF:
      return Byte.valueOf(getEmail_resume_conf());

    case L__POSTING_TARGET_ID:
      return Integer.valueOf(getL_PostingTargetId());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case SHARE_TPL_ID:
      return Integer.valueOf(getShare_tpl_id());

    case COUNT:
      return Integer.valueOf(getCount());

    case SALARY_TOP:
      return Integer.valueOf(getSalary_top());

    case SALARY_BOTTOM:
      return Integer.valueOf(getSalary_bottom());

    case EXPERIENCE_ABOVE:
      return Byte.valueOf(getExperience_above());

    case DEGREE_ABOVE:
      return Byte.valueOf(getDegree_above());

    case MANAGEMENT_EXPERIENCE:
      return Byte.valueOf(getManagement_experience());

    case GENDER:
      return Byte.valueOf(getGender());

    case PUBLISHER:
      return Integer.valueOf(getPublisher());

    case APP_CV_CONFIG_ID:
      return Integer.valueOf(getApp_cv_config_id());

    case SOURCE:
      return Integer.valueOf(getSource());

    case HB_STATUS:
      return Byte.valueOf(getHb_status());

    case AGE:
      return Integer.valueOf(getAge());

    case MAJOR_REQUIRED:
      return getMajor_required();

    case WORK_ADDRESS:
      return getWork_address();

    case KEYWORD:
      return getKeyword();

    case REPORTING_TO:
      return getReporting_to();

    case IS_HIRING:
      return Integer.valueOf(getIs_hiring());

    case UNDERLINGS:
      return Integer.valueOf(getUnderlings());

    case LANGUAGE_REQUIRED:
      return Byte.valueOf(getLanguage_required());

    case TARGET_INDUSTRY:
      return Integer.valueOf(getTarget_industry());

    case CURRENT_STATUS:
      return Integer.valueOf(getCurrent_status());

    case CITIES:
      return getCities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case JOBNUMBER:
      return isSetJobnumber();
    case COMPANY_ID:
      return isSetCompany_id();
    case TITLE:
      return isSetTitle();
    case CITY:
      return isSetCity();
    case DEPARTMENT:
      return isSetDepartment();
    case L_JOBID:
      return isSetL_jobid();
    case PUBLISH_DATE:
      return isSetPublish_date();
    case STOP_DATE:
      return isSetStop_date();
    case ACCOUNTABILITIES:
      return isSetAccountabilities();
    case EXPERIENCE:
      return isSetExperience();
    case REQUIREMENT:
      return isSetRequirement();
    case LANGUAGE:
      return isSetLanguage();
    case STATUS:
      return isSetStatus();
    case VISITNUM:
      return isSetVisitnum();
    case SOURCE_ID:
      return isSetSource_id();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case EMPLOYMENT_TYPE:
      return isSetEmployment_type();
    case HR_EMAIL:
      return isSetHr_email();
    case DEGREE:
      return isSetDegree();
    case FEATURE:
      return isSetFeature();
    case CANDIDATE_SOURCE:
      return isSetCandidate_source();
    case OCCUPATION:
      return isSetOccupation();
    case INDUSTRY:
      return isSetIndustry();
    case EMAIL_RESUME_CONF:
      return isSetEmail_resume_conf();
    case L__POSTING_TARGET_ID:
      return isSetL_PostingTargetId();
    case PRIORITY:
      return isSetPriority();
    case SHARE_TPL_ID:
      return isSetShare_tpl_id();
    case COUNT:
      return isSetCount();
    case SALARY_TOP:
      return isSetSalary_top();
    case SALARY_BOTTOM:
      return isSetSalary_bottom();
    case EXPERIENCE_ABOVE:
      return isSetExperience_above();
    case DEGREE_ABOVE:
      return isSetDegree_above();
    case MANAGEMENT_EXPERIENCE:
      return isSetManagement_experience();
    case GENDER:
      return isSetGender();
    case PUBLISHER:
      return isSetPublisher();
    case APP_CV_CONFIG_ID:
      return isSetApp_cv_config_id();
    case SOURCE:
      return isSetSource();
    case HB_STATUS:
      return isSetHb_status();
    case AGE:
      return isSetAge();
    case MAJOR_REQUIRED:
      return isSetMajor_required();
    case WORK_ADDRESS:
      return isSetWork_address();
    case KEYWORD:
      return isSetKeyword();
    case REPORTING_TO:
      return isSetReporting_to();
    case IS_HIRING:
      return isSetIs_hiring();
    case UNDERLINGS:
      return isSetUnderlings();
    case LANGUAGE_REQUIRED:
      return isSetLanguage_required();
    case TARGET_INDUSTRY:
      return isSetTarget_industry();
    case CURRENT_STATUS:
      return isSetCurrent_status();
    case CITIES:
      return isSetCities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Position)
      return this.equals((Position)that);
    return false;
  }

  public boolean equals(Position that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_jobnumber = true && this.isSetJobnumber();
    boolean that_present_jobnumber = true && that.isSetJobnumber();
    if (this_present_jobnumber || that_present_jobnumber) {
      if (!(this_present_jobnumber && that_present_jobnumber))
        return false;
      if (!this.jobnumber.equals(that.jobnumber))
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_l_jobid = true && this.isSetL_jobid();
    boolean that_present_l_jobid = true && that.isSetL_jobid();
    if (this_present_l_jobid || that_present_l_jobid) {
      if (!(this_present_l_jobid && that_present_l_jobid))
        return false;
      if (this.l_jobid != that.l_jobid)
        return false;
    }

    boolean this_present_publish_date = true && this.isSetPublish_date();
    boolean that_present_publish_date = true && that.isSetPublish_date();
    if (this_present_publish_date || that_present_publish_date) {
      if (!(this_present_publish_date && that_present_publish_date))
        return false;
      if (!this.publish_date.equals(that.publish_date))
        return false;
    }

    boolean this_present_stop_date = true && this.isSetStop_date();
    boolean that_present_stop_date = true && that.isSetStop_date();
    if (this_present_stop_date || that_present_stop_date) {
      if (!(this_present_stop_date && that_present_stop_date))
        return false;
      if (!this.stop_date.equals(that.stop_date))
        return false;
    }

    boolean this_present_accountabilities = true && this.isSetAccountabilities();
    boolean that_present_accountabilities = true && that.isSetAccountabilities();
    if (this_present_accountabilities || that_present_accountabilities) {
      if (!(this_present_accountabilities && that_present_accountabilities))
        return false;
      if (!this.accountabilities.equals(that.accountabilities))
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (!this.experience.equals(that.experience))
        return false;
    }

    boolean this_present_requirement = true && this.isSetRequirement();
    boolean that_present_requirement = true && that.isSetRequirement();
    if (this_present_requirement || that_present_requirement) {
      if (!(this_present_requirement && that_present_requirement))
        return false;
      if (!this.requirement.equals(that.requirement))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_visitnum = true && this.isSetVisitnum();
    boolean that_present_visitnum = true && that.isSetVisitnum();
    if (this_present_visitnum || that_present_visitnum) {
      if (!(this_present_visitnum && that_present_visitnum))
        return false;
      if (this.visitnum != that.visitnum)
        return false;
    }

    boolean this_present_source_id = true && this.isSetSource_id();
    boolean that_present_source_id = true && that.isSetSource_id();
    if (this_present_source_id || that_present_source_id) {
      if (!(this_present_source_id && that_present_source_id))
        return false;
      if (this.source_id != that.source_id)
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_employment_type = true && this.isSetEmployment_type();
    boolean that_present_employment_type = true && that.isSetEmployment_type();
    if (this_present_employment_type || that_present_employment_type) {
      if (!(this_present_employment_type && that_present_employment_type))
        return false;
      if (this.employment_type != that.employment_type)
        return false;
    }

    boolean this_present_hr_email = true && this.isSetHr_email();
    boolean that_present_hr_email = true && that.isSetHr_email();
    if (this_present_hr_email || that_present_hr_email) {
      if (!(this_present_hr_email && that_present_hr_email))
        return false;
      if (!this.hr_email.equals(that.hr_email))
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_candidate_source = true && this.isSetCandidate_source();
    boolean that_present_candidate_source = true && that.isSetCandidate_source();
    if (this_present_candidate_source || that_present_candidate_source) {
      if (!(this_present_candidate_source && that_present_candidate_source))
        return false;
      if (this.candidate_source != that.candidate_source)
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_industry = true && this.isSetIndustry();
    boolean that_present_industry = true && that.isSetIndustry();
    if (this_present_industry || that_present_industry) {
      if (!(this_present_industry && that_present_industry))
        return false;
      if (!this.industry.equals(that.industry))
        return false;
    }

    boolean this_present_email_resume_conf = true && this.isSetEmail_resume_conf();
    boolean that_present_email_resume_conf = true && that.isSetEmail_resume_conf();
    if (this_present_email_resume_conf || that_present_email_resume_conf) {
      if (!(this_present_email_resume_conf && that_present_email_resume_conf))
        return false;
      if (this.email_resume_conf != that.email_resume_conf)
        return false;
    }

    boolean this_present_l_PostingTargetId = true && this.isSetL_PostingTargetId();
    boolean that_present_l_PostingTargetId = true && that.isSetL_PostingTargetId();
    if (this_present_l_PostingTargetId || that_present_l_PostingTargetId) {
      if (!(this_present_l_PostingTargetId && that_present_l_PostingTargetId))
        return false;
      if (this.l_PostingTargetId != that.l_PostingTargetId)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_share_tpl_id = true && this.isSetShare_tpl_id();
    boolean that_present_share_tpl_id = true && that.isSetShare_tpl_id();
    if (this_present_share_tpl_id || that_present_share_tpl_id) {
      if (!(this_present_share_tpl_id && that_present_share_tpl_id))
        return false;
      if (this.share_tpl_id != that.share_tpl_id)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_salary_top = true && this.isSetSalary_top();
    boolean that_present_salary_top = true && that.isSetSalary_top();
    if (this_present_salary_top || that_present_salary_top) {
      if (!(this_present_salary_top && that_present_salary_top))
        return false;
      if (this.salary_top != that.salary_top)
        return false;
    }

    boolean this_present_salary_bottom = true && this.isSetSalary_bottom();
    boolean that_present_salary_bottom = true && that.isSetSalary_bottom();
    if (this_present_salary_bottom || that_present_salary_bottom) {
      if (!(this_present_salary_bottom && that_present_salary_bottom))
        return false;
      if (this.salary_bottom != that.salary_bottom)
        return false;
    }

    boolean this_present_experience_above = true && this.isSetExperience_above();
    boolean that_present_experience_above = true && that.isSetExperience_above();
    if (this_present_experience_above || that_present_experience_above) {
      if (!(this_present_experience_above && that_present_experience_above))
        return false;
      if (this.experience_above != that.experience_above)
        return false;
    }

    boolean this_present_degree_above = true && this.isSetDegree_above();
    boolean that_present_degree_above = true && that.isSetDegree_above();
    if (this_present_degree_above || that_present_degree_above) {
      if (!(this_present_degree_above && that_present_degree_above))
        return false;
      if (this.degree_above != that.degree_above)
        return false;
    }

    boolean this_present_management_experience = true && this.isSetManagement_experience();
    boolean that_present_management_experience = true && that.isSetManagement_experience();
    if (this_present_management_experience || that_present_management_experience) {
      if (!(this_present_management_experience && that_present_management_experience))
        return false;
      if (this.management_experience != that.management_experience)
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_publisher = true && this.isSetPublisher();
    boolean that_present_publisher = true && that.isSetPublisher();
    if (this_present_publisher || that_present_publisher) {
      if (!(this_present_publisher && that_present_publisher))
        return false;
      if (this.publisher != that.publisher)
        return false;
    }

    boolean this_present_app_cv_config_id = true && this.isSetApp_cv_config_id();
    boolean that_present_app_cv_config_id = true && that.isSetApp_cv_config_id();
    if (this_present_app_cv_config_id || that_present_app_cv_config_id) {
      if (!(this_present_app_cv_config_id && that_present_app_cv_config_id))
        return false;
      if (this.app_cv_config_id != that.app_cv_config_id)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_hb_status = true && this.isSetHb_status();
    boolean that_present_hb_status = true && that.isSetHb_status();
    if (this_present_hb_status || that_present_hb_status) {
      if (!(this_present_hb_status && that_present_hb_status))
        return false;
      if (this.hb_status != that.hb_status)
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_major_required = true && this.isSetMajor_required();
    boolean that_present_major_required = true && that.isSetMajor_required();
    if (this_present_major_required || that_present_major_required) {
      if (!(this_present_major_required && that_present_major_required))
        return false;
      if (!this.major_required.equals(that.major_required))
        return false;
    }

    boolean this_present_work_address = true && this.isSetWork_address();
    boolean that_present_work_address = true && that.isSetWork_address();
    if (this_present_work_address || that_present_work_address) {
      if (!(this_present_work_address && that_present_work_address))
        return false;
      if (!this.work_address.equals(that.work_address))
        return false;
    }

    boolean this_present_keyword = true && this.isSetKeyword();
    boolean that_present_keyword = true && that.isSetKeyword();
    if (this_present_keyword || that_present_keyword) {
      if (!(this_present_keyword && that_present_keyword))
        return false;
      if (!this.keyword.equals(that.keyword))
        return false;
    }

    boolean this_present_reporting_to = true && this.isSetReporting_to();
    boolean that_present_reporting_to = true && that.isSetReporting_to();
    if (this_present_reporting_to || that_present_reporting_to) {
      if (!(this_present_reporting_to && that_present_reporting_to))
        return false;
      if (!this.reporting_to.equals(that.reporting_to))
        return false;
    }

    boolean this_present_is_hiring = true && this.isSetIs_hiring();
    boolean that_present_is_hiring = true && that.isSetIs_hiring();
    if (this_present_is_hiring || that_present_is_hiring) {
      if (!(this_present_is_hiring && that_present_is_hiring))
        return false;
      if (this.is_hiring != that.is_hiring)
        return false;
    }

    boolean this_present_underlings = true && this.isSetUnderlings();
    boolean that_present_underlings = true && that.isSetUnderlings();
    if (this_present_underlings || that_present_underlings) {
      if (!(this_present_underlings && that_present_underlings))
        return false;
      if (this.underlings != that.underlings)
        return false;
    }

    boolean this_present_language_required = true && this.isSetLanguage_required();
    boolean that_present_language_required = true && that.isSetLanguage_required();
    if (this_present_language_required || that_present_language_required) {
      if (!(this_present_language_required && that_present_language_required))
        return false;
      if (this.language_required != that.language_required)
        return false;
    }

    boolean this_present_target_industry = true && this.isSetTarget_industry();
    boolean that_present_target_industry = true && that.isSetTarget_industry();
    if (this_present_target_industry || that_present_target_industry) {
      if (!(this_present_target_industry && that_present_target_industry))
        return false;
      if (this.target_industry != that.target_industry)
        return false;
    }

    boolean this_present_current_status = true && this.isSetCurrent_status();
    boolean that_present_current_status = true && that.isSetCurrent_status();
    if (this_present_current_status || that_present_current_status) {
      if (!(this_present_current_status && that_present_current_status))
        return false;
      if (this.current_status != that.current_status)
        return false;
    }

    boolean this_present_cities = true && this.isSetCities();
    boolean that_present_cities = true && that.isSetCities();
    if (this_present_cities || that_present_cities) {
      if (!(this_present_cities && that_present_cities))
        return false;
      if (!this.cities.equals(that.cities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_jobnumber = true && (isSetJobnumber());
    list.add(present_jobnumber);
    if (present_jobnumber)
      list.add(jobnumber);

    boolean present_company_id = true && (isSetCompany_id());
    list.add(present_company_id);
    if (present_company_id)
      list.add(company_id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_l_jobid = true && (isSetL_jobid());
    list.add(present_l_jobid);
    if (present_l_jobid)
      list.add(l_jobid);

    boolean present_publish_date = true && (isSetPublish_date());
    list.add(present_publish_date);
    if (present_publish_date)
      list.add(publish_date);

    boolean present_stop_date = true && (isSetStop_date());
    list.add(present_stop_date);
    if (present_stop_date)
      list.add(stop_date);

    boolean present_accountabilities = true && (isSetAccountabilities());
    list.add(present_accountabilities);
    if (present_accountabilities)
      list.add(accountabilities);

    boolean present_experience = true && (isSetExperience());
    list.add(present_experience);
    if (present_experience)
      list.add(experience);

    boolean present_requirement = true && (isSetRequirement());
    list.add(present_requirement);
    if (present_requirement)
      list.add(requirement);

    boolean present_language = true && (isSetLanguage());
    list.add(present_language);
    if (present_language)
      list.add(language);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_visitnum = true && (isSetVisitnum());
    list.add(present_visitnum);
    if (present_visitnum)
      list.add(visitnum);

    boolean present_source_id = true && (isSetSource_id());
    list.add(present_source_id);
    if (present_source_id)
      list.add(source_id);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    boolean present_employment_type = true && (isSetEmployment_type());
    list.add(present_employment_type);
    if (present_employment_type)
      list.add(employment_type);

    boolean present_hr_email = true && (isSetHr_email());
    list.add(present_hr_email);
    if (present_hr_email)
      list.add(hr_email);

    boolean present_degree = true && (isSetDegree());
    list.add(present_degree);
    if (present_degree)
      list.add(degree);

    boolean present_feature = true && (isSetFeature());
    list.add(present_feature);
    if (present_feature)
      list.add(feature);

    boolean present_candidate_source = true && (isSetCandidate_source());
    list.add(present_candidate_source);
    if (present_candidate_source)
      list.add(candidate_source);

    boolean present_occupation = true && (isSetOccupation());
    list.add(present_occupation);
    if (present_occupation)
      list.add(occupation);

    boolean present_industry = true && (isSetIndustry());
    list.add(present_industry);
    if (present_industry)
      list.add(industry);

    boolean present_email_resume_conf = true && (isSetEmail_resume_conf());
    list.add(present_email_resume_conf);
    if (present_email_resume_conf)
      list.add(email_resume_conf);

    boolean present_l_PostingTargetId = true && (isSetL_PostingTargetId());
    list.add(present_l_PostingTargetId);
    if (present_l_PostingTargetId)
      list.add(l_PostingTargetId);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_share_tpl_id = true && (isSetShare_tpl_id());
    list.add(present_share_tpl_id);
    if (present_share_tpl_id)
      list.add(share_tpl_id);

    boolean present_count = true && (isSetCount());
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_salary_top = true && (isSetSalary_top());
    list.add(present_salary_top);
    if (present_salary_top)
      list.add(salary_top);

    boolean present_salary_bottom = true && (isSetSalary_bottom());
    list.add(present_salary_bottom);
    if (present_salary_bottom)
      list.add(salary_bottom);

    boolean present_experience_above = true && (isSetExperience_above());
    list.add(present_experience_above);
    if (present_experience_above)
      list.add(experience_above);

    boolean present_degree_above = true && (isSetDegree_above());
    list.add(present_degree_above);
    if (present_degree_above)
      list.add(degree_above);

    boolean present_management_experience = true && (isSetManagement_experience());
    list.add(present_management_experience);
    if (present_management_experience)
      list.add(management_experience);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_publisher = true && (isSetPublisher());
    list.add(present_publisher);
    if (present_publisher)
      list.add(publisher);

    boolean present_app_cv_config_id = true && (isSetApp_cv_config_id());
    list.add(present_app_cv_config_id);
    if (present_app_cv_config_id)
      list.add(app_cv_config_id);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_hb_status = true && (isSetHb_status());
    list.add(present_hb_status);
    if (present_hb_status)
      list.add(hb_status);

    boolean present_age = true && (isSetAge());
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_major_required = true && (isSetMajor_required());
    list.add(present_major_required);
    if (present_major_required)
      list.add(major_required);

    boolean present_work_address = true && (isSetWork_address());
    list.add(present_work_address);
    if (present_work_address)
      list.add(work_address);

    boolean present_keyword = true && (isSetKeyword());
    list.add(present_keyword);
    if (present_keyword)
      list.add(keyword);

    boolean present_reporting_to = true && (isSetReporting_to());
    list.add(present_reporting_to);
    if (present_reporting_to)
      list.add(reporting_to);

    boolean present_is_hiring = true && (isSetIs_hiring());
    list.add(present_is_hiring);
    if (present_is_hiring)
      list.add(is_hiring);

    boolean present_underlings = true && (isSetUnderlings());
    list.add(present_underlings);
    if (present_underlings)
      list.add(underlings);

    boolean present_language_required = true && (isSetLanguage_required());
    list.add(present_language_required);
    if (present_language_required)
      list.add(language_required);

    boolean present_target_industry = true && (isSetTarget_industry());
    list.add(present_target_industry);
    if (present_target_industry)
      list.add(target_industry);

    boolean present_current_status = true && (isSetCurrent_status());
    list.add(present_current_status);
    if (present_current_status)
      list.add(current_status);

    boolean present_cities = true && (isSetCities());
    list.add(present_cities);
    if (present_cities)
      list.add(cities);

    return list.hashCode();
  }

  @Override
  public int compareTo(Position other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobnumber()).compareTo(other.isSetJobnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobnumber, other.jobnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL_jobid()).compareTo(other.isSetL_jobid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL_jobid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l_jobid, other.l_jobid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublish_date()).compareTo(other.isSetPublish_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublish_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_date, other.publish_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_date()).compareTo(other.isSetStop_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_date, other.stop_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountabilities()).compareTo(other.isSetAccountabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountabilities, other.accountabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequirement()).compareTo(other.isSetRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirement, other.requirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitnum()).compareTo(other.isSetVisitnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitnum, other.visitnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_id()).compareTo(other.isSetSource_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_id, other.source_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployment_type()).compareTo(other.isSetEmployment_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployment_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employment_type, other.employment_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHr_email()).compareTo(other.isSetHr_email());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_email()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_email, other.hr_email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCandidate_source()).compareTo(other.isSetCandidate_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_source, other.candidate_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustry()).compareTo(other.isSetIndustry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industry, other.industry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail_resume_conf()).compareTo(other.isSetEmail_resume_conf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail_resume_conf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email_resume_conf, other.email_resume_conf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL_PostingTargetId()).compareTo(other.isSetL_PostingTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL_PostingTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l_PostingTargetId, other.l_PostingTargetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShare_tpl_id()).compareTo(other.isSetShare_tpl_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_tpl_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_tpl_id, other.share_tpl_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_top()).compareTo(other.isSetSalary_top());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_top()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_top, other.salary_top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_bottom()).compareTo(other.isSetSalary_bottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_bottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_bottom, other.salary_bottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience_above()).compareTo(other.isSetExperience_above());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience_above()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience_above, other.experience_above);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree_above()).compareTo(other.isSetDegree_above());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree_above()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree_above, other.degree_above);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagement_experience()).compareTo(other.isSetManagement_experience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagement_experience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.management_experience, other.management_experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisher()).compareTo(other.isSetPublisher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, other.publisher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_cv_config_id()).compareTo(other.isSetApp_cv_config_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_cv_config_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_cv_config_id, other.app_cv_config_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHb_status()).compareTo(other.isSetHb_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHb_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_status, other.hb_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajor_required()).compareTo(other.isSetMajor_required());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajor_required()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major_required, other.major_required);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWork_address()).compareTo(other.isSetWork_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWork_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_address, other.work_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReporting_to()).compareTo(other.isSetReporting_to());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReporting_to()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reporting_to, other.reporting_to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_hiring()).compareTo(other.isSetIs_hiring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_hiring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_hiring, other.is_hiring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlings()).compareTo(other.isSetUnderlings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlings, other.underlings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage_required()).compareTo(other.isSetLanguage_required());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage_required()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language_required, other.language_required);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_industry()).compareTo(other.isSetTarget_industry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_industry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_industry, other.target_industry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_status()).compareTo(other.isSetCurrent_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_status, other.current_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCities()).compareTo(other.isSetCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cities, other.cities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Position(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetJobnumber()) {
      if (!first) sb.append(", ");
      sb.append("jobnumber:");
      if (this.jobnumber == null) {
        sb.append("null");
      } else {
        sb.append(this.jobnumber);
      }
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetL_jobid()) {
      if (!first) sb.append(", ");
      sb.append("l_jobid:");
      sb.append(this.l_jobid);
      first = false;
    }
    if (isSetPublish_date()) {
      if (!first) sb.append(", ");
      sb.append("publish_date:");
      if (this.publish_date == null) {
        sb.append("null");
      } else {
        sb.append(this.publish_date);
      }
      first = false;
    }
    if (isSetStop_date()) {
      if (!first) sb.append(", ");
      sb.append("stop_date:");
      if (this.stop_date == null) {
        sb.append("null");
      } else {
        sb.append(this.stop_date);
      }
      first = false;
    }
    if (isSetAccountabilities()) {
      if (!first) sb.append(", ");
      sb.append("accountabilities:");
      if (this.accountabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.accountabilities);
      }
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      if (this.experience == null) {
        sb.append("null");
      } else {
        sb.append(this.experience);
      }
      first = false;
    }
    if (isSetRequirement()) {
      if (!first) sb.append(", ");
      sb.append("requirement:");
      if (this.requirement == null) {
        sb.append("null");
      } else {
        sb.append(this.requirement);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetVisitnum()) {
      if (!first) sb.append(", ");
      sb.append("visitnum:");
      sb.append(this.visitnum);
      first = false;
    }
    if (isSetSource_id()) {
      if (!first) sb.append(", ");
      sb.append("source_id:");
      sb.append(this.source_id);
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    if (isSetEmployment_type()) {
      if (!first) sb.append(", ");
      sb.append("employment_type:");
      sb.append(this.employment_type);
      first = false;
    }
    if (isSetHr_email()) {
      if (!first) sb.append(", ");
      sb.append("hr_email:");
      if (this.hr_email == null) {
        sb.append("null");
      } else {
        sb.append(this.hr_email);
      }
      first = false;
    }
    if (isSetDegree()) {
      if (!first) sb.append(", ");
      sb.append("degree:");
      sb.append(this.degree);
      first = false;
    }
    if (isSetFeature()) {
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
    }
    if (isSetCandidate_source()) {
      if (!first) sb.append(", ");
      sb.append("candidate_source:");
      sb.append(this.candidate_source);
      first = false;
    }
    if (isSetOccupation()) {
      if (!first) sb.append(", ");
      sb.append("occupation:");
      if (this.occupation == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation);
      }
      first = false;
    }
    if (isSetIndustry()) {
      if (!first) sb.append(", ");
      sb.append("industry:");
      if (this.industry == null) {
        sb.append("null");
      } else {
        sb.append(this.industry);
      }
      first = false;
    }
    if (isSetEmail_resume_conf()) {
      if (!first) sb.append(", ");
      sb.append("email_resume_conf:");
      sb.append(this.email_resume_conf);
      first = false;
    }
    if (isSetL_PostingTargetId()) {
      if (!first) sb.append(", ");
      sb.append("l_PostingTargetId:");
      sb.append(this.l_PostingTargetId);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetShare_tpl_id()) {
      if (!first) sb.append(", ");
      sb.append("share_tpl_id:");
      sb.append(this.share_tpl_id);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetSalary_top()) {
      if (!first) sb.append(", ");
      sb.append("salary_top:");
      sb.append(this.salary_top);
      first = false;
    }
    if (isSetSalary_bottom()) {
      if (!first) sb.append(", ");
      sb.append("salary_bottom:");
      sb.append(this.salary_bottom);
      first = false;
    }
    if (isSetExperience_above()) {
      if (!first) sb.append(", ");
      sb.append("experience_above:");
      sb.append(this.experience_above);
      first = false;
    }
    if (isSetDegree_above()) {
      if (!first) sb.append(", ");
      sb.append("degree_above:");
      sb.append(this.degree_above);
      first = false;
    }
    if (isSetManagement_experience()) {
      if (!first) sb.append(", ");
      sb.append("management_experience:");
      sb.append(this.management_experience);
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetPublisher()) {
      if (!first) sb.append(", ");
      sb.append("publisher:");
      sb.append(this.publisher);
      first = false;
    }
    if (isSetApp_cv_config_id()) {
      if (!first) sb.append(", ");
      sb.append("app_cv_config_id:");
      sb.append(this.app_cv_config_id);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetHb_status()) {
      if (!first) sb.append(", ");
      sb.append("hb_status:");
      sb.append(this.hb_status);
      first = false;
    }
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetMajor_required()) {
      if (!first) sb.append(", ");
      sb.append("major_required:");
      if (this.major_required == null) {
        sb.append("null");
      } else {
        sb.append(this.major_required);
      }
      first = false;
    }
    if (isSetWork_address()) {
      if (!first) sb.append(", ");
      sb.append("work_address:");
      if (this.work_address == null) {
        sb.append("null");
      } else {
        sb.append(this.work_address);
      }
      first = false;
    }
    if (isSetKeyword()) {
      if (!first) sb.append(", ");
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
    }
    if (isSetReporting_to()) {
      if (!first) sb.append(", ");
      sb.append("reporting_to:");
      if (this.reporting_to == null) {
        sb.append("null");
      } else {
        sb.append(this.reporting_to);
      }
      first = false;
    }
    if (isSetIs_hiring()) {
      if (!first) sb.append(", ");
      sb.append("is_hiring:");
      sb.append(this.is_hiring);
      first = false;
    }
    if (isSetUnderlings()) {
      if (!first) sb.append(", ");
      sb.append("underlings:");
      sb.append(this.underlings);
      first = false;
    }
    if (isSetLanguage_required()) {
      if (!first) sb.append(", ");
      sb.append("language_required:");
      sb.append(this.language_required);
      first = false;
    }
    if (isSetTarget_industry()) {
      if (!first) sb.append(", ");
      sb.append("target_industry:");
      sb.append(this.target_industry);
      first = false;
    }
    if (isSetCurrent_status()) {
      if (!first) sb.append(", ");
      sb.append("current_status:");
      sb.append(this.current_status);
      first = false;
    }
    if (isSetCities()) {
      if (!first) sb.append(", ");
      sb.append("cities:");
      if (this.cities == null) {
        sb.append("null");
      } else {
        sb.append(this.cities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionStandardSchemeFactory implements SchemeFactory {
    public PositionStandardScheme getScheme() {
      return new PositionStandardScheme();
    }
  }

  private static class PositionStandardScheme extends StandardScheme<Position> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Position struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOBNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobnumber = iprot.readString();
              struct.setJobnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // L_JOBID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.l_jobid = iprot.readI32();
              struct.setL_jobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publish_date = iprot.readString();
              struct.setPublish_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stop_date = iprot.readString();
              struct.setStop_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCOUNTABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountabilities = iprot.readString();
              struct.setAccountabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experience = iprot.readString();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requirement = iprot.readString();
              struct.setRequirementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VISITNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visitnum = iprot.readI32();
              struct.setVisitnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source_id = iprot.readI32();
              struct.setSource_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EMPLOYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.employment_type = iprot.readByte();
              struct.setEmployment_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HR_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hr_email = iprot.readString();
              struct.setHr_emailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree = iprot.readI32();
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature = iprot.readString();
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CANDIDATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.candidate_source = iprot.readByte();
              struct.setCandidate_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industry = iprot.readString();
              struct.setIndustryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EMAIL_RESUME_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.email_resume_conf = iprot.readByte();
              struct.setEmail_resume_confIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // L__POSTING_TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.l_PostingTargetId = iprot.readI32();
              struct.setL_PostingTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SHARE_TPL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.share_tpl_id = iprot.readI32();
              struct.setShare_tpl_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_top = iprot.readI32();
              struct.setSalary_topIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_bottom = iprot.readI32();
              struct.setSalary_bottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // EXPERIENCE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.experience_above = iprot.readByte();
              struct.setExperience_aboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DEGREE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.degree_above = iprot.readByte();
              struct.setDegree_aboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // MANAGEMENT_EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.management_experience = iprot.readByte();
              struct.setManagement_experienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gender = iprot.readByte();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PUBLISHER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publisher = iprot.readI32();
              struct.setPublisherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // APP_CV_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.app_cv_config_id = iprot.readI32();
              struct.setApp_cv_config_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // HB_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.hb_status = iprot.readByte();
              struct.setHb_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // MAJOR_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.major_required = iprot.readString();
              struct.setMajor_requiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // WORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.work_address = iprot.readString();
              struct.setWork_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // REPORTING_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reporting_to = iprot.readString();
              struct.setReporting_toIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // IS_HIRING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_hiring = iprot.readI32();
              struct.setIs_hiringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // UNDERLINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.underlings = iprot.readI32();
              struct.setUnderlingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // LANGUAGE_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.language_required = iprot.readByte();
              struct.setLanguage_requiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // TARGET_INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target_industry = iprot.readI32();
              struct.setTarget_industryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // CURRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current_status = iprot.readI32();
              struct.setCurrent_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.cities = new HashMap<Integer,String>(2*_map0.size);
                int _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readString();
                  struct.cities.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Position struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.jobnumber != null) {
        if (struct.isSetJobnumber()) {
          oprot.writeFieldBegin(JOBNUMBER_FIELD_DESC);
          oprot.writeString(struct.jobnumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetL_jobid()) {
        oprot.writeFieldBegin(L_JOBID_FIELD_DESC);
        oprot.writeI32(struct.l_jobid);
        oprot.writeFieldEnd();
      }
      if (struct.publish_date != null) {
        if (struct.isSetPublish_date()) {
          oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
          oprot.writeString(struct.publish_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stop_date != null) {
        if (struct.isSetStop_date()) {
          oprot.writeFieldBegin(STOP_DATE_FIELD_DESC);
          oprot.writeString(struct.stop_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountabilities != null) {
        if (struct.isSetAccountabilities()) {
          oprot.writeFieldBegin(ACCOUNTABILITIES_FIELD_DESC);
          oprot.writeString(struct.accountabilities);
          oprot.writeFieldEnd();
        }
      }
      if (struct.experience != null) {
        if (struct.isSetExperience()) {
          oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
          oprot.writeString(struct.experience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requirement != null) {
        if (struct.isSetRequirement()) {
          oprot.writeFieldBegin(REQUIREMENT_FIELD_DESC);
          oprot.writeString(struct.requirement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisitnum()) {
        oprot.writeFieldBegin(VISITNUM_FIELD_DESC);
        oprot.writeI32(struct.visitnum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource_id()) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI32(struct.source_id);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeFieldBegin(EMPLOYMENT_TYPE_FIELD_DESC);
        oprot.writeByte(struct.employment_type);
        oprot.writeFieldEnd();
      }
      if (struct.hr_email != null) {
        if (struct.isSetHr_email()) {
          oprot.writeFieldBegin(HR_EMAIL_FIELD_DESC);
          oprot.writeString(struct.hr_email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDegree()) {
        oprot.writeFieldBegin(DEGREE_FIELD_DESC);
        oprot.writeI32(struct.degree);
        oprot.writeFieldEnd();
      }
      if (struct.feature != null) {
        if (struct.isSetFeature()) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
        oprot.writeByte(struct.candidate_source);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        if (struct.isSetOccupation()) {
          oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
          oprot.writeString(struct.occupation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.industry != null) {
        if (struct.isSetIndustry()) {
          oprot.writeFieldBegin(INDUSTRY_FIELD_DESC);
          oprot.writeString(struct.industry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmail_resume_conf()) {
        oprot.writeFieldBegin(EMAIL_RESUME_CONF_FIELD_DESC);
        oprot.writeByte(struct.email_resume_conf);
        oprot.writeFieldEnd();
      }
      if (struct.isSetL_PostingTargetId()) {
        oprot.writeFieldBegin(L__POSTING_TARGET_ID_FIELD_DESC);
        oprot.writeI32(struct.l_PostingTargetId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShare_tpl_id()) {
        oprot.writeFieldBegin(SHARE_TPL_ID_FIELD_DESC);
        oprot.writeI32(struct.share_tpl_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_top()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salary_top);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salary_bottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExperience_above()) {
        oprot.writeFieldBegin(EXPERIENCE_ABOVE_FIELD_DESC);
        oprot.writeByte(struct.experience_above);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDegree_above()) {
        oprot.writeFieldBegin(DEGREE_ABOVE_FIELD_DESC);
        oprot.writeByte(struct.degree_above);
        oprot.writeFieldEnd();
      }
      if (struct.isSetManagement_experience()) {
        oprot.writeFieldBegin(MANAGEMENT_EXPERIENCE_FIELD_DESC);
        oprot.writeByte(struct.management_experience);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeByte(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublisher()) {
        oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
        oprot.writeI32(struct.publisher);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApp_cv_config_id()) {
        oprot.writeFieldBegin(APP_CV_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.app_cv_config_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHb_status()) {
        oprot.writeFieldBegin(HB_STATUS_FIELD_DESC);
        oprot.writeByte(struct.hb_status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.major_required != null) {
        if (struct.isSetMajor_required()) {
          oprot.writeFieldBegin(MAJOR_REQUIRED_FIELD_DESC);
          oprot.writeString(struct.major_required);
          oprot.writeFieldEnd();
        }
      }
      if (struct.work_address != null) {
        if (struct.isSetWork_address()) {
          oprot.writeFieldBegin(WORK_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.work_address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyword != null) {
        if (struct.isSetKeyword()) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reporting_to != null) {
        if (struct.isSetReporting_to()) {
          oprot.writeFieldBegin(REPORTING_TO_FIELD_DESC);
          oprot.writeString(struct.reporting_to);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_hiring()) {
        oprot.writeFieldBegin(IS_HIRING_FIELD_DESC);
        oprot.writeI32(struct.is_hiring);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnderlings()) {
        oprot.writeFieldBegin(UNDERLINGS_FIELD_DESC);
        oprot.writeI32(struct.underlings);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLanguage_required()) {
        oprot.writeFieldBegin(LANGUAGE_REQUIRED_FIELD_DESC);
        oprot.writeByte(struct.language_required);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTarget_industry()) {
        oprot.writeFieldBegin(TARGET_INDUSTRY_FIELD_DESC);
        oprot.writeI32(struct.target_industry);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrent_status()) {
        oprot.writeFieldBegin(CURRENT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.current_status);
        oprot.writeFieldEnd();
      }
      if (struct.cities != null) {
        if (struct.isSetCities()) {
          oprot.writeFieldBegin(CITIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.cities.size()));
            for (Map.Entry<Integer, String> _iter4 : struct.cities.entrySet())
            {
              oprot.writeI32(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionTupleSchemeFactory implements SchemeFactory {
    public PositionTupleScheme getScheme() {
      return new PositionTupleScheme();
    }
  }

  private static class PositionTupleScheme extends TupleScheme<Position> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetJobnumber()) {
        optionals.set(1);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetCity()) {
        optionals.set(4);
      }
      if (struct.isSetDepartment()) {
        optionals.set(5);
      }
      if (struct.isSetL_jobid()) {
        optionals.set(6);
      }
      if (struct.isSetPublish_date()) {
        optionals.set(7);
      }
      if (struct.isSetStop_date()) {
        optionals.set(8);
      }
      if (struct.isSetAccountabilities()) {
        optionals.set(9);
      }
      if (struct.isSetExperience()) {
        optionals.set(10);
      }
      if (struct.isSetRequirement()) {
        optionals.set(11);
      }
      if (struct.isSetLanguage()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetVisitnum()) {
        optionals.set(14);
      }
      if (struct.isSetSource_id()) {
        optionals.set(15);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(16);
      }
      if (struct.isSetEmployment_type()) {
        optionals.set(17);
      }
      if (struct.isSetHr_email()) {
        optionals.set(18);
      }
      if (struct.isSetDegree()) {
        optionals.set(19);
      }
      if (struct.isSetFeature()) {
        optionals.set(20);
      }
      if (struct.isSetCandidate_source()) {
        optionals.set(21);
      }
      if (struct.isSetOccupation()) {
        optionals.set(22);
      }
      if (struct.isSetIndustry()) {
        optionals.set(23);
      }
      if (struct.isSetEmail_resume_conf()) {
        optionals.set(24);
      }
      if (struct.isSetL_PostingTargetId()) {
        optionals.set(25);
      }
      if (struct.isSetPriority()) {
        optionals.set(26);
      }
      if (struct.isSetShare_tpl_id()) {
        optionals.set(27);
      }
      if (struct.isSetCount()) {
        optionals.set(28);
      }
      if (struct.isSetSalary_top()) {
        optionals.set(29);
      }
      if (struct.isSetSalary_bottom()) {
        optionals.set(30);
      }
      if (struct.isSetExperience_above()) {
        optionals.set(31);
      }
      if (struct.isSetDegree_above()) {
        optionals.set(32);
      }
      if (struct.isSetManagement_experience()) {
        optionals.set(33);
      }
      if (struct.isSetGender()) {
        optionals.set(34);
      }
      if (struct.isSetPublisher()) {
        optionals.set(35);
      }
      if (struct.isSetApp_cv_config_id()) {
        optionals.set(36);
      }
      if (struct.isSetSource()) {
        optionals.set(37);
      }
      if (struct.isSetHb_status()) {
        optionals.set(38);
      }
      if (struct.isSetAge()) {
        optionals.set(39);
      }
      if (struct.isSetMajor_required()) {
        optionals.set(40);
      }
      if (struct.isSetWork_address()) {
        optionals.set(41);
      }
      if (struct.isSetKeyword()) {
        optionals.set(42);
      }
      if (struct.isSetReporting_to()) {
        optionals.set(43);
      }
      if (struct.isSetIs_hiring()) {
        optionals.set(44);
      }
      if (struct.isSetUnderlings()) {
        optionals.set(45);
      }
      if (struct.isSetLanguage_required()) {
        optionals.set(46);
      }
      if (struct.isSetTarget_industry()) {
        optionals.set(47);
      }
      if (struct.isSetCurrent_status()) {
        optionals.set(48);
      }
      if (struct.isSetCities()) {
        optionals.set(49);
      }
      oprot.writeBitSet(optionals, 50);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetJobnumber()) {
        oprot.writeString(struct.jobnumber);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetL_jobid()) {
        oprot.writeI32(struct.l_jobid);
      }
      if (struct.isSetPublish_date()) {
        oprot.writeString(struct.publish_date);
      }
      if (struct.isSetStop_date()) {
        oprot.writeString(struct.stop_date);
      }
      if (struct.isSetAccountabilities()) {
        oprot.writeString(struct.accountabilities);
      }
      if (struct.isSetExperience()) {
        oprot.writeString(struct.experience);
      }
      if (struct.isSetRequirement()) {
        oprot.writeString(struct.requirement);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetVisitnum()) {
        oprot.writeI32(struct.visitnum);
      }
      if (struct.isSetSource_id()) {
        oprot.writeI32(struct.source_id);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeByte(struct.employment_type);
      }
      if (struct.isSetHr_email()) {
        oprot.writeString(struct.hr_email);
      }
      if (struct.isSetDegree()) {
        oprot.writeI32(struct.degree);
      }
      if (struct.isSetFeature()) {
        oprot.writeString(struct.feature);
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeByte(struct.candidate_source);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetIndustry()) {
        oprot.writeString(struct.industry);
      }
      if (struct.isSetEmail_resume_conf()) {
        oprot.writeByte(struct.email_resume_conf);
      }
      if (struct.isSetL_PostingTargetId()) {
        oprot.writeI32(struct.l_PostingTargetId);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetShare_tpl_id()) {
        oprot.writeI32(struct.share_tpl_id);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetSalary_top()) {
        oprot.writeI32(struct.salary_top);
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeI32(struct.salary_bottom);
      }
      if (struct.isSetExperience_above()) {
        oprot.writeByte(struct.experience_above);
      }
      if (struct.isSetDegree_above()) {
        oprot.writeByte(struct.degree_above);
      }
      if (struct.isSetManagement_experience()) {
        oprot.writeByte(struct.management_experience);
      }
      if (struct.isSetGender()) {
        oprot.writeByte(struct.gender);
      }
      if (struct.isSetPublisher()) {
        oprot.writeI32(struct.publisher);
      }
      if (struct.isSetApp_cv_config_id()) {
        oprot.writeI32(struct.app_cv_config_id);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetHb_status()) {
        oprot.writeByte(struct.hb_status);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetMajor_required()) {
        oprot.writeString(struct.major_required);
      }
      if (struct.isSetWork_address()) {
        oprot.writeString(struct.work_address);
      }
      if (struct.isSetKeyword()) {
        oprot.writeString(struct.keyword);
      }
      if (struct.isSetReporting_to()) {
        oprot.writeString(struct.reporting_to);
      }
      if (struct.isSetIs_hiring()) {
        oprot.writeI32(struct.is_hiring);
      }
      if (struct.isSetUnderlings()) {
        oprot.writeI32(struct.underlings);
      }
      if (struct.isSetLanguage_required()) {
        oprot.writeByte(struct.language_required);
      }
      if (struct.isSetTarget_industry()) {
        oprot.writeI32(struct.target_industry);
      }
      if (struct.isSetCurrent_status()) {
        oprot.writeI32(struct.current_status);
      }
      if (struct.isSetCities()) {
        {
          oprot.writeI32(struct.cities.size());
          for (Map.Entry<Integer, String> _iter5 : struct.cities.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(50);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobnumber = iprot.readString();
        struct.setJobnumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.l_jobid = iprot.readI32();
        struct.setL_jobidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.publish_date = iprot.readString();
        struct.setPublish_dateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stop_date = iprot.readString();
        struct.setStop_dateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accountabilities = iprot.readString();
        struct.setAccountabilitiesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.experience = iprot.readString();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requirement = iprot.readString();
        struct.setRequirementIsSet(true);
      }
      if (incoming.get(12)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.visitnum = iprot.readI32();
        struct.setVisitnumIsSet(true);
      }
      if (incoming.get(15)) {
        struct.source_id = iprot.readI32();
        struct.setSource_idIsSet(true);
      }
      if (incoming.get(16)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.employment_type = iprot.readByte();
        struct.setEmployment_typeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.hr_email = iprot.readString();
        struct.setHr_emailIsSet(true);
      }
      if (incoming.get(19)) {
        struct.degree = iprot.readI32();
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.feature = iprot.readString();
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(21)) {
        struct.candidate_source = iprot.readByte();
        struct.setCandidate_sourceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(23)) {
        struct.industry = iprot.readString();
        struct.setIndustryIsSet(true);
      }
      if (incoming.get(24)) {
        struct.email_resume_conf = iprot.readByte();
        struct.setEmail_resume_confIsSet(true);
      }
      if (incoming.get(25)) {
        struct.l_PostingTargetId = iprot.readI32();
        struct.setL_PostingTargetIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(27)) {
        struct.share_tpl_id = iprot.readI32();
        struct.setShare_tpl_idIsSet(true);
      }
      if (incoming.get(28)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(29)) {
        struct.salary_top = iprot.readI32();
        struct.setSalary_topIsSet(true);
      }
      if (incoming.get(30)) {
        struct.salary_bottom = iprot.readI32();
        struct.setSalary_bottomIsSet(true);
      }
      if (incoming.get(31)) {
        struct.experience_above = iprot.readByte();
        struct.setExperience_aboveIsSet(true);
      }
      if (incoming.get(32)) {
        struct.degree_above = iprot.readByte();
        struct.setDegree_aboveIsSet(true);
      }
      if (incoming.get(33)) {
        struct.management_experience = iprot.readByte();
        struct.setManagement_experienceIsSet(true);
      }
      if (incoming.get(34)) {
        struct.gender = iprot.readByte();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(35)) {
        struct.publisher = iprot.readI32();
        struct.setPublisherIsSet(true);
      }
      if (incoming.get(36)) {
        struct.app_cv_config_id = iprot.readI32();
        struct.setApp_cv_config_idIsSet(true);
      }
      if (incoming.get(37)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(38)) {
        struct.hb_status = iprot.readByte();
        struct.setHb_statusIsSet(true);
      }
      if (incoming.get(39)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.major_required = iprot.readString();
        struct.setMajor_requiredIsSet(true);
      }
      if (incoming.get(41)) {
        struct.work_address = iprot.readString();
        struct.setWork_addressIsSet(true);
      }
      if (incoming.get(42)) {
        struct.keyword = iprot.readString();
        struct.setKeywordIsSet(true);
      }
      if (incoming.get(43)) {
        struct.reporting_to = iprot.readString();
        struct.setReporting_toIsSet(true);
      }
      if (incoming.get(44)) {
        struct.is_hiring = iprot.readI32();
        struct.setIs_hiringIsSet(true);
      }
      if (incoming.get(45)) {
        struct.underlings = iprot.readI32();
        struct.setUnderlingsIsSet(true);
      }
      if (incoming.get(46)) {
        struct.language_required = iprot.readByte();
        struct.setLanguage_requiredIsSet(true);
      }
      if (incoming.get(47)) {
        struct.target_industry = iprot.readI32();
        struct.setTarget_industryIsSet(true);
      }
      if (incoming.get(48)) {
        struct.current_status = iprot.readI32();
        struct.setCurrent_statusIsSet(true);
      }
      if (incoming.get(49)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cities = new HashMap<Integer,String>(2*_map6.size);
          int _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readI32();
            _val8 = iprot.readString();
            struct.cities.put(_key7, _val8);
          }
        }
        struct.setCitiesIsSet(true);
      }
    }
  }

}

