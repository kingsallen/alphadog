/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-08")
public class HrWxWechatDO implements org.apache.thrift.TBase<HrWxWechatDO, HrWxWechatDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrWxWechatDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrWxWechatDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALLONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("allonym", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("secret", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField WELCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("welcome", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DEF_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("defMsg", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField QRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("qrcode", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PASSIVE_SEEKER_FIELD_DESC = new org.apache.thrift.protocol.TField("passiveSeeker", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField THIRD_OAUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdOauth", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField HR_REGISTER_FIELD_DESC = new org.apache.thrift.protocol.TField("hrRegister", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("accessTokenCreateTime", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("accessTokenExpired", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField JSAPI_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("jsapiTicket", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField AUTHORIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("authorized", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField UNAUTHORIZED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unauthorizedTime", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField AUTHORIZER_REFRESH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizerRefreshToken", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField HR_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("hrChat", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField SHOW_QX_QRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("showQxQrcode", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField SHOW_CUSTOM_THEME_FIELD_DESC = new org.apache.thrift.protocol.TField("showCustomTheme", org.apache.thrift.protocol.TType.I32, (short)29);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrWxWechatDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrWxWechatDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public byte type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String signature; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String allonym; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String appid; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String secret; // optional
  public int welcome; // optional
  public int defMsg; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String qrcode; // optional
  public double passiveSeeker; // optional
  public double thirdOauth; // optional
  public double hrRegister; // optional
  public int accessTokenCreateTime; // optional
  public int accessTokenExpired; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jsapiTicket; // optional
  public double authorized; // optional
  public int unauthorizedTime; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String authorizerRefreshToken; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // optional
  public double hrChat; // optional
  public int showQxQrcode; // optional
  public int showCustomTheme; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    TYPE((short)3, "type"),
    SIGNATURE((short)4, "signature"),
    NAME((short)5, "name"),
    ALLONYM((short)6, "allonym"),
    USERNAME((short)7, "username"),
    PASSWORD((short)8, "password"),
    TOKEN((short)9, "token"),
    APPID((short)10, "appid"),
    SECRET((short)11, "secret"),
    WELCOME((short)12, "welcome"),
    DEF_MSG((short)13, "defMsg"),
    QRCODE((short)14, "qrcode"),
    PASSIVE_SEEKER((short)15, "passiveSeeker"),
    THIRD_OAUTH((short)16, "thirdOauth"),
    HR_REGISTER((short)17, "hrRegister"),
    ACCESS_TOKEN_CREATE_TIME((short)18, "accessTokenCreateTime"),
    ACCESS_TOKEN_EXPIRED((short)19, "accessTokenExpired"),
    ACCESS_TOKEN((short)20, "accessToken"),
    JSAPI_TICKET((short)21, "jsapiTicket"),
    AUTHORIZED((short)22, "authorized"),
    UNAUTHORIZED_TIME((short)23, "unauthorizedTime"),
    AUTHORIZER_REFRESH_TOKEN((short)24, "authorizerRefreshToken"),
    CREATE_TIME((short)25, "createTime"),
    UPDATE_TIME((short)26, "updateTime"),
    HR_CHAT((short)27, "hrChat"),
    SHOW_QX_QRCODE((short)28, "showQxQrcode"),
    SHOW_CUSTOM_THEME((short)29, "showCustomTheme");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // SIGNATURE
          return SIGNATURE;
        case 5: // NAME
          return NAME;
        case 6: // ALLONYM
          return ALLONYM;
        case 7: // USERNAME
          return USERNAME;
        case 8: // PASSWORD
          return PASSWORD;
        case 9: // TOKEN
          return TOKEN;
        case 10: // APPID
          return APPID;
        case 11: // SECRET
          return SECRET;
        case 12: // WELCOME
          return WELCOME;
        case 13: // DEF_MSG
          return DEF_MSG;
        case 14: // QRCODE
          return QRCODE;
        case 15: // PASSIVE_SEEKER
          return PASSIVE_SEEKER;
        case 16: // THIRD_OAUTH
          return THIRD_OAUTH;
        case 17: // HR_REGISTER
          return HR_REGISTER;
        case 18: // ACCESS_TOKEN_CREATE_TIME
          return ACCESS_TOKEN_CREATE_TIME;
        case 19: // ACCESS_TOKEN_EXPIRED
          return ACCESS_TOKEN_EXPIRED;
        case 20: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 21: // JSAPI_TICKET
          return JSAPI_TICKET;
        case 22: // AUTHORIZED
          return AUTHORIZED;
        case 23: // UNAUTHORIZED_TIME
          return UNAUTHORIZED_TIME;
        case 24: // AUTHORIZER_REFRESH_TOKEN
          return AUTHORIZER_REFRESH_TOKEN;
        case 25: // CREATE_TIME
          return CREATE_TIME;
        case 26: // UPDATE_TIME
          return UPDATE_TIME;
        case 27: // HR_CHAT
          return HR_CHAT;
        case 28: // SHOW_QX_QRCODE
          return SHOW_QX_QRCODE;
        case 29: // SHOW_CUSTOM_THEME
          return SHOW_CUSTOM_THEME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __WELCOME_ISSET_ID = 3;
  private static final int __DEFMSG_ISSET_ID = 4;
  private static final int __PASSIVESEEKER_ISSET_ID = 5;
  private static final int __THIRDOAUTH_ISSET_ID = 6;
  private static final int __HRREGISTER_ISSET_ID = 7;
  private static final int __ACCESSTOKENCREATETIME_ISSET_ID = 8;
  private static final int __ACCESSTOKENEXPIRED_ISSET_ID = 9;
  private static final int __AUTHORIZED_ISSET_ID = 10;
  private static final int __UNAUTHORIZEDTIME_ISSET_ID = 11;
  private static final int __HRCHAT_ISSET_ID = 12;
  private static final int __SHOWQXQRCODE_ISSET_ID = 13;
  private static final int __SHOWCUSTOMTHEME_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.TYPE,_Fields.SIGNATURE,_Fields.NAME,_Fields.ALLONYM,_Fields.USERNAME,_Fields.PASSWORD,_Fields.TOKEN,_Fields.APPID,_Fields.SECRET,_Fields.WELCOME,_Fields.DEF_MSG,_Fields.QRCODE,_Fields.PASSIVE_SEEKER,_Fields.THIRD_OAUTH,_Fields.HR_REGISTER,_Fields.ACCESS_TOKEN_CREATE_TIME,_Fields.ACCESS_TOKEN_EXPIRED,_Fields.ACCESS_TOKEN,_Fields.JSAPI_TICKET,_Fields.AUTHORIZED,_Fields.UNAUTHORIZED_TIME,_Fields.AUTHORIZER_REFRESH_TOKEN,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.HR_CHAT,_Fields.SHOW_QX_QRCODE,_Fields.SHOW_CUSTOM_THEME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLONYM, new org.apache.thrift.meta_data.FieldMetaData("allonym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET, new org.apache.thrift.meta_data.FieldMetaData("secret", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WELCOME, new org.apache.thrift.meta_data.FieldMetaData("welcome", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF_MSG, new org.apache.thrift.meta_data.FieldMetaData("defMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QRCODE, new org.apache.thrift.meta_data.FieldMetaData("qrcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSIVE_SEEKER, new org.apache.thrift.meta_data.FieldMetaData("passiveSeeker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.THIRD_OAUTH, new org.apache.thrift.meta_data.FieldMetaData("thirdOauth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HR_REGISTER, new org.apache.thrift.meta_data.FieldMetaData("hrRegister", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCESS_TOKEN_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("accessTokenCreateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN_EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("accessTokenExpired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSAPI_TICKET, new org.apache.thrift.meta_data.FieldMetaData("jsapiTicket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZED, new org.apache.thrift.meta_data.FieldMetaData("authorized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNAUTHORIZED_TIME, new org.apache.thrift.meta_data.FieldMetaData("unauthorizedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHORIZER_REFRESH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authorizerRefreshToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HR_CHAT, new org.apache.thrift.meta_data.FieldMetaData("hrChat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOW_QX_QRCODE, new org.apache.thrift.meta_data.FieldMetaData("showQxQrcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_CUSTOM_THEME, new org.apache.thrift.meta_data.FieldMetaData("showCustomTheme", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrWxWechatDO.class, metaDataMap);
  }

  public HrWxWechatDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrWxWechatDO(HrWxWechatDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    this.type = other.type;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAllonym()) {
      this.allonym = other.allonym;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetAppid()) {
      this.appid = other.appid;
    }
    if (other.isSetSecret()) {
      this.secret = other.secret;
    }
    this.welcome = other.welcome;
    this.defMsg = other.defMsg;
    if (other.isSetQrcode()) {
      this.qrcode = other.qrcode;
    }
    this.passiveSeeker = other.passiveSeeker;
    this.thirdOauth = other.thirdOauth;
    this.hrRegister = other.hrRegister;
    this.accessTokenCreateTime = other.accessTokenCreateTime;
    this.accessTokenExpired = other.accessTokenExpired;
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetJsapiTicket()) {
      this.jsapiTicket = other.jsapiTicket;
    }
    this.authorized = other.authorized;
    this.unauthorizedTime = other.unauthorizedTime;
    if (other.isSetAuthorizerRefreshToken()) {
      this.authorizerRefreshToken = other.authorizerRefreshToken;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.hrChat = other.hrChat;
    this.showQxQrcode = other.showQxQrcode;
    this.showCustomTheme = other.showCustomTheme;
  }

  public HrWxWechatDO deepCopy() {
    return new HrWxWechatDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.signature = null;
    this.name = null;
    this.allonym = null;
    this.username = null;
    this.password = null;
    this.token = null;
    this.appid = null;
    this.secret = null;
    setWelcomeIsSet(false);
    this.welcome = 0;
    setDefMsgIsSet(false);
    this.defMsg = 0;
    this.qrcode = null;
    setPassiveSeekerIsSet(false);
    this.passiveSeeker = 0.0;
    setThirdOauthIsSet(false);
    this.thirdOauth = 0.0;
    setHrRegisterIsSet(false);
    this.hrRegister = 0.0;
    setAccessTokenCreateTimeIsSet(false);
    this.accessTokenCreateTime = 0;
    setAccessTokenExpiredIsSet(false);
    this.accessTokenExpired = 0;
    this.accessToken = null;
    this.jsapiTicket = null;
    setAuthorizedIsSet(false);
    this.authorized = 0.0;
    setUnauthorizedTimeIsSet(false);
    this.unauthorizedTime = 0;
    this.authorizerRefreshToken = null;
    this.createTime = null;
    this.updateTime = null;
    setHrChatIsSet(false);
    this.hrChat = 0.0;
    setShowQxQrcodeIsSet(false);
    this.showQxQrcode = 0;
    setShowCustomThemeIsSet(false);
    this.showCustomTheme = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrWxWechatDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrWxWechatDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public HrWxWechatDO setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSignature() {
    return this.signature;
  }

  public HrWxWechatDO setSignature(@org.apache.thrift.annotation.Nullable java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public HrWxWechatDO setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAllonym() {
    return this.allonym;
  }

  public HrWxWechatDO setAllonym(@org.apache.thrift.annotation.Nullable java.lang.String allonym) {
    this.allonym = allonym;
    return this;
  }

  public void unsetAllonym() {
    this.allonym = null;
  }

  /** Returns true if field allonym is set (has been assigned a value) and false otherwise */
  public boolean isSetAllonym() {
    return this.allonym != null;
  }

  public void setAllonymIsSet(boolean value) {
    if (!value) {
      this.allonym = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public HrWxWechatDO setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public HrWxWechatDO setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public HrWxWechatDO setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppid() {
    return this.appid;
  }

  public HrWxWechatDO setAppid(@org.apache.thrift.annotation.Nullable java.lang.String appid) {
    this.appid = appid;
    return this;
  }

  public void unsetAppid() {
    this.appid = null;
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return this.appid != null;
  }

  public void setAppidIsSet(boolean value) {
    if (!value) {
      this.appid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecret() {
    return this.secret;
  }

  public HrWxWechatDO setSecret(@org.apache.thrift.annotation.Nullable java.lang.String secret) {
    this.secret = secret;
    return this;
  }

  public void unsetSecret() {
    this.secret = null;
  }

  /** Returns true if field secret is set (has been assigned a value) and false otherwise */
  public boolean isSetSecret() {
    return this.secret != null;
  }

  public void setSecretIsSet(boolean value) {
    if (!value) {
      this.secret = null;
    }
  }

  public int getWelcome() {
    return this.welcome;
  }

  public HrWxWechatDO setWelcome(int welcome) {
    this.welcome = welcome;
    setWelcomeIsSet(true);
    return this;
  }

  public void unsetWelcome() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WELCOME_ISSET_ID);
  }

  /** Returns true if field welcome is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcome() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WELCOME_ISSET_ID);
  }

  public void setWelcomeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WELCOME_ISSET_ID, value);
  }

  public int getDefMsg() {
    return this.defMsg;
  }

  public HrWxWechatDO setDefMsg(int defMsg) {
    this.defMsg = defMsg;
    setDefMsgIsSet(true);
    return this;
  }

  public void unsetDefMsg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEFMSG_ISSET_ID);
  }

  /** Returns true if field defMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetDefMsg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEFMSG_ISSET_ID);
  }

  public void setDefMsgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEFMSG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQrcode() {
    return this.qrcode;
  }

  public HrWxWechatDO setQrcode(@org.apache.thrift.annotation.Nullable java.lang.String qrcode) {
    this.qrcode = qrcode;
    return this;
  }

  public void unsetQrcode() {
    this.qrcode = null;
  }

  /** Returns true if field qrcode is set (has been assigned a value) and false otherwise */
  public boolean isSetQrcode() {
    return this.qrcode != null;
  }

  public void setQrcodeIsSet(boolean value) {
    if (!value) {
      this.qrcode = null;
    }
  }

  public double getPassiveSeeker() {
    return this.passiveSeeker;
  }

  public HrWxWechatDO setPassiveSeeker(double passiveSeeker) {
    this.passiveSeeker = passiveSeeker;
    setPassiveSeekerIsSet(true);
    return this;
  }

  public void unsetPassiveSeeker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PASSIVESEEKER_ISSET_ID);
  }

  /** Returns true if field passiveSeeker is set (has been assigned a value) and false otherwise */
  public boolean isSetPassiveSeeker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PASSIVESEEKER_ISSET_ID);
  }

  public void setPassiveSeekerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PASSIVESEEKER_ISSET_ID, value);
  }

  public double getThirdOauth() {
    return this.thirdOauth;
  }

  public HrWxWechatDO setThirdOauth(double thirdOauth) {
    this.thirdOauth = thirdOauth;
    setThirdOauthIsSet(true);
    return this;
  }

  public void unsetThirdOauth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THIRDOAUTH_ISSET_ID);
  }

  /** Returns true if field thirdOauth is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdOauth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THIRDOAUTH_ISSET_ID);
  }

  public void setThirdOauthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THIRDOAUTH_ISSET_ID, value);
  }

  public double getHrRegister() {
    return this.hrRegister;
  }

  public HrWxWechatDO setHrRegister(double hrRegister) {
    this.hrRegister = hrRegister;
    setHrRegisterIsSet(true);
    return this;
  }

  public void unsetHrRegister() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRREGISTER_ISSET_ID);
  }

  /** Returns true if field hrRegister is set (has been assigned a value) and false otherwise */
  public boolean isSetHrRegister() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRREGISTER_ISSET_ID);
  }

  public void setHrRegisterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRREGISTER_ISSET_ID, value);
  }

  public int getAccessTokenCreateTime() {
    return this.accessTokenCreateTime;
  }

  public HrWxWechatDO setAccessTokenCreateTime(int accessTokenCreateTime) {
    this.accessTokenCreateTime = accessTokenCreateTime;
    setAccessTokenCreateTimeIsSet(true);
    return this;
  }

  public void unsetAccessTokenCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSTOKENCREATETIME_ISSET_ID);
  }

  /** Returns true if field accessTokenCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessTokenCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSTOKENCREATETIME_ISSET_ID);
  }

  public void setAccessTokenCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSTOKENCREATETIME_ISSET_ID, value);
  }

  public int getAccessTokenExpired() {
    return this.accessTokenExpired;
  }

  public HrWxWechatDO setAccessTokenExpired(int accessTokenExpired) {
    this.accessTokenExpired = accessTokenExpired;
    setAccessTokenExpiredIsSet(true);
    return this;
  }

  public void unsetAccessTokenExpired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSTOKENEXPIRED_ISSET_ID);
  }

  /** Returns true if field accessTokenExpired is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessTokenExpired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSTOKENEXPIRED_ISSET_ID);
  }

  public void setAccessTokenExpiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSTOKENEXPIRED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccessToken() {
    return this.accessToken;
  }

  public HrWxWechatDO setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJsapiTicket() {
    return this.jsapiTicket;
  }

  public HrWxWechatDO setJsapiTicket(@org.apache.thrift.annotation.Nullable java.lang.String jsapiTicket) {
    this.jsapiTicket = jsapiTicket;
    return this;
  }

  public void unsetJsapiTicket() {
    this.jsapiTicket = null;
  }

  /** Returns true if field jsapiTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetJsapiTicket() {
    return this.jsapiTicket != null;
  }

  public void setJsapiTicketIsSet(boolean value) {
    if (!value) {
      this.jsapiTicket = null;
    }
  }

  public double getAuthorized() {
    return this.authorized;
  }

  public HrWxWechatDO setAuthorized(double authorized) {
    this.authorized = authorized;
    setAuthorizedIsSet(true);
    return this;
  }

  public void unsetAuthorized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTHORIZED_ISSET_ID);
  }

  /** Returns true if field authorized is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTHORIZED_ISSET_ID);
  }

  public void setAuthorizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTHORIZED_ISSET_ID, value);
  }

  public int getUnauthorizedTime() {
    return this.unauthorizedTime;
  }

  public HrWxWechatDO setUnauthorizedTime(int unauthorizedTime) {
    this.unauthorizedTime = unauthorizedTime;
    setUnauthorizedTimeIsSet(true);
    return this;
  }

  public void unsetUnauthorizedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNAUTHORIZEDTIME_ISSET_ID);
  }

  /** Returns true if field unauthorizedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUnauthorizedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNAUTHORIZEDTIME_ISSET_ID);
  }

  public void setUnauthorizedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNAUTHORIZEDTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthorizerRefreshToken() {
    return this.authorizerRefreshToken;
  }

  public HrWxWechatDO setAuthorizerRefreshToken(@org.apache.thrift.annotation.Nullable java.lang.String authorizerRefreshToken) {
    this.authorizerRefreshToken = authorizerRefreshToken;
    return this;
  }

  public void unsetAuthorizerRefreshToken() {
    this.authorizerRefreshToken = null;
  }

  /** Returns true if field authorizerRefreshToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorizerRefreshToken() {
    return this.authorizerRefreshToken != null;
  }

  public void setAuthorizerRefreshTokenIsSet(boolean value) {
    if (!value) {
      this.authorizerRefreshToken = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public HrWxWechatDO setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public HrWxWechatDO setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public double getHrChat() {
    return this.hrChat;
  }

  public HrWxWechatDO setHrChat(double hrChat) {
    this.hrChat = hrChat;
    setHrChatIsSet(true);
    return this;
  }

  public void unsetHrChat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRCHAT_ISSET_ID);
  }

  /** Returns true if field hrChat is set (has been assigned a value) and false otherwise */
  public boolean isSetHrChat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRCHAT_ISSET_ID);
  }

  public void setHrChatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRCHAT_ISSET_ID, value);
  }

  public int getShowQxQrcode() {
    return this.showQxQrcode;
  }

  public HrWxWechatDO setShowQxQrcode(int showQxQrcode) {
    this.showQxQrcode = showQxQrcode;
    setShowQxQrcodeIsSet(true);
    return this;
  }

  public void unsetShowQxQrcode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOWQXQRCODE_ISSET_ID);
  }

  /** Returns true if field showQxQrcode is set (has been assigned a value) and false otherwise */
  public boolean isSetShowQxQrcode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOWQXQRCODE_ISSET_ID);
  }

  public void setShowQxQrcodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOWQXQRCODE_ISSET_ID, value);
  }

  public int getShowCustomTheme() {
    return this.showCustomTheme;
  }

  public HrWxWechatDO setShowCustomTheme(int showCustomTheme) {
    this.showCustomTheme = showCustomTheme;
    setShowCustomThemeIsSet(true);
    return this;
  }

  public void unsetShowCustomTheme() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOWCUSTOMTHEME_ISSET_ID);
  }

  /** Returns true if field showCustomTheme is set (has been assigned a value) and false otherwise */
  public boolean isSetShowCustomTheme() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOWCUSTOMTHEME_ISSET_ID);
  }

  public void setShowCustomThemeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOWCUSTOMTHEME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Byte)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ALLONYM:
      if (value == null) {
        unsetAllonym();
      } else {
        setAllonym((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((java.lang.String)value);
      }
      break;

    case SECRET:
      if (value == null) {
        unsetSecret();
      } else {
        setSecret((java.lang.String)value);
      }
      break;

    case WELCOME:
      if (value == null) {
        unsetWelcome();
      } else {
        setWelcome((java.lang.Integer)value);
      }
      break;

    case DEF_MSG:
      if (value == null) {
        unsetDefMsg();
      } else {
        setDefMsg((java.lang.Integer)value);
      }
      break;

    case QRCODE:
      if (value == null) {
        unsetQrcode();
      } else {
        setQrcode((java.lang.String)value);
      }
      break;

    case PASSIVE_SEEKER:
      if (value == null) {
        unsetPassiveSeeker();
      } else {
        setPassiveSeeker((java.lang.Double)value);
      }
      break;

    case THIRD_OAUTH:
      if (value == null) {
        unsetThirdOauth();
      } else {
        setThirdOauth((java.lang.Double)value);
      }
      break;

    case HR_REGISTER:
      if (value == null) {
        unsetHrRegister();
      } else {
        setHrRegister((java.lang.Double)value);
      }
      break;

    case ACCESS_TOKEN_CREATE_TIME:
      if (value == null) {
        unsetAccessTokenCreateTime();
      } else {
        setAccessTokenCreateTime((java.lang.Integer)value);
      }
      break;

    case ACCESS_TOKEN_EXPIRED:
      if (value == null) {
        unsetAccessTokenExpired();
      } else {
        setAccessTokenExpired((java.lang.Integer)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((java.lang.String)value);
      }
      break;

    case JSAPI_TICKET:
      if (value == null) {
        unsetJsapiTicket();
      } else {
        setJsapiTicket((java.lang.String)value);
      }
      break;

    case AUTHORIZED:
      if (value == null) {
        unsetAuthorized();
      } else {
        setAuthorized((java.lang.Double)value);
      }
      break;

    case UNAUTHORIZED_TIME:
      if (value == null) {
        unsetUnauthorizedTime();
      } else {
        setUnauthorizedTime((java.lang.Integer)value);
      }
      break;

    case AUTHORIZER_REFRESH_TOKEN:
      if (value == null) {
        unsetAuthorizerRefreshToken();
      } else {
        setAuthorizerRefreshToken((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case HR_CHAT:
      if (value == null) {
        unsetHrChat();
      } else {
        setHrChat((java.lang.Double)value);
      }
      break;

    case SHOW_QX_QRCODE:
      if (value == null) {
        unsetShowQxQrcode();
      } else {
        setShowQxQrcode((java.lang.Integer)value);
      }
      break;

    case SHOW_CUSTOM_THEME:
      if (value == null) {
        unsetShowCustomTheme();
      } else {
        setShowCustomTheme((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case TYPE:
      return getType();

    case SIGNATURE:
      return getSignature();

    case NAME:
      return getName();

    case ALLONYM:
      return getAllonym();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case TOKEN:
      return getToken();

    case APPID:
      return getAppid();

    case SECRET:
      return getSecret();

    case WELCOME:
      return getWelcome();

    case DEF_MSG:
      return getDefMsg();

    case QRCODE:
      return getQrcode();

    case PASSIVE_SEEKER:
      return getPassiveSeeker();

    case THIRD_OAUTH:
      return getThirdOauth();

    case HR_REGISTER:
      return getHrRegister();

    case ACCESS_TOKEN_CREATE_TIME:
      return getAccessTokenCreateTime();

    case ACCESS_TOKEN_EXPIRED:
      return getAccessTokenExpired();

    case ACCESS_TOKEN:
      return getAccessToken();

    case JSAPI_TICKET:
      return getJsapiTicket();

    case AUTHORIZED:
      return getAuthorized();

    case UNAUTHORIZED_TIME:
      return getUnauthorizedTime();

    case AUTHORIZER_REFRESH_TOKEN:
      return getAuthorizerRefreshToken();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case HR_CHAT:
      return getHrChat();

    case SHOW_QX_QRCODE:
      return getShowQxQrcode();

    case SHOW_CUSTOM_THEME:
      return getShowCustomTheme();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case TYPE:
      return isSetType();
    case SIGNATURE:
      return isSetSignature();
    case NAME:
      return isSetName();
    case ALLONYM:
      return isSetAllonym();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case TOKEN:
      return isSetToken();
    case APPID:
      return isSetAppid();
    case SECRET:
      return isSetSecret();
    case WELCOME:
      return isSetWelcome();
    case DEF_MSG:
      return isSetDefMsg();
    case QRCODE:
      return isSetQrcode();
    case PASSIVE_SEEKER:
      return isSetPassiveSeeker();
    case THIRD_OAUTH:
      return isSetThirdOauth();
    case HR_REGISTER:
      return isSetHrRegister();
    case ACCESS_TOKEN_CREATE_TIME:
      return isSetAccessTokenCreateTime();
    case ACCESS_TOKEN_EXPIRED:
      return isSetAccessTokenExpired();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case JSAPI_TICKET:
      return isSetJsapiTicket();
    case AUTHORIZED:
      return isSetAuthorized();
    case UNAUTHORIZED_TIME:
      return isSetUnauthorizedTime();
    case AUTHORIZER_REFRESH_TOKEN:
      return isSetAuthorizerRefreshToken();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case HR_CHAT:
      return isSetHrChat();
    case SHOW_QX_QRCODE:
      return isSetShowQxQrcode();
    case SHOW_CUSTOM_THEME:
      return isSetShowCustomTheme();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrWxWechatDO)
      return this.equals((HrWxWechatDO)that);
    return false;
  }

  public boolean equals(HrWxWechatDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_allonym = true && this.isSetAllonym();
    boolean that_present_allonym = true && that.isSetAllonym();
    if (this_present_allonym || that_present_allonym) {
      if (!(this_present_allonym && that_present_allonym))
        return false;
      if (!this.allonym.equals(that.allonym))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_appid = true && this.isSetAppid();
    boolean that_present_appid = true && that.isSetAppid();
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (!this.appid.equals(that.appid))
        return false;
    }

    boolean this_present_secret = true && this.isSetSecret();
    boolean that_present_secret = true && that.isSetSecret();
    if (this_present_secret || that_present_secret) {
      if (!(this_present_secret && that_present_secret))
        return false;
      if (!this.secret.equals(that.secret))
        return false;
    }

    boolean this_present_welcome = true && this.isSetWelcome();
    boolean that_present_welcome = true && that.isSetWelcome();
    if (this_present_welcome || that_present_welcome) {
      if (!(this_present_welcome && that_present_welcome))
        return false;
      if (this.welcome != that.welcome)
        return false;
    }

    boolean this_present_defMsg = true && this.isSetDefMsg();
    boolean that_present_defMsg = true && that.isSetDefMsg();
    if (this_present_defMsg || that_present_defMsg) {
      if (!(this_present_defMsg && that_present_defMsg))
        return false;
      if (this.defMsg != that.defMsg)
        return false;
    }

    boolean this_present_qrcode = true && this.isSetQrcode();
    boolean that_present_qrcode = true && that.isSetQrcode();
    if (this_present_qrcode || that_present_qrcode) {
      if (!(this_present_qrcode && that_present_qrcode))
        return false;
      if (!this.qrcode.equals(that.qrcode))
        return false;
    }

    boolean this_present_passiveSeeker = true && this.isSetPassiveSeeker();
    boolean that_present_passiveSeeker = true && that.isSetPassiveSeeker();
    if (this_present_passiveSeeker || that_present_passiveSeeker) {
      if (!(this_present_passiveSeeker && that_present_passiveSeeker))
        return false;
      if (this.passiveSeeker != that.passiveSeeker)
        return false;
    }

    boolean this_present_thirdOauth = true && this.isSetThirdOauth();
    boolean that_present_thirdOauth = true && that.isSetThirdOauth();
    if (this_present_thirdOauth || that_present_thirdOauth) {
      if (!(this_present_thirdOauth && that_present_thirdOauth))
        return false;
      if (this.thirdOauth != that.thirdOauth)
        return false;
    }

    boolean this_present_hrRegister = true && this.isSetHrRegister();
    boolean that_present_hrRegister = true && that.isSetHrRegister();
    if (this_present_hrRegister || that_present_hrRegister) {
      if (!(this_present_hrRegister && that_present_hrRegister))
        return false;
      if (this.hrRegister != that.hrRegister)
        return false;
    }

    boolean this_present_accessTokenCreateTime = true && this.isSetAccessTokenCreateTime();
    boolean that_present_accessTokenCreateTime = true && that.isSetAccessTokenCreateTime();
    if (this_present_accessTokenCreateTime || that_present_accessTokenCreateTime) {
      if (!(this_present_accessTokenCreateTime && that_present_accessTokenCreateTime))
        return false;
      if (this.accessTokenCreateTime != that.accessTokenCreateTime)
        return false;
    }

    boolean this_present_accessTokenExpired = true && this.isSetAccessTokenExpired();
    boolean that_present_accessTokenExpired = true && that.isSetAccessTokenExpired();
    if (this_present_accessTokenExpired || that_present_accessTokenExpired) {
      if (!(this_present_accessTokenExpired && that_present_accessTokenExpired))
        return false;
      if (this.accessTokenExpired != that.accessTokenExpired)
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_jsapiTicket = true && this.isSetJsapiTicket();
    boolean that_present_jsapiTicket = true && that.isSetJsapiTicket();
    if (this_present_jsapiTicket || that_present_jsapiTicket) {
      if (!(this_present_jsapiTicket && that_present_jsapiTicket))
        return false;
      if (!this.jsapiTicket.equals(that.jsapiTicket))
        return false;
    }

    boolean this_present_authorized = true && this.isSetAuthorized();
    boolean that_present_authorized = true && that.isSetAuthorized();
    if (this_present_authorized || that_present_authorized) {
      if (!(this_present_authorized && that_present_authorized))
        return false;
      if (this.authorized != that.authorized)
        return false;
    }

    boolean this_present_unauthorizedTime = true && this.isSetUnauthorizedTime();
    boolean that_present_unauthorizedTime = true && that.isSetUnauthorizedTime();
    if (this_present_unauthorizedTime || that_present_unauthorizedTime) {
      if (!(this_present_unauthorizedTime && that_present_unauthorizedTime))
        return false;
      if (this.unauthorizedTime != that.unauthorizedTime)
        return false;
    }

    boolean this_present_authorizerRefreshToken = true && this.isSetAuthorizerRefreshToken();
    boolean that_present_authorizerRefreshToken = true && that.isSetAuthorizerRefreshToken();
    if (this_present_authorizerRefreshToken || that_present_authorizerRefreshToken) {
      if (!(this_present_authorizerRefreshToken && that_present_authorizerRefreshToken))
        return false;
      if (!this.authorizerRefreshToken.equals(that.authorizerRefreshToken))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_hrChat = true && this.isSetHrChat();
    boolean that_present_hrChat = true && that.isSetHrChat();
    if (this_present_hrChat || that_present_hrChat) {
      if (!(this_present_hrChat && that_present_hrChat))
        return false;
      if (this.hrChat != that.hrChat)
        return false;
    }

    boolean this_present_showQxQrcode = true && this.isSetShowQxQrcode();
    boolean that_present_showQxQrcode = true && that.isSetShowQxQrcode();
    if (this_present_showQxQrcode || that_present_showQxQrcode) {
      if (!(this_present_showQxQrcode && that_present_showQxQrcode))
        return false;
      if (this.showQxQrcode != that.showQxQrcode)
        return false;
    }

    boolean this_present_showCustomTheme = true && this.isSetShowCustomTheme();
    boolean that_present_showCustomTheme = true && that.isSetShowCustomTheme();
    if (this_present_showCustomTheme || that_present_showCustomTheme) {
      if (!(this_present_showCustomTheme && that_present_showCustomTheme))
        return false;
      if (this.showCustomTheme != that.showCustomTheme)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllonym()) ? 131071 : 524287);
    if (isSetAllonym())
      hashCode = hashCode * 8191 + allonym.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppid()) ? 131071 : 524287);
    if (isSetAppid())
      hashCode = hashCode * 8191 + appid.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecret()) ? 131071 : 524287);
    if (isSetSecret())
      hashCode = hashCode * 8191 + secret.hashCode();

    hashCode = hashCode * 8191 + ((isSetWelcome()) ? 131071 : 524287);
    if (isSetWelcome())
      hashCode = hashCode * 8191 + welcome;

    hashCode = hashCode * 8191 + ((isSetDefMsg()) ? 131071 : 524287);
    if (isSetDefMsg())
      hashCode = hashCode * 8191 + defMsg;

    hashCode = hashCode * 8191 + ((isSetQrcode()) ? 131071 : 524287);
    if (isSetQrcode())
      hashCode = hashCode * 8191 + qrcode.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassiveSeeker()) ? 131071 : 524287);
    if (isSetPassiveSeeker())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(passiveSeeker);

    hashCode = hashCode * 8191 + ((isSetThirdOauth()) ? 131071 : 524287);
    if (isSetThirdOauth())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(thirdOauth);

    hashCode = hashCode * 8191 + ((isSetHrRegister()) ? 131071 : 524287);
    if (isSetHrRegister())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hrRegister);

    hashCode = hashCode * 8191 + ((isSetAccessTokenCreateTime()) ? 131071 : 524287);
    if (isSetAccessTokenCreateTime())
      hashCode = hashCode * 8191 + accessTokenCreateTime;

    hashCode = hashCode * 8191 + ((isSetAccessTokenExpired()) ? 131071 : 524287);
    if (isSetAccessTokenExpired())
      hashCode = hashCode * 8191 + accessTokenExpired;

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetJsapiTicket()) ? 131071 : 524287);
    if (isSetJsapiTicket())
      hashCode = hashCode * 8191 + jsapiTicket.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthorized()) ? 131071 : 524287);
    if (isSetAuthorized())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(authorized);

    hashCode = hashCode * 8191 + ((isSetUnauthorizedTime()) ? 131071 : 524287);
    if (isSetUnauthorizedTime())
      hashCode = hashCode * 8191 + unauthorizedTime;

    hashCode = hashCode * 8191 + ((isSetAuthorizerRefreshToken()) ? 131071 : 524287);
    if (isSetAuthorizerRefreshToken())
      hashCode = hashCode * 8191 + authorizerRefreshToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetHrChat()) ? 131071 : 524287);
    if (isSetHrChat())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hrChat);

    hashCode = hashCode * 8191 + ((isSetShowQxQrcode()) ? 131071 : 524287);
    if (isSetShowQxQrcode())
      hashCode = hashCode * 8191 + showQxQrcode;

    hashCode = hashCode * 8191 + ((isSetShowCustomTheme()) ? 131071 : 524287);
    if (isSetShowCustomTheme())
      hashCode = hashCode * 8191 + showCustomTheme;

    return hashCode;
  }

  @Override
  public int compareTo(HrWxWechatDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAllonym()).compareTo(other.isSetAllonym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllonym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allonym, other.allonym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecret()).compareTo(other.isSetSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret, other.secret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWelcome()).compareTo(other.isSetWelcome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welcome, other.welcome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefMsg()).compareTo(other.isSetDefMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defMsg, other.defMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQrcode()).compareTo(other.isSetQrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQrcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qrcode, other.qrcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassiveSeeker()).compareTo(other.isSetPassiveSeeker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassiveSeeker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passiveSeeker, other.passiveSeeker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThirdOauth()).compareTo(other.isSetThirdOauth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdOauth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdOauth, other.thirdOauth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrRegister()).compareTo(other.isSetHrRegister());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrRegister()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrRegister, other.hrRegister);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessTokenCreateTime()).compareTo(other.isSetAccessTokenCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessTokenCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessTokenCreateTime, other.accessTokenCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessTokenExpired()).compareTo(other.isSetAccessTokenExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessTokenExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessTokenExpired, other.accessTokenExpired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJsapiTicket()).compareTo(other.isSetJsapiTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsapiTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsapiTicket, other.jsapiTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthorized()).compareTo(other.isSetAuthorized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorized, other.authorized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnauthorizedTime()).compareTo(other.isSetUnauthorizedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnauthorizedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unauthorizedTime, other.unauthorizedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthorizerRefreshToken()).compareTo(other.isSetAuthorizerRefreshToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorizerRefreshToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizerRefreshToken, other.authorizerRefreshToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrChat()).compareTo(other.isSetHrChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrChat, other.hrChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShowQxQrcode()).compareTo(other.isSetShowQxQrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowQxQrcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showQxQrcode, other.showQxQrcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShowCustomTheme()).compareTo(other.isSetShowCustomTheme());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowCustomTheme()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showCustomTheme, other.showCustomTheme);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrWxWechatDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetAllonym()) {
      if (!first) sb.append(", ");
      sb.append("allonym:");
      if (this.allonym == null) {
        sb.append("null");
      } else {
        sb.append(this.allonym);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetAppid()) {
      if (!first) sb.append(", ");
      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
    }
    if (isSetSecret()) {
      if (!first) sb.append(", ");
      sb.append("secret:");
      if (this.secret == null) {
        sb.append("null");
      } else {
        sb.append(this.secret);
      }
      first = false;
    }
    if (isSetWelcome()) {
      if (!first) sb.append(", ");
      sb.append("welcome:");
      sb.append(this.welcome);
      first = false;
    }
    if (isSetDefMsg()) {
      if (!first) sb.append(", ");
      sb.append("defMsg:");
      sb.append(this.defMsg);
      first = false;
    }
    if (isSetQrcode()) {
      if (!first) sb.append(", ");
      sb.append("qrcode:");
      if (this.qrcode == null) {
        sb.append("null");
      } else {
        sb.append(this.qrcode);
      }
      first = false;
    }
    if (isSetPassiveSeeker()) {
      if (!first) sb.append(", ");
      sb.append("passiveSeeker:");
      sb.append(this.passiveSeeker);
      first = false;
    }
    if (isSetThirdOauth()) {
      if (!first) sb.append(", ");
      sb.append("thirdOauth:");
      sb.append(this.thirdOauth);
      first = false;
    }
    if (isSetHrRegister()) {
      if (!first) sb.append(", ");
      sb.append("hrRegister:");
      sb.append(this.hrRegister);
      first = false;
    }
    if (isSetAccessTokenCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("accessTokenCreateTime:");
      sb.append(this.accessTokenCreateTime);
      first = false;
    }
    if (isSetAccessTokenExpired()) {
      if (!first) sb.append(", ");
      sb.append("accessTokenExpired:");
      sb.append(this.accessTokenExpired);
      first = false;
    }
    if (isSetAccessToken()) {
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
    }
    if (isSetJsapiTicket()) {
      if (!first) sb.append(", ");
      sb.append("jsapiTicket:");
      if (this.jsapiTicket == null) {
        sb.append("null");
      } else {
        sb.append(this.jsapiTicket);
      }
      first = false;
    }
    if (isSetAuthorized()) {
      if (!first) sb.append(", ");
      sb.append("authorized:");
      sb.append(this.authorized);
      first = false;
    }
    if (isSetUnauthorizedTime()) {
      if (!first) sb.append(", ");
      sb.append("unauthorizedTime:");
      sb.append(this.unauthorizedTime);
      first = false;
    }
    if (isSetAuthorizerRefreshToken()) {
      if (!first) sb.append(", ");
      sb.append("authorizerRefreshToken:");
      if (this.authorizerRefreshToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizerRefreshToken);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetHrChat()) {
      if (!first) sb.append(", ");
      sb.append("hrChat:");
      sb.append(this.hrChat);
      first = false;
    }
    if (isSetShowQxQrcode()) {
      if (!first) sb.append(", ");
      sb.append("showQxQrcode:");
      sb.append(this.showQxQrcode);
      first = false;
    }
    if (isSetShowCustomTheme()) {
      if (!first) sb.append(", ");
      sb.append("showCustomTheme:");
      sb.append(this.showCustomTheme);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrWxWechatDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrWxWechatDOStandardScheme getScheme() {
      return new HrWxWechatDOStandardScheme();
    }
  }

  private static class HrWxWechatDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrWxWechatDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrWxWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALLONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allonym = iprot.readString();
              struct.setAllonymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appid = iprot.readString();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secret = iprot.readString();
              struct.setSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WELCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.welcome = iprot.readI32();
              struct.setWelcomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEF_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defMsg = iprot.readI32();
              struct.setDefMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QRCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qrcode = iprot.readString();
              struct.setQrcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PASSIVE_SEEKER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.passiveSeeker = iprot.readDouble();
              struct.setPassiveSeekerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // THIRD_OAUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.thirdOauth = iprot.readDouble();
              struct.setThirdOauthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HR_REGISTER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hrRegister = iprot.readDouble();
              struct.setHrRegisterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACCESS_TOKEN_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessTokenCreateTime = iprot.readI32();
              struct.setAccessTokenCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACCESS_TOKEN_EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessTokenExpired = iprot.readI32();
              struct.setAccessTokenExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // JSAPI_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsapiTicket = iprot.readString();
              struct.setJsapiTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // AUTHORIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.authorized = iprot.readDouble();
              struct.setAuthorizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UNAUTHORIZED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unauthorizedTime = iprot.readI32();
              struct.setUnauthorizedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AUTHORIZER_REFRESH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorizerRefreshToken = iprot.readString();
              struct.setAuthorizerRefreshTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HR_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hrChat = iprot.readDouble();
              struct.setHrChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SHOW_QX_QRCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showQxQrcode = iprot.readI32();
              struct.setShowQxQrcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SHOW_CUSTOM_THEME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showCustomTheme = iprot.readI32();
              struct.setShowCustomThemeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrWxWechatDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.allonym != null) {
        if (struct.isSetAllonym()) {
          oprot.writeFieldBegin(ALLONYM_FIELD_DESC);
          oprot.writeString(struct.allonym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appid != null) {
        if (struct.isSetAppid()) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secret != null) {
        if (struct.isSetSecret()) {
          oprot.writeFieldBegin(SECRET_FIELD_DESC);
          oprot.writeString(struct.secret);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWelcome()) {
        oprot.writeFieldBegin(WELCOME_FIELD_DESC);
        oprot.writeI32(struct.welcome);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefMsg()) {
        oprot.writeFieldBegin(DEF_MSG_FIELD_DESC);
        oprot.writeI32(struct.defMsg);
        oprot.writeFieldEnd();
      }
      if (struct.qrcode != null) {
        if (struct.isSetQrcode()) {
          oprot.writeFieldBegin(QRCODE_FIELD_DESC);
          oprot.writeString(struct.qrcode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPassiveSeeker()) {
        oprot.writeFieldBegin(PASSIVE_SEEKER_FIELD_DESC);
        oprot.writeDouble(struct.passiveSeeker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThirdOauth()) {
        oprot.writeFieldBegin(THIRD_OAUTH_FIELD_DESC);
        oprot.writeDouble(struct.thirdOauth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHrRegister()) {
        oprot.writeFieldBegin(HR_REGISTER_FIELD_DESC);
        oprot.writeDouble(struct.hrRegister);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccessTokenCreateTime()) {
        oprot.writeFieldBegin(ACCESS_TOKEN_CREATE_TIME_FIELD_DESC);
        oprot.writeI32(struct.accessTokenCreateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccessTokenExpired()) {
        oprot.writeFieldBegin(ACCESS_TOKEN_EXPIRED_FIELD_DESC);
        oprot.writeI32(struct.accessTokenExpired);
        oprot.writeFieldEnd();
      }
      if (struct.accessToken != null) {
        if (struct.isSetAccessToken()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jsapiTicket != null) {
        if (struct.isSetJsapiTicket()) {
          oprot.writeFieldBegin(JSAPI_TICKET_FIELD_DESC);
          oprot.writeString(struct.jsapiTicket);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuthorized()) {
        oprot.writeFieldBegin(AUTHORIZED_FIELD_DESC);
        oprot.writeDouble(struct.authorized);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnauthorizedTime()) {
        oprot.writeFieldBegin(UNAUTHORIZED_TIME_FIELD_DESC);
        oprot.writeI32(struct.unauthorizedTime);
        oprot.writeFieldEnd();
      }
      if (struct.authorizerRefreshToken != null) {
        if (struct.isSetAuthorizerRefreshToken()) {
          oprot.writeFieldBegin(AUTHORIZER_REFRESH_TOKEN_FIELD_DESC);
          oprot.writeString(struct.authorizerRefreshToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHrChat()) {
        oprot.writeFieldBegin(HR_CHAT_FIELD_DESC);
        oprot.writeDouble(struct.hrChat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShowQxQrcode()) {
        oprot.writeFieldBegin(SHOW_QX_QRCODE_FIELD_DESC);
        oprot.writeI32(struct.showQxQrcode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShowCustomTheme()) {
        oprot.writeFieldBegin(SHOW_CUSTOM_THEME_FIELD_DESC);
        oprot.writeI32(struct.showCustomTheme);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrWxWechatDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrWxWechatDOTupleScheme getScheme() {
      return new HrWxWechatDOTupleScheme();
    }
  }

  private static class HrWxWechatDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrWxWechatDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrWxWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetSignature()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetAllonym()) {
        optionals.set(5);
      }
      if (struct.isSetUsername()) {
        optionals.set(6);
      }
      if (struct.isSetPassword()) {
        optionals.set(7);
      }
      if (struct.isSetToken()) {
        optionals.set(8);
      }
      if (struct.isSetAppid()) {
        optionals.set(9);
      }
      if (struct.isSetSecret()) {
        optionals.set(10);
      }
      if (struct.isSetWelcome()) {
        optionals.set(11);
      }
      if (struct.isSetDefMsg()) {
        optionals.set(12);
      }
      if (struct.isSetQrcode()) {
        optionals.set(13);
      }
      if (struct.isSetPassiveSeeker()) {
        optionals.set(14);
      }
      if (struct.isSetThirdOauth()) {
        optionals.set(15);
      }
      if (struct.isSetHrRegister()) {
        optionals.set(16);
      }
      if (struct.isSetAccessTokenCreateTime()) {
        optionals.set(17);
      }
      if (struct.isSetAccessTokenExpired()) {
        optionals.set(18);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(19);
      }
      if (struct.isSetJsapiTicket()) {
        optionals.set(20);
      }
      if (struct.isSetAuthorized()) {
        optionals.set(21);
      }
      if (struct.isSetUnauthorizedTime()) {
        optionals.set(22);
      }
      if (struct.isSetAuthorizerRefreshToken()) {
        optionals.set(23);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(24);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(25);
      }
      if (struct.isSetHrChat()) {
        optionals.set(26);
      }
      if (struct.isSetShowQxQrcode()) {
        optionals.set(27);
      }
      if (struct.isSetShowCustomTheme()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAllonym()) {
        oprot.writeString(struct.allonym);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetAppid()) {
        oprot.writeString(struct.appid);
      }
      if (struct.isSetSecret()) {
        oprot.writeString(struct.secret);
      }
      if (struct.isSetWelcome()) {
        oprot.writeI32(struct.welcome);
      }
      if (struct.isSetDefMsg()) {
        oprot.writeI32(struct.defMsg);
      }
      if (struct.isSetQrcode()) {
        oprot.writeString(struct.qrcode);
      }
      if (struct.isSetPassiveSeeker()) {
        oprot.writeDouble(struct.passiveSeeker);
      }
      if (struct.isSetThirdOauth()) {
        oprot.writeDouble(struct.thirdOauth);
      }
      if (struct.isSetHrRegister()) {
        oprot.writeDouble(struct.hrRegister);
      }
      if (struct.isSetAccessTokenCreateTime()) {
        oprot.writeI32(struct.accessTokenCreateTime);
      }
      if (struct.isSetAccessTokenExpired()) {
        oprot.writeI32(struct.accessTokenExpired);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetJsapiTicket()) {
        oprot.writeString(struct.jsapiTicket);
      }
      if (struct.isSetAuthorized()) {
        oprot.writeDouble(struct.authorized);
      }
      if (struct.isSetUnauthorizedTime()) {
        oprot.writeI32(struct.unauthorizedTime);
      }
      if (struct.isSetAuthorizerRefreshToken()) {
        oprot.writeString(struct.authorizerRefreshToken);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetHrChat()) {
        oprot.writeDouble(struct.hrChat);
      }
      if (struct.isSetShowQxQrcode()) {
        oprot.writeI32(struct.showQxQrcode);
      }
      if (struct.isSetShowCustomTheme()) {
        oprot.writeI32(struct.showCustomTheme);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrWxWechatDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.allonym = iprot.readString();
        struct.setAllonymIsSet(true);
      }
      if (incoming.get(6)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(8)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.appid = iprot.readString();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.secret = iprot.readString();
        struct.setSecretIsSet(true);
      }
      if (incoming.get(11)) {
        struct.welcome = iprot.readI32();
        struct.setWelcomeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.defMsg = iprot.readI32();
        struct.setDefMsgIsSet(true);
      }
      if (incoming.get(13)) {
        struct.qrcode = iprot.readString();
        struct.setQrcodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.passiveSeeker = iprot.readDouble();
        struct.setPassiveSeekerIsSet(true);
      }
      if (incoming.get(15)) {
        struct.thirdOauth = iprot.readDouble();
        struct.setThirdOauthIsSet(true);
      }
      if (incoming.get(16)) {
        struct.hrRegister = iprot.readDouble();
        struct.setHrRegisterIsSet(true);
      }
      if (incoming.get(17)) {
        struct.accessTokenCreateTime = iprot.readI32();
        struct.setAccessTokenCreateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.accessTokenExpired = iprot.readI32();
        struct.setAccessTokenExpiredIsSet(true);
      }
      if (incoming.get(19)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(20)) {
        struct.jsapiTicket = iprot.readString();
        struct.setJsapiTicketIsSet(true);
      }
      if (incoming.get(21)) {
        struct.authorized = iprot.readDouble();
        struct.setAuthorizedIsSet(true);
      }
      if (incoming.get(22)) {
        struct.unauthorizedTime = iprot.readI32();
        struct.setUnauthorizedTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.authorizerRefreshToken = iprot.readString();
        struct.setAuthorizerRefreshTokenIsSet(true);
      }
      if (incoming.get(24)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.hrChat = iprot.readDouble();
        struct.setHrChatIsSet(true);
      }
      if (incoming.get(27)) {
        struct.showQxQrcode = iprot.readI32();
        struct.setShowQxQrcodeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.showCustomTheme = iprot.readI32();
        struct.setShowCustomThemeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

