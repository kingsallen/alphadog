/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-20")
public class HrThirdPartyPositionDO implements org.apache.thrift.TBase<HrThirdPartyPositionDO, HrThirdPartyPositionDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrThirdPartyPositionDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrThirdPartyPositionDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField THIRD_PART_POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartPositionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SYNCHRONIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isSynchronization", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("isRefresh", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("syncTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REFRESH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SYNC_FAIL_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("syncFailReason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField USE_COMPANY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("useCompanyAddress", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrThirdPartyPositionDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrThirdPartyPositionDOTupleSchemeFactory();

  public int id; // optional
  public int positionId; // optional
  public java.lang.String thirdPartPositionId; // optional
  public int channel; // optional
  public int isSynchronization; // optional
  public int isRefresh; // optional
  public java.lang.String syncTime; // optional
  public java.lang.String refreshTime; // optional
  public java.lang.String updateTime; // optional
  public java.lang.String address; // optional
  public java.lang.String occupation; // optional
  public java.lang.String syncFailReason; // optional
  public int useCompanyAddress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POSITION_ID((short)2, "positionId"),
    THIRD_PART_POSITION_ID((short)3, "thirdPartPositionId"),
    CHANNEL((short)4, "channel"),
    IS_SYNCHRONIZATION((short)5, "isSynchronization"),
    IS_REFRESH((short)6, "isRefresh"),
    SYNC_TIME((short)7, "syncTime"),
    REFRESH_TIME((short)8, "refreshTime"),
    UPDATE_TIME((short)9, "updateTime"),
    ADDRESS((short)10, "address"),
    OCCUPATION((short)11, "occupation"),
    SYNC_FAIL_REASON((short)12, "syncFailReason"),
    USE_COMPANY_ADDRESS((short)13, "useCompanyAddress");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POSITION_ID
          return POSITION_ID;
        case 3: // THIRD_PART_POSITION_ID
          return THIRD_PART_POSITION_ID;
        case 4: // CHANNEL
          return CHANNEL;
        case 5: // IS_SYNCHRONIZATION
          return IS_SYNCHRONIZATION;
        case 6: // IS_REFRESH
          return IS_REFRESH;
        case 7: // SYNC_TIME
          return SYNC_TIME;
        case 8: // REFRESH_TIME
          return REFRESH_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // ADDRESS
          return ADDRESS;
        case 11: // OCCUPATION
          return OCCUPATION;
        case 12: // SYNC_FAIL_REASON
          return SYNC_FAIL_REASON;
        case 13: // USE_COMPANY_ADDRESS
          return USE_COMPANY_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POSITIONID_ISSET_ID = 1;
  private static final int __CHANNEL_ISSET_ID = 2;
  private static final int __ISSYNCHRONIZATION_ISSET_ID = 3;
  private static final int __ISREFRESH_ISSET_ID = 4;
  private static final int __USECOMPANYADDRESS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.POSITION_ID,_Fields.THIRD_PART_POSITION_ID,_Fields.CHANNEL,_Fields.IS_SYNCHRONIZATION,_Fields.IS_REFRESH,_Fields.SYNC_TIME,_Fields.REFRESH_TIME,_Fields.UPDATE_TIME,_Fields.ADDRESS,_Fields.OCCUPATION,_Fields.SYNC_FAIL_REASON,_Fields.USE_COMPANY_ADDRESS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PART_POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdPartPositionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SYNCHRONIZATION, new org.apache.thrift.meta_data.FieldMetaData("isSynchronization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("isRefresh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("syncTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TIME, new org.apache.thrift.meta_data.FieldMetaData("refreshTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNC_FAIL_REASON, new org.apache.thrift.meta_data.FieldMetaData("syncFailReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_COMPANY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("useCompanyAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrThirdPartyPositionDO.class, metaDataMap);
  }

  public HrThirdPartyPositionDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrThirdPartyPositionDO(HrThirdPartyPositionDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.positionId = other.positionId;
    if (other.isSetThirdPartPositionId()) {
      this.thirdPartPositionId = other.thirdPartPositionId;
    }
    this.channel = other.channel;
    this.isSynchronization = other.isSynchronization;
    this.isRefresh = other.isRefresh;
    if (other.isSetSyncTime()) {
      this.syncTime = other.syncTime;
    }
    if (other.isSetRefreshTime()) {
      this.refreshTime = other.refreshTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    if (other.isSetSyncFailReason()) {
      this.syncFailReason = other.syncFailReason;
    }
    this.useCompanyAddress = other.useCompanyAddress;
  }

  public HrThirdPartyPositionDO deepCopy() {
    return new HrThirdPartyPositionDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.thirdPartPositionId = null;
    setChannelIsSet(false);
    this.channel = 0;
    setIsSynchronizationIsSet(false);
    this.isSynchronization = 0;
    setIsRefreshIsSet(false);
    this.isRefresh = 0;
    this.syncTime = null;
    this.refreshTime = null;
    this.updateTime = null;
    this.address = null;
    this.occupation = null;
    this.syncFailReason = null;
    setUseCompanyAddressIsSet(false);
    this.useCompanyAddress = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrThirdPartyPositionDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPositionId() {
    return this.positionId;
  }

  public HrThirdPartyPositionDO setPositionId(int positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public java.lang.String getThirdPartPositionId() {
    return this.thirdPartPositionId;
  }

  public HrThirdPartyPositionDO setThirdPartPositionId(java.lang.String thirdPartPositionId) {
    this.thirdPartPositionId = thirdPartPositionId;
    return this;
  }

  public void unsetThirdPartPositionId() {
    this.thirdPartPositionId = null;
  }

  /** Returns true if field thirdPartPositionId is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartPositionId() {
    return this.thirdPartPositionId != null;
  }

  public void setThirdPartPositionIdIsSet(boolean value) {
    if (!value) {
      this.thirdPartPositionId = null;
    }
  }

  public int getChannel() {
    return this.channel;
  }

  public HrThirdPartyPositionDO setChannel(int channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public int getIsSynchronization() {
    return this.isSynchronization;
  }

  public HrThirdPartyPositionDO setIsSynchronization(int isSynchronization) {
    this.isSynchronization = isSynchronization;
    setIsSynchronizationIsSet(true);
    return this;
  }

  public void unsetIsSynchronization() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID);
  }

  /** Returns true if field isSynchronization is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSynchronization() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID);
  }

  public void setIsSynchronizationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID, value);
  }

  public int getIsRefresh() {
    return this.isRefresh;
  }

  public HrThirdPartyPositionDO setIsRefresh(int isRefresh) {
    this.isRefresh = isRefresh;
    setIsRefreshIsSet(true);
    return this;
  }

  public void unsetIsRefresh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  /** Returns true if field isRefresh is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRefresh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  public void setIsRefreshIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREFRESH_ISSET_ID, value);
  }

  public java.lang.String getSyncTime() {
    return this.syncTime;
  }

  public HrThirdPartyPositionDO setSyncTime(java.lang.String syncTime) {
    this.syncTime = syncTime;
    return this;
  }

  public void unsetSyncTime() {
    this.syncTime = null;
  }

  /** Returns true if field syncTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncTime() {
    return this.syncTime != null;
  }

  public void setSyncTimeIsSet(boolean value) {
    if (!value) {
      this.syncTime = null;
    }
  }

  public java.lang.String getRefreshTime() {
    return this.refreshTime;
  }

  public HrThirdPartyPositionDO setRefreshTime(java.lang.String refreshTime) {
    this.refreshTime = refreshTime;
    return this;
  }

  public void unsetRefreshTime() {
    this.refreshTime = null;
  }

  /** Returns true if field refreshTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshTime() {
    return this.refreshTime != null;
  }

  public void setRefreshTimeIsSet(boolean value) {
    if (!value) {
      this.refreshTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public HrThirdPartyPositionDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public java.lang.String getAddress() {
    return this.address;
  }

  public HrThirdPartyPositionDO setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public java.lang.String getOccupation() {
    return this.occupation;
  }

  public HrThirdPartyPositionDO setOccupation(java.lang.String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public java.lang.String getSyncFailReason() {
    return this.syncFailReason;
  }

  public HrThirdPartyPositionDO setSyncFailReason(java.lang.String syncFailReason) {
    this.syncFailReason = syncFailReason;
    return this;
  }

  public void unsetSyncFailReason() {
    this.syncFailReason = null;
  }

  /** Returns true if field syncFailReason is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncFailReason() {
    return this.syncFailReason != null;
  }

  public void setSyncFailReasonIsSet(boolean value) {
    if (!value) {
      this.syncFailReason = null;
    }
  }

  public int getUseCompanyAddress() {
    return this.useCompanyAddress;
  }

  public HrThirdPartyPositionDO setUseCompanyAddress(int useCompanyAddress) {
    this.useCompanyAddress = useCompanyAddress;
    setUseCompanyAddressIsSet(true);
    return this;
  }

  public void unsetUseCompanyAddress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  /** Returns true if field useCompanyAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCompanyAddress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  public void setUseCompanyAddressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((java.lang.Integer)value);
      }
      break;

    case THIRD_PART_POSITION_ID:
      if (value == null) {
        unsetThirdPartPositionId();
      } else {
        setThirdPartPositionId((java.lang.String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((java.lang.Integer)value);
      }
      break;

    case IS_SYNCHRONIZATION:
      if (value == null) {
        unsetIsSynchronization();
      } else {
        setIsSynchronization((java.lang.Integer)value);
      }
      break;

    case IS_REFRESH:
      if (value == null) {
        unsetIsRefresh();
      } else {
        setIsRefresh((java.lang.Integer)value);
      }
      break;

    case SYNC_TIME:
      if (value == null) {
        unsetSyncTime();
      } else {
        setSyncTime((java.lang.String)value);
      }
      break;

    case REFRESH_TIME:
      if (value == null) {
        unsetRefreshTime();
      } else {
        setRefreshTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((java.lang.String)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((java.lang.String)value);
      }
      break;

    case SYNC_FAIL_REASON:
      if (value == null) {
        unsetSyncFailReason();
      } else {
        setSyncFailReason((java.lang.String)value);
      }
      break;

    case USE_COMPANY_ADDRESS:
      if (value == null) {
        unsetUseCompanyAddress();
      } else {
        setUseCompanyAddress((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case POSITION_ID:
      return getPositionId();

    case THIRD_PART_POSITION_ID:
      return getThirdPartPositionId();

    case CHANNEL:
      return getChannel();

    case IS_SYNCHRONIZATION:
      return getIsSynchronization();

    case IS_REFRESH:
      return getIsRefresh();

    case SYNC_TIME:
      return getSyncTime();

    case REFRESH_TIME:
      return getRefreshTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case ADDRESS:
      return getAddress();

    case OCCUPATION:
      return getOccupation();

    case SYNC_FAIL_REASON:
      return getSyncFailReason();

    case USE_COMPANY_ADDRESS:
      return getUseCompanyAddress();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POSITION_ID:
      return isSetPositionId();
    case THIRD_PART_POSITION_ID:
      return isSetThirdPartPositionId();
    case CHANNEL:
      return isSetChannel();
    case IS_SYNCHRONIZATION:
      return isSetIsSynchronization();
    case IS_REFRESH:
      return isSetIsRefresh();
    case SYNC_TIME:
      return isSetSyncTime();
    case REFRESH_TIME:
      return isSetRefreshTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ADDRESS:
      return isSetAddress();
    case OCCUPATION:
      return isSetOccupation();
    case SYNC_FAIL_REASON:
      return isSetSyncFailReason();
    case USE_COMPANY_ADDRESS:
      return isSetUseCompanyAddress();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrThirdPartyPositionDO)
      return this.equals((HrThirdPartyPositionDO)that);
    return false;
  }

  public boolean equals(HrThirdPartyPositionDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_thirdPartPositionId = true && this.isSetThirdPartPositionId();
    boolean that_present_thirdPartPositionId = true && that.isSetThirdPartPositionId();
    if (this_present_thirdPartPositionId || that_present_thirdPartPositionId) {
      if (!(this_present_thirdPartPositionId && that_present_thirdPartPositionId))
        return false;
      if (!this.thirdPartPositionId.equals(that.thirdPartPositionId))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    boolean this_present_isSynchronization = true && this.isSetIsSynchronization();
    boolean that_present_isSynchronization = true && that.isSetIsSynchronization();
    if (this_present_isSynchronization || that_present_isSynchronization) {
      if (!(this_present_isSynchronization && that_present_isSynchronization))
        return false;
      if (this.isSynchronization != that.isSynchronization)
        return false;
    }

    boolean this_present_isRefresh = true && this.isSetIsRefresh();
    boolean that_present_isRefresh = true && that.isSetIsRefresh();
    if (this_present_isRefresh || that_present_isRefresh) {
      if (!(this_present_isRefresh && that_present_isRefresh))
        return false;
      if (this.isRefresh != that.isRefresh)
        return false;
    }

    boolean this_present_syncTime = true && this.isSetSyncTime();
    boolean that_present_syncTime = true && that.isSetSyncTime();
    if (this_present_syncTime || that_present_syncTime) {
      if (!(this_present_syncTime && that_present_syncTime))
        return false;
      if (!this.syncTime.equals(that.syncTime))
        return false;
    }

    boolean this_present_refreshTime = true && this.isSetRefreshTime();
    boolean that_present_refreshTime = true && that.isSetRefreshTime();
    if (this_present_refreshTime || that_present_refreshTime) {
      if (!(this_present_refreshTime && that_present_refreshTime))
        return false;
      if (!this.refreshTime.equals(that.refreshTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_syncFailReason = true && this.isSetSyncFailReason();
    boolean that_present_syncFailReason = true && that.isSetSyncFailReason();
    if (this_present_syncFailReason || that_present_syncFailReason) {
      if (!(this_present_syncFailReason && that_present_syncFailReason))
        return false;
      if (!this.syncFailReason.equals(that.syncFailReason))
        return false;
    }

    boolean this_present_useCompanyAddress = true && this.isSetUseCompanyAddress();
    boolean that_present_useCompanyAddress = true && that.isSetUseCompanyAddress();
    if (this_present_useCompanyAddress || that_present_useCompanyAddress) {
      if (!(this_present_useCompanyAddress && that_present_useCompanyAddress))
        return false;
      if (this.useCompanyAddress != that.useCompanyAddress)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
    if (isSetPositionId())
      hashCode = hashCode * 8191 + positionId;

    hashCode = hashCode * 8191 + ((isSetThirdPartPositionId()) ? 131071 : 524287);
    if (isSetThirdPartPositionId())
      hashCode = hashCode * 8191 + thirdPartPositionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel()) ? 131071 : 524287);
    if (isSetChannel())
      hashCode = hashCode * 8191 + channel;

    hashCode = hashCode * 8191 + ((isSetIsSynchronization()) ? 131071 : 524287);
    if (isSetIsSynchronization())
      hashCode = hashCode * 8191 + isSynchronization;

    hashCode = hashCode * 8191 + ((isSetIsRefresh()) ? 131071 : 524287);
    if (isSetIsRefresh())
      hashCode = hashCode * 8191 + isRefresh;

    hashCode = hashCode * 8191 + ((isSetSyncTime()) ? 131071 : 524287);
    if (isSetSyncTime())
      hashCode = hashCode * 8191 + syncTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefreshTime()) ? 131071 : 524287);
    if (isSetRefreshTime())
      hashCode = hashCode * 8191 + refreshTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetOccupation()) ? 131071 : 524287);
    if (isSetOccupation())
      hashCode = hashCode * 8191 + occupation.hashCode();

    hashCode = hashCode * 8191 + ((isSetSyncFailReason()) ? 131071 : 524287);
    if (isSetSyncFailReason())
      hashCode = hashCode * 8191 + syncFailReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetUseCompanyAddress()) ? 131071 : 524287);
    if (isSetUseCompanyAddress())
      hashCode = hashCode * 8191 + useCompanyAddress;

    return hashCode;
  }

  @Override
  public int compareTo(HrThirdPartyPositionDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThirdPartPositionId()).compareTo(other.isSetThirdPartPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartPositionId, other.thirdPartPositionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSynchronization()).compareTo(other.isSetIsSynchronization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSynchronization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSynchronization, other.isSynchronization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRefresh()).compareTo(other.isSetIsRefresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRefresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRefresh, other.isRefresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSyncTime()).compareTo(other.isSetSyncTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncTime, other.syncTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefreshTime()).compareTo(other.isSetRefreshTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshTime, other.refreshTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSyncFailReason()).compareTo(other.isSetSyncFailReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncFailReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncFailReason, other.syncFailReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUseCompanyAddress()).compareTo(other.isSetUseCompanyAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCompanyAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCompanyAddress, other.useCompanyAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrThirdPartyPositionDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetThirdPartPositionId()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartPositionId:");
      if (this.thirdPartPositionId == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartPositionId);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
    }
    if (isSetIsSynchronization()) {
      if (!first) sb.append(", ");
      sb.append("isSynchronization:");
      sb.append(this.isSynchronization);
      first = false;
    }
    if (isSetIsRefresh()) {
      if (!first) sb.append(", ");
      sb.append("isRefresh:");
      sb.append(this.isRefresh);
      first = false;
    }
    if (isSetSyncTime()) {
      if (!first) sb.append(", ");
      sb.append("syncTime:");
      if (this.syncTime == null) {
        sb.append("null");
      } else {
        sb.append(this.syncTime);
      }
      first = false;
    }
    if (isSetRefreshTime()) {
      if (!first) sb.append(", ");
      sb.append("refreshTime:");
      if (this.refreshTime == null) {
        sb.append("null");
      } else {
        sb.append(this.refreshTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetOccupation()) {
      if (!first) sb.append(", ");
      sb.append("occupation:");
      if (this.occupation == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation);
      }
      first = false;
    }
    if (isSetSyncFailReason()) {
      if (!first) sb.append(", ");
      sb.append("syncFailReason:");
      if (this.syncFailReason == null) {
        sb.append("null");
      } else {
        sb.append(this.syncFailReason);
      }
      first = false;
    }
    if (isSetUseCompanyAddress()) {
      if (!first) sb.append(", ");
      sb.append("useCompanyAddress:");
      sb.append(this.useCompanyAddress);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrThirdPartyPositionDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrThirdPartyPositionDOStandardScheme getScheme() {
      return new HrThirdPartyPositionDOStandardScheme();
    }
  }

  private static class HrThirdPartyPositionDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrThirdPartyPositionDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionId = iprot.readI32();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THIRD_PART_POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartPositionId = iprot.readString();
              struct.setThirdPartPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = iprot.readI32();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SYNCHRONIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSynchronization = iprot.readI32();
              struct.setIsSynchronizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRefresh = iprot.readI32();
              struct.setIsRefreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYNC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncTime = iprot.readString();
              struct.setSyncTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REFRESH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refreshTime = iprot.readString();
              struct.setRefreshTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SYNC_FAIL_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncFailReason = iprot.readString();
              struct.setSyncFailReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USE_COMPANY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useCompanyAddress = iprot.readI32();
              struct.setUseCompanyAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.thirdPartPositionId != null) {
        if (struct.isSetThirdPartPositionId()) {
          oprot.writeFieldBegin(THIRD_PART_POSITION_ID_FIELD_DESC);
          oprot.writeString(struct.thirdPartPositionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChannel()) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSynchronization()) {
        oprot.writeFieldBegin(IS_SYNCHRONIZATION_FIELD_DESC);
        oprot.writeI32(struct.isSynchronization);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeFieldBegin(IS_REFRESH_FIELD_DESC);
        oprot.writeI32(struct.isRefresh);
        oprot.writeFieldEnd();
      }
      if (struct.syncTime != null) {
        if (struct.isSetSyncTime()) {
          oprot.writeFieldBegin(SYNC_TIME_FIELD_DESC);
          oprot.writeString(struct.syncTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refreshTime != null) {
        if (struct.isSetRefreshTime()) {
          oprot.writeFieldBegin(REFRESH_TIME_FIELD_DESC);
          oprot.writeString(struct.refreshTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.occupation != null) {
        if (struct.isSetOccupation()) {
          oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
          oprot.writeString(struct.occupation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.syncFailReason != null) {
        if (struct.isSetSyncFailReason()) {
          oprot.writeFieldBegin(SYNC_FAIL_REASON_FIELD_DESC);
          oprot.writeString(struct.syncFailReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeFieldBegin(USE_COMPANY_ADDRESS_FIELD_DESC);
        oprot.writeI32(struct.useCompanyAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrThirdPartyPositionDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrThirdPartyPositionDOTupleScheme getScheme() {
      return new HrThirdPartyPositionDOTupleScheme();
    }
  }

  private static class HrThirdPartyPositionDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrThirdPartyPositionDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPositionId()) {
        optionals.set(1);
      }
      if (struct.isSetThirdPartPositionId()) {
        optionals.set(2);
      }
      if (struct.isSetChannel()) {
        optionals.set(3);
      }
      if (struct.isSetIsSynchronization()) {
        optionals.set(4);
      }
      if (struct.isSetIsRefresh()) {
        optionals.set(5);
      }
      if (struct.isSetSyncTime()) {
        optionals.set(6);
      }
      if (struct.isSetRefreshTime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      if (struct.isSetAddress()) {
        optionals.set(9);
      }
      if (struct.isSetOccupation()) {
        optionals.set(10);
      }
      if (struct.isSetSyncFailReason()) {
        optionals.set(11);
      }
      if (struct.isSetUseCompanyAddress()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI32(struct.positionId);
      }
      if (struct.isSetThirdPartPositionId()) {
        oprot.writeString(struct.thirdPartPositionId);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel);
      }
      if (struct.isSetIsSynchronization()) {
        oprot.writeI32(struct.isSynchronization);
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeI32(struct.isRefresh);
      }
      if (struct.isSetSyncTime()) {
        oprot.writeString(struct.syncTime);
      }
      if (struct.isSetRefreshTime()) {
        oprot.writeString(struct.refreshTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetSyncFailReason()) {
        oprot.writeString(struct.syncFailReason);
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeI32(struct.useCompanyAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.positionId = iprot.readI32();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.thirdPartPositionId = iprot.readString();
        struct.setThirdPartPositionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel = iprot.readI32();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isSynchronization = iprot.readI32();
        struct.setIsSynchronizationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isRefresh = iprot.readI32();
        struct.setIsRefreshIsSet(true);
      }
      if (incoming.get(6)) {
        struct.syncTime = iprot.readString();
        struct.setSyncTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refreshTime = iprot.readString();
        struct.setRefreshTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(10)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.syncFailReason = iprot.readString();
        struct.setSyncFailReasonIsSet(true);
      }
      if (incoming.get(12)) {
        struct.useCompanyAddress = iprot.readI32();
        struct.setUseCompanyAddressIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

