/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-25")
public class HrThirdPartyPositionDO implements org.apache.thrift.TBase<HrThirdPartyPositionDO, HrThirdPartyPositionDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrThirdPartyPositionDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrThirdPartyPositionDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField THIRD_PART_POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartPositionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_SYNCHRONIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isSynchronization", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("isRefresh", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("syncTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REFRESH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SYNC_FAIL_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("syncFailReason", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USE_COMPANY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("useCompanyAddress", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccountId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SALARY_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryMonth", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FEEDBACK_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("feedbackPeriod", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SALARY_DISCUSS_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryDiscuss", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryBottom", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryTop", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PRACTICE_SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("practiceSalary", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PRACTICE_PER_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("practicePerWeek", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField PRACTICE_SALARY_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("practiceSalaryUnit", org.apache.thrift.protocol.TType.BYTE, (short)23);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField ADDRESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("addressName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.BOOL, (short)32);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrThirdPartyPositionDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrThirdPartyPositionDOTupleSchemeFactory();

  public int id; // optional
  public int positionId; // optional
  public String thirdPartPositionId; // optional
  public int isSynchronization; // optional
  public int isRefresh; // optional
  public String syncTime; // optional
  public String refreshTime; // optional
  public String updateTime; // optional
  public String address; // optional
  public String occupation; // optional
  public String syncFailReason; // optional
  public int useCompanyAddress; // optional
  public int thirdPartyAccountId; // optional
  public int channel; // optional
  public String department; // optional
  public int salaryMonth; // optional
  public int feedbackPeriod; // optional
  public int salaryDiscuss; // optional
  public int salaryBottom; // optional
  public int salaryTop; // optional
  public int practiceSalary; // optional
  public byte practicePerWeek; // optional
  public byte practiceSalaryUnit; // optional
  public int companyId; // optional
  public String companyName; // optional
  public int addressId; // optional
  public String addressName; // optional
  public int departmentId; // optional
  public String departmentName; // optional
  public int count; // optional
  public String feature; // optional
  public boolean internship; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POSITION_ID((short)2, "positionId"),
    THIRD_PART_POSITION_ID((short)3, "thirdPartPositionId"),
    IS_SYNCHRONIZATION((short)4, "isSynchronization"),
    IS_REFRESH((short)5, "isRefresh"),
    SYNC_TIME((short)6, "syncTime"),
    REFRESH_TIME((short)7, "refreshTime"),
    UPDATE_TIME((short)8, "updateTime"),
    ADDRESS((short)9, "address"),
    OCCUPATION((short)10, "occupation"),
    SYNC_FAIL_REASON((short)11, "syncFailReason"),
    USE_COMPANY_ADDRESS((short)12, "useCompanyAddress"),
    THIRD_PARTY_ACCOUNT_ID((short)13, "thirdPartyAccountId"),
    CHANNEL((short)14, "channel"),
    DEPARTMENT((short)15, "department"),
    SALARY_MONTH((short)16, "salaryMonth"),
    FEEDBACK_PERIOD((short)17, "feedbackPeriod"),
    SALARY_DISCUSS((short)18, "salaryDiscuss"),
    SALARY_BOTTOM((short)19, "salaryBottom"),
    SALARY_TOP((short)20, "salaryTop"),
    PRACTICE_SALARY((short)21, "practiceSalary"),
    PRACTICE_PER_WEEK((short)22, "practicePerWeek"),
    PRACTICE_SALARY_UNIT((short)23, "practiceSalaryUnit"),
    COMPANY_ID((short)24, "companyId"),
    COMPANY_NAME((short)25, "companyName"),
    ADDRESS_ID((short)26, "addressId"),
    ADDRESS_NAME((short)27, "addressName"),
    DEPARTMENT_ID((short)28, "departmentId"),
    DEPARTMENT_NAME((short)29, "departmentName"),
    COUNT((short)30, "count"),
    FEATURE((short)31, "feature"),
    INTERNSHIP((short)32, "internship");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POSITION_ID
          return POSITION_ID;
        case 3: // THIRD_PART_POSITION_ID
          return THIRD_PART_POSITION_ID;
        case 4: // IS_SYNCHRONIZATION
          return IS_SYNCHRONIZATION;
        case 5: // IS_REFRESH
          return IS_REFRESH;
        case 6: // SYNC_TIME
          return SYNC_TIME;
        case 7: // REFRESH_TIME
          return REFRESH_TIME;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        case 9: // ADDRESS
          return ADDRESS;
        case 10: // OCCUPATION
          return OCCUPATION;
        case 11: // SYNC_FAIL_REASON
          return SYNC_FAIL_REASON;
        case 12: // USE_COMPANY_ADDRESS
          return USE_COMPANY_ADDRESS;
        case 13: // THIRD_PARTY_ACCOUNT_ID
          return THIRD_PARTY_ACCOUNT_ID;
        case 14: // CHANNEL
          return CHANNEL;
        case 15: // DEPARTMENT
          return DEPARTMENT;
        case 16: // SALARY_MONTH
          return SALARY_MONTH;
        case 17: // FEEDBACK_PERIOD
          return FEEDBACK_PERIOD;
        case 18: // SALARY_DISCUSS
          return SALARY_DISCUSS;
        case 19: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 20: // SALARY_TOP
          return SALARY_TOP;
        case 21: // PRACTICE_SALARY
          return PRACTICE_SALARY;
        case 22: // PRACTICE_PER_WEEK
          return PRACTICE_PER_WEEK;
        case 23: // PRACTICE_SALARY_UNIT
          return PRACTICE_SALARY_UNIT;
        case 24: // COMPANY_ID
          return COMPANY_ID;
        case 25: // COMPANY_NAME
          return COMPANY_NAME;
        case 26: // ADDRESS_ID
          return ADDRESS_ID;
        case 27: // ADDRESS_NAME
          return ADDRESS_NAME;
        case 28: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 29: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 30: // COUNT
          return COUNT;
        case 31: // FEATURE
          return FEATURE;
        case 32: // INTERNSHIP
          return INTERNSHIP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POSITIONID_ISSET_ID = 1;
  private static final int __ISSYNCHRONIZATION_ISSET_ID = 2;
  private static final int __ISREFRESH_ISSET_ID = 3;
  private static final int __USECOMPANYADDRESS_ISSET_ID = 4;
  private static final int __THIRDPARTYACCOUNTID_ISSET_ID = 5;
  private static final int __CHANNEL_ISSET_ID = 6;
  private static final int __SALARYMONTH_ISSET_ID = 7;
  private static final int __FEEDBACKPERIOD_ISSET_ID = 8;
  private static final int __SALARYDISCUSS_ISSET_ID = 9;
  private static final int __SALARYBOTTOM_ISSET_ID = 10;
  private static final int __SALARYTOP_ISSET_ID = 11;
  private static final int __PRACTICESALARY_ISSET_ID = 12;
  private static final int __PRACTICEPERWEEK_ISSET_ID = 13;
  private static final int __PRACTICESALARYUNIT_ISSET_ID = 14;
  private static final int __COMPANYID_ISSET_ID = 15;
  private static final int __ADDRESSID_ISSET_ID = 16;
  private static final int __DEPARTMENTID_ISSET_ID = 17;
  private static final int __COUNT_ISSET_ID = 18;
  private static final int __INTERNSHIP_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.POSITION_ID,_Fields.THIRD_PART_POSITION_ID,_Fields.IS_SYNCHRONIZATION,_Fields.IS_REFRESH,_Fields.SYNC_TIME,_Fields.REFRESH_TIME,_Fields.UPDATE_TIME,_Fields.ADDRESS,_Fields.OCCUPATION,_Fields.SYNC_FAIL_REASON,_Fields.USE_COMPANY_ADDRESS,_Fields.THIRD_PARTY_ACCOUNT_ID,_Fields.CHANNEL,_Fields.DEPARTMENT,_Fields.SALARY_MONTH,_Fields.FEEDBACK_PERIOD,_Fields.SALARY_DISCUSS,_Fields.SALARY_BOTTOM,_Fields.SALARY_TOP,_Fields.PRACTICE_SALARY,_Fields.PRACTICE_PER_WEEK,_Fields.PRACTICE_SALARY_UNIT,_Fields.COMPANY_ID,_Fields.COMPANY_NAME,_Fields.ADDRESS_ID,_Fields.ADDRESS_NAME,_Fields.DEPARTMENT_ID,_Fields.DEPARTMENT_NAME,_Fields.COUNT,_Fields.FEATURE,_Fields.INTERNSHIP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PART_POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdPartPositionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SYNCHRONIZATION, new org.apache.thrift.meta_data.FieldMetaData("isSynchronization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("isRefresh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("syncTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TIME, new org.apache.thrift.meta_data.FieldMetaData("refreshTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNC_FAIL_REASON, new org.apache.thrift.meta_data.FieldMetaData("syncFailReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_COMPANY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("useCompanyAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY_MONTH, new org.apache.thrift.meta_data.FieldMetaData("salaryMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEEDBACK_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("feedbackPeriod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_DISCUSS, new org.apache.thrift.meta_data.FieldMetaData("salaryDiscuss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salaryBottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salaryTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRACTICE_SALARY, new org.apache.thrift.meta_data.FieldMetaData("practiceSalary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRACTICE_PER_WEEK, new org.apache.thrift.meta_data.FieldMetaData("practicePerWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRACTICE_SALARY_UNIT, new org.apache.thrift.meta_data.FieldMetaData("practiceSalaryUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("addressName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrThirdPartyPositionDO.class, metaDataMap);
  }

  public HrThirdPartyPositionDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrThirdPartyPositionDO(HrThirdPartyPositionDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.positionId = other.positionId;
    if (other.isSetThirdPartPositionId()) {
      this.thirdPartPositionId = other.thirdPartPositionId;
    }
    this.isSynchronization = other.isSynchronization;
    this.isRefresh = other.isRefresh;
    if (other.isSetSyncTime()) {
      this.syncTime = other.syncTime;
    }
    if (other.isSetRefreshTime()) {
      this.refreshTime = other.refreshTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    if (other.isSetSyncFailReason()) {
      this.syncFailReason = other.syncFailReason;
    }
    this.useCompanyAddress = other.useCompanyAddress;
    this.thirdPartyAccountId = other.thirdPartyAccountId;
    this.channel = other.channel;
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    this.salaryMonth = other.salaryMonth;
    this.feedbackPeriod = other.feedbackPeriod;
    this.salaryDiscuss = other.salaryDiscuss;
    this.salaryBottom = other.salaryBottom;
    this.salaryTop = other.salaryTop;
    this.practiceSalary = other.practiceSalary;
    this.practicePerWeek = other.practicePerWeek;
    this.practiceSalaryUnit = other.practiceSalaryUnit;
    this.companyId = other.companyId;
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    this.addressId = other.addressId;
    if (other.isSetAddressName()) {
      this.addressName = other.addressName;
    }
    this.departmentId = other.departmentId;
    if (other.isSetDepartmentName()) {
      this.departmentName = other.departmentName;
    }
    this.count = other.count;
    if (other.isSetFeature()) {
      this.feature = other.feature;
    }
    this.internship = other.internship;
  }

  public HrThirdPartyPositionDO deepCopy() {
    return new HrThirdPartyPositionDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.thirdPartPositionId = null;
    setIsSynchronizationIsSet(false);
    this.isSynchronization = 0;
    setIsRefreshIsSet(false);
    this.isRefresh = 0;
    this.syncTime = null;
    this.refreshTime = null;
    this.updateTime = null;
    this.address = null;
    this.occupation = null;
    this.syncFailReason = null;
    setUseCompanyAddressIsSet(false);
    this.useCompanyAddress = 0;
    setThirdPartyAccountIdIsSet(false);
    this.thirdPartyAccountId = 0;
    setChannelIsSet(false);
    this.channel = 0;
    this.department = null;
    setSalaryMonthIsSet(false);
    this.salaryMonth = 0;
    setFeedbackPeriodIsSet(false);
    this.feedbackPeriod = 0;
    setSalaryDiscussIsSet(false);
    this.salaryDiscuss = 0;
    setSalaryBottomIsSet(false);
    this.salaryBottom = 0;
    setSalaryTopIsSet(false);
    this.salaryTop = 0;
    setPracticeSalaryIsSet(false);
    this.practiceSalary = 0;
    setPracticePerWeekIsSet(false);
    this.practicePerWeek = 0;
    setPracticeSalaryUnitIsSet(false);
    this.practiceSalaryUnit = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.companyName = null;
    setAddressIdIsSet(false);
    this.addressId = 0;
    this.addressName = null;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    this.departmentName = null;
    setCountIsSet(false);
    this.count = 0;
    this.feature = null;
    setInternshipIsSet(false);
    this.internship = false;
  }

  public int getId() {
    return this.id;
  }

  public HrThirdPartyPositionDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPositionId() {
    return this.positionId;
  }

  public HrThirdPartyPositionDO setPositionId(int positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public String getThirdPartPositionId() {
    return this.thirdPartPositionId;
  }

  public HrThirdPartyPositionDO setThirdPartPositionId(String thirdPartPositionId) {
    this.thirdPartPositionId = thirdPartPositionId;
    return this;
  }

  public void unsetThirdPartPositionId() {
    this.thirdPartPositionId = null;
  }

  /** Returns true if field thirdPartPositionId is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartPositionId() {
    return this.thirdPartPositionId != null;
  }

  public void setThirdPartPositionIdIsSet(boolean value) {
    if (!value) {
      this.thirdPartPositionId = null;
    }
  }

  public int getIsSynchronization() {
    return this.isSynchronization;
  }

  public HrThirdPartyPositionDO setIsSynchronization(int isSynchronization) {
    this.isSynchronization = isSynchronization;
    setIsSynchronizationIsSet(true);
    return this;
  }

  public void unsetIsSynchronization() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID);
  }

  /** Returns true if field isSynchronization is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSynchronization() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID);
  }

  public void setIsSynchronizationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSYNCHRONIZATION_ISSET_ID, value);
  }

  public int getIsRefresh() {
    return this.isRefresh;
  }

  public HrThirdPartyPositionDO setIsRefresh(int isRefresh) {
    this.isRefresh = isRefresh;
    setIsRefreshIsSet(true);
    return this;
  }

  public void unsetIsRefresh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  /** Returns true if field isRefresh is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRefresh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREFRESH_ISSET_ID);
  }

  public void setIsRefreshIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREFRESH_ISSET_ID, value);
  }

  public String getSyncTime() {
    return this.syncTime;
  }

  public HrThirdPartyPositionDO setSyncTime(String syncTime) {
    this.syncTime = syncTime;
    return this;
  }

  public void unsetSyncTime() {
    this.syncTime = null;
  }

  /** Returns true if field syncTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncTime() {
    return this.syncTime != null;
  }

  public void setSyncTimeIsSet(boolean value) {
    if (!value) {
      this.syncTime = null;
    }
  }

  public String getRefreshTime() {
    return this.refreshTime;
  }

  public HrThirdPartyPositionDO setRefreshTime(String refreshTime) {
    this.refreshTime = refreshTime;
    return this;
  }

  public void unsetRefreshTime() {
    this.refreshTime = null;
  }

  /** Returns true if field refreshTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshTime() {
    return this.refreshTime != null;
  }

  public void setRefreshTimeIsSet(boolean value) {
    if (!value) {
      this.refreshTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public HrThirdPartyPositionDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public HrThirdPartyPositionDO setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getOccupation() {
    return this.occupation;
  }

  public HrThirdPartyPositionDO setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public String getSyncFailReason() {
    return this.syncFailReason;
  }

  public HrThirdPartyPositionDO setSyncFailReason(String syncFailReason) {
    this.syncFailReason = syncFailReason;
    return this;
  }

  public void unsetSyncFailReason() {
    this.syncFailReason = null;
  }

  /** Returns true if field syncFailReason is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncFailReason() {
    return this.syncFailReason != null;
  }

  public void setSyncFailReasonIsSet(boolean value) {
    if (!value) {
      this.syncFailReason = null;
    }
  }

  public int getUseCompanyAddress() {
    return this.useCompanyAddress;
  }

  public HrThirdPartyPositionDO setUseCompanyAddress(int useCompanyAddress) {
    this.useCompanyAddress = useCompanyAddress;
    setUseCompanyAddressIsSet(true);
    return this;
  }

  public void unsetUseCompanyAddress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  /** Returns true if field useCompanyAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCompanyAddress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  public void setUseCompanyAddressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID, value);
  }

  public int getThirdPartyAccountId() {
    return this.thirdPartyAccountId;
  }

  public HrThirdPartyPositionDO setThirdPartyAccountId(int thirdPartyAccountId) {
    this.thirdPartyAccountId = thirdPartyAccountId;
    setThirdPartyAccountIdIsSet(true);
    return this;
  }

  public void unsetThirdPartyAccountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID);
  }

  /** Returns true if field thirdPartyAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyAccountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID);
  }

  public void setThirdPartyAccountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID, value);
  }

  public int getChannel() {
    return this.channel;
  }

  public HrThirdPartyPositionDO setChannel(int channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public String getDepartment() {
    return this.department;
  }

  public HrThirdPartyPositionDO setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public int getSalaryMonth() {
    return this.salaryMonth;
  }

  public HrThirdPartyPositionDO setSalaryMonth(int salaryMonth) {
    this.salaryMonth = salaryMonth;
    setSalaryMonthIsSet(true);
    return this;
  }

  public void unsetSalaryMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYMONTH_ISSET_ID);
  }

  /** Returns true if field salaryMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYMONTH_ISSET_ID);
  }

  public void setSalaryMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYMONTH_ISSET_ID, value);
  }

  public int getFeedbackPeriod() {
    return this.feedbackPeriod;
  }

  public HrThirdPartyPositionDO setFeedbackPeriod(int feedbackPeriod) {
    this.feedbackPeriod = feedbackPeriod;
    setFeedbackPeriodIsSet(true);
    return this;
  }

  public void unsetFeedbackPeriod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID);
  }

  /** Returns true if field feedbackPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedbackPeriod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID);
  }

  public void setFeedbackPeriodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID, value);
  }

  public int getSalaryDiscuss() {
    return this.salaryDiscuss;
  }

  public HrThirdPartyPositionDO setSalaryDiscuss(int salaryDiscuss) {
    this.salaryDiscuss = salaryDiscuss;
    setSalaryDiscussIsSet(true);
    return this;
  }

  public void unsetSalaryDiscuss() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID);
  }

  /** Returns true if field salaryDiscuss is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryDiscuss() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID);
  }

  public void setSalaryDiscussIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID, value);
  }

  public int getSalaryBottom() {
    return this.salaryBottom;
  }

  public HrThirdPartyPositionDO setSalaryBottom(int salaryBottom) {
    this.salaryBottom = salaryBottom;
    setSalaryBottomIsSet(true);
    return this;
  }

  public void unsetSalaryBottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  /** Returns true if field salaryBottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryBottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  public void setSalaryBottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID, value);
  }

  public int getSalaryTop() {
    return this.salaryTop;
  }

  public HrThirdPartyPositionDO setSalaryTop(int salaryTop) {
    this.salaryTop = salaryTop;
    setSalaryTopIsSet(true);
    return this;
  }

  public void unsetSalaryTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  /** Returns true if field salaryTop is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  public void setSalaryTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYTOP_ISSET_ID, value);
  }

  public int getPracticeSalary() {
    return this.practiceSalary;
  }

  public HrThirdPartyPositionDO setPracticeSalary(int practiceSalary) {
    this.practiceSalary = practiceSalary;
    setPracticeSalaryIsSet(true);
    return this;
  }

  public void unsetPracticeSalary() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID);
  }

  /** Returns true if field practiceSalary is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticeSalary() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID);
  }

  public void setPracticeSalaryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID, value);
  }

  public byte getPracticePerWeek() {
    return this.practicePerWeek;
  }

  public HrThirdPartyPositionDO setPracticePerWeek(byte practicePerWeek) {
    this.practicePerWeek = practicePerWeek;
    setPracticePerWeekIsSet(true);
    return this;
  }

  public void unsetPracticePerWeek() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID);
  }

  /** Returns true if field practicePerWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticePerWeek() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID);
  }

  public void setPracticePerWeekIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID, value);
  }

  public byte getPracticeSalaryUnit() {
    return this.practiceSalaryUnit;
  }

  public HrThirdPartyPositionDO setPracticeSalaryUnit(byte practiceSalaryUnit) {
    this.practiceSalaryUnit = practiceSalaryUnit;
    setPracticeSalaryUnitIsSet(true);
    return this;
  }

  public void unsetPracticeSalaryUnit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID);
  }

  /** Returns true if field practiceSalaryUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticeSalaryUnit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID);
  }

  public void setPracticeSalaryUnitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrThirdPartyPositionDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public HrThirdPartyPositionDO setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public int getAddressId() {
    return this.addressId;
  }

  public HrThirdPartyPositionDO setAddressId(int addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADDRESSID_ISSET_ID, value);
  }

  public String getAddressName() {
    return this.addressName;
  }

  public HrThirdPartyPositionDO setAddressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

  public void unsetAddressName() {
    this.addressName = null;
  }

  /** Returns true if field addressName is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressName() {
    return this.addressName != null;
  }

  public void setAddressNameIsSet(boolean value) {
    if (!value) {
      this.addressName = null;
    }
  }

  public int getDepartmentId() {
    return this.departmentId;
  }

  public HrThirdPartyPositionDO setDepartmentId(int departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public String getDepartmentName() {
    return this.departmentName;
  }

  public HrThirdPartyPositionDO setDepartmentName(String departmentName) {
    this.departmentName = departmentName;
    return this;
  }

  public void unsetDepartmentName() {
    this.departmentName = null;
  }

  /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentName() {
    return this.departmentName != null;
  }

  public void setDepartmentNameIsSet(boolean value) {
    if (!value) {
      this.departmentName = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public HrThirdPartyPositionDO setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getFeature() {
    return this.feature;
  }

  public HrThirdPartyPositionDO setFeature(String feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public boolean isInternship() {
    return this.internship;
  }

  public HrThirdPartyPositionDO setInternship(boolean internship) {
    this.internship = internship;
    setInternshipIsSet(true);
    return this;
  }

  public void unsetInternship() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERNSHIP_ISSET_ID);
  }

  /** Returns true if field internship is set (has been assigned a value) and false otherwise */
  public boolean isSetInternship() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERNSHIP_ISSET_ID);
  }

  public void setInternshipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERNSHIP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Integer)value);
      }
      break;

    case THIRD_PART_POSITION_ID:
      if (value == null) {
        unsetThirdPartPositionId();
      } else {
        setThirdPartPositionId((String)value);
      }
      break;

    case IS_SYNCHRONIZATION:
      if (value == null) {
        unsetIsSynchronization();
      } else {
        setIsSynchronization((Integer)value);
      }
      break;

    case IS_REFRESH:
      if (value == null) {
        unsetIsRefresh();
      } else {
        setIsRefresh((Integer)value);
      }
      break;

    case SYNC_TIME:
      if (value == null) {
        unsetSyncTime();
      } else {
        setSyncTime((String)value);
      }
      break;

    case REFRESH_TIME:
      if (value == null) {
        unsetRefreshTime();
      } else {
        setRefreshTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    case SYNC_FAIL_REASON:
      if (value == null) {
        unsetSyncFailReason();
      } else {
        setSyncFailReason((String)value);
      }
      break;

    case USE_COMPANY_ADDRESS:
      if (value == null) {
        unsetUseCompanyAddress();
      } else {
        setUseCompanyAddress((Integer)value);
      }
      break;

    case THIRD_PARTY_ACCOUNT_ID:
      if (value == null) {
        unsetThirdPartyAccountId();
      } else {
        setThirdPartyAccountId((Integer)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Integer)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case SALARY_MONTH:
      if (value == null) {
        unsetSalaryMonth();
      } else {
        setSalaryMonth((Integer)value);
      }
      break;

    case FEEDBACK_PERIOD:
      if (value == null) {
        unsetFeedbackPeriod();
      } else {
        setFeedbackPeriod((Integer)value);
      }
      break;

    case SALARY_DISCUSS:
      if (value == null) {
        unsetSalaryDiscuss();
      } else {
        setSalaryDiscuss((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalaryBottom();
      } else {
        setSalaryBottom((Integer)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalaryTop();
      } else {
        setSalaryTop((Integer)value);
      }
      break;

    case PRACTICE_SALARY:
      if (value == null) {
        unsetPracticeSalary();
      } else {
        setPracticeSalary((Integer)value);
      }
      break;

    case PRACTICE_PER_WEEK:
      if (value == null) {
        unsetPracticePerWeek();
      } else {
        setPracticePerWeek((Byte)value);
      }
      break;

    case PRACTICE_SALARY_UNIT:
      if (value == null) {
        unsetPracticeSalaryUnit();
      } else {
        setPracticeSalaryUnit((Byte)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Integer)value);
      }
      break;

    case ADDRESS_NAME:
      if (value == null) {
        unsetAddressName();
      } else {
        setAddressName((String)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Integer)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartmentName();
      } else {
        setDepartmentName((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((String)value);
      }
      break;

    case INTERNSHIP:
      if (value == null) {
        unsetInternship();
      } else {
        setInternship((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case POSITION_ID:
      return getPositionId();

    case THIRD_PART_POSITION_ID:
      return getThirdPartPositionId();

    case IS_SYNCHRONIZATION:
      return getIsSynchronization();

    case IS_REFRESH:
      return getIsRefresh();

    case SYNC_TIME:
      return getSyncTime();

    case REFRESH_TIME:
      return getRefreshTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case ADDRESS:
      return getAddress();

    case OCCUPATION:
      return getOccupation();

    case SYNC_FAIL_REASON:
      return getSyncFailReason();

    case USE_COMPANY_ADDRESS:
      return getUseCompanyAddress();

    case THIRD_PARTY_ACCOUNT_ID:
      return getThirdPartyAccountId();

    case CHANNEL:
      return getChannel();

    case DEPARTMENT:
      return getDepartment();

    case SALARY_MONTH:
      return getSalaryMonth();

    case FEEDBACK_PERIOD:
      return getFeedbackPeriod();

    case SALARY_DISCUSS:
      return getSalaryDiscuss();

    case SALARY_BOTTOM:
      return getSalaryBottom();

    case SALARY_TOP:
      return getSalaryTop();

    case PRACTICE_SALARY:
      return getPracticeSalary();

    case PRACTICE_PER_WEEK:
      return getPracticePerWeek();

    case PRACTICE_SALARY_UNIT:
      return getPracticeSalaryUnit();

    case COMPANY_ID:
      return getCompanyId();

    case COMPANY_NAME:
      return getCompanyName();

    case ADDRESS_ID:
      return getAddressId();

    case ADDRESS_NAME:
      return getAddressName();

    case DEPARTMENT_ID:
      return getDepartmentId();

    case DEPARTMENT_NAME:
      return getDepartmentName();

    case COUNT:
      return getCount();

    case FEATURE:
      return getFeature();

    case INTERNSHIP:
      return isInternship();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POSITION_ID:
      return isSetPositionId();
    case THIRD_PART_POSITION_ID:
      return isSetThirdPartPositionId();
    case IS_SYNCHRONIZATION:
      return isSetIsSynchronization();
    case IS_REFRESH:
      return isSetIsRefresh();
    case SYNC_TIME:
      return isSetSyncTime();
    case REFRESH_TIME:
      return isSetRefreshTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ADDRESS:
      return isSetAddress();
    case OCCUPATION:
      return isSetOccupation();
    case SYNC_FAIL_REASON:
      return isSetSyncFailReason();
    case USE_COMPANY_ADDRESS:
      return isSetUseCompanyAddress();
    case THIRD_PARTY_ACCOUNT_ID:
      return isSetThirdPartyAccountId();
    case CHANNEL:
      return isSetChannel();
    case DEPARTMENT:
      return isSetDepartment();
    case SALARY_MONTH:
      return isSetSalaryMonth();
    case FEEDBACK_PERIOD:
      return isSetFeedbackPeriod();
    case SALARY_DISCUSS:
      return isSetSalaryDiscuss();
    case SALARY_BOTTOM:
      return isSetSalaryBottom();
    case SALARY_TOP:
      return isSetSalaryTop();
    case PRACTICE_SALARY:
      return isSetPracticeSalary();
    case PRACTICE_PER_WEEK:
      return isSetPracticePerWeek();
    case PRACTICE_SALARY_UNIT:
      return isSetPracticeSalaryUnit();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_NAME:
      return isSetCompanyName();
    case ADDRESS_ID:
      return isSetAddressId();
    case ADDRESS_NAME:
      return isSetAddressName();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case DEPARTMENT_NAME:
      return isSetDepartmentName();
    case COUNT:
      return isSetCount();
    case FEATURE:
      return isSetFeature();
    case INTERNSHIP:
      return isSetInternship();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrThirdPartyPositionDO)
      return this.equals((HrThirdPartyPositionDO)that);
    return false;
  }

  public boolean equals(HrThirdPartyPositionDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_thirdPartPositionId = true && this.isSetThirdPartPositionId();
    boolean that_present_thirdPartPositionId = true && that.isSetThirdPartPositionId();
    if (this_present_thirdPartPositionId || that_present_thirdPartPositionId) {
      if (!(this_present_thirdPartPositionId && that_present_thirdPartPositionId))
        return false;
      if (!this.thirdPartPositionId.equals(that.thirdPartPositionId))
        return false;
    }

    boolean this_present_isSynchronization = true && this.isSetIsSynchronization();
    boolean that_present_isSynchronization = true && that.isSetIsSynchronization();
    if (this_present_isSynchronization || that_present_isSynchronization) {
      if (!(this_present_isSynchronization && that_present_isSynchronization))
        return false;
      if (this.isSynchronization != that.isSynchronization)
        return false;
    }

    boolean this_present_isRefresh = true && this.isSetIsRefresh();
    boolean that_present_isRefresh = true && that.isSetIsRefresh();
    if (this_present_isRefresh || that_present_isRefresh) {
      if (!(this_present_isRefresh && that_present_isRefresh))
        return false;
      if (this.isRefresh != that.isRefresh)
        return false;
    }

    boolean this_present_syncTime = true && this.isSetSyncTime();
    boolean that_present_syncTime = true && that.isSetSyncTime();
    if (this_present_syncTime || that_present_syncTime) {
      if (!(this_present_syncTime && that_present_syncTime))
        return false;
      if (!this.syncTime.equals(that.syncTime))
        return false;
    }

    boolean this_present_refreshTime = true && this.isSetRefreshTime();
    boolean that_present_refreshTime = true && that.isSetRefreshTime();
    if (this_present_refreshTime || that_present_refreshTime) {
      if (!(this_present_refreshTime && that_present_refreshTime))
        return false;
      if (!this.refreshTime.equals(that.refreshTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_syncFailReason = true && this.isSetSyncFailReason();
    boolean that_present_syncFailReason = true && that.isSetSyncFailReason();
    if (this_present_syncFailReason || that_present_syncFailReason) {
      if (!(this_present_syncFailReason && that_present_syncFailReason))
        return false;
      if (!this.syncFailReason.equals(that.syncFailReason))
        return false;
    }

    boolean this_present_useCompanyAddress = true && this.isSetUseCompanyAddress();
    boolean that_present_useCompanyAddress = true && that.isSetUseCompanyAddress();
    if (this_present_useCompanyAddress || that_present_useCompanyAddress) {
      if (!(this_present_useCompanyAddress && that_present_useCompanyAddress))
        return false;
      if (this.useCompanyAddress != that.useCompanyAddress)
        return false;
    }

    boolean this_present_thirdPartyAccountId = true && this.isSetThirdPartyAccountId();
    boolean that_present_thirdPartyAccountId = true && that.isSetThirdPartyAccountId();
    if (this_present_thirdPartyAccountId || that_present_thirdPartyAccountId) {
      if (!(this_present_thirdPartyAccountId && that_present_thirdPartyAccountId))
        return false;
      if (this.thirdPartyAccountId != that.thirdPartyAccountId)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_salaryMonth = true && this.isSetSalaryMonth();
    boolean that_present_salaryMonth = true && that.isSetSalaryMonth();
    if (this_present_salaryMonth || that_present_salaryMonth) {
      if (!(this_present_salaryMonth && that_present_salaryMonth))
        return false;
      if (this.salaryMonth != that.salaryMonth)
        return false;
    }

    boolean this_present_feedbackPeriod = true && this.isSetFeedbackPeriod();
    boolean that_present_feedbackPeriod = true && that.isSetFeedbackPeriod();
    if (this_present_feedbackPeriod || that_present_feedbackPeriod) {
      if (!(this_present_feedbackPeriod && that_present_feedbackPeriod))
        return false;
      if (this.feedbackPeriod != that.feedbackPeriod)
        return false;
    }

    boolean this_present_salaryDiscuss = true && this.isSetSalaryDiscuss();
    boolean that_present_salaryDiscuss = true && that.isSetSalaryDiscuss();
    if (this_present_salaryDiscuss || that_present_salaryDiscuss) {
      if (!(this_present_salaryDiscuss && that_present_salaryDiscuss))
        return false;
      if (this.salaryDiscuss != that.salaryDiscuss)
        return false;
    }

    boolean this_present_salaryBottom = true && this.isSetSalaryBottom();
    boolean that_present_salaryBottom = true && that.isSetSalaryBottom();
    if (this_present_salaryBottom || that_present_salaryBottom) {
      if (!(this_present_salaryBottom && that_present_salaryBottom))
        return false;
      if (this.salaryBottom != that.salaryBottom)
        return false;
    }

    boolean this_present_salaryTop = true && this.isSetSalaryTop();
    boolean that_present_salaryTop = true && that.isSetSalaryTop();
    if (this_present_salaryTop || that_present_salaryTop) {
      if (!(this_present_salaryTop && that_present_salaryTop))
        return false;
      if (this.salaryTop != that.salaryTop)
        return false;
    }

    boolean this_present_practiceSalary = true && this.isSetPracticeSalary();
    boolean that_present_practiceSalary = true && that.isSetPracticeSalary();
    if (this_present_practiceSalary || that_present_practiceSalary) {
      if (!(this_present_practiceSalary && that_present_practiceSalary))
        return false;
      if (this.practiceSalary != that.practiceSalary)
        return false;
    }

    boolean this_present_practicePerWeek = true && this.isSetPracticePerWeek();
    boolean that_present_practicePerWeek = true && that.isSetPracticePerWeek();
    if (this_present_practicePerWeek || that_present_practicePerWeek) {
      if (!(this_present_practicePerWeek && that_present_practicePerWeek))
        return false;
      if (this.practicePerWeek != that.practicePerWeek)
        return false;
    }

    boolean this_present_practiceSalaryUnit = true && this.isSetPracticeSalaryUnit();
    boolean that_present_practiceSalaryUnit = true && that.isSetPracticeSalaryUnit();
    if (this_present_practiceSalaryUnit || that_present_practiceSalaryUnit) {
      if (!(this_present_practiceSalaryUnit && that_present_practiceSalaryUnit))
        return false;
      if (this.practiceSalaryUnit != that.practiceSalaryUnit)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_addressId = true && this.isSetAddressId();
    boolean that_present_addressId = true && that.isSetAddressId();
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_addressName = true && this.isSetAddressName();
    boolean that_present_addressName = true && that.isSetAddressName();
    if (this_present_addressName || that_present_addressName) {
      if (!(this_present_addressName && that_present_addressName))
        return false;
      if (!this.addressName.equals(that.addressName))
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_departmentName = true && this.isSetDepartmentName();
    boolean that_present_departmentName = true && that.isSetDepartmentName();
    if (this_present_departmentName || that_present_departmentName) {
      if (!(this_present_departmentName && that_present_departmentName))
        return false;
      if (!this.departmentName.equals(that.departmentName))
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_internship = true && this.isSetInternship();
    boolean that_present_internship = true && that.isSetInternship();
    if (this_present_internship || that_present_internship) {
      if (!(this_present_internship && that_present_internship))
        return false;
      if (this.internship != that.internship)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
    if (isSetPositionId())
      hashCode = hashCode * 8191 + positionId;

    hashCode = hashCode * 8191 + ((isSetThirdPartPositionId()) ? 131071 : 524287);
    if (isSetThirdPartPositionId())
      hashCode = hashCode * 8191 + thirdPartPositionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsSynchronization()) ? 131071 : 524287);
    if (isSetIsSynchronization())
      hashCode = hashCode * 8191 + isSynchronization;

    hashCode = hashCode * 8191 + ((isSetIsRefresh()) ? 131071 : 524287);
    if (isSetIsRefresh())
      hashCode = hashCode * 8191 + isRefresh;

    hashCode = hashCode * 8191 + ((isSetSyncTime()) ? 131071 : 524287);
    if (isSetSyncTime())
      hashCode = hashCode * 8191 + syncTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefreshTime()) ? 131071 : 524287);
    if (isSetRefreshTime())
      hashCode = hashCode * 8191 + refreshTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetOccupation()) ? 131071 : 524287);
    if (isSetOccupation())
      hashCode = hashCode * 8191 + occupation.hashCode();

    hashCode = hashCode * 8191 + ((isSetSyncFailReason()) ? 131071 : 524287);
    if (isSetSyncFailReason())
      hashCode = hashCode * 8191 + syncFailReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetUseCompanyAddress()) ? 131071 : 524287);
    if (isSetUseCompanyAddress())
      hashCode = hashCode * 8191 + useCompanyAddress;

    hashCode = hashCode * 8191 + ((isSetThirdPartyAccountId()) ? 131071 : 524287);
    if (isSetThirdPartyAccountId())
      hashCode = hashCode * 8191 + thirdPartyAccountId;

    hashCode = hashCode * 8191 + ((isSetChannel()) ? 131071 : 524287);
    if (isSetChannel())
      hashCode = hashCode * 8191 + channel;

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalaryMonth()) ? 131071 : 524287);
    if (isSetSalaryMonth())
      hashCode = hashCode * 8191 + salaryMonth;

    hashCode = hashCode * 8191 + ((isSetFeedbackPeriod()) ? 131071 : 524287);
    if (isSetFeedbackPeriod())
      hashCode = hashCode * 8191 + feedbackPeriod;

    hashCode = hashCode * 8191 + ((isSetSalaryDiscuss()) ? 131071 : 524287);
    if (isSetSalaryDiscuss())
      hashCode = hashCode * 8191 + salaryDiscuss;

    hashCode = hashCode * 8191 + ((isSetSalaryBottom()) ? 131071 : 524287);
    if (isSetSalaryBottom())
      hashCode = hashCode * 8191 + salaryBottom;

    hashCode = hashCode * 8191 + ((isSetSalaryTop()) ? 131071 : 524287);
    if (isSetSalaryTop())
      hashCode = hashCode * 8191 + salaryTop;

    hashCode = hashCode * 8191 + ((isSetPracticeSalary()) ? 131071 : 524287);
    if (isSetPracticeSalary())
      hashCode = hashCode * 8191 + practiceSalary;

    hashCode = hashCode * 8191 + ((isSetPracticePerWeek()) ? 131071 : 524287);
    if (isSetPracticePerWeek())
      hashCode = hashCode * 8191 + (int) (practicePerWeek);

    hashCode = hashCode * 8191 + ((isSetPracticeSalaryUnit()) ? 131071 : 524287);
    if (isSetPracticeSalaryUnit())
      hashCode = hashCode * 8191 + (int) (practiceSalaryUnit);

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetCompanyName()) ? 131071 : 524287);
    if (isSetCompanyName())
      hashCode = hashCode * 8191 + companyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddressId()) ? 131071 : 524287);
    if (isSetAddressId())
      hashCode = hashCode * 8191 + addressId;

    hashCode = hashCode * 8191 + ((isSetAddressName()) ? 131071 : 524287);
    if (isSetAddressName())
      hashCode = hashCode * 8191 + addressName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartmentId()) ? 131071 : 524287);
    if (isSetDepartmentId())
      hashCode = hashCode * 8191 + departmentId;

    hashCode = hashCode * 8191 + ((isSetDepartmentName()) ? 131071 : 524287);
    if (isSetDepartmentName())
      hashCode = hashCode * 8191 + departmentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
    if (isSetFeature())
      hashCode = hashCode * 8191 + feature.hashCode();

    hashCode = hashCode * 8191 + ((isSetInternship()) ? 131071 : 524287);
    if (isSetInternship())
      hashCode = hashCode * 8191 + ((internship) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(HrThirdPartyPositionDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartPositionId()).compareTo(other.isSetThirdPartPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartPositionId, other.thirdPartPositionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSynchronization()).compareTo(other.isSetIsSynchronization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSynchronization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSynchronization, other.isSynchronization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRefresh()).compareTo(other.isSetIsRefresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRefresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRefresh, other.isRefresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncTime()).compareTo(other.isSetSyncTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncTime, other.syncTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefreshTime()).compareTo(other.isSetRefreshTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshTime, other.refreshTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncFailReason()).compareTo(other.isSetSyncFailReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncFailReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncFailReason, other.syncFailReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseCompanyAddress()).compareTo(other.isSetUseCompanyAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCompanyAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCompanyAddress, other.useCompanyAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyAccountId()).compareTo(other.isSetThirdPartyAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccountId, other.thirdPartyAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryMonth()).compareTo(other.isSetSalaryMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryMonth, other.salaryMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedbackPeriod()).compareTo(other.isSetFeedbackPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedbackPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedbackPeriod, other.feedbackPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryDiscuss()).compareTo(other.isSetSalaryDiscuss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryDiscuss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryDiscuss, other.salaryDiscuss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryBottom()).compareTo(other.isSetSalaryBottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryBottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryBottom, other.salaryBottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryTop()).compareTo(other.isSetSalaryTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryTop, other.salaryTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticeSalary()).compareTo(other.isSetPracticeSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticeSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practiceSalary, other.practiceSalary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticePerWeek()).compareTo(other.isSetPracticePerWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticePerWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practicePerWeek, other.practicePerWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticeSalaryUnit()).compareTo(other.isSetPracticeSalaryUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticeSalaryUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practiceSalaryUnit, other.practiceSalaryUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressName()).compareTo(other.isSetAddressName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressName, other.addressName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentName()).compareTo(other.isSetDepartmentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, other.departmentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternship()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrThirdPartyPositionDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetThirdPartPositionId()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartPositionId:");
      if (this.thirdPartPositionId == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartPositionId);
      }
      first = false;
    }
    if (isSetIsSynchronization()) {
      if (!first) sb.append(", ");
      sb.append("isSynchronization:");
      sb.append(this.isSynchronization);
      first = false;
    }
    if (isSetIsRefresh()) {
      if (!first) sb.append(", ");
      sb.append("isRefresh:");
      sb.append(this.isRefresh);
      first = false;
    }
    if (isSetSyncTime()) {
      if (!first) sb.append(", ");
      sb.append("syncTime:");
      if (this.syncTime == null) {
        sb.append("null");
      } else {
        sb.append(this.syncTime);
      }
      first = false;
    }
    if (isSetRefreshTime()) {
      if (!first) sb.append(", ");
      sb.append("refreshTime:");
      if (this.refreshTime == null) {
        sb.append("null");
      } else {
        sb.append(this.refreshTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetOccupation()) {
      if (!first) sb.append(", ");
      sb.append("occupation:");
      if (this.occupation == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation);
      }
      first = false;
    }
    if (isSetSyncFailReason()) {
      if (!first) sb.append(", ");
      sb.append("syncFailReason:");
      if (this.syncFailReason == null) {
        sb.append("null");
      } else {
        sb.append(this.syncFailReason);
      }
      first = false;
    }
    if (isSetUseCompanyAddress()) {
      if (!first) sb.append(", ");
      sb.append("useCompanyAddress:");
      sb.append(this.useCompanyAddress);
      first = false;
    }
    if (isSetThirdPartyAccountId()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartyAccountId:");
      sb.append(this.thirdPartyAccountId);
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetSalaryMonth()) {
      if (!first) sb.append(", ");
      sb.append("salaryMonth:");
      sb.append(this.salaryMonth);
      first = false;
    }
    if (isSetFeedbackPeriod()) {
      if (!first) sb.append(", ");
      sb.append("feedbackPeriod:");
      sb.append(this.feedbackPeriod);
      first = false;
    }
    if (isSetSalaryDiscuss()) {
      if (!first) sb.append(", ");
      sb.append("salaryDiscuss:");
      sb.append(this.salaryDiscuss);
      first = false;
    }
    if (isSetSalaryBottom()) {
      if (!first) sb.append(", ");
      sb.append("salaryBottom:");
      sb.append(this.salaryBottom);
      first = false;
    }
    if (isSetSalaryTop()) {
      if (!first) sb.append(", ");
      sb.append("salaryTop:");
      sb.append(this.salaryTop);
      first = false;
    }
    if (isSetPracticeSalary()) {
      if (!first) sb.append(", ");
      sb.append("practiceSalary:");
      sb.append(this.practiceSalary);
      first = false;
    }
    if (isSetPracticePerWeek()) {
      if (!first) sb.append(", ");
      sb.append("practicePerWeek:");
      sb.append(this.practicePerWeek);
      first = false;
    }
    if (isSetPracticeSalaryUnit()) {
      if (!first) sb.append(", ");
      sb.append("practiceSalaryUnit:");
      sb.append(this.practiceSalaryUnit);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetCompanyName()) {
      if (!first) sb.append(", ");
      sb.append("companyName:");
      if (this.companyName == null) {
        sb.append("null");
      } else {
        sb.append(this.companyName);
      }
      first = false;
    }
    if (isSetAddressId()) {
      if (!first) sb.append(", ");
      sb.append("addressId:");
      sb.append(this.addressId);
      first = false;
    }
    if (isSetAddressName()) {
      if (!first) sb.append(", ");
      sb.append("addressName:");
      if (this.addressName == null) {
        sb.append("null");
      } else {
        sb.append(this.addressName);
      }
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetDepartmentName()) {
      if (!first) sb.append(", ");
      sb.append("departmentName:");
      if (this.departmentName == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentName);
      }
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetFeature()) {
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
    }
    if (isSetInternship()) {
      if (!first) sb.append(", ");
      sb.append("internship:");
      sb.append(this.internship);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrThirdPartyPositionDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrThirdPartyPositionDOStandardScheme getScheme() {
      return new HrThirdPartyPositionDOStandardScheme();
    }
  }

  private static class HrThirdPartyPositionDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrThirdPartyPositionDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionId = iprot.readI32();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THIRD_PART_POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartPositionId = iprot.readString();
              struct.setThirdPartPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_SYNCHRONIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSynchronization = iprot.readI32();
              struct.setIsSynchronizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRefresh = iprot.readI32();
              struct.setIsRefreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYNC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncTime = iprot.readString();
              struct.setSyncTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REFRESH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refreshTime = iprot.readString();
              struct.setRefreshTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SYNC_FAIL_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncFailReason = iprot.readString();
              struct.setSyncFailReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USE_COMPANY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useCompanyAddress = iprot.readI32();
              struct.setUseCompanyAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // THIRD_PARTY_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thirdPartyAccountId = iprot.readI32();
              struct.setThirdPartyAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = iprot.readI32();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SALARY_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryMonth = iprot.readI32();
              struct.setSalaryMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FEEDBACK_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.feedbackPeriod = iprot.readI32();
              struct.setFeedbackPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SALARY_DISCUSS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryDiscuss = iprot.readI32();
              struct.setSalaryDiscussIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryBottom = iprot.readI32();
              struct.setSalaryBottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryTop = iprot.readI32();
              struct.setSalaryTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PRACTICE_SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.practiceSalary = iprot.readI32();
              struct.setPracticeSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRACTICE_PER_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.practicePerWeek = iprot.readByte();
              struct.setPracticePerWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRACTICE_SALARY_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.practiceSalaryUnit = iprot.readByte();
              struct.setPracticeSalaryUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressId = iprot.readI32();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ADDRESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressName = iprot.readString();
              struct.setAddressNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departmentId = iprot.readI32();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departmentName = iprot.readString();
              struct.setDepartmentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature = iprot.readString();
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // INTERNSHIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.internship = iprot.readBool();
              struct.setInternshipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.thirdPartPositionId != null) {
        if (struct.isSetThirdPartPositionId()) {
          oprot.writeFieldBegin(THIRD_PART_POSITION_ID_FIELD_DESC);
          oprot.writeString(struct.thirdPartPositionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSynchronization()) {
        oprot.writeFieldBegin(IS_SYNCHRONIZATION_FIELD_DESC);
        oprot.writeI32(struct.isSynchronization);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeFieldBegin(IS_REFRESH_FIELD_DESC);
        oprot.writeI32(struct.isRefresh);
        oprot.writeFieldEnd();
      }
      if (struct.syncTime != null) {
        if (struct.isSetSyncTime()) {
          oprot.writeFieldBegin(SYNC_TIME_FIELD_DESC);
          oprot.writeString(struct.syncTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refreshTime != null) {
        if (struct.isSetRefreshTime()) {
          oprot.writeFieldBegin(REFRESH_TIME_FIELD_DESC);
          oprot.writeString(struct.refreshTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.occupation != null) {
        if (struct.isSetOccupation()) {
          oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
          oprot.writeString(struct.occupation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.syncFailReason != null) {
        if (struct.isSetSyncFailReason()) {
          oprot.writeFieldBegin(SYNC_FAIL_REASON_FIELD_DESC);
          oprot.writeString(struct.syncFailReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeFieldBegin(USE_COMPANY_ADDRESS_FIELD_DESC);
        oprot.writeI32(struct.useCompanyAddress);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThirdPartyAccountId()) {
        oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.thirdPartyAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChannel()) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSalaryMonth()) {
        oprot.writeFieldBegin(SALARY_MONTH_FIELD_DESC);
        oprot.writeI32(struct.salaryMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFeedbackPeriod()) {
        oprot.writeFieldBegin(FEEDBACK_PERIOD_FIELD_DESC);
        oprot.writeI32(struct.feedbackPeriod);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryDiscuss()) {
        oprot.writeFieldBegin(SALARY_DISCUSS_FIELD_DESC);
        oprot.writeI32(struct.salaryDiscuss);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salaryBottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salaryTop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticeSalary()) {
        oprot.writeFieldBegin(PRACTICE_SALARY_FIELD_DESC);
        oprot.writeI32(struct.practiceSalary);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticePerWeek()) {
        oprot.writeFieldBegin(PRACTICE_PER_WEEK_FIELD_DESC);
        oprot.writeByte(struct.practicePerWeek);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticeSalaryUnit()) {
        oprot.writeFieldBegin(PRACTICE_SALARY_UNIT_FIELD_DESC);
        oprot.writeByte(struct.practiceSalaryUnit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.companyName != null) {
        if (struct.isSetCompanyName()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.companyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAddressId()) {
        oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
        oprot.writeI32(struct.addressId);
        oprot.writeFieldEnd();
      }
      if (struct.addressName != null) {
        if (struct.isSetAddressName()) {
          oprot.writeFieldBegin(ADDRESS_NAME_FIELD_DESC);
          oprot.writeString(struct.addressName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.departmentName != null) {
        if (struct.isSetDepartmentName()) {
          oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.departmentName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.feature != null) {
        if (struct.isSetFeature()) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInternship()) {
        oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
        oprot.writeBool(struct.internship);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrThirdPartyPositionDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrThirdPartyPositionDOTupleScheme getScheme() {
      return new HrThirdPartyPositionDOTupleScheme();
    }
  }

  private static class HrThirdPartyPositionDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrThirdPartyPositionDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPositionId()) {
        optionals.set(1);
      }
      if (struct.isSetThirdPartPositionId()) {
        optionals.set(2);
      }
      if (struct.isSetIsSynchronization()) {
        optionals.set(3);
      }
      if (struct.isSetIsRefresh()) {
        optionals.set(4);
      }
      if (struct.isSetSyncTime()) {
        optionals.set(5);
      }
      if (struct.isSetRefreshTime()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(7);
      }
      if (struct.isSetAddress()) {
        optionals.set(8);
      }
      if (struct.isSetOccupation()) {
        optionals.set(9);
      }
      if (struct.isSetSyncFailReason()) {
        optionals.set(10);
      }
      if (struct.isSetUseCompanyAddress()) {
        optionals.set(11);
      }
      if (struct.isSetThirdPartyAccountId()) {
        optionals.set(12);
      }
      if (struct.isSetChannel()) {
        optionals.set(13);
      }
      if (struct.isSetDepartment()) {
        optionals.set(14);
      }
      if (struct.isSetSalaryMonth()) {
        optionals.set(15);
      }
      if (struct.isSetFeedbackPeriod()) {
        optionals.set(16);
      }
      if (struct.isSetSalaryDiscuss()) {
        optionals.set(17);
      }
      if (struct.isSetSalaryBottom()) {
        optionals.set(18);
      }
      if (struct.isSetSalaryTop()) {
        optionals.set(19);
      }
      if (struct.isSetPracticeSalary()) {
        optionals.set(20);
      }
      if (struct.isSetPracticePerWeek()) {
        optionals.set(21);
      }
      if (struct.isSetPracticeSalaryUnit()) {
        optionals.set(22);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(23);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(24);
      }
      if (struct.isSetAddressId()) {
        optionals.set(25);
      }
      if (struct.isSetAddressName()) {
        optionals.set(26);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(27);
      }
      if (struct.isSetDepartmentName()) {
        optionals.set(28);
      }
      if (struct.isSetCount()) {
        optionals.set(29);
      }
      if (struct.isSetFeature()) {
        optionals.set(30);
      }
      if (struct.isSetInternship()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI32(struct.positionId);
      }
      if (struct.isSetThirdPartPositionId()) {
        oprot.writeString(struct.thirdPartPositionId);
      }
      if (struct.isSetIsSynchronization()) {
        oprot.writeI32(struct.isSynchronization);
      }
      if (struct.isSetIsRefresh()) {
        oprot.writeI32(struct.isRefresh);
      }
      if (struct.isSetSyncTime()) {
        oprot.writeString(struct.syncTime);
      }
      if (struct.isSetRefreshTime()) {
        oprot.writeString(struct.refreshTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetSyncFailReason()) {
        oprot.writeString(struct.syncFailReason);
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeI32(struct.useCompanyAddress);
      }
      if (struct.isSetThirdPartyAccountId()) {
        oprot.writeI32(struct.thirdPartyAccountId);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetSalaryMonth()) {
        oprot.writeI32(struct.salaryMonth);
      }
      if (struct.isSetFeedbackPeriod()) {
        oprot.writeI32(struct.feedbackPeriod);
      }
      if (struct.isSetSalaryDiscuss()) {
        oprot.writeI32(struct.salaryDiscuss);
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeI32(struct.salaryBottom);
      }
      if (struct.isSetSalaryTop()) {
        oprot.writeI32(struct.salaryTop);
      }
      if (struct.isSetPracticeSalary()) {
        oprot.writeI32(struct.practiceSalary);
      }
      if (struct.isSetPracticePerWeek()) {
        oprot.writeByte(struct.practicePerWeek);
      }
      if (struct.isSetPracticeSalaryUnit()) {
        oprot.writeByte(struct.practiceSalaryUnit);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetAddressId()) {
        oprot.writeI32(struct.addressId);
      }
      if (struct.isSetAddressName()) {
        oprot.writeString(struct.addressName);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI32(struct.departmentId);
      }
      if (struct.isSetDepartmentName()) {
        oprot.writeString(struct.departmentName);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetFeature()) {
        oprot.writeString(struct.feature);
      }
      if (struct.isSetInternship()) {
        oprot.writeBool(struct.internship);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrThirdPartyPositionDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.positionId = iprot.readI32();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.thirdPartPositionId = iprot.readString();
        struct.setThirdPartPositionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSynchronization = iprot.readI32();
        struct.setIsSynchronizationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isRefresh = iprot.readI32();
        struct.setIsRefreshIsSet(true);
      }
      if (incoming.get(5)) {
        struct.syncTime = iprot.readString();
        struct.setSyncTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refreshTime = iprot.readString();
        struct.setRefreshTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(10)) {
        struct.syncFailReason = iprot.readString();
        struct.setSyncFailReasonIsSet(true);
      }
      if (incoming.get(11)) {
        struct.useCompanyAddress = iprot.readI32();
        struct.setUseCompanyAddressIsSet(true);
      }
      if (incoming.get(12)) {
        struct.thirdPartyAccountId = iprot.readI32();
        struct.setThirdPartyAccountIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.channel = iprot.readI32();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(15)) {
        struct.salaryMonth = iprot.readI32();
        struct.setSalaryMonthIsSet(true);
      }
      if (incoming.get(16)) {
        struct.feedbackPeriod = iprot.readI32();
        struct.setFeedbackPeriodIsSet(true);
      }
      if (incoming.get(17)) {
        struct.salaryDiscuss = iprot.readI32();
        struct.setSalaryDiscussIsSet(true);
      }
      if (incoming.get(18)) {
        struct.salaryBottom = iprot.readI32();
        struct.setSalaryBottomIsSet(true);
      }
      if (incoming.get(19)) {
        struct.salaryTop = iprot.readI32();
        struct.setSalaryTopIsSet(true);
      }
      if (incoming.get(20)) {
        struct.practiceSalary = iprot.readI32();
        struct.setPracticeSalaryIsSet(true);
      }
      if (incoming.get(21)) {
        struct.practicePerWeek = iprot.readByte();
        struct.setPracticePerWeekIsSet(true);
      }
      if (incoming.get(22)) {
        struct.practiceSalaryUnit = iprot.readByte();
        struct.setPracticeSalaryUnitIsSet(true);
      }
      if (incoming.get(23)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.addressId = iprot.readI32();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.addressName = iprot.readString();
        struct.setAddressNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.departmentId = iprot.readI32();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.departmentName = iprot.readString();
        struct.setDepartmentNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(30)) {
        struct.feature = iprot.readString();
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(31)) {
        struct.internship = iprot.readBool();
        struct.setInternshipIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

