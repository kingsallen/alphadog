/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.jobdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class JobApplicationConfDO implements org.apache.thrift.TBase<JobApplicationConfDO, JobApplicationConfDO._Fields>, java.io.Serializable, Cloneable, Comparable<JobApplicationConfDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobApplicationConfDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField APPNOTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("appnotice", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APPNOTICE_TPL_FIELD_DESC = new org.apache.thrift.protocol.TField("appnoticeTpl", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APP_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("appReply", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMAIL_APPNOTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAppnotice", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_APPREPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAppreply", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SMS_APPNOTICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("smsAppnoticeId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SMS_APPNOTICE_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("smsAppnoticePrefix", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SMS_APPNOTICE_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("smsAppnoticeSignature", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SMS_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("smsDelay", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FORWARD_CLICK_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardClickReward", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FORWARD_CLICK_REWARD_TPL_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardClickRewardTpl", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField FORWARD_APP_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardAppReward", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField FORWARD_APP_REWARD_TPL_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardAppRewardTpl", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField EMAIL_RESUME_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("emailResumeConf", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobApplicationConfDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobApplicationConfDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public int appnotice; // optional
  public int appnoticeTpl; // optional
  public String appReply; // optional
  public int emailAppnotice; // optional
  public String emailAppreply; // optional
  public int smsAppnoticeId; // optional
  public String smsAppnoticePrefix; // optional
  public String smsAppnoticeSignature; // optional
  public int smsDelay; // optional
  public int forwardClickReward; // optional
  public int forwardClickRewardTpl; // optional
  public int forwardAppReward; // optional
  public int forwardAppRewardTpl; // optional
  public byte emailResumeConf; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    APPNOTICE((short)3, "appnotice"),
    APPNOTICE_TPL((short)4, "appnoticeTpl"),
    APP_REPLY((short)5, "appReply"),
    EMAIL_APPNOTICE((short)6, "emailAppnotice"),
    EMAIL_APPREPLY((short)7, "emailAppreply"),
    SMS_APPNOTICE_ID((short)8, "smsAppnoticeId"),
    SMS_APPNOTICE_PREFIX((short)9, "smsAppnoticePrefix"),
    SMS_APPNOTICE_SIGNATURE((short)10, "smsAppnoticeSignature"),
    SMS_DELAY((short)11, "smsDelay"),
    FORWARD_CLICK_REWARD((short)12, "forwardClickReward"),
    FORWARD_CLICK_REWARD_TPL((short)13, "forwardClickRewardTpl"),
    FORWARD_APP_REWARD((short)14, "forwardAppReward"),
    FORWARD_APP_REWARD_TPL((short)15, "forwardAppRewardTpl"),
    EMAIL_RESUME_CONF((short)16, "emailResumeConf"),
    CREATE_TIME((short)17, "createTime"),
    UPDATE_TIME((short)18, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // APPNOTICE
          return APPNOTICE;
        case 4: // APPNOTICE_TPL
          return APPNOTICE_TPL;
        case 5: // APP_REPLY
          return APP_REPLY;
        case 6: // EMAIL_APPNOTICE
          return EMAIL_APPNOTICE;
        case 7: // EMAIL_APPREPLY
          return EMAIL_APPREPLY;
        case 8: // SMS_APPNOTICE_ID
          return SMS_APPNOTICE_ID;
        case 9: // SMS_APPNOTICE_PREFIX
          return SMS_APPNOTICE_PREFIX;
        case 10: // SMS_APPNOTICE_SIGNATURE
          return SMS_APPNOTICE_SIGNATURE;
        case 11: // SMS_DELAY
          return SMS_DELAY;
        case 12: // FORWARD_CLICK_REWARD
          return FORWARD_CLICK_REWARD;
        case 13: // FORWARD_CLICK_REWARD_TPL
          return FORWARD_CLICK_REWARD_TPL;
        case 14: // FORWARD_APP_REWARD
          return FORWARD_APP_REWARD;
        case 15: // FORWARD_APP_REWARD_TPL
          return FORWARD_APP_REWARD_TPL;
        case 16: // EMAIL_RESUME_CONF
          return EMAIL_RESUME_CONF;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __APPNOTICE_ISSET_ID = 2;
  private static final int __APPNOTICETPL_ISSET_ID = 3;
  private static final int __EMAILAPPNOTICE_ISSET_ID = 4;
  private static final int __SMSAPPNOTICEID_ISSET_ID = 5;
  private static final int __SMSDELAY_ISSET_ID = 6;
  private static final int __FORWARDCLICKREWARD_ISSET_ID = 7;
  private static final int __FORWARDCLICKREWARDTPL_ISSET_ID = 8;
  private static final int __FORWARDAPPREWARD_ISSET_ID = 9;
  private static final int __FORWARDAPPREWARDTPL_ISSET_ID = 10;
  private static final int __EMAILRESUMECONF_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.APPNOTICE,_Fields.APPNOTICE_TPL,_Fields.APP_REPLY,_Fields.EMAIL_APPNOTICE,_Fields.EMAIL_APPREPLY,_Fields.SMS_APPNOTICE_ID,_Fields.SMS_APPNOTICE_PREFIX,_Fields.SMS_APPNOTICE_SIGNATURE,_Fields.SMS_DELAY,_Fields.FORWARD_CLICK_REWARD,_Fields.FORWARD_CLICK_REWARD_TPL,_Fields.FORWARD_APP_REWARD,_Fields.FORWARD_APP_REWARD_TPL,_Fields.EMAIL_RESUME_CONF,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPNOTICE, new org.apache.thrift.meta_data.FieldMetaData("appnotice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPNOTICE_TPL, new org.apache.thrift.meta_data.FieldMetaData("appnoticeTpl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_REPLY, new org.apache.thrift.meta_data.FieldMetaData("appReply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_APPNOTICE, new org.apache.thrift.meta_data.FieldMetaData("emailAppnotice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL_APPREPLY, new org.apache.thrift.meta_data.FieldMetaData("emailAppreply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMS_APPNOTICE_ID, new org.apache.thrift.meta_data.FieldMetaData("smsAppnoticeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMS_APPNOTICE_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("smsAppnoticePrefix", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMS_APPNOTICE_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("smsAppnoticeSignature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMS_DELAY, new org.apache.thrift.meta_data.FieldMetaData("smsDelay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORWARD_CLICK_REWARD, new org.apache.thrift.meta_data.FieldMetaData("forwardClickReward", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORWARD_CLICK_REWARD_TPL, new org.apache.thrift.meta_data.FieldMetaData("forwardClickRewardTpl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORWARD_APP_REWARD, new org.apache.thrift.meta_data.FieldMetaData("forwardAppReward", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORWARD_APP_REWARD_TPL, new org.apache.thrift.meta_data.FieldMetaData("forwardAppRewardTpl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL_RESUME_CONF, new org.apache.thrift.meta_data.FieldMetaData("emailResumeConf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobApplicationConfDO.class, metaDataMap);
  }

  public JobApplicationConfDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobApplicationConfDO(JobApplicationConfDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    this.appnotice = other.appnotice;
    this.appnoticeTpl = other.appnoticeTpl;
    if (other.isSetAppReply()) {
      this.appReply = other.appReply;
    }
    this.emailAppnotice = other.emailAppnotice;
    if (other.isSetEmailAppreply()) {
      this.emailAppreply = other.emailAppreply;
    }
    this.smsAppnoticeId = other.smsAppnoticeId;
    if (other.isSetSmsAppnoticePrefix()) {
      this.smsAppnoticePrefix = other.smsAppnoticePrefix;
    }
    if (other.isSetSmsAppnoticeSignature()) {
      this.smsAppnoticeSignature = other.smsAppnoticeSignature;
    }
    this.smsDelay = other.smsDelay;
    this.forwardClickReward = other.forwardClickReward;
    this.forwardClickRewardTpl = other.forwardClickRewardTpl;
    this.forwardAppReward = other.forwardAppReward;
    this.forwardAppRewardTpl = other.forwardAppRewardTpl;
    this.emailResumeConf = other.emailResumeConf;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public JobApplicationConfDO deepCopy() {
    return new JobApplicationConfDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setAppnoticeIsSet(false);
    this.appnotice = 0;
    setAppnoticeTplIsSet(false);
    this.appnoticeTpl = 0;
    this.appReply = null;
    setEmailAppnoticeIsSet(false);
    this.emailAppnotice = 0;
    this.emailAppreply = null;
    setSmsAppnoticeIdIsSet(false);
    this.smsAppnoticeId = 0;
    this.smsAppnoticePrefix = null;
    this.smsAppnoticeSignature = null;
    setSmsDelayIsSet(false);
    this.smsDelay = 0;
    setForwardClickRewardIsSet(false);
    this.forwardClickReward = 0;
    setForwardClickRewardTplIsSet(false);
    this.forwardClickRewardTpl = 0;
    setForwardAppRewardIsSet(false);
    this.forwardAppReward = 0;
    setForwardAppRewardTplIsSet(false);
    this.forwardAppRewardTpl = 0;
    setEmailResumeConfIsSet(false);
    this.emailResumeConf = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public JobApplicationConfDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public JobApplicationConfDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getAppnotice() {
    return this.appnotice;
  }

  public JobApplicationConfDO setAppnotice(int appnotice) {
    this.appnotice = appnotice;
    setAppnoticeIsSet(true);
    return this;
  }

  public void unsetAppnotice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPNOTICE_ISSET_ID);
  }

  /** Returns true if field appnotice is set (has been assigned a value) and false otherwise */
  public boolean isSetAppnotice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPNOTICE_ISSET_ID);
  }

  public void setAppnoticeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPNOTICE_ISSET_ID, value);
  }

  public int getAppnoticeTpl() {
    return this.appnoticeTpl;
  }

  public JobApplicationConfDO setAppnoticeTpl(int appnoticeTpl) {
    this.appnoticeTpl = appnoticeTpl;
    setAppnoticeTplIsSet(true);
    return this;
  }

  public void unsetAppnoticeTpl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPNOTICETPL_ISSET_ID);
  }

  /** Returns true if field appnoticeTpl is set (has been assigned a value) and false otherwise */
  public boolean isSetAppnoticeTpl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPNOTICETPL_ISSET_ID);
  }

  public void setAppnoticeTplIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPNOTICETPL_ISSET_ID, value);
  }

  public String getAppReply() {
    return this.appReply;
  }

  public JobApplicationConfDO setAppReply(String appReply) {
    this.appReply = appReply;
    return this;
  }

  public void unsetAppReply() {
    this.appReply = null;
  }

  /** Returns true if field appReply is set (has been assigned a value) and false otherwise */
  public boolean isSetAppReply() {
    return this.appReply != null;
  }

  public void setAppReplyIsSet(boolean value) {
    if (!value) {
      this.appReply = null;
    }
  }

  public int getEmailAppnotice() {
    return this.emailAppnotice;
  }

  public JobApplicationConfDO setEmailAppnotice(int emailAppnotice) {
    this.emailAppnotice = emailAppnotice;
    setEmailAppnoticeIsSet(true);
    return this;
  }

  public void unsetEmailAppnotice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMAILAPPNOTICE_ISSET_ID);
  }

  /** Returns true if field emailAppnotice is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAppnotice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMAILAPPNOTICE_ISSET_ID);
  }

  public void setEmailAppnoticeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMAILAPPNOTICE_ISSET_ID, value);
  }

  public String getEmailAppreply() {
    return this.emailAppreply;
  }

  public JobApplicationConfDO setEmailAppreply(String emailAppreply) {
    this.emailAppreply = emailAppreply;
    return this;
  }

  public void unsetEmailAppreply() {
    this.emailAppreply = null;
  }

  /** Returns true if field emailAppreply is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAppreply() {
    return this.emailAppreply != null;
  }

  public void setEmailAppreplyIsSet(boolean value) {
    if (!value) {
      this.emailAppreply = null;
    }
  }

  public int getSmsAppnoticeId() {
    return this.smsAppnoticeId;
  }

  public JobApplicationConfDO setSmsAppnoticeId(int smsAppnoticeId) {
    this.smsAppnoticeId = smsAppnoticeId;
    setSmsAppnoticeIdIsSet(true);
    return this;
  }

  public void unsetSmsAppnoticeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMSAPPNOTICEID_ISSET_ID);
  }

  /** Returns true if field smsAppnoticeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsAppnoticeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMSAPPNOTICEID_ISSET_ID);
  }

  public void setSmsAppnoticeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMSAPPNOTICEID_ISSET_ID, value);
  }

  public String getSmsAppnoticePrefix() {
    return this.smsAppnoticePrefix;
  }

  public JobApplicationConfDO setSmsAppnoticePrefix(String smsAppnoticePrefix) {
    this.smsAppnoticePrefix = smsAppnoticePrefix;
    return this;
  }

  public void unsetSmsAppnoticePrefix() {
    this.smsAppnoticePrefix = null;
  }

  /** Returns true if field smsAppnoticePrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsAppnoticePrefix() {
    return this.smsAppnoticePrefix != null;
  }

  public void setSmsAppnoticePrefixIsSet(boolean value) {
    if (!value) {
      this.smsAppnoticePrefix = null;
    }
  }

  public String getSmsAppnoticeSignature() {
    return this.smsAppnoticeSignature;
  }

  public JobApplicationConfDO setSmsAppnoticeSignature(String smsAppnoticeSignature) {
    this.smsAppnoticeSignature = smsAppnoticeSignature;
    return this;
  }

  public void unsetSmsAppnoticeSignature() {
    this.smsAppnoticeSignature = null;
  }

  /** Returns true if field smsAppnoticeSignature is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsAppnoticeSignature() {
    return this.smsAppnoticeSignature != null;
  }

  public void setSmsAppnoticeSignatureIsSet(boolean value) {
    if (!value) {
      this.smsAppnoticeSignature = null;
    }
  }

  public int getSmsDelay() {
    return this.smsDelay;
  }

  public JobApplicationConfDO setSmsDelay(int smsDelay) {
    this.smsDelay = smsDelay;
    setSmsDelayIsSet(true);
    return this;
  }

  public void unsetSmsDelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMSDELAY_ISSET_ID);
  }

  /** Returns true if field smsDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsDelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMSDELAY_ISSET_ID);
  }

  public void setSmsDelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMSDELAY_ISSET_ID, value);
  }

  public int getForwardClickReward() {
    return this.forwardClickReward;
  }

  public JobApplicationConfDO setForwardClickReward(int forwardClickReward) {
    this.forwardClickReward = forwardClickReward;
    setForwardClickRewardIsSet(true);
    return this;
  }

  public void unsetForwardClickReward() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDCLICKREWARD_ISSET_ID);
  }

  /** Returns true if field forwardClickReward is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardClickReward() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDCLICKREWARD_ISSET_ID);
  }

  public void setForwardClickRewardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDCLICKREWARD_ISSET_ID, value);
  }

  public int getForwardClickRewardTpl() {
    return this.forwardClickRewardTpl;
  }

  public JobApplicationConfDO setForwardClickRewardTpl(int forwardClickRewardTpl) {
    this.forwardClickRewardTpl = forwardClickRewardTpl;
    setForwardClickRewardTplIsSet(true);
    return this;
  }

  public void unsetForwardClickRewardTpl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDCLICKREWARDTPL_ISSET_ID);
  }

  /** Returns true if field forwardClickRewardTpl is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardClickRewardTpl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDCLICKREWARDTPL_ISSET_ID);
  }

  public void setForwardClickRewardTplIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDCLICKREWARDTPL_ISSET_ID, value);
  }

  public int getForwardAppReward() {
    return this.forwardAppReward;
  }

  public JobApplicationConfDO setForwardAppReward(int forwardAppReward) {
    this.forwardAppReward = forwardAppReward;
    setForwardAppRewardIsSet(true);
    return this;
  }

  public void unsetForwardAppReward() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDAPPREWARD_ISSET_ID);
  }

  /** Returns true if field forwardAppReward is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardAppReward() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDAPPREWARD_ISSET_ID);
  }

  public void setForwardAppRewardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDAPPREWARD_ISSET_ID, value);
  }

  public int getForwardAppRewardTpl() {
    return this.forwardAppRewardTpl;
  }

  public JobApplicationConfDO setForwardAppRewardTpl(int forwardAppRewardTpl) {
    this.forwardAppRewardTpl = forwardAppRewardTpl;
    setForwardAppRewardTplIsSet(true);
    return this;
  }

  public void unsetForwardAppRewardTpl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDAPPREWARDTPL_ISSET_ID);
  }

  /** Returns true if field forwardAppRewardTpl is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardAppRewardTpl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDAPPREWARDTPL_ISSET_ID);
  }

  public void setForwardAppRewardTplIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDAPPREWARDTPL_ISSET_ID, value);
  }

  public byte getEmailResumeConf() {
    return this.emailResumeConf;
  }

  public JobApplicationConfDO setEmailResumeConf(byte emailResumeConf) {
    this.emailResumeConf = emailResumeConf;
    setEmailResumeConfIsSet(true);
    return this;
  }

  public void unsetEmailResumeConf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID);
  }

  /** Returns true if field emailResumeConf is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailResumeConf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID);
  }

  public void setEmailResumeConfIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMAILRESUMECONF_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public JobApplicationConfDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public JobApplicationConfDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case APPNOTICE:
      if (value == null) {
        unsetAppnotice();
      } else {
        setAppnotice((Integer)value);
      }
      break;

    case APPNOTICE_TPL:
      if (value == null) {
        unsetAppnoticeTpl();
      } else {
        setAppnoticeTpl((Integer)value);
      }
      break;

    case APP_REPLY:
      if (value == null) {
        unsetAppReply();
      } else {
        setAppReply((String)value);
      }
      break;

    case EMAIL_APPNOTICE:
      if (value == null) {
        unsetEmailAppnotice();
      } else {
        setEmailAppnotice((Integer)value);
      }
      break;

    case EMAIL_APPREPLY:
      if (value == null) {
        unsetEmailAppreply();
      } else {
        setEmailAppreply((String)value);
      }
      break;

    case SMS_APPNOTICE_ID:
      if (value == null) {
        unsetSmsAppnoticeId();
      } else {
        setSmsAppnoticeId((Integer)value);
      }
      break;

    case SMS_APPNOTICE_PREFIX:
      if (value == null) {
        unsetSmsAppnoticePrefix();
      } else {
        setSmsAppnoticePrefix((String)value);
      }
      break;

    case SMS_APPNOTICE_SIGNATURE:
      if (value == null) {
        unsetSmsAppnoticeSignature();
      } else {
        setSmsAppnoticeSignature((String)value);
      }
      break;

    case SMS_DELAY:
      if (value == null) {
        unsetSmsDelay();
      } else {
        setSmsDelay((Integer)value);
      }
      break;

    case FORWARD_CLICK_REWARD:
      if (value == null) {
        unsetForwardClickReward();
      } else {
        setForwardClickReward((Integer)value);
      }
      break;

    case FORWARD_CLICK_REWARD_TPL:
      if (value == null) {
        unsetForwardClickRewardTpl();
      } else {
        setForwardClickRewardTpl((Integer)value);
      }
      break;

    case FORWARD_APP_REWARD:
      if (value == null) {
        unsetForwardAppReward();
      } else {
        setForwardAppReward((Integer)value);
      }
      break;

    case FORWARD_APP_REWARD_TPL:
      if (value == null) {
        unsetForwardAppRewardTpl();
      } else {
        setForwardAppRewardTpl((Integer)value);
      }
      break;

    case EMAIL_RESUME_CONF:
      if (value == null) {
        unsetEmailResumeConf();
      } else {
        setEmailResumeConf((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case APPNOTICE:
      return getAppnotice();

    case APPNOTICE_TPL:
      return getAppnoticeTpl();

    case APP_REPLY:
      return getAppReply();

    case EMAIL_APPNOTICE:
      return getEmailAppnotice();

    case EMAIL_APPREPLY:
      return getEmailAppreply();

    case SMS_APPNOTICE_ID:
      return getSmsAppnoticeId();

    case SMS_APPNOTICE_PREFIX:
      return getSmsAppnoticePrefix();

    case SMS_APPNOTICE_SIGNATURE:
      return getSmsAppnoticeSignature();

    case SMS_DELAY:
      return getSmsDelay();

    case FORWARD_CLICK_REWARD:
      return getForwardClickReward();

    case FORWARD_CLICK_REWARD_TPL:
      return getForwardClickRewardTpl();

    case FORWARD_APP_REWARD:
      return getForwardAppReward();

    case FORWARD_APP_REWARD_TPL:
      return getForwardAppRewardTpl();

    case EMAIL_RESUME_CONF:
      return getEmailResumeConf();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case APPNOTICE:
      return isSetAppnotice();
    case APPNOTICE_TPL:
      return isSetAppnoticeTpl();
    case APP_REPLY:
      return isSetAppReply();
    case EMAIL_APPNOTICE:
      return isSetEmailAppnotice();
    case EMAIL_APPREPLY:
      return isSetEmailAppreply();
    case SMS_APPNOTICE_ID:
      return isSetSmsAppnoticeId();
    case SMS_APPNOTICE_PREFIX:
      return isSetSmsAppnoticePrefix();
    case SMS_APPNOTICE_SIGNATURE:
      return isSetSmsAppnoticeSignature();
    case SMS_DELAY:
      return isSetSmsDelay();
    case FORWARD_CLICK_REWARD:
      return isSetForwardClickReward();
    case FORWARD_CLICK_REWARD_TPL:
      return isSetForwardClickRewardTpl();
    case FORWARD_APP_REWARD:
      return isSetForwardAppReward();
    case FORWARD_APP_REWARD_TPL:
      return isSetForwardAppRewardTpl();
    case EMAIL_RESUME_CONF:
      return isSetEmailResumeConf();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobApplicationConfDO)
      return this.equals((JobApplicationConfDO)that);
    return false;
  }

  public boolean equals(JobApplicationConfDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_appnotice = true && this.isSetAppnotice();
    boolean that_present_appnotice = true && that.isSetAppnotice();
    if (this_present_appnotice || that_present_appnotice) {
      if (!(this_present_appnotice && that_present_appnotice))
        return false;
      if (this.appnotice != that.appnotice)
        return false;
    }

    boolean this_present_appnoticeTpl = true && this.isSetAppnoticeTpl();
    boolean that_present_appnoticeTpl = true && that.isSetAppnoticeTpl();
    if (this_present_appnoticeTpl || that_present_appnoticeTpl) {
      if (!(this_present_appnoticeTpl && that_present_appnoticeTpl))
        return false;
      if (this.appnoticeTpl != that.appnoticeTpl)
        return false;
    }

    boolean this_present_appReply = true && this.isSetAppReply();
    boolean that_present_appReply = true && that.isSetAppReply();
    if (this_present_appReply || that_present_appReply) {
      if (!(this_present_appReply && that_present_appReply))
        return false;
      if (!this.appReply.equals(that.appReply))
        return false;
    }

    boolean this_present_emailAppnotice = true && this.isSetEmailAppnotice();
    boolean that_present_emailAppnotice = true && that.isSetEmailAppnotice();
    if (this_present_emailAppnotice || that_present_emailAppnotice) {
      if (!(this_present_emailAppnotice && that_present_emailAppnotice))
        return false;
      if (this.emailAppnotice != that.emailAppnotice)
        return false;
    }

    boolean this_present_emailAppreply = true && this.isSetEmailAppreply();
    boolean that_present_emailAppreply = true && that.isSetEmailAppreply();
    if (this_present_emailAppreply || that_present_emailAppreply) {
      if (!(this_present_emailAppreply && that_present_emailAppreply))
        return false;
      if (!this.emailAppreply.equals(that.emailAppreply))
        return false;
    }

    boolean this_present_smsAppnoticeId = true && this.isSetSmsAppnoticeId();
    boolean that_present_smsAppnoticeId = true && that.isSetSmsAppnoticeId();
    if (this_present_smsAppnoticeId || that_present_smsAppnoticeId) {
      if (!(this_present_smsAppnoticeId && that_present_smsAppnoticeId))
        return false;
      if (this.smsAppnoticeId != that.smsAppnoticeId)
        return false;
    }

    boolean this_present_smsAppnoticePrefix = true && this.isSetSmsAppnoticePrefix();
    boolean that_present_smsAppnoticePrefix = true && that.isSetSmsAppnoticePrefix();
    if (this_present_smsAppnoticePrefix || that_present_smsAppnoticePrefix) {
      if (!(this_present_smsAppnoticePrefix && that_present_smsAppnoticePrefix))
        return false;
      if (!this.smsAppnoticePrefix.equals(that.smsAppnoticePrefix))
        return false;
    }

    boolean this_present_smsAppnoticeSignature = true && this.isSetSmsAppnoticeSignature();
    boolean that_present_smsAppnoticeSignature = true && that.isSetSmsAppnoticeSignature();
    if (this_present_smsAppnoticeSignature || that_present_smsAppnoticeSignature) {
      if (!(this_present_smsAppnoticeSignature && that_present_smsAppnoticeSignature))
        return false;
      if (!this.smsAppnoticeSignature.equals(that.smsAppnoticeSignature))
        return false;
    }

    boolean this_present_smsDelay = true && this.isSetSmsDelay();
    boolean that_present_smsDelay = true && that.isSetSmsDelay();
    if (this_present_smsDelay || that_present_smsDelay) {
      if (!(this_present_smsDelay && that_present_smsDelay))
        return false;
      if (this.smsDelay != that.smsDelay)
        return false;
    }

    boolean this_present_forwardClickReward = true && this.isSetForwardClickReward();
    boolean that_present_forwardClickReward = true && that.isSetForwardClickReward();
    if (this_present_forwardClickReward || that_present_forwardClickReward) {
      if (!(this_present_forwardClickReward && that_present_forwardClickReward))
        return false;
      if (this.forwardClickReward != that.forwardClickReward)
        return false;
    }

    boolean this_present_forwardClickRewardTpl = true && this.isSetForwardClickRewardTpl();
    boolean that_present_forwardClickRewardTpl = true && that.isSetForwardClickRewardTpl();
    if (this_present_forwardClickRewardTpl || that_present_forwardClickRewardTpl) {
      if (!(this_present_forwardClickRewardTpl && that_present_forwardClickRewardTpl))
        return false;
      if (this.forwardClickRewardTpl != that.forwardClickRewardTpl)
        return false;
    }

    boolean this_present_forwardAppReward = true && this.isSetForwardAppReward();
    boolean that_present_forwardAppReward = true && that.isSetForwardAppReward();
    if (this_present_forwardAppReward || that_present_forwardAppReward) {
      if (!(this_present_forwardAppReward && that_present_forwardAppReward))
        return false;
      if (this.forwardAppReward != that.forwardAppReward)
        return false;
    }

    boolean this_present_forwardAppRewardTpl = true && this.isSetForwardAppRewardTpl();
    boolean that_present_forwardAppRewardTpl = true && that.isSetForwardAppRewardTpl();
    if (this_present_forwardAppRewardTpl || that_present_forwardAppRewardTpl) {
      if (!(this_present_forwardAppRewardTpl && that_present_forwardAppRewardTpl))
        return false;
      if (this.forwardAppRewardTpl != that.forwardAppRewardTpl)
        return false;
    }

    boolean this_present_emailResumeConf = true && this.isSetEmailResumeConf();
    boolean that_present_emailResumeConf = true && that.isSetEmailResumeConf();
    if (this_present_emailResumeConf || that_present_emailResumeConf) {
      if (!(this_present_emailResumeConf && that_present_emailResumeConf))
        return false;
      if (this.emailResumeConf != that.emailResumeConf)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetAppnotice()) ? 131071 : 524287);
    if (isSetAppnotice())
      hashCode = hashCode * 8191 + appnotice;

    hashCode = hashCode * 8191 + ((isSetAppnoticeTpl()) ? 131071 : 524287);
    if (isSetAppnoticeTpl())
      hashCode = hashCode * 8191 + appnoticeTpl;

    hashCode = hashCode * 8191 + ((isSetAppReply()) ? 131071 : 524287);
    if (isSetAppReply())
      hashCode = hashCode * 8191 + appReply.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmailAppnotice()) ? 131071 : 524287);
    if (isSetEmailAppnotice())
      hashCode = hashCode * 8191 + emailAppnotice;

    hashCode = hashCode * 8191 + ((isSetEmailAppreply()) ? 131071 : 524287);
    if (isSetEmailAppreply())
      hashCode = hashCode * 8191 + emailAppreply.hashCode();

    hashCode = hashCode * 8191 + ((isSetSmsAppnoticeId()) ? 131071 : 524287);
    if (isSetSmsAppnoticeId())
      hashCode = hashCode * 8191 + smsAppnoticeId;

    hashCode = hashCode * 8191 + ((isSetSmsAppnoticePrefix()) ? 131071 : 524287);
    if (isSetSmsAppnoticePrefix())
      hashCode = hashCode * 8191 + smsAppnoticePrefix.hashCode();

    hashCode = hashCode * 8191 + ((isSetSmsAppnoticeSignature()) ? 131071 : 524287);
    if (isSetSmsAppnoticeSignature())
      hashCode = hashCode * 8191 + smsAppnoticeSignature.hashCode();

    hashCode = hashCode * 8191 + ((isSetSmsDelay()) ? 131071 : 524287);
    if (isSetSmsDelay())
      hashCode = hashCode * 8191 + smsDelay;

    hashCode = hashCode * 8191 + ((isSetForwardClickReward()) ? 131071 : 524287);
    if (isSetForwardClickReward())
      hashCode = hashCode * 8191 + forwardClickReward;

    hashCode = hashCode * 8191 + ((isSetForwardClickRewardTpl()) ? 131071 : 524287);
    if (isSetForwardClickRewardTpl())
      hashCode = hashCode * 8191 + forwardClickRewardTpl;

    hashCode = hashCode * 8191 + ((isSetForwardAppReward()) ? 131071 : 524287);
    if (isSetForwardAppReward())
      hashCode = hashCode * 8191 + forwardAppReward;

    hashCode = hashCode * 8191 + ((isSetForwardAppRewardTpl()) ? 131071 : 524287);
    if (isSetForwardAppRewardTpl())
      hashCode = hashCode * 8191 + forwardAppRewardTpl;

    hashCode = hashCode * 8191 + ((isSetEmailResumeConf()) ? 131071 : 524287);
    if (isSetEmailResumeConf())
      hashCode = hashCode * 8191 + (int) (emailResumeConf);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JobApplicationConfDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppnotice()).compareTo(other.isSetAppnotice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppnotice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appnotice, other.appnotice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppnoticeTpl()).compareTo(other.isSetAppnoticeTpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppnoticeTpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appnoticeTpl, other.appnoticeTpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppReply()).compareTo(other.isSetAppReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appReply, other.appReply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAppnotice()).compareTo(other.isSetEmailAppnotice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAppnotice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAppnotice, other.emailAppnotice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAppreply()).compareTo(other.isSetEmailAppreply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAppreply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAppreply, other.emailAppreply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsAppnoticeId()).compareTo(other.isSetSmsAppnoticeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsAppnoticeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsAppnoticeId, other.smsAppnoticeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsAppnoticePrefix()).compareTo(other.isSetSmsAppnoticePrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsAppnoticePrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsAppnoticePrefix, other.smsAppnoticePrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsAppnoticeSignature()).compareTo(other.isSetSmsAppnoticeSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsAppnoticeSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsAppnoticeSignature, other.smsAppnoticeSignature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsDelay()).compareTo(other.isSetSmsDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsDelay, other.smsDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardClickReward()).compareTo(other.isSetForwardClickReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardClickReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardClickReward, other.forwardClickReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardClickRewardTpl()).compareTo(other.isSetForwardClickRewardTpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardClickRewardTpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardClickRewardTpl, other.forwardClickRewardTpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardAppReward()).compareTo(other.isSetForwardAppReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardAppReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardAppReward, other.forwardAppReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardAppRewardTpl()).compareTo(other.isSetForwardAppRewardTpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardAppRewardTpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardAppRewardTpl, other.forwardAppRewardTpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailResumeConf()).compareTo(other.isSetEmailResumeConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailResumeConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailResumeConf, other.emailResumeConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobApplicationConfDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetAppnotice()) {
      if (!first) sb.append(", ");
      sb.append("appnotice:");
      sb.append(this.appnotice);
      first = false;
    }
    if (isSetAppnoticeTpl()) {
      if (!first) sb.append(", ");
      sb.append("appnoticeTpl:");
      sb.append(this.appnoticeTpl);
      first = false;
    }
    if (isSetAppReply()) {
      if (!first) sb.append(", ");
      sb.append("appReply:");
      if (this.appReply == null) {
        sb.append("null");
      } else {
        sb.append(this.appReply);
      }
      first = false;
    }
    if (isSetEmailAppnotice()) {
      if (!first) sb.append(", ");
      sb.append("emailAppnotice:");
      sb.append(this.emailAppnotice);
      first = false;
    }
    if (isSetEmailAppreply()) {
      if (!first) sb.append(", ");
      sb.append("emailAppreply:");
      if (this.emailAppreply == null) {
        sb.append("null");
      } else {
        sb.append(this.emailAppreply);
      }
      first = false;
    }
    if (isSetSmsAppnoticeId()) {
      if (!first) sb.append(", ");
      sb.append("smsAppnoticeId:");
      sb.append(this.smsAppnoticeId);
      first = false;
    }
    if (isSetSmsAppnoticePrefix()) {
      if (!first) sb.append(", ");
      sb.append("smsAppnoticePrefix:");
      if (this.smsAppnoticePrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.smsAppnoticePrefix);
      }
      first = false;
    }
    if (isSetSmsAppnoticeSignature()) {
      if (!first) sb.append(", ");
      sb.append("smsAppnoticeSignature:");
      if (this.smsAppnoticeSignature == null) {
        sb.append("null");
      } else {
        sb.append(this.smsAppnoticeSignature);
      }
      first = false;
    }
    if (isSetSmsDelay()) {
      if (!first) sb.append(", ");
      sb.append("smsDelay:");
      sb.append(this.smsDelay);
      first = false;
    }
    if (isSetForwardClickReward()) {
      if (!first) sb.append(", ");
      sb.append("forwardClickReward:");
      sb.append(this.forwardClickReward);
      first = false;
    }
    if (isSetForwardClickRewardTpl()) {
      if (!first) sb.append(", ");
      sb.append("forwardClickRewardTpl:");
      sb.append(this.forwardClickRewardTpl);
      first = false;
    }
    if (isSetForwardAppReward()) {
      if (!first) sb.append(", ");
      sb.append("forwardAppReward:");
      sb.append(this.forwardAppReward);
      first = false;
    }
    if (isSetForwardAppRewardTpl()) {
      if (!first) sb.append(", ");
      sb.append("forwardAppRewardTpl:");
      sb.append(this.forwardAppRewardTpl);
      first = false;
    }
    if (isSetEmailResumeConf()) {
      if (!first) sb.append(", ");
      sb.append("emailResumeConf:");
      sb.append(this.emailResumeConf);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobApplicationConfDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobApplicationConfDOStandardScheme getScheme() {
      return new JobApplicationConfDOStandardScheme();
    }
  }

  private static class JobApplicationConfDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobApplicationConfDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobApplicationConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPNOTICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appnotice = iprot.readI32();
              struct.setAppnoticeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPNOTICE_TPL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appnoticeTpl = iprot.readI32();
              struct.setAppnoticeTplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appReply = iprot.readString();
              struct.setAppReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMAIL_APPNOTICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailAppnotice = iprot.readI32();
              struct.setEmailAppnoticeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL_APPREPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailAppreply = iprot.readString();
              struct.setEmailAppreplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SMS_APPNOTICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsAppnoticeId = iprot.readI32();
              struct.setSmsAppnoticeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SMS_APPNOTICE_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smsAppnoticePrefix = iprot.readString();
              struct.setSmsAppnoticePrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SMS_APPNOTICE_SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smsAppnoticeSignature = iprot.readString();
              struct.setSmsAppnoticeSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SMS_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsDelay = iprot.readI32();
              struct.setSmsDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FORWARD_CLICK_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forwardClickReward = iprot.readI32();
              struct.setForwardClickRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORWARD_CLICK_REWARD_TPL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forwardClickRewardTpl = iprot.readI32();
              struct.setForwardClickRewardTplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FORWARD_APP_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forwardAppReward = iprot.readI32();
              struct.setForwardAppRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FORWARD_APP_REWARD_TPL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forwardAppRewardTpl = iprot.readI32();
              struct.setForwardAppRewardTplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EMAIL_RESUME_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.emailResumeConf = iprot.readByte();
              struct.setEmailResumeConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobApplicationConfDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppnotice()) {
        oprot.writeFieldBegin(APPNOTICE_FIELD_DESC);
        oprot.writeI32(struct.appnotice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppnoticeTpl()) {
        oprot.writeFieldBegin(APPNOTICE_TPL_FIELD_DESC);
        oprot.writeI32(struct.appnoticeTpl);
        oprot.writeFieldEnd();
      }
      if (struct.appReply != null) {
        if (struct.isSetAppReply()) {
          oprot.writeFieldBegin(APP_REPLY_FIELD_DESC);
          oprot.writeString(struct.appReply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmailAppnotice()) {
        oprot.writeFieldBegin(EMAIL_APPNOTICE_FIELD_DESC);
        oprot.writeI32(struct.emailAppnotice);
        oprot.writeFieldEnd();
      }
      if (struct.emailAppreply != null) {
        if (struct.isSetEmailAppreply()) {
          oprot.writeFieldBegin(EMAIL_APPREPLY_FIELD_DESC);
          oprot.writeString(struct.emailAppreply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSmsAppnoticeId()) {
        oprot.writeFieldBegin(SMS_APPNOTICE_ID_FIELD_DESC);
        oprot.writeI32(struct.smsAppnoticeId);
        oprot.writeFieldEnd();
      }
      if (struct.smsAppnoticePrefix != null) {
        if (struct.isSetSmsAppnoticePrefix()) {
          oprot.writeFieldBegin(SMS_APPNOTICE_PREFIX_FIELD_DESC);
          oprot.writeString(struct.smsAppnoticePrefix);
          oprot.writeFieldEnd();
        }
      }
      if (struct.smsAppnoticeSignature != null) {
        if (struct.isSetSmsAppnoticeSignature()) {
          oprot.writeFieldBegin(SMS_APPNOTICE_SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.smsAppnoticeSignature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSmsDelay()) {
        oprot.writeFieldBegin(SMS_DELAY_FIELD_DESC);
        oprot.writeI32(struct.smsDelay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForwardClickReward()) {
        oprot.writeFieldBegin(FORWARD_CLICK_REWARD_FIELD_DESC);
        oprot.writeI32(struct.forwardClickReward);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForwardClickRewardTpl()) {
        oprot.writeFieldBegin(FORWARD_CLICK_REWARD_TPL_FIELD_DESC);
        oprot.writeI32(struct.forwardClickRewardTpl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForwardAppReward()) {
        oprot.writeFieldBegin(FORWARD_APP_REWARD_FIELD_DESC);
        oprot.writeI32(struct.forwardAppReward);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForwardAppRewardTpl()) {
        oprot.writeFieldBegin(FORWARD_APP_REWARD_TPL_FIELD_DESC);
        oprot.writeI32(struct.forwardAppRewardTpl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmailResumeConf()) {
        oprot.writeFieldBegin(EMAIL_RESUME_CONF_FIELD_DESC);
        oprot.writeByte(struct.emailResumeConf);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobApplicationConfDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobApplicationConfDOTupleScheme getScheme() {
      return new JobApplicationConfDOTupleScheme();
    }
  }

  private static class JobApplicationConfDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobApplicationConfDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobApplicationConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetAppnotice()) {
        optionals.set(2);
      }
      if (struct.isSetAppnoticeTpl()) {
        optionals.set(3);
      }
      if (struct.isSetAppReply()) {
        optionals.set(4);
      }
      if (struct.isSetEmailAppnotice()) {
        optionals.set(5);
      }
      if (struct.isSetEmailAppreply()) {
        optionals.set(6);
      }
      if (struct.isSetSmsAppnoticeId()) {
        optionals.set(7);
      }
      if (struct.isSetSmsAppnoticePrefix()) {
        optionals.set(8);
      }
      if (struct.isSetSmsAppnoticeSignature()) {
        optionals.set(9);
      }
      if (struct.isSetSmsDelay()) {
        optionals.set(10);
      }
      if (struct.isSetForwardClickReward()) {
        optionals.set(11);
      }
      if (struct.isSetForwardClickRewardTpl()) {
        optionals.set(12);
      }
      if (struct.isSetForwardAppReward()) {
        optionals.set(13);
      }
      if (struct.isSetForwardAppRewardTpl()) {
        optionals.set(14);
      }
      if (struct.isSetEmailResumeConf()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetAppnotice()) {
        oprot.writeI32(struct.appnotice);
      }
      if (struct.isSetAppnoticeTpl()) {
        oprot.writeI32(struct.appnoticeTpl);
      }
      if (struct.isSetAppReply()) {
        oprot.writeString(struct.appReply);
      }
      if (struct.isSetEmailAppnotice()) {
        oprot.writeI32(struct.emailAppnotice);
      }
      if (struct.isSetEmailAppreply()) {
        oprot.writeString(struct.emailAppreply);
      }
      if (struct.isSetSmsAppnoticeId()) {
        oprot.writeI32(struct.smsAppnoticeId);
      }
      if (struct.isSetSmsAppnoticePrefix()) {
        oprot.writeString(struct.smsAppnoticePrefix);
      }
      if (struct.isSetSmsAppnoticeSignature()) {
        oprot.writeString(struct.smsAppnoticeSignature);
      }
      if (struct.isSetSmsDelay()) {
        oprot.writeI32(struct.smsDelay);
      }
      if (struct.isSetForwardClickReward()) {
        oprot.writeI32(struct.forwardClickReward);
      }
      if (struct.isSetForwardClickRewardTpl()) {
        oprot.writeI32(struct.forwardClickRewardTpl);
      }
      if (struct.isSetForwardAppReward()) {
        oprot.writeI32(struct.forwardAppReward);
      }
      if (struct.isSetForwardAppRewardTpl()) {
        oprot.writeI32(struct.forwardAppRewardTpl);
      }
      if (struct.isSetEmailResumeConf()) {
        oprot.writeByte(struct.emailResumeConf);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobApplicationConfDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appnotice = iprot.readI32();
        struct.setAppnoticeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appnoticeTpl = iprot.readI32();
        struct.setAppnoticeTplIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appReply = iprot.readString();
        struct.setAppReplyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.emailAppnotice = iprot.readI32();
        struct.setEmailAppnoticeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.emailAppreply = iprot.readString();
        struct.setEmailAppreplyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.smsAppnoticeId = iprot.readI32();
        struct.setSmsAppnoticeIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.smsAppnoticePrefix = iprot.readString();
        struct.setSmsAppnoticePrefixIsSet(true);
      }
      if (incoming.get(9)) {
        struct.smsAppnoticeSignature = iprot.readString();
        struct.setSmsAppnoticeSignatureIsSet(true);
      }
      if (incoming.get(10)) {
        struct.smsDelay = iprot.readI32();
        struct.setSmsDelayIsSet(true);
      }
      if (incoming.get(11)) {
        struct.forwardClickReward = iprot.readI32();
        struct.setForwardClickRewardIsSet(true);
      }
      if (incoming.get(12)) {
        struct.forwardClickRewardTpl = iprot.readI32();
        struct.setForwardClickRewardTplIsSet(true);
      }
      if (incoming.get(13)) {
        struct.forwardAppReward = iprot.readI32();
        struct.setForwardAppRewardIsSet(true);
      }
      if (incoming.get(14)) {
        struct.forwardAppRewardTpl = iprot.readI32();
        struct.setForwardAppRewardTplIsSet(true);
      }
      if (incoming.get(15)) {
        struct.emailResumeConf = iprot.readByte();
        struct.setEmailResumeConfIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

