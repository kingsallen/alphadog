/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.chat.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-14")
public class ChatVO implements org.apache.thrift.TBase<ChatVO, ChatVO._Fields>, java.io.Serializable, Cloneable, Comparable<ChatVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatVO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField ORIGIN_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("originStr", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatVOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatVOTupleSchemeFactory();

  public int id; // optional
  public java.lang.String content; // optional
  public java.lang.String create_time; // optional
  public byte speaker; // optional
  public byte origin; // optional
  public java.lang.String originStr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CONTENT((short)2, "content"),
    CREATE_TIME((short)3, "create_time"),
    SPEAKER((short)4, "speaker"),
    ORIGIN((short)5, "origin"),
    ORIGIN_STR((short)6, "originStr");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // SPEAKER
          return SPEAKER;
        case 5: // ORIGIN
          return ORIGIN;
        case 6: // ORIGIN_STR
          return ORIGIN_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SPEAKER_ISSET_ID = 1;
  private static final int __ORIGIN_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CONTENT,_Fields.CREATE_TIME,_Fields.SPEAKER,_Fields.ORIGIN,_Fields.ORIGIN_STR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORIGIN_STR, new org.apache.thrift.meta_data.FieldMetaData("originStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatVO.class, metaDataMap);
  }

  public ChatVO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatVO(ChatVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    this.speaker = other.speaker;
    this.origin = other.origin;
    if (other.isSetOriginStr()) {
      this.originStr = other.originStr;
    }
  }

  public ChatVO deepCopy() {
    return new ChatVO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.content = null;
    this.create_time = null;
    setSpeakerIsSet(false);
    this.speaker = 0;
    setOriginIsSet(false);
    this.origin = 0;
    this.originStr = null;
  }

  public int getId() {
    return this.id;
  }

  public ChatVO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getContent() {
    return this.content;
  }

  public ChatVO setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public ChatVO setCreate_time(java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public byte getSpeaker() {
    return this.speaker;
  }

  public ChatVO setSpeaker(byte speaker) {
    this.speaker = speaker;
    setSpeakerIsSet(true);
    return this;
  }

  public void unsetSpeaker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEAKER_ISSET_ID);
  }

  /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeaker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEAKER_ISSET_ID);
  }

  public void setSpeakerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEAKER_ISSET_ID, value);
  }

  public byte getOrigin() {
    return this.origin;
  }

  public ChatVO setOrigin(byte origin) {
    this.origin = origin;
    setOriginIsSet(true);
    return this;
  }

  public void unsetOrigin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGIN_ISSET_ID);
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGIN_ISSET_ID);
  }

  public void setOriginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGIN_ISSET_ID, value);
  }

  public java.lang.String getOriginStr() {
    return this.originStr;
  }

  public ChatVO setOriginStr(java.lang.String originStr) {
    this.originStr = originStr;
    return this;
  }

  public void unsetOriginStr() {
    this.originStr = null;
  }

  /** Returns true if field originStr is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginStr() {
    return this.originStr != null;
  }

  public void setOriginStrIsSet(boolean value) {
    if (!value) {
      this.originStr = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case SPEAKER:
      if (value == null) {
        unsetSpeaker();
      } else {
        setSpeaker((java.lang.Byte)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((java.lang.Byte)value);
      }
      break;

    case ORIGIN_STR:
      if (value == null) {
        unsetOriginStr();
      } else {
        setOriginStr((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CONTENT:
      return getContent();

    case CREATE_TIME:
      return getCreate_time();

    case SPEAKER:
      return getSpeaker();

    case ORIGIN:
      return getOrigin();

    case ORIGIN_STR:
      return getOriginStr();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CONTENT:
      return isSetContent();
    case CREATE_TIME:
      return isSetCreate_time();
    case SPEAKER:
      return isSetSpeaker();
    case ORIGIN:
      return isSetOrigin();
    case ORIGIN_STR:
      return isSetOriginStr();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatVO)
      return this.equals((ChatVO)that);
    return false;
  }

  public boolean equals(ChatVO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_speaker = true && this.isSetSpeaker();
    boolean that_present_speaker = true && that.isSetSpeaker();
    if (this_present_speaker || that_present_speaker) {
      if (!(this_present_speaker && that_present_speaker))
        return false;
      if (this.speaker != that.speaker)
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (this.origin != that.origin)
        return false;
    }

    boolean this_present_originStr = true && this.isSetOriginStr();
    boolean that_present_originStr = true && that.isSetOriginStr();
    if (this_present_originStr || that_present_originStr) {
      if (!(this_present_originStr && that_present_originStr))
        return false;
      if (!this.originStr.equals(that.originStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpeaker()) ? 131071 : 524287);
    if (isSetSpeaker())
      hashCode = hashCode * 8191 + (int) (speaker);

    hashCode = hashCode * 8191 + ((isSetOrigin()) ? 131071 : 524287);
    if (isSetOrigin())
      hashCode = hashCode * 8191 + (int) (origin);

    hashCode = hashCode * 8191 + ((isSetOriginStr()) ? 131071 : 524287);
    if (isSetOriginStr())
      hashCode = hashCode * 8191 + originStr.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChatVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpeaker()).compareTo(other.isSetSpeaker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeaker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, other.speaker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginStr()).compareTo(other.isSetOriginStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originStr, other.originStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChatVO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetSpeaker()) {
      if (!first) sb.append(", ");
      sb.append("speaker:");
      sb.append(this.speaker);
      first = false;
    }
    if (isSetOrigin()) {
      if (!first) sb.append(", ");
      sb.append("origin:");
      sb.append(this.origin);
      first = false;
    }
    if (isSetOriginStr()) {
      if (!first) sb.append(", ");
      sb.append("originStr:");
      if (this.originStr == null) {
        sb.append("null");
      } else {
        sb.append(this.originStr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatVOStandardScheme getScheme() {
      return new ChatVOStandardScheme();
    }
  }

  private static class ChatVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPEAKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.speaker = iprot.readByte();
              struct.setSpeakerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.origin = iprot.readByte();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORIGIN_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originStr = iprot.readString();
              struct.setOriginStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpeaker()) {
        oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
        oprot.writeByte(struct.speaker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrigin()) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeByte(struct.origin);
        oprot.writeFieldEnd();
      }
      if (struct.originStr != null) {
        if (struct.isSetOriginStr()) {
          oprot.writeFieldBegin(ORIGIN_STR_FIELD_DESC);
          oprot.writeString(struct.originStr);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatVOTupleScheme getScheme() {
      return new ChatVOTupleScheme();
    }
  }

  private static class ChatVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(2);
      }
      if (struct.isSetSpeaker()) {
        optionals.set(3);
      }
      if (struct.isSetOrigin()) {
        optionals.set(4);
      }
      if (struct.isSetOriginStr()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetSpeaker()) {
        oprot.writeByte(struct.speaker);
      }
      if (struct.isSetOrigin()) {
        oprot.writeByte(struct.origin);
      }
      if (struct.isSetOriginStr()) {
        oprot.writeString(struct.originStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.speaker = iprot.readByte();
        struct.setSpeakerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.origin = iprot.readByte();
        struct.setOriginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.originStr = iprot.readString();
        struct.setOriginStrIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

