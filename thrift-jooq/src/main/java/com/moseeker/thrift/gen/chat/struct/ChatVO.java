/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.chat.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-18")
public class ChatVO implements org.apache.thrift.TBase<ChatVO, ChatVO._Fields>, java.io.Serializable, Cloneable, Comparable<ChatVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatVO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField ORIGIN_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("origin_str", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("picUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BTN_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("btnContent", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatVOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatVOTupleSchemeFactory();

  public int id; // optional
  public String content; // optional
  public String create_time; // optional
  public byte speaker; // optional
  public byte origin; // optional
  public String origin_str; // optional
  public String msgType; // optional
  public String picUrl; // optional
  public java.util.List<BtnContent> btnContent; // optional
  public int roomId; // optional
  public int positionId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CONTENT((short)2, "content"),
    CREATE_TIME((short)3, "create_time"),
    SPEAKER((short)4, "speaker"),
    ORIGIN((short)5, "origin"),
    ORIGIN_STR((short)6, "origin_str"),
    MSG_TYPE((short)7, "msgType"),
    PIC_URL((short)8, "picUrl"),
    BTN_CONTENT((short)9, "btnContent"),
    ROOM_ID((short)10, "roomId"),
    POSITION_ID((short)11, "positionId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // SPEAKER
          return SPEAKER;
        case 5: // ORIGIN
          return ORIGIN;
        case 6: // ORIGIN_STR
          return ORIGIN_STR;
        case 7: // MSG_TYPE
          return MSG_TYPE;
        case 8: // PIC_URL
          return PIC_URL;
        case 9: // BTN_CONTENT
          return BTN_CONTENT;
        case 10: // ROOM_ID
          return ROOM_ID;
        case 11: // POSITION_ID
          return POSITION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SPEAKER_ISSET_ID = 1;
  private static final int __ORIGIN_ISSET_ID = 2;
  private static final int __ROOMID_ISSET_ID = 3;
  private static final int __POSITIONID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CONTENT,_Fields.CREATE_TIME,_Fields.SPEAKER,_Fields.ORIGIN,_Fields.ORIGIN_STR,_Fields.MSG_TYPE,_Fields.PIC_URL,_Fields.BTN_CONTENT,_Fields.ROOM_ID,_Fields.POSITION_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORIGIN_STR, new org.apache.thrift.meta_data.FieldMetaData("origin_str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("picUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BTN_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("btnContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BtnContent"))));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatVO.class, metaDataMap);
  }

  public ChatVO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatVO(ChatVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    this.speaker = other.speaker;
    this.origin = other.origin;
    if (other.isSetOrigin_str()) {
      this.origin_str = other.origin_str;
    }
    if (other.isSetMsgType()) {
      this.msgType = other.msgType;
    }
    if (other.isSetPicUrl()) {
      this.picUrl = other.picUrl;
    }
    if (other.isSetBtnContent()) {
      java.util.List<BtnContent> __this__btnContent = new java.util.ArrayList<BtnContent>(other.btnContent.size());
      for (BtnContent other_element : other.btnContent) {
        __this__btnContent.add(new BtnContent(other_element));
      }
      this.btnContent = __this__btnContent;
    }
    this.roomId = other.roomId;
    this.positionId = other.positionId;
  }

  public ChatVO deepCopy() {
    return new ChatVO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.content = null;
    this.create_time = null;
    setSpeakerIsSet(false);
    this.speaker = 0;
    setOriginIsSet(false);
    this.origin = 0;
    this.origin_str = null;
    this.msgType = null;
    this.picUrl = null;
    this.btnContent = null;
    setRoomIdIsSet(false);
    this.roomId = 0;
    setPositionIdIsSet(false);
    this.positionId = 0;
  }

  public int getId() {
    return this.id;
  }

  public ChatVO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public ChatVO setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public ChatVO setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public byte getSpeaker() {
    return this.speaker;
  }

  public ChatVO setSpeaker(byte speaker) {
    this.speaker = speaker;
    setSpeakerIsSet(true);
    return this;
  }

  public void unsetSpeaker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEAKER_ISSET_ID);
  }

  /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeaker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEAKER_ISSET_ID);
  }

  public void setSpeakerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEAKER_ISSET_ID, value);
  }

  public byte getOrigin() {
    return this.origin;
  }

  public ChatVO setOrigin(byte origin) {
    this.origin = origin;
    setOriginIsSet(true);
    return this;
  }

  public void unsetOrigin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGIN_ISSET_ID);
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGIN_ISSET_ID);
  }

  public void setOriginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGIN_ISSET_ID, value);
  }

  public String getOrigin_str() {
    return this.origin_str;
  }

  public ChatVO setOrigin_str(String origin_str) {
    this.origin_str = origin_str;
    return this;
  }

  public void unsetOrigin_str() {
    this.origin_str = null;
  }

  /** Returns true if field origin_str is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin_str() {
    return this.origin_str != null;
  }

  public void setOrigin_strIsSet(boolean value) {
    if (!value) {
      this.origin_str = null;
    }
  }

  public String getMsgType() {
    return this.msgType;
  }

  public ChatVO setMsgType(String msgType) {
    this.msgType = msgType;
    return this;
  }

  public void unsetMsgType() {
    this.msgType = null;
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return this.msgType != null;
  }

  public void setMsgTypeIsSet(boolean value) {
    if (!value) {
      this.msgType = null;
    }
  }

  public String getPicUrl() {
    return this.picUrl;
  }

  public ChatVO setPicUrl(String picUrl) {
    this.picUrl = picUrl;
    return this;
  }

  public void unsetPicUrl() {
    this.picUrl = null;
  }

  /** Returns true if field picUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPicUrl() {
    return this.picUrl != null;
  }

  public void setPicUrlIsSet(boolean value) {
    if (!value) {
      this.picUrl = null;
    }
  }

  public int getBtnContentSize() {
    return (this.btnContent == null) ? 0 : this.btnContent.size();
  }

  public java.util.Iterator<BtnContent> getBtnContentIterator() {
    return (this.btnContent == null) ? null : this.btnContent.iterator();
  }

  public void addToBtnContent(BtnContent elem) {
    if (this.btnContent == null) {
      this.btnContent = new java.util.ArrayList<BtnContent>();
    }
    this.btnContent.add(elem);
  }

  public java.util.List<BtnContent> getBtnContent() {
    return this.btnContent;
  }

  public ChatVO setBtnContent(java.util.List<BtnContent> btnContent) {
    this.btnContent = btnContent;
    return this;
  }

  public void unsetBtnContent() {
    this.btnContent = null;
  }

  /** Returns true if field btnContent is set (has been assigned a value) and false otherwise */
  public boolean isSetBtnContent() {
    return this.btnContent != null;
  }

  public void setBtnContentIsSet(boolean value) {
    if (!value) {
      this.btnContent = null;
    }
  }

  public int getRoomId() {
    return this.roomId;
  }

  public ChatVO setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public int getPositionId() {
    return this.positionId;
  }

  public ChatVO setPositionId(int positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case SPEAKER:
      if (value == null) {
        unsetSpeaker();
      } else {
        setSpeaker((Byte)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((Byte)value);
      }
      break;

    case ORIGIN_STR:
      if (value == null) {
        unsetOrigin_str();
      } else {
        setOrigin_str((String)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPicUrl();
      } else {
        setPicUrl((String)value);
      }
      break;

    case BTN_CONTENT:
      if (value == null) {
        unsetBtnContent();
      } else {
        setBtnContent((java.util.List<BtnContent>)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CONTENT:
      return getContent();

    case CREATE_TIME:
      return getCreate_time();

    case SPEAKER:
      return getSpeaker();

    case ORIGIN:
      return getOrigin();

    case ORIGIN_STR:
      return getOrigin_str();

    case MSG_TYPE:
      return getMsgType();

    case PIC_URL:
      return getPicUrl();

    case BTN_CONTENT:
      return getBtnContent();

    case ROOM_ID:
      return getRoomId();

    case POSITION_ID:
      return getPositionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CONTENT:
      return isSetContent();
    case CREATE_TIME:
      return isSetCreate_time();
    case SPEAKER:
      return isSetSpeaker();
    case ORIGIN:
      return isSetOrigin();
    case ORIGIN_STR:
      return isSetOrigin_str();
    case MSG_TYPE:
      return isSetMsgType();
    case PIC_URL:
      return isSetPicUrl();
    case BTN_CONTENT:
      return isSetBtnContent();
    case ROOM_ID:
      return isSetRoomId();
    case POSITION_ID:
      return isSetPositionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatVO)
      return this.equals((ChatVO)that);
    return false;
  }

  public boolean equals(ChatVO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_speaker = true && this.isSetSpeaker();
    boolean that_present_speaker = true && that.isSetSpeaker();
    if (this_present_speaker || that_present_speaker) {
      if (!(this_present_speaker && that_present_speaker))
        return false;
      if (this.speaker != that.speaker)
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (this.origin != that.origin)
        return false;
    }

    boolean this_present_origin_str = true && this.isSetOrigin_str();
    boolean that_present_origin_str = true && that.isSetOrigin_str();
    if (this_present_origin_str || that_present_origin_str) {
      if (!(this_present_origin_str && that_present_origin_str))
        return false;
      if (!this.origin_str.equals(that.origin_str))
        return false;
    }

    boolean this_present_msgType = true && this.isSetMsgType();
    boolean that_present_msgType = true && that.isSetMsgType();
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (!this.msgType.equals(that.msgType))
        return false;
    }

    boolean this_present_picUrl = true && this.isSetPicUrl();
    boolean that_present_picUrl = true && that.isSetPicUrl();
    if (this_present_picUrl || that_present_picUrl) {
      if (!(this_present_picUrl && that_present_picUrl))
        return false;
      if (!this.picUrl.equals(that.picUrl))
        return false;
    }

    boolean this_present_btnContent = true && this.isSetBtnContent();
    boolean that_present_btnContent = true && that.isSetBtnContent();
    if (this_present_btnContent || that_present_btnContent) {
      if (!(this_present_btnContent && that_present_btnContent))
        return false;
      if (!this.btnContent.equals(that.btnContent))
        return false;
    }

    boolean this_present_roomId = true && this.isSetRoomId();
    boolean that_present_roomId = true && that.isSetRoomId();
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpeaker()) ? 131071 : 524287);
    if (isSetSpeaker())
      hashCode = hashCode * 8191 + (int) (speaker);

    hashCode = hashCode * 8191 + ((isSetOrigin()) ? 131071 : 524287);
    if (isSetOrigin())
      hashCode = hashCode * 8191 + (int) (origin);

    hashCode = hashCode * 8191 + ((isSetOrigin_str()) ? 131071 : 524287);
    if (isSetOrigin_str())
      hashCode = hashCode * 8191 + origin_str.hashCode();

    hashCode = hashCode * 8191 + ((isSetMsgType()) ? 131071 : 524287);
    if (isSetMsgType())
      hashCode = hashCode * 8191 + msgType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPicUrl()) ? 131071 : 524287);
    if (isSetPicUrl())
      hashCode = hashCode * 8191 + picUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetBtnContent()) ? 131071 : 524287);
    if (isSetBtnContent())
      hashCode = hashCode * 8191 + btnContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
    if (isSetRoomId())
      hashCode = hashCode * 8191 + roomId;

    hashCode = hashCode * 8191 + ((isSetPositionId()) ? 131071 : 524287);
    if (isSetPositionId())
      hashCode = hashCode * 8191 + positionId;

    return hashCode;
  }

  @Override
  public int compareTo(ChatVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeaker()).compareTo(other.isSetSpeaker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeaker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, other.speaker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin_str()).compareTo(other.isSetOrigin_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin_str, other.origin_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicUrl()).compareTo(other.isSetPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picUrl, other.picUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtnContent()).compareTo(other.isSetBtnContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtnContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btnContent, other.btnContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChatVO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetSpeaker()) {
      if (!first) sb.append(", ");
      sb.append("speaker:");
      sb.append(this.speaker);
      first = false;
    }
    if (isSetOrigin()) {
      if (!first) sb.append(", ");
      sb.append("origin:");
      sb.append(this.origin);
      first = false;
    }
    if (isSetOrigin_str()) {
      if (!first) sb.append(", ");
      sb.append("origin_str:");
      if (this.origin_str == null) {
        sb.append("null");
      } else {
        sb.append(this.origin_str);
      }
      first = false;
    }
    if (isSetMsgType()) {
      if (!first) sb.append(", ");
      sb.append("msgType:");
      if (this.msgType == null) {
        sb.append("null");
      } else {
        sb.append(this.msgType);
      }
      first = false;
    }
    if (isSetPicUrl()) {
      if (!first) sb.append(", ");
      sb.append("picUrl:");
      if (this.picUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.picUrl);
      }
      first = false;
    }
    if (isSetBtnContent()) {
      if (!first) sb.append(", ");
      sb.append("btnContent:");
      if (this.btnContent == null) {
        sb.append("null");
      } else {
        sb.append(this.btnContent);
      }
      first = false;
    }
    if (isSetRoomId()) {
      if (!first) sb.append(", ");
      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatVOStandardScheme getScheme() {
      return new ChatVOStandardScheme();
    }
  }

  private static class ChatVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPEAKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.speaker = iprot.readByte();
              struct.setSpeakerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.origin = iprot.readByte();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORIGIN_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin_str = iprot.readString();
              struct.setOrigin_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgType = iprot.readString();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picUrl = iprot.readString();
              struct.setPicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BTN_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.btnContent = new java.util.ArrayList<BtnContent>(_list16.size);
                BtnContent _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new BtnContent();
                  _elem17.read(iprot);
                  struct.btnContent.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setBtnContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionId = iprot.readI32();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpeaker()) {
        oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
        oprot.writeByte(struct.speaker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrigin()) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeByte(struct.origin);
        oprot.writeFieldEnd();
      }
      if (struct.origin_str != null) {
        if (struct.isSetOrigin_str()) {
          oprot.writeFieldBegin(ORIGIN_STR_FIELD_DESC);
          oprot.writeString(struct.origin_str);
          oprot.writeFieldEnd();
        }
      }
      if (struct.msgType != null) {
        if (struct.isSetMsgType()) {
          oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
          oprot.writeString(struct.msgType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.picUrl != null) {
        if (struct.isSetPicUrl()) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.picUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.btnContent != null) {
        if (struct.isSetBtnContent()) {
          oprot.writeFieldBegin(BTN_CONTENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.btnContent.size()));
            for (BtnContent _iter19 : struct.btnContent)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRoomId()) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatVOTupleScheme getScheme() {
      return new ChatVOTupleScheme();
    }
  }

  private static class ChatVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(2);
      }
      if (struct.isSetSpeaker()) {
        optionals.set(3);
      }
      if (struct.isSetOrigin()) {
        optionals.set(4);
      }
      if (struct.isSetOrigin_str()) {
        optionals.set(5);
      }
      if (struct.isSetMsgType()) {
        optionals.set(6);
      }
      if (struct.isSetPicUrl()) {
        optionals.set(7);
      }
      if (struct.isSetBtnContent()) {
        optionals.set(8);
      }
      if (struct.isSetRoomId()) {
        optionals.set(9);
      }
      if (struct.isSetPositionId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetSpeaker()) {
        oprot.writeByte(struct.speaker);
      }
      if (struct.isSetOrigin()) {
        oprot.writeByte(struct.origin);
      }
      if (struct.isSetOrigin_str()) {
        oprot.writeString(struct.origin_str);
      }
      if (struct.isSetMsgType()) {
        oprot.writeString(struct.msgType);
      }
      if (struct.isSetPicUrl()) {
        oprot.writeString(struct.picUrl);
      }
      if (struct.isSetBtnContent()) {
        {
          oprot.writeI32(struct.btnContent.size());
          for (BtnContent _iter20 : struct.btnContent)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI32(struct.positionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.speaker = iprot.readByte();
        struct.setSpeakerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.origin = iprot.readByte();
        struct.setOriginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.origin_str = iprot.readString();
        struct.setOrigin_strIsSet(true);
      }
      if (incoming.get(6)) {
        struct.msgType = iprot.readString();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.picUrl = iprot.readString();
        struct.setPicUrlIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.btnContent = new java.util.ArrayList<BtnContent>(_list21.size);
          BtnContent _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new BtnContent();
            _elem22.read(iprot);
            struct.btnContent.add(_elem22);
          }
        }
        struct.setBtnContentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positionId = iprot.readI32();
        struct.setPositionIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

