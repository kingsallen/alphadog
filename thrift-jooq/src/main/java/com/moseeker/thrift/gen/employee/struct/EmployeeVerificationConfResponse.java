/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.employee.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-15")
public class EmployeeVerificationConfResponse implements org.apache.thrift.TBase<EmployeeVerificationConfResponse, EmployeeVerificationConfResponse._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeVerificationConfResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeVerificationConfResponse");

  private static final org.apache.thrift.protocol.TField EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("exists", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_VERIFICATION_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeVerificationConf", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeVerificationConfResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeVerificationConfResponseTupleSchemeFactory();

  public boolean exists; // required
  public EmployeeVerificationConf employeeVerificationConf; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXISTS((short)1, "exists"),
    EMPLOYEE_VERIFICATION_CONF((short)2, "employeeVerificationConf");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXISTS
          return EXISTS;
        case 2: // EMPLOYEE_VERIFICATION_CONF
          return EMPLOYEE_VERIFICATION_CONF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXISTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EMPLOYEE_VERIFICATION_CONF};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXISTS, new org.apache.thrift.meta_data.FieldMetaData("exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMPLOYEE_VERIFICATION_CONF, new org.apache.thrift.meta_data.FieldMetaData("employeeVerificationConf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeVerificationConf.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeVerificationConfResponse.class, metaDataMap);
  }

  public EmployeeVerificationConfResponse() {
  }

  public EmployeeVerificationConfResponse(
    boolean exists)
  {
    this();
    this.exists = exists;
    setExistsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployeeVerificationConfResponse(EmployeeVerificationConfResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exists = other.exists;
    if (other.isSetEmployeeVerificationConf()) {
      this.employeeVerificationConf = new EmployeeVerificationConf(other.employeeVerificationConf);
    }
  }

  public EmployeeVerificationConfResponse deepCopy() {
    return new EmployeeVerificationConfResponse(this);
  }

  @Override
  public void clear() {
    setExistsIsSet(false);
    this.exists = false;
    this.employeeVerificationConf = null;
  }

  public boolean isExists() {
    return this.exists;
  }

  public EmployeeVerificationConfResponse setExists(boolean exists) {
    this.exists = exists;
    setExistsIsSet(true);
    return this;
  }

  public void unsetExists() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  /** Returns true if field exists is set (has been assigned a value) and false otherwise */
  public boolean isSetExists() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  public void setExistsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXISTS_ISSET_ID, value);
  }

  public EmployeeVerificationConf getEmployeeVerificationConf() {
    return this.employeeVerificationConf;
  }

  public EmployeeVerificationConfResponse setEmployeeVerificationConf(EmployeeVerificationConf employeeVerificationConf) {
    this.employeeVerificationConf = employeeVerificationConf;
    return this;
  }

  public void unsetEmployeeVerificationConf() {
    this.employeeVerificationConf = null;
  }

  /** Returns true if field employeeVerificationConf is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeVerificationConf() {
    return this.employeeVerificationConf != null;
  }

  public void setEmployeeVerificationConfIsSet(boolean value) {
    if (!value) {
      this.employeeVerificationConf = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXISTS:
      if (value == null) {
        unsetExists();
      } else {
        setExists((java.lang.Boolean)value);
      }
      break;

    case EMPLOYEE_VERIFICATION_CONF:
      if (value == null) {
        unsetEmployeeVerificationConf();
      } else {
        setEmployeeVerificationConf((EmployeeVerificationConf)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXISTS:
      return isExists();

    case EMPLOYEE_VERIFICATION_CONF:
      return getEmployeeVerificationConf();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXISTS:
      return isSetExists();
    case EMPLOYEE_VERIFICATION_CONF:
      return isSetEmployeeVerificationConf();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EmployeeVerificationConfResponse)
      return this.equals((EmployeeVerificationConfResponse)that);
    return false;
  }

  public boolean equals(EmployeeVerificationConfResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exists = true;
    boolean that_present_exists = true;
    if (this_present_exists || that_present_exists) {
      if (!(this_present_exists && that_present_exists))
        return false;
      if (this.exists != that.exists)
        return false;
    }

    boolean this_present_employeeVerificationConf = true && this.isSetEmployeeVerificationConf();
    boolean that_present_employeeVerificationConf = true && that.isSetEmployeeVerificationConf();
    if (this_present_employeeVerificationConf || that_present_employeeVerificationConf) {
      if (!(this_present_employeeVerificationConf && that_present_employeeVerificationConf))
        return false;
      if (!this.employeeVerificationConf.equals(that.employeeVerificationConf))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((exists) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEmployeeVerificationConf()) ? 131071 : 524287);
    if (isSetEmployeeVerificationConf())
      hashCode = hashCode * 8191 + employeeVerificationConf.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EmployeeVerificationConfResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExists()).compareTo(other.isSetExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exists, other.exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmployeeVerificationConf()).compareTo(other.isSetEmployeeVerificationConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeVerificationConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeVerificationConf, other.employeeVerificationConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeVerificationConfResponse(");
    boolean first = true;

    sb.append("exists:");
    sb.append(this.exists);
    first = false;
    if (isSetEmployeeVerificationConf()) {
      if (!first) sb.append(", ");
      sb.append("employeeVerificationConf:");
      if (this.employeeVerificationConf == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeVerificationConf);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'exists' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (employeeVerificationConf != null) {
      employeeVerificationConf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeVerificationConfResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeVerificationConfResponseStandardScheme getScheme() {
      return new EmployeeVerificationConfResponseStandardScheme();
    }
  }

  private static class EmployeeVerificationConfResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeVerificationConfResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeVerificationConfResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exists = iprot.readBool();
              struct.setExistsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMPLOYEE_VERIFICATION_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.employeeVerificationConf = new EmployeeVerificationConf();
              struct.employeeVerificationConf.read(iprot);
              struct.setEmployeeVerificationConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetExists()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'exists' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeVerificationConfResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXISTS_FIELD_DESC);
      oprot.writeBool(struct.exists);
      oprot.writeFieldEnd();
      if (struct.employeeVerificationConf != null) {
        if (struct.isSetEmployeeVerificationConf()) {
          oprot.writeFieldBegin(EMPLOYEE_VERIFICATION_CONF_FIELD_DESC);
          struct.employeeVerificationConf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeVerificationConfResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeVerificationConfResponseTupleScheme getScheme() {
      return new EmployeeVerificationConfResponseTupleScheme();
    }
  }

  private static class EmployeeVerificationConfResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeVerificationConfResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeVerificationConfResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.exists);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEmployeeVerificationConf()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEmployeeVerificationConf()) {
        struct.employeeVerificationConf.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeVerificationConfResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.exists = iprot.readBool();
      struct.setExistsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.employeeVerificationConf = new EmployeeVerificationConf();
        struct.employeeVerificationConf.read(iprot);
        struct.setEmployeeVerificationConfIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

