/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-12")
public class HrAppExportFieldsDO implements org.apache.thrift.TBase<HrAppExportFieldsDO, HrAppExportFieldsDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrAppExportFieldsDO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrAppExportFieldsDO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FIELD_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("displayOrder", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SELECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("selected", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SHOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("showed", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sample", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrAppExportFieldsDOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrAppExportFieldsDOTupleSchemeFactory();

    public int id; // optional
    public java.lang.String fieldName; // optional
    public java.lang.String fieldTitle; // optional
    public int displayOrder; // optional
    public int selected; // optional
    public int showed; // optional
    public java.lang.String sample; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short)1, "id"),
        FIELD_NAME((short)2, "fieldName"),
        FIELD_TITLE((short)3, "fieldTitle"),
        DISPLAY_ORDER((short)4, "displayOrder"),
        SELECTED((short)5, "selected"),
        SHOWED((short)7, "showed"),
        SAMPLE((short)6, "sample");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ID
                    return ID;
                case 2: // FIELD_NAME
                    return FIELD_NAME;
                case 3: // FIELD_TITLE
                    return FIELD_TITLE;
                case 4: // DISPLAY_ORDER
                    return DISPLAY_ORDER;
                case 5: // SELECTED
                    return SELECTED;
                case 7: // SHOWED
                    return SHOWED;
                case 6: // SAMPLE
                    return SAMPLE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __DISPLAYORDER_ISSET_ID = 1;
    private static final int __SELECTED_ISSET_ID = 2;
    private static final int __SHOWED_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ID,_Fields.FIELD_NAME,_Fields.FIELD_TITLE,_Fields.DISPLAY_ORDER,_Fields.SELECTED,_Fields.SHOWED,_Fields.SAMPLE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FIELD_TITLE, new org.apache.thrift.meta_data.FieldMetaData("fieldTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DISPLAY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("displayOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SELECTED, new org.apache.thrift.meta_data.FieldMetaData("selected", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SHOWED, new org.apache.thrift.meta_data.FieldMetaData("showed", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SAMPLE, new org.apache.thrift.meta_data.FieldMetaData("sample", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrAppExportFieldsDO.class, metaDataMap);
    }

    public HrAppExportFieldsDO() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HrAppExportFieldsDO(HrAppExportFieldsDO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetFieldName()) {
            this.fieldName = other.fieldName;
        }
        if (other.isSetFieldTitle()) {
            this.fieldTitle = other.fieldTitle;
        }
        this.displayOrder = other.displayOrder;
        this.selected = other.selected;
        this.showed = other.showed;
        if (other.isSetSample()) {
            this.sample = other.sample;
        }
    }

    public HrAppExportFieldsDO deepCopy() {
        return new HrAppExportFieldsDO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.fieldName = null;
        this.fieldTitle = null;
        setDisplayOrderIsSet(false);
        this.displayOrder = 0;
        setSelectedIsSet(false);
        this.selected = 0;
        setShowedIsSet(false);
        this.showed = 0;
        this.sample = null;
    }

    public int getId() {
        return this.id;
    }

    public HrAppExportFieldsDO setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getFieldName() {
        return this.fieldName;
    }

    public HrAppExportFieldsDO setFieldName(java.lang.String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    public void unsetFieldName() {
        this.fieldName = null;
    }

    /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldName() {
        return this.fieldName != null;
    }

    public void setFieldNameIsSet(boolean value) {
        if (!value) {
            this.fieldName = null;
        }
    }

    public java.lang.String getFieldTitle() {
        return this.fieldTitle;
    }

    public HrAppExportFieldsDO setFieldTitle(java.lang.String fieldTitle) {
        this.fieldTitle = fieldTitle;
        return this;
    }

    public void unsetFieldTitle() {
        this.fieldTitle = null;
    }

    /** Returns true if field fieldTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldTitle() {
        return this.fieldTitle != null;
    }

    public void setFieldTitleIsSet(boolean value) {
        if (!value) {
            this.fieldTitle = null;
        }
    }

    public int getDisplayOrder() {
        return this.displayOrder;
    }

    public HrAppExportFieldsDO setDisplayOrder(int displayOrder) {
        this.displayOrder = displayOrder;
        setDisplayOrderIsSet(true);
        return this;
    }

    public void unsetDisplayOrder() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISPLAYORDER_ISSET_ID);
    }

    /** Returns true if field displayOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayOrder() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISPLAYORDER_ISSET_ID);
    }

    public void setDisplayOrderIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISPLAYORDER_ISSET_ID, value);
    }

    public int getSelected() {
        return this.selected;
    }

    public HrAppExportFieldsDO setSelected(int selected) {
        this.selected = selected;
        setSelectedIsSet(true);
        return this;
    }

    public void unsetSelected() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTED_ISSET_ID);
    }

    /** Returns true if field selected is set (has been assigned a value) and false otherwise */
    public boolean isSetSelected() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTED_ISSET_ID);
    }

    public void setSelectedIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTED_ISSET_ID, value);
    }

    public int getShowed() {
        return this.showed;
    }

    public HrAppExportFieldsDO setShowed(int showed) {
        this.showed = showed;
        setShowedIsSet(true);
        return this;
    }

    public void unsetShowed() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOWED_ISSET_ID);
    }

    /** Returns true if field showed is set (has been assigned a value) and false otherwise */
    public boolean isSetShowed() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOWED_ISSET_ID);
    }

    public void setShowedIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOWED_ISSET_ID, value);
    }

    public java.lang.String getSample() {
        return this.sample;
    }

    public HrAppExportFieldsDO setSample(java.lang.String sample) {
        this.sample = sample;
        return this;
    }

    public void unsetSample() {
        this.sample = null;
    }

    /** Returns true if field sample is set (has been assigned a value) and false otherwise */
    public boolean isSetSample() {
        return this.sample != null;
    }

    public void setSampleIsSet(boolean value) {
        if (!value) {
            this.sample = null;
        }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer)value);
                }
                break;

            case FIELD_NAME:
                if (value == null) {
                    unsetFieldName();
                } else {
                    setFieldName((java.lang.String)value);
                }
                break;

            case FIELD_TITLE:
                if (value == null) {
                    unsetFieldTitle();
                } else {
                    setFieldTitle((java.lang.String)value);
                }
                break;

            case DISPLAY_ORDER:
                if (value == null) {
                    unsetDisplayOrder();
                } else {
                    setDisplayOrder((java.lang.Integer)value);
                }
                break;

            case SELECTED:
                if (value == null) {
                    unsetSelected();
                } else {
                    setSelected((java.lang.Integer)value);
                }
                break;

            case SHOWED:
                if (value == null) {
                    unsetShowed();
                } else {
                    setShowed((java.lang.Integer)value);
                }
                break;

            case SAMPLE:
                if (value == null) {
                    unsetSample();
                } else {
                    setSample((java.lang.String)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case FIELD_NAME:
                return getFieldName();

            case FIELD_TITLE:
                return getFieldTitle();

            case DISPLAY_ORDER:
                return getDisplayOrder();

            case SELECTED:
                return getSelected();

            case SHOWED:
                return getShowed();

            case SAMPLE:
                return getSample();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case FIELD_NAME:
                return isSetFieldName();
            case FIELD_TITLE:
                return isSetFieldTitle();
            case DISPLAY_ORDER:
                return isSetDisplayOrder();
            case SELECTED:
                return isSetSelected();
            case SHOWED:
                return isSetShowed();
            case SAMPLE:
                return isSetSample();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof HrAppExportFieldsDO)
            return this.equals((HrAppExportFieldsDO)that);
        return false;
    }

    public boolean equals(HrAppExportFieldsDO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_fieldName = true && this.isSetFieldName();
        boolean that_present_fieldName = true && that.isSetFieldName();
        if (this_present_fieldName || that_present_fieldName) {
            if (!(this_present_fieldName && that_present_fieldName))
                return false;
            if (!this.fieldName.equals(that.fieldName))
                return false;
        }

        boolean this_present_fieldTitle = true && this.isSetFieldTitle();
        boolean that_present_fieldTitle = true && that.isSetFieldTitle();
        if (this_present_fieldTitle || that_present_fieldTitle) {
            if (!(this_present_fieldTitle && that_present_fieldTitle))
                return false;
            if (!this.fieldTitle.equals(that.fieldTitle))
                return false;
        }

        boolean this_present_displayOrder = true && this.isSetDisplayOrder();
        boolean that_present_displayOrder = true && that.isSetDisplayOrder();
        if (this_present_displayOrder || that_present_displayOrder) {
            if (!(this_present_displayOrder && that_present_displayOrder))
                return false;
            if (this.displayOrder != that.displayOrder)
                return false;
        }

        boolean this_present_selected = true && this.isSetSelected();
        boolean that_present_selected = true && that.isSetSelected();
        if (this_present_selected || that_present_selected) {
            if (!(this_present_selected && that_present_selected))
                return false;
            if (this.selected != that.selected)
                return false;
        }

        boolean this_present_showed = true && this.isSetShowed();
        boolean that_present_showed = true && that.isSetShowed();
        if (this_present_showed || that_present_showed) {
            if (!(this_present_showed && that_present_showed))
                return false;
            if (this.showed != that.showed)
                return false;
        }

        boolean this_present_sample = true && this.isSetSample();
        boolean that_present_sample = true && that.isSetSample();
        if (this_present_sample || that_present_sample) {
            if (!(this_present_sample && that_present_sample))
                return false;
            if (!this.sample.equals(that.sample))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
        if (isSetFieldName())
            hashCode = hashCode * 8191 + fieldName.hashCode();

        hashCode = hashCode * 8191 + ((isSetFieldTitle()) ? 131071 : 524287);
        if (isSetFieldTitle())
            hashCode = hashCode * 8191 + fieldTitle.hashCode();

        hashCode = hashCode * 8191 + ((isSetDisplayOrder()) ? 131071 : 524287);
        if (isSetDisplayOrder())
            hashCode = hashCode * 8191 + displayOrder;

        hashCode = hashCode * 8191 + ((isSetSelected()) ? 131071 : 524287);
        if (isSetSelected())
            hashCode = hashCode * 8191 + selected;

        hashCode = hashCode * 8191 + ((isSetShowed()) ? 131071 : 524287);
        if (isSetShowed())
            hashCode = hashCode * 8191 + showed;

        hashCode = hashCode * 8191 + ((isSetSample()) ? 131071 : 524287);
        if (isSetSample())
            hashCode = hashCode * 8191 + sample.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(HrAppExportFieldsDO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldTitle()).compareTo(other.isSetFieldTitle());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldTitle()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldTitle, other.fieldTitle);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDisplayOrder()).compareTo(other.isSetDisplayOrder());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDisplayOrder()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayOrder, other.displayOrder);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSelected()).compareTo(other.isSetSelected());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSelected()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selected, other.selected);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetShowed()).compareTo(other.isSetShowed());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetShowed()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showed, other.showed);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSample()).compareTo(other.isSetSample());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSample()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample, other.sample);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("HrAppExportFieldsDO(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (isSetFieldName()) {
            if (!first) sb.append(", ");
            sb.append("fieldName:");
            if (this.fieldName == null) {
                sb.append("null");
            } else {
                sb.append(this.fieldName);
            }
            first = false;
        }
        if (isSetFieldTitle()) {
            if (!first) sb.append(", ");
            sb.append("fieldTitle:");
            if (this.fieldTitle == null) {
                sb.append("null");
            } else {
                sb.append(this.fieldTitle);
            }
            first = false;
        }
        if (isSetDisplayOrder()) {
            if (!first) sb.append(", ");
            sb.append("displayOrder:");
            sb.append(this.displayOrder);
            first = false;
        }
        if (isSetSelected()) {
            if (!first) sb.append(", ");
            sb.append("selected:");
            sb.append(this.selected);
            first = false;
        }
        if (isSetShowed()) {
            if (!first) sb.append(", ");
            sb.append("showed:");
            sb.append(this.showed);
            first = false;
        }
        if (isSetSample()) {
            if (!first) sb.append(", ");
            sb.append("sample:");
            if (this.sample == null) {
                sb.append("null");
            } else {
                sb.append(this.sample);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class HrAppExportFieldsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HrAppExportFieldsDOStandardScheme getScheme() {
            return new HrAppExportFieldsDOStandardScheme();
        }
    }

    private static class HrAppExportFieldsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrAppExportFieldsDO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, HrAppExportFieldsDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // FIELD_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fieldName = iprot.readString();
                            struct.setFieldNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // FIELD_TITLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fieldTitle = iprot.readString();
                            struct.setFieldTitleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // DISPLAY_ORDER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.displayOrder = iprot.readI32();
                            struct.setDisplayOrderIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // SELECTED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.selected = iprot.readI32();
                            struct.setSelectedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SHOWED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.showed = iprot.readI32();
                            struct.setShowedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // SAMPLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sample = iprot.readString();
                            struct.setSampleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, HrAppExportFieldsDO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.fieldName != null) {
                if (struct.isSetFieldName()) {
                    oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
                    oprot.writeString(struct.fieldName);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.fieldTitle != null) {
                if (struct.isSetFieldTitle()) {
                    oprot.writeFieldBegin(FIELD_TITLE_FIELD_DESC);
                    oprot.writeString(struct.fieldTitle);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetDisplayOrder()) {
                oprot.writeFieldBegin(DISPLAY_ORDER_FIELD_DESC);
                oprot.writeI32(struct.displayOrder);
                oprot.writeFieldEnd();
            }
            if (struct.isSetSelected()) {
                oprot.writeFieldBegin(SELECTED_FIELD_DESC);
                oprot.writeI32(struct.selected);
                oprot.writeFieldEnd();
            }
            if (struct.sample != null) {
                if (struct.isSetSample()) {
                    oprot.writeFieldBegin(SAMPLE_FIELD_DESC);
                    oprot.writeString(struct.sample);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetShowed()) {
                oprot.writeFieldBegin(SHOWED_FIELD_DESC);
                oprot.writeI32(struct.showed);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class HrAppExportFieldsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HrAppExportFieldsDOTupleScheme getScheme() {
            return new HrAppExportFieldsDOTupleScheme();
        }
    }

    private static class HrAppExportFieldsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrAppExportFieldsDO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, HrAppExportFieldsDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetFieldName()) {
                optionals.set(1);
            }
            if (struct.isSetFieldTitle()) {
                optionals.set(2);
            }
            if (struct.isSetDisplayOrder()) {
                optionals.set(3);
            }
            if (struct.isSetSelected()) {
                optionals.set(4);
            }
            if (struct.isSetShowed()) {
                optionals.set(5);
            }
            if (struct.isSetSample()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetFieldName()) {
                oprot.writeString(struct.fieldName);
            }
            if (struct.isSetFieldTitle()) {
                oprot.writeString(struct.fieldTitle);
            }
            if (struct.isSetDisplayOrder()) {
                oprot.writeI32(struct.displayOrder);
            }
            if (struct.isSetSelected()) {
                oprot.writeI32(struct.selected);
            }
            if (struct.isSetShowed()) {
                oprot.writeI32(struct.showed);
            }
            if (struct.isSetSample()) {
                oprot.writeString(struct.sample);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, HrAppExportFieldsDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.fieldName = iprot.readString();
                struct.setFieldNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.fieldTitle = iprot.readString();
                struct.setFieldTitleIsSet(true);
            }
            if (incoming.get(3)) {
                struct.displayOrder = iprot.readI32();
                struct.setDisplayOrderIsSet(true);
            }
            if (incoming.get(4)) {
                struct.selected = iprot.readI32();
                struct.setSelectedIsSet(true);
            }
            if (incoming.get(5)) {
                struct.showed = iprot.readI32();
                struct.setShowedIsSet(true);
            }
            if (incoming.get(6)) {
                struct.sample = iprot.readString();
                struct.setSampleIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

