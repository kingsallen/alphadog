/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-12-18")
public class ReferralPositionMatchDO implements org.apache.thrift.TBase<ReferralPositionMatchDO, ReferralPositionMatchDO._Fields>, java.io.Serializable, Cloneable, Comparable<ReferralPositionMatchDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferralPositionMatchDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience_above", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEGREE_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree_above", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_top", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_bottom", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HB_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("hb_status", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReferralPositionMatchDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReferralPositionMatchDOTupleSchemeFactory();

  public int id; // optional
  public String title; // optional
  public String team; // optional
  public String city; // optional
  public int experience; // optional
  public int experience_above; // optional
  public int degree; // optional
  public int degree_above; // optional
  public int salary_top; // optional
  public int salary_bottom; // optional
  public int hb_status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    TEAM((short)3, "team"),
    CITY((short)4, "city"),
    EXPERIENCE((short)5, "experience"),
    EXPERIENCE_ABOVE((short)6, "experience_above"),
    DEGREE((short)7, "degree"),
    DEGREE_ABOVE((short)8, "degree_above"),
    SALARY_TOP((short)9, "salary_top"),
    SALARY_BOTTOM((short)10, "salary_bottom"),
    HB_STATUS((short)11, "hb_status");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // TEAM
          return TEAM;
        case 4: // CITY
          return CITY;
        case 5: // EXPERIENCE
          return EXPERIENCE;
        case 6: // EXPERIENCE_ABOVE
          return EXPERIENCE_ABOVE;
        case 7: // DEGREE
          return DEGREE;
        case 8: // DEGREE_ABOVE
          return DEGREE_ABOVE;
        case 9: // SALARY_TOP
          return SALARY_TOP;
        case 10: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 11: // HB_STATUS
          return HB_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __EXPERIENCE_ISSET_ID = 1;
  private static final int __EXPERIENCE_ABOVE_ISSET_ID = 2;
  private static final int __DEGREE_ISSET_ID = 3;
  private static final int __DEGREE_ABOVE_ISSET_ID = 4;
  private static final int __SALARY_TOP_ISSET_ID = 5;
  private static final int __SALARY_BOTTOM_ISSET_ID = 6;
  private static final int __HB_STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.TEAM,_Fields.CITY,_Fields.EXPERIENCE,_Fields.EXPERIENCE_ABOVE,_Fields.DEGREE,_Fields.DEGREE_ABOVE,_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.HB_STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIENCE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("experience_above", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEGREE_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("degree_above", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salary_top", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salary_bottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HB_STATUS, new org.apache.thrift.meta_data.FieldMetaData("hb_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferralPositionMatchDO.class, metaDataMap);
  }

  public ReferralPositionMatchDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferralPositionMatchDO(ReferralPositionMatchDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetTeam()) {
      this.team = other.team;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.experience = other.experience;
    this.experience_above = other.experience_above;
    this.degree = other.degree;
    this.degree_above = other.degree_above;
    this.salary_top = other.salary_top;
    this.salary_bottom = other.salary_bottom;
    this.hb_status = other.hb_status;
  }

  public ReferralPositionMatchDO deepCopy() {
    return new ReferralPositionMatchDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.team = null;
    this.city = null;
    setExperienceIsSet(false);
    this.experience = 0;
    setExperience_aboveIsSet(false);
    this.experience_above = 0;
    setDegreeIsSet(false);
    this.degree = 0;
    setDegree_aboveIsSet(false);
    this.degree_above = 0;
    setSalary_topIsSet(false);
    this.salary_top = 0;
    setSalary_bottomIsSet(false);
    this.salary_bottom = 0;
    setHb_statusIsSet(false);
    this.hb_status = 0;
  }

  public int getId() {
    return this.id;
  }

  public ReferralPositionMatchDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public ReferralPositionMatchDO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getTeam() {
    return this.team;
  }

  public ReferralPositionMatchDO setTeam(String team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public ReferralPositionMatchDO setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getExperience() {
    return this.experience;
  }

  public ReferralPositionMatchDO setExperience(int experience) {
    this.experience = experience;
    setExperienceIsSet(true);
    return this;
  }

  public void unsetExperience() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCE_ISSET_ID);
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPERIENCE_ISSET_ID);
  }

  public void setExperienceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPERIENCE_ISSET_ID, value);
  }

  public int getExperience_above() {
    return this.experience_above;
  }

  public ReferralPositionMatchDO setExperience_above(int experience_above) {
    this.experience_above = experience_above;
    setExperience_aboveIsSet(true);
    return this;
  }

  public void unsetExperience_above() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID);
  }

  /** Returns true if field experience_above is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience_above() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID);
  }

  public void setExperience_aboveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPERIENCE_ABOVE_ISSET_ID, value);
  }

  public int getDegree() {
    return this.degree;
  }

  public ReferralPositionMatchDO setDegree(int degree) {
    this.degree = degree;
    setDegreeIsSet(true);
    return this;
  }

  public void unsetDegree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
  }

  public int getDegree_above() {
    return this.degree_above;
  }

  public ReferralPositionMatchDO setDegree_above(int degree_above) {
    this.degree_above = degree_above;
    setDegree_aboveIsSet(true);
    return this;
  }

  public void unsetDegree_above() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID);
  }

  /** Returns true if field degree_above is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree_above() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID);
  }

  public void setDegree_aboveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREE_ABOVE_ISSET_ID, value);
  }

  public int getSalary_top() {
    return this.salary_top;
  }

  public ReferralPositionMatchDO setSalary_top(int salary_top) {
    this.salary_top = salary_top;
    setSalary_topIsSet(true);
    return this;
  }

  public void unsetSalary_top() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  /** Returns true if field salary_top is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_top() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  public void setSalary_topIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_TOP_ISSET_ID, value);
  }

  public int getSalary_bottom() {
    return this.salary_bottom;
  }

  public ReferralPositionMatchDO setSalary_bottom(int salary_bottom) {
    this.salary_bottom = salary_bottom;
    setSalary_bottomIsSet(true);
    return this;
  }

  public void unsetSalary_bottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  /** Returns true if field salary_bottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_bottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  public void setSalary_bottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID, value);
  }

  public int getHb_status() {
    return this.hb_status;
  }

  public ReferralPositionMatchDO setHb_status(int hb_status) {
    this.hb_status = hb_status;
    setHb_statusIsSet(true);
    return this;
  }

  public void unsetHb_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HB_STATUS_ISSET_ID);
  }

  /** Returns true if field hb_status is set (has been assigned a value) and false otherwise */
  public boolean isSetHb_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HB_STATUS_ISSET_ID);
  }

  public void setHb_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HB_STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((Integer)value);
      }
      break;

    case EXPERIENCE_ABOVE:
      if (value == null) {
        unsetExperience_above();
      } else {
        setExperience_above((Integer)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Integer)value);
      }
      break;

    case DEGREE_ABOVE:
      if (value == null) {
        unsetDegree_above();
      } else {
        setDegree_above((Integer)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalary_top();
      } else {
        setSalary_top((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalary_bottom();
      } else {
        setSalary_bottom((Integer)value);
      }
      break;

    case HB_STATUS:
      if (value == null) {
        unsetHb_status();
      } else {
        setHb_status((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case TEAM:
      return getTeam();

    case CITY:
      return getCity();

    case EXPERIENCE:
      return getExperience();

    case EXPERIENCE_ABOVE:
      return getExperience_above();

    case DEGREE:
      return getDegree();

    case DEGREE_ABOVE:
      return getDegree_above();

    case SALARY_TOP:
      return getSalary_top();

    case SALARY_BOTTOM:
      return getSalary_bottom();

    case HB_STATUS:
      return getHb_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case TEAM:
      return isSetTeam();
    case CITY:
      return isSetCity();
    case EXPERIENCE:
      return isSetExperience();
    case EXPERIENCE_ABOVE:
      return isSetExperience_above();
    case DEGREE:
      return isSetDegree();
    case DEGREE_ABOVE:
      return isSetDegree_above();
    case SALARY_TOP:
      return isSetSalary_top();
    case SALARY_BOTTOM:
      return isSetSalary_bottom();
    case HB_STATUS:
      return isSetHb_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferralPositionMatchDO)
      return this.equals((ReferralPositionMatchDO)that);
    return false;
  }

  public boolean equals(ReferralPositionMatchDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (this.experience != that.experience)
        return false;
    }

    boolean this_present_experience_above = true && this.isSetExperience_above();
    boolean that_present_experience_above = true && that.isSetExperience_above();
    if (this_present_experience_above || that_present_experience_above) {
      if (!(this_present_experience_above && that_present_experience_above))
        return false;
      if (this.experience_above != that.experience_above)
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }

    boolean this_present_degree_above = true && this.isSetDegree_above();
    boolean that_present_degree_above = true && that.isSetDegree_above();
    if (this_present_degree_above || that_present_degree_above) {
      if (!(this_present_degree_above && that_present_degree_above))
        return false;
      if (this.degree_above != that.degree_above)
        return false;
    }

    boolean this_present_salary_top = true && this.isSetSalary_top();
    boolean that_present_salary_top = true && that.isSetSalary_top();
    if (this_present_salary_top || that_present_salary_top) {
      if (!(this_present_salary_top && that_present_salary_top))
        return false;
      if (this.salary_top != that.salary_top)
        return false;
    }

    boolean this_present_salary_bottom = true && this.isSetSalary_bottom();
    boolean that_present_salary_bottom = true && that.isSetSalary_bottom();
    if (this_present_salary_bottom || that_present_salary_bottom) {
      if (!(this_present_salary_bottom && that_present_salary_bottom))
        return false;
      if (this.salary_bottom != that.salary_bottom)
        return false;
    }

    boolean this_present_hb_status = true && this.isSetHb_status();
    boolean that_present_hb_status = true && that.isSetHb_status();
    if (this_present_hb_status || that_present_hb_status) {
      if (!(this_present_hb_status && that_present_hb_status))
        return false;
      if (this.hb_status != that.hb_status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeam()) ? 131071 : 524287);
    if (isSetTeam())
      hashCode = hashCode * 8191 + team.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetExperience()) ? 131071 : 524287);
    if (isSetExperience())
      hashCode = hashCode * 8191 + experience;

    hashCode = hashCode * 8191 + ((isSetExperience_above()) ? 131071 : 524287);
    if (isSetExperience_above())
      hashCode = hashCode * 8191 + experience_above;

    hashCode = hashCode * 8191 + ((isSetDegree()) ? 131071 : 524287);
    if (isSetDegree())
      hashCode = hashCode * 8191 + degree;

    hashCode = hashCode * 8191 + ((isSetDegree_above()) ? 131071 : 524287);
    if (isSetDegree_above())
      hashCode = hashCode * 8191 + degree_above;

    hashCode = hashCode * 8191 + ((isSetSalary_top()) ? 131071 : 524287);
    if (isSetSalary_top())
      hashCode = hashCode * 8191 + salary_top;

    hashCode = hashCode * 8191 + ((isSetSalary_bottom()) ? 131071 : 524287);
    if (isSetSalary_bottom())
      hashCode = hashCode * 8191 + salary_bottom;

    hashCode = hashCode * 8191 + ((isSetHb_status()) ? 131071 : 524287);
    if (isSetHb_status())
      hashCode = hashCode * 8191 + hb_status;

    return hashCode;
  }

  @Override
  public int compareTo(ReferralPositionMatchDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience_above()).compareTo(other.isSetExperience_above());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience_above()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience_above, other.experience_above);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree_above()).compareTo(other.isSetDegree_above());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree_above()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree_above, other.degree_above);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_top()).compareTo(other.isSetSalary_top());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_top()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_top, other.salary_top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_bottom()).compareTo(other.isSetSalary_bottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_bottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_bottom, other.salary_bottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHb_status()).compareTo(other.isSetHb_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHb_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hb_status, other.hb_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReferralPositionMatchDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      sb.append(this.experience);
      first = false;
    }
    if (isSetExperience_above()) {
      if (!first) sb.append(", ");
      sb.append("experience_above:");
      sb.append(this.experience_above);
      first = false;
    }
    if (isSetDegree()) {
      if (!first) sb.append(", ");
      sb.append("degree:");
      sb.append(this.degree);
      first = false;
    }
    if (isSetDegree_above()) {
      if (!first) sb.append(", ");
      sb.append("degree_above:");
      sb.append(this.degree_above);
      first = false;
    }
    if (isSetSalary_top()) {
      if (!first) sb.append(", ");
      sb.append("salary_top:");
      sb.append(this.salary_top);
      first = false;
    }
    if (isSetSalary_bottom()) {
      if (!first) sb.append(", ");
      sb.append("salary_bottom:");
      sb.append(this.salary_bottom);
      first = false;
    }
    if (isSetHb_status()) {
      if (!first) sb.append(", ");
      sb.append("hb_status:");
      sb.append(this.hb_status);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferralPositionMatchDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionMatchDOStandardScheme getScheme() {
      return new ReferralPositionMatchDOStandardScheme();
    }
  }

  private static class ReferralPositionMatchDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReferralPositionMatchDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferralPositionMatchDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.team = iprot.readString();
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experience = iprot.readI32();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPERIENCE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experience_above = iprot.readI32();
              struct.setExperience_aboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree = iprot.readI32();
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEGREE_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree_above = iprot.readI32();
              struct.setDegree_aboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_top = iprot.readI32();
              struct.setSalary_topIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_bottom = iprot.readI32();
              struct.setSalary_bottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HB_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hb_status = iprot.readI32();
              struct.setHb_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferralPositionMatchDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          oprot.writeString(struct.team);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExperience()) {
        oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
        oprot.writeI32(struct.experience);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExperience_above()) {
        oprot.writeFieldBegin(EXPERIENCE_ABOVE_FIELD_DESC);
        oprot.writeI32(struct.experience_above);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDegree()) {
        oprot.writeFieldBegin(DEGREE_FIELD_DESC);
        oprot.writeI32(struct.degree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDegree_above()) {
        oprot.writeFieldBegin(DEGREE_ABOVE_FIELD_DESC);
        oprot.writeI32(struct.degree_above);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_top()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salary_top);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salary_bottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHb_status()) {
        oprot.writeFieldBegin(HB_STATUS_FIELD_DESC);
        oprot.writeI32(struct.hb_status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferralPositionMatchDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionMatchDOTupleScheme getScheme() {
      return new ReferralPositionMatchDOTupleScheme();
    }
  }

  private static class ReferralPositionMatchDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReferralPositionMatchDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferralPositionMatchDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetTeam()) {
        optionals.set(2);
      }
      if (struct.isSetCity()) {
        optionals.set(3);
      }
      if (struct.isSetExperience()) {
        optionals.set(4);
      }
      if (struct.isSetExperience_above()) {
        optionals.set(5);
      }
      if (struct.isSetDegree()) {
        optionals.set(6);
      }
      if (struct.isSetDegree_above()) {
        optionals.set(7);
      }
      if (struct.isSetSalary_top()) {
        optionals.set(8);
      }
      if (struct.isSetSalary_bottom()) {
        optionals.set(9);
      }
      if (struct.isSetHb_status()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetTeam()) {
        oprot.writeString(struct.team);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetExperience()) {
        oprot.writeI32(struct.experience);
      }
      if (struct.isSetExperience_above()) {
        oprot.writeI32(struct.experience_above);
      }
      if (struct.isSetDegree()) {
        oprot.writeI32(struct.degree);
      }
      if (struct.isSetDegree_above()) {
        oprot.writeI32(struct.degree_above);
      }
      if (struct.isSetSalary_top()) {
        oprot.writeI32(struct.salary_top);
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeI32(struct.salary_bottom);
      }
      if (struct.isSetHb_status()) {
        oprot.writeI32(struct.hb_status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferralPositionMatchDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.team = iprot.readString();
        struct.setTeamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.experience = iprot.readI32();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.experience_above = iprot.readI32();
        struct.setExperience_aboveIsSet(true);
      }
      if (incoming.get(6)) {
        struct.degree = iprot.readI32();
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.degree_above = iprot.readI32();
        struct.setDegree_aboveIsSet(true);
      }
      if (incoming.get(8)) {
        struct.salary_top = iprot.readI32();
        struct.setSalary_topIsSet(true);
      }
      if (incoming.get(9)) {
        struct.salary_bottom = iprot.readI32();
        struct.setSalary_bottomIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hb_status = iprot.readI32();
        struct.setHb_statusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

