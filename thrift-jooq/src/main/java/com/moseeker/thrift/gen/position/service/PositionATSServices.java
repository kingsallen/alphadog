/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-20")
public class PositionATSServices {

  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response insertGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response updateGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response republishPosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response revokeGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response atsUpdatePositionFeature(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insertGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void updateGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void republishPosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void revokeGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void atsUpdatePositionFeature(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response insertGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      send_insertGlluePosition(batchHandlerJobPostion);
      return recv_insertGlluePosition();
    }

    public void send_insertGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      insertGlluePosition_args args = new insertGlluePosition_args();
      args.setBatchHandlerJobPostion(batchHandlerJobPostion);
      sendBase("insertGlluePosition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_insertGlluePosition() throws org.apache.thrift.TException
    {
      insertGlluePosition_result result = new insertGlluePosition_result();
      receiveBase(result, "insertGlluePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertGlluePosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response updateGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      send_updateGlluePosition(batchHandlerJobPostion);
      return recv_updateGlluePosition();
    }

    public void send_updateGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      updateGlluePosition_args args = new updateGlluePosition_args();
      args.setBatchHandlerJobPostion(batchHandlerJobPostion);
      sendBase("updateGlluePosition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_updateGlluePosition() throws org.apache.thrift.TException
    {
      updateGlluePosition_result result = new updateGlluePosition_result();
      receiveBase(result, "updateGlluePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGlluePosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response republishPosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      send_republishPosition(batchHandlerJobPostion);
      return recv_republishPosition();
    }

    public void send_republishPosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      republishPosition_args args = new republishPosition_args();
      args.setBatchHandlerJobPostion(batchHandlerJobPostion);
      sendBase("republishPosition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_republishPosition() throws org.apache.thrift.TException
    {
      republishPosition_result result = new republishPosition_result();
      receiveBase(result, "republishPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "republishPosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response revokeGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      send_revokeGlluePosition(batchHandlerJobPostion);
      return recv_revokeGlluePosition();
    }

    public void send_revokeGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      revokeGlluePosition_args args = new revokeGlluePosition_args();
      args.setBatchHandlerJobPostion(batchHandlerJobPostion);
      sendBase("revokeGlluePosition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_revokeGlluePosition() throws org.apache.thrift.TException
    {
      revokeGlluePosition_result result = new revokeGlluePosition_result();
      receiveBase(result, "revokeGlluePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "revokeGlluePosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response atsUpdatePositionFeature(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      send_atsUpdatePositionFeature(batchHandlerJobPostion);
      return recv_atsUpdatePositionFeature();
    }

    public void send_atsUpdatePositionFeature(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) throws org.apache.thrift.TException
    {
      atsUpdatePositionFeature_args args = new atsUpdatePositionFeature_args();
      args.setBatchHandlerJobPostion(batchHandlerJobPostion);
      sendBase("atsUpdatePositionFeature", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_atsUpdatePositionFeature() throws org.apache.thrift.TException
    {
      atsUpdatePositionFeature_result result = new atsUpdatePositionFeature_result();
      receiveBase(result, "atsUpdatePositionFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "atsUpdatePositionFeature failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insertGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertGlluePosition_call method_call = new insertGlluePosition_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertGlluePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
      public insertGlluePosition_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchHandlerJobPostion = batchHandlerJobPostion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertGlluePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertGlluePosition_args args = new insertGlluePosition_args();
        args.setBatchHandlerJobPostion(batchHandlerJobPostion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertGlluePosition();
      }
    }

    public void updateGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGlluePosition_call method_call = new updateGlluePosition_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGlluePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
      public updateGlluePosition_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchHandlerJobPostion = batchHandlerJobPostion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGlluePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGlluePosition_args args = new updateGlluePosition_args();
        args.setBatchHandlerJobPostion(batchHandlerJobPostion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGlluePosition();
      }
    }

    public void republishPosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      republishPosition_call method_call = new republishPosition_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class republishPosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
      public republishPosition_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchHandlerJobPostion = batchHandlerJobPostion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("republishPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        republishPosition_args args = new republishPosition_args();
        args.setBatchHandlerJobPostion(batchHandlerJobPostion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_republishPosition();
      }
    }

    public void revokeGlluePosition(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      revokeGlluePosition_call method_call = new revokeGlluePosition_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class revokeGlluePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
      public revokeGlluePosition_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchHandlerJobPostion = batchHandlerJobPostion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("revokeGlluePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        revokeGlluePosition_args args = new revokeGlluePosition_args();
        args.setBatchHandlerJobPostion(batchHandlerJobPostion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_revokeGlluePosition();
      }
    }

    public void atsUpdatePositionFeature(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      atsUpdatePositionFeature_call method_call = new atsUpdatePositionFeature_call(batchHandlerJobPostion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class atsUpdatePositionFeature_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion;
      public atsUpdatePositionFeature_call(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchHandlerJobPostion = batchHandlerJobPostion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("atsUpdatePositionFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        atsUpdatePositionFeature_args args = new atsUpdatePositionFeature_args();
        args.setBatchHandlerJobPostion(batchHandlerJobPostion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_atsUpdatePositionFeature();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insertGlluePosition", new insertGlluePosition());
      processMap.put("updateGlluePosition", new updateGlluePosition());
      processMap.put("republishPosition", new republishPosition());
      processMap.put("revokeGlluePosition", new revokeGlluePosition());
      processMap.put("atsUpdatePositionFeature", new atsUpdatePositionFeature());
      return processMap;
    }

    public static class insertGlluePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertGlluePosition_args> {
      public insertGlluePosition() {
        super("insertGlluePosition");
      }

      public insertGlluePosition_args getEmptyArgsInstance() {
        return new insertGlluePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public insertGlluePosition_result getResult(I iface, insertGlluePosition_args args) throws org.apache.thrift.TException {
        insertGlluePosition_result result = new insertGlluePosition_result();
        result.success = iface.insertGlluePosition(args.batchHandlerJobPostion);
        return result;
      }
    }

    public static class updateGlluePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGlluePosition_args> {
      public updateGlluePosition() {
        super("updateGlluePosition");
      }

      public updateGlluePosition_args getEmptyArgsInstance() {
        return new updateGlluePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateGlluePosition_result getResult(I iface, updateGlluePosition_args args) throws org.apache.thrift.TException {
        updateGlluePosition_result result = new updateGlluePosition_result();
        result.success = iface.updateGlluePosition(args.batchHandlerJobPostion);
        return result;
      }
    }

    public static class republishPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, republishPosition_args> {
      public republishPosition() {
        super("republishPosition");
      }

      public republishPosition_args getEmptyArgsInstance() {
        return new republishPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public republishPosition_result getResult(I iface, republishPosition_args args) throws org.apache.thrift.TException {
        republishPosition_result result = new republishPosition_result();
        result.success = iface.republishPosition(args.batchHandlerJobPostion);
        return result;
      }
    }

    public static class revokeGlluePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, revokeGlluePosition_args> {
      public revokeGlluePosition() {
        super("revokeGlluePosition");
      }

      public revokeGlluePosition_args getEmptyArgsInstance() {
        return new revokeGlluePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public revokeGlluePosition_result getResult(I iface, revokeGlluePosition_args args) throws org.apache.thrift.TException {
        revokeGlluePosition_result result = new revokeGlluePosition_result();
        result.success = iface.revokeGlluePosition(args.batchHandlerJobPostion);
        return result;
      }
    }

    public static class atsUpdatePositionFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, atsUpdatePositionFeature_args> {
      public atsUpdatePositionFeature() {
        super("atsUpdatePositionFeature");
      }

      public atsUpdatePositionFeature_args getEmptyArgsInstance() {
        return new atsUpdatePositionFeature_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public atsUpdatePositionFeature_result getResult(I iface, atsUpdatePositionFeature_args args) throws org.apache.thrift.TException {
        atsUpdatePositionFeature_result result = new atsUpdatePositionFeature_result();
        result.success = iface.atsUpdatePositionFeature(args.batchHandlerJobPostion);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insertGlluePosition", new insertGlluePosition());
      processMap.put("updateGlluePosition", new updateGlluePosition());
      processMap.put("republishPosition", new republishPosition());
      processMap.put("revokeGlluePosition", new revokeGlluePosition());
      processMap.put("atsUpdatePositionFeature", new atsUpdatePositionFeature());
      return processMap;
    }

    public static class insertGlluePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertGlluePosition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public insertGlluePosition() {
        super("insertGlluePosition");
      }

      public insertGlluePosition_args getEmptyArgsInstance() {
        return new insertGlluePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            insertGlluePosition_result result = new insertGlluePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            insertGlluePosition_result result = new insertGlluePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertGlluePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.insertGlluePosition(args.batchHandlerJobPostion,resultHandler);
      }
    }

    public static class updateGlluePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGlluePosition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public updateGlluePosition() {
        super("updateGlluePosition");
      }

      public updateGlluePosition_args getEmptyArgsInstance() {
        return new updateGlluePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            updateGlluePosition_result result = new updateGlluePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateGlluePosition_result result = new updateGlluePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGlluePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.updateGlluePosition(args.batchHandlerJobPostion,resultHandler);
      }
    }

    public static class republishPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, republishPosition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public republishPosition() {
        super("republishPosition");
      }

      public republishPosition_args getEmptyArgsInstance() {
        return new republishPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            republishPosition_result result = new republishPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            republishPosition_result result = new republishPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, republishPosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.republishPosition(args.batchHandlerJobPostion,resultHandler);
      }
    }

    public static class revokeGlluePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, revokeGlluePosition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public revokeGlluePosition() {
        super("revokeGlluePosition");
      }

      public revokeGlluePosition_args getEmptyArgsInstance() {
        return new revokeGlluePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            revokeGlluePosition_result result = new revokeGlluePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            revokeGlluePosition_result result = new revokeGlluePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, revokeGlluePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.revokeGlluePosition(args.batchHandlerJobPostion,resultHandler);
      }
    }

    public static class atsUpdatePositionFeature<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, atsUpdatePositionFeature_args, com.moseeker.thrift.gen.common.struct.Response> {
      public atsUpdatePositionFeature() {
        super("atsUpdatePositionFeature");
      }

      public atsUpdatePositionFeature_args getEmptyArgsInstance() {
        return new atsUpdatePositionFeature_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            atsUpdatePositionFeature_result result = new atsUpdatePositionFeature_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            atsUpdatePositionFeature_result result = new atsUpdatePositionFeature_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, atsUpdatePositionFeature_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.atsUpdatePositionFeature(args.batchHandlerJobPostion,resultHandler);
      }
    }

  }

  public static class insertGlluePosition_args implements org.apache.thrift.TBase<insertGlluePosition_args, insertGlluePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertGlluePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertGlluePosition_args");

    private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertGlluePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertGlluePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_HANDLER_JOB_POSTION
            return BATCH_HANDLER_JOB_POSTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertGlluePosition_args.class, metaDataMap);
    }

    public insertGlluePosition_args() {
    }

    public insertGlluePosition_args(
      com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
    {
      this();
      this.batchHandlerJobPostion = batchHandlerJobPostion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertGlluePosition_args(insertGlluePosition_args other) {
      if (other.isSetBatchHandlerJobPostion()) {
        this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
      }
    }

    public insertGlluePosition_args deepCopy() {
      return new insertGlluePosition_args(this);
    }

    @Override
    public void clear() {
      this.batchHandlerJobPostion = null;
    }

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion;
    }

    public insertGlluePosition_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
      this.batchHandlerJobPostion = batchHandlerJobPostion;
      return this;
    }

    public void unsetBatchHandlerJobPostion() {
      this.batchHandlerJobPostion = null;
    }

    /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion != null;
    }

    public void setBatchHandlerJobPostionIsSet(boolean value) {
      if (!value) {
        this.batchHandlerJobPostion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        if (value == null) {
          unsetBatchHandlerJobPostion();
        } else {
          setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return getBatchHandlerJobPostion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return isSetBatchHandlerJobPostion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertGlluePosition_args)
        return this.equals((insertGlluePosition_args)that);
      return false;
    }

    public boolean equals(insertGlluePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
      boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
      if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
        if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
          return false;
        if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
      if (isSetBatchHandlerJobPostion())
        hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(insertGlluePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchHandlerJobPostion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertGlluePosition_args(");
      boolean first = true;

      sb.append("batchHandlerJobPostion:");
      if (this.batchHandlerJobPostion == null) {
        sb.append("null");
      } else {
        sb.append(this.batchHandlerJobPostion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchHandlerJobPostion != null) {
        batchHandlerJobPostion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertGlluePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertGlluePosition_argsStandardScheme getScheme() {
        return new insertGlluePosition_argsStandardScheme();
      }
    }

    private static class insertGlluePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertGlluePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_HANDLER_JOB_POSTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                struct.batchHandlerJobPostion.read(iprot);
                struct.setBatchHandlerJobPostionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertGlluePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchHandlerJobPostion != null) {
          oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
          struct.batchHandlerJobPostion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertGlluePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertGlluePosition_argsTupleScheme getScheme() {
        return new insertGlluePosition_argsTupleScheme();
      }
    }

    private static class insertGlluePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertGlluePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBatchHandlerJobPostion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchHandlerJobPostion()) {
          struct.batchHandlerJobPostion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
          struct.batchHandlerJobPostion.read(iprot);
          struct.setBatchHandlerJobPostionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertGlluePosition_result implements org.apache.thrift.TBase<insertGlluePosition_result, insertGlluePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertGlluePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertGlluePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertGlluePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertGlluePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertGlluePosition_result.class, metaDataMap);
    }

    public insertGlluePosition_result() {
    }

    public insertGlluePosition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertGlluePosition_result(insertGlluePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public insertGlluePosition_result deepCopy() {
      return new insertGlluePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public insertGlluePosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertGlluePosition_result)
        return this.equals((insertGlluePosition_result)that);
      return false;
    }

    public boolean equals(insertGlluePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(insertGlluePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertGlluePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertGlluePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertGlluePosition_resultStandardScheme getScheme() {
        return new insertGlluePosition_resultStandardScheme();
      }
    }

    private static class insertGlluePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertGlluePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertGlluePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertGlluePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertGlluePosition_resultTupleScheme getScheme() {
        return new insertGlluePosition_resultTupleScheme();
      }
    }

    private static class insertGlluePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertGlluePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateGlluePosition_args implements org.apache.thrift.TBase<updateGlluePosition_args, updateGlluePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGlluePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGlluePosition_args");

    private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateGlluePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateGlluePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_HANDLER_JOB_POSTION
            return BATCH_HANDLER_JOB_POSTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGlluePosition_args.class, metaDataMap);
    }

    public updateGlluePosition_args() {
    }

    public updateGlluePosition_args(
      com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
    {
      this();
      this.batchHandlerJobPostion = batchHandlerJobPostion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGlluePosition_args(updateGlluePosition_args other) {
      if (other.isSetBatchHandlerJobPostion()) {
        this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
      }
    }

    public updateGlluePosition_args deepCopy() {
      return new updateGlluePosition_args(this);
    }

    @Override
    public void clear() {
      this.batchHandlerJobPostion = null;
    }

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion;
    }

    public updateGlluePosition_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
      this.batchHandlerJobPostion = batchHandlerJobPostion;
      return this;
    }

    public void unsetBatchHandlerJobPostion() {
      this.batchHandlerJobPostion = null;
    }

    /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion != null;
    }

    public void setBatchHandlerJobPostionIsSet(boolean value) {
      if (!value) {
        this.batchHandlerJobPostion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        if (value == null) {
          unsetBatchHandlerJobPostion();
        } else {
          setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return getBatchHandlerJobPostion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return isSetBatchHandlerJobPostion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGlluePosition_args)
        return this.equals((updateGlluePosition_args)that);
      return false;
    }

    public boolean equals(updateGlluePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
      boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
      if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
        if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
          return false;
        if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
      if (isSetBatchHandlerJobPostion())
        hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateGlluePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchHandlerJobPostion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGlluePosition_args(");
      boolean first = true;

      sb.append("batchHandlerJobPostion:");
      if (this.batchHandlerJobPostion == null) {
        sb.append("null");
      } else {
        sb.append(this.batchHandlerJobPostion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchHandlerJobPostion != null) {
        batchHandlerJobPostion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGlluePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateGlluePosition_argsStandardScheme getScheme() {
        return new updateGlluePosition_argsStandardScheme();
      }
    }

    private static class updateGlluePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateGlluePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_HANDLER_JOB_POSTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                struct.batchHandlerJobPostion.read(iprot);
                struct.setBatchHandlerJobPostionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGlluePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchHandlerJobPostion != null) {
          oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
          struct.batchHandlerJobPostion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGlluePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateGlluePosition_argsTupleScheme getScheme() {
        return new updateGlluePosition_argsTupleScheme();
      }
    }

    private static class updateGlluePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateGlluePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBatchHandlerJobPostion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchHandlerJobPostion()) {
          struct.batchHandlerJobPostion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
          struct.batchHandlerJobPostion.read(iprot);
          struct.setBatchHandlerJobPostionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateGlluePosition_result implements org.apache.thrift.TBase<updateGlluePosition_result, updateGlluePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGlluePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGlluePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateGlluePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateGlluePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGlluePosition_result.class, metaDataMap);
    }

    public updateGlluePosition_result() {
    }

    public updateGlluePosition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGlluePosition_result(updateGlluePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public updateGlluePosition_result deepCopy() {
      return new updateGlluePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public updateGlluePosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGlluePosition_result)
        return this.equals((updateGlluePosition_result)that);
      return false;
    }

    public boolean equals(updateGlluePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateGlluePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGlluePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGlluePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateGlluePosition_resultStandardScheme getScheme() {
        return new updateGlluePosition_resultStandardScheme();
      }
    }

    private static class updateGlluePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateGlluePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGlluePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGlluePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateGlluePosition_resultTupleScheme getScheme() {
        return new updateGlluePosition_resultTupleScheme();
      }
    }

    private static class updateGlluePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateGlluePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class republishPosition_args implements org.apache.thrift.TBase<republishPosition_args, republishPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<republishPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("republishPosition_args");

    private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new republishPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new republishPosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_HANDLER_JOB_POSTION
            return BATCH_HANDLER_JOB_POSTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(republishPosition_args.class, metaDataMap);
    }

    public republishPosition_args() {
    }

    public republishPosition_args(
      com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
    {
      this();
      this.batchHandlerJobPostion = batchHandlerJobPostion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public republishPosition_args(republishPosition_args other) {
      if (other.isSetBatchHandlerJobPostion()) {
        this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
      }
    }

    public republishPosition_args deepCopy() {
      return new republishPosition_args(this);
    }

    @Override
    public void clear() {
      this.batchHandlerJobPostion = null;
    }

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion;
    }

    public republishPosition_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
      this.batchHandlerJobPostion = batchHandlerJobPostion;
      return this;
    }

    public void unsetBatchHandlerJobPostion() {
      this.batchHandlerJobPostion = null;
    }

    /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion != null;
    }

    public void setBatchHandlerJobPostionIsSet(boolean value) {
      if (!value) {
        this.batchHandlerJobPostion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        if (value == null) {
          unsetBatchHandlerJobPostion();
        } else {
          setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return getBatchHandlerJobPostion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return isSetBatchHandlerJobPostion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof republishPosition_args)
        return this.equals((republishPosition_args)that);
      return false;
    }

    public boolean equals(republishPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
      boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
      if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
        if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
          return false;
        if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
      if (isSetBatchHandlerJobPostion())
        hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(republishPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchHandlerJobPostion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("republishPosition_args(");
      boolean first = true;

      sb.append("batchHandlerJobPostion:");
      if (this.batchHandlerJobPostion == null) {
        sb.append("null");
      } else {
        sb.append(this.batchHandlerJobPostion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchHandlerJobPostion != null) {
        batchHandlerJobPostion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class republishPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public republishPosition_argsStandardScheme getScheme() {
        return new republishPosition_argsStandardScheme();
      }
    }

    private static class republishPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<republishPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, republishPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_HANDLER_JOB_POSTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                struct.batchHandlerJobPostion.read(iprot);
                struct.setBatchHandlerJobPostionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, republishPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchHandlerJobPostion != null) {
          oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
          struct.batchHandlerJobPostion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class republishPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public republishPosition_argsTupleScheme getScheme() {
        return new republishPosition_argsTupleScheme();
      }
    }

    private static class republishPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<republishPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, republishPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBatchHandlerJobPostion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchHandlerJobPostion()) {
          struct.batchHandlerJobPostion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, republishPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
          struct.batchHandlerJobPostion.read(iprot);
          struct.setBatchHandlerJobPostionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class republishPosition_result implements org.apache.thrift.TBase<republishPosition_result, republishPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<republishPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("republishPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new republishPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new republishPosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(republishPosition_result.class, metaDataMap);
    }

    public republishPosition_result() {
    }

    public republishPosition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public republishPosition_result(republishPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public republishPosition_result deepCopy() {
      return new republishPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public republishPosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof republishPosition_result)
        return this.equals((republishPosition_result)that);
      return false;
    }

    public boolean equals(republishPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(republishPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("republishPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class republishPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public republishPosition_resultStandardScheme getScheme() {
        return new republishPosition_resultStandardScheme();
      }
    }

    private static class republishPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<republishPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, republishPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, republishPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class republishPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public republishPosition_resultTupleScheme getScheme() {
        return new republishPosition_resultTupleScheme();
      }
    }

    private static class republishPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<republishPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, republishPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, republishPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class revokeGlluePosition_args implements org.apache.thrift.TBase<revokeGlluePosition_args, revokeGlluePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<revokeGlluePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokeGlluePosition_args");

    private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new revokeGlluePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new revokeGlluePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_HANDLER_JOB_POSTION
            return BATCH_HANDLER_JOB_POSTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokeGlluePosition_args.class, metaDataMap);
    }

    public revokeGlluePosition_args() {
    }

    public revokeGlluePosition_args(
      com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
    {
      this();
      this.batchHandlerJobPostion = batchHandlerJobPostion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeGlluePosition_args(revokeGlluePosition_args other) {
      if (other.isSetBatchHandlerJobPostion()) {
        this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
      }
    }

    public revokeGlluePosition_args deepCopy() {
      return new revokeGlluePosition_args(this);
    }

    @Override
    public void clear() {
      this.batchHandlerJobPostion = null;
    }

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion;
    }

    public revokeGlluePosition_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
      this.batchHandlerJobPostion = batchHandlerJobPostion;
      return this;
    }

    public void unsetBatchHandlerJobPostion() {
      this.batchHandlerJobPostion = null;
    }

    /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion != null;
    }

    public void setBatchHandlerJobPostionIsSet(boolean value) {
      if (!value) {
        this.batchHandlerJobPostion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        if (value == null) {
          unsetBatchHandlerJobPostion();
        } else {
          setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return getBatchHandlerJobPostion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return isSetBatchHandlerJobPostion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeGlluePosition_args)
        return this.equals((revokeGlluePosition_args)that);
      return false;
    }

    public boolean equals(revokeGlluePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
      boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
      if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
        if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
          return false;
        if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
      if (isSetBatchHandlerJobPostion())
        hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(revokeGlluePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchHandlerJobPostion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeGlluePosition_args(");
      boolean first = true;

      sb.append("batchHandlerJobPostion:");
      if (this.batchHandlerJobPostion == null) {
        sb.append("null");
      } else {
        sb.append(this.batchHandlerJobPostion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchHandlerJobPostion != null) {
        batchHandlerJobPostion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokeGlluePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public revokeGlluePosition_argsStandardScheme getScheme() {
        return new revokeGlluePosition_argsStandardScheme();
      }
    }

    private static class revokeGlluePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<revokeGlluePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokeGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_HANDLER_JOB_POSTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                struct.batchHandlerJobPostion.read(iprot);
                struct.setBatchHandlerJobPostionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokeGlluePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchHandlerJobPostion != null) {
          oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
          struct.batchHandlerJobPostion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokeGlluePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public revokeGlluePosition_argsTupleScheme getScheme() {
        return new revokeGlluePosition_argsTupleScheme();
      }
    }

    private static class revokeGlluePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<revokeGlluePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokeGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBatchHandlerJobPostion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchHandlerJobPostion()) {
          struct.batchHandlerJobPostion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokeGlluePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
          struct.batchHandlerJobPostion.read(iprot);
          struct.setBatchHandlerJobPostionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class revokeGlluePosition_result implements org.apache.thrift.TBase<revokeGlluePosition_result, revokeGlluePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<revokeGlluePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revokeGlluePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new revokeGlluePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new revokeGlluePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revokeGlluePosition_result.class, metaDataMap);
    }

    public revokeGlluePosition_result() {
    }

    public revokeGlluePosition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeGlluePosition_result(revokeGlluePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public revokeGlluePosition_result deepCopy() {
      return new revokeGlluePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public revokeGlluePosition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeGlluePosition_result)
        return this.equals((revokeGlluePosition_result)that);
      return false;
    }

    public boolean equals(revokeGlluePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(revokeGlluePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeGlluePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revokeGlluePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public revokeGlluePosition_resultStandardScheme getScheme() {
        return new revokeGlluePosition_resultStandardScheme();
      }
    }

    private static class revokeGlluePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<revokeGlluePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revokeGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revokeGlluePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class revokeGlluePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public revokeGlluePosition_resultTupleScheme getScheme() {
        return new revokeGlluePosition_resultTupleScheme();
      }
    }

    private static class revokeGlluePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<revokeGlluePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, revokeGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, revokeGlluePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atsUpdatePositionFeature_args implements org.apache.thrift.TBase<atsUpdatePositionFeature_args, atsUpdatePositionFeature_args._Fields>, java.io.Serializable, Cloneable, Comparable<atsUpdatePositionFeature_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atsUpdatePositionFeature_args");

    private static final org.apache.thrift.protocol.TField BATCH_HANDLER_JOB_POSTION_FIELD_DESC = new org.apache.thrift.protocol.TField("batchHandlerJobPostion", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atsUpdatePositionFeature_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atsUpdatePositionFeature_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_HANDLER_JOB_POSTION((short)1, "batchHandlerJobPostion");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_HANDLER_JOB_POSTION
            return BATCH_HANDLER_JOB_POSTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_HANDLER_JOB_POSTION, new org.apache.thrift.meta_data.FieldMetaData("batchHandlerJobPostion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atsUpdatePositionFeature_args.class, metaDataMap);
    }

    public atsUpdatePositionFeature_args() {
    }

    public atsUpdatePositionFeature_args(
      com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion)
    {
      this();
      this.batchHandlerJobPostion = batchHandlerJobPostion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atsUpdatePositionFeature_args(atsUpdatePositionFeature_args other) {
      if (other.isSetBatchHandlerJobPostion()) {
        this.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion(other.batchHandlerJobPostion);
      }
    }

    public atsUpdatePositionFeature_args deepCopy() {
      return new atsUpdatePositionFeature_args(this);
    }

    @Override
    public void clear() {
      this.batchHandlerJobPostion = null;
    }

    public com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion getBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion;
    }

    public atsUpdatePositionFeature_args setBatchHandlerJobPostion(com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion batchHandlerJobPostion) {
      this.batchHandlerJobPostion = batchHandlerJobPostion;
      return this;
    }

    public void unsetBatchHandlerJobPostion() {
      this.batchHandlerJobPostion = null;
    }

    /** Returns true if field batchHandlerJobPostion is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchHandlerJobPostion() {
      return this.batchHandlerJobPostion != null;
    }

    public void setBatchHandlerJobPostionIsSet(boolean value) {
      if (!value) {
        this.batchHandlerJobPostion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        if (value == null) {
          unsetBatchHandlerJobPostion();
        } else {
          setBatchHandlerJobPostion((com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return getBatchHandlerJobPostion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_HANDLER_JOB_POSTION:
        return isSetBatchHandlerJobPostion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof atsUpdatePositionFeature_args)
        return this.equals((atsUpdatePositionFeature_args)that);
      return false;
    }

    public boolean equals(atsUpdatePositionFeature_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_batchHandlerJobPostion = true && this.isSetBatchHandlerJobPostion();
      boolean that_present_batchHandlerJobPostion = true && that.isSetBatchHandlerJobPostion();
      if (this_present_batchHandlerJobPostion || that_present_batchHandlerJobPostion) {
        if (!(this_present_batchHandlerJobPostion && that_present_batchHandlerJobPostion))
          return false;
        if (!this.batchHandlerJobPostion.equals(that.batchHandlerJobPostion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBatchHandlerJobPostion()) ? 131071 : 524287);
      if (isSetBatchHandlerJobPostion())
        hashCode = hashCode * 8191 + batchHandlerJobPostion.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(atsUpdatePositionFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchHandlerJobPostion()).compareTo(other.isSetBatchHandlerJobPostion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchHandlerJobPostion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchHandlerJobPostion, other.batchHandlerJobPostion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("atsUpdatePositionFeature_args(");
      boolean first = true;

      sb.append("batchHandlerJobPostion:");
      if (this.batchHandlerJobPostion == null) {
        sb.append("null");
      } else {
        sb.append(this.batchHandlerJobPostion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchHandlerJobPostion != null) {
        batchHandlerJobPostion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atsUpdatePositionFeature_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atsUpdatePositionFeature_argsStandardScheme getScheme() {
        return new atsUpdatePositionFeature_argsStandardScheme();
      }
    }

    private static class atsUpdatePositionFeature_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<atsUpdatePositionFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atsUpdatePositionFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_HANDLER_JOB_POSTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
                struct.batchHandlerJobPostion.read(iprot);
                struct.setBatchHandlerJobPostionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atsUpdatePositionFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchHandlerJobPostion != null) {
          oprot.writeFieldBegin(BATCH_HANDLER_JOB_POSTION_FIELD_DESC);
          struct.batchHandlerJobPostion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atsUpdatePositionFeature_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atsUpdatePositionFeature_argsTupleScheme getScheme() {
        return new atsUpdatePositionFeature_argsTupleScheme();
      }
    }

    private static class atsUpdatePositionFeature_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<atsUpdatePositionFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atsUpdatePositionFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBatchHandlerJobPostion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchHandlerJobPostion()) {
          struct.batchHandlerJobPostion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atsUpdatePositionFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchHandlerJobPostion = new com.moseeker.thrift.gen.position.struct.BatchHandlerJobPostion();
          struct.batchHandlerJobPostion.read(iprot);
          struct.setBatchHandlerJobPostionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atsUpdatePositionFeature_result implements org.apache.thrift.TBase<atsUpdatePositionFeature_result, atsUpdatePositionFeature_result._Fields>, java.io.Serializable, Cloneable, Comparable<atsUpdatePositionFeature_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atsUpdatePositionFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atsUpdatePositionFeature_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atsUpdatePositionFeature_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atsUpdatePositionFeature_result.class, metaDataMap);
    }

    public atsUpdatePositionFeature_result() {
    }

    public atsUpdatePositionFeature_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atsUpdatePositionFeature_result(atsUpdatePositionFeature_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public atsUpdatePositionFeature_result deepCopy() {
      return new atsUpdatePositionFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public atsUpdatePositionFeature_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof atsUpdatePositionFeature_result)
        return this.equals((atsUpdatePositionFeature_result)that);
      return false;
    }

    public boolean equals(atsUpdatePositionFeature_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(atsUpdatePositionFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("atsUpdatePositionFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atsUpdatePositionFeature_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atsUpdatePositionFeature_resultStandardScheme getScheme() {
        return new atsUpdatePositionFeature_resultStandardScheme();
      }
    }

    private static class atsUpdatePositionFeature_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<atsUpdatePositionFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atsUpdatePositionFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atsUpdatePositionFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atsUpdatePositionFeature_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atsUpdatePositionFeature_resultTupleScheme getScheme() {
        return new atsUpdatePositionFeature_resultTupleScheme();
      }
    }

    private static class atsUpdatePositionFeature_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<atsUpdatePositionFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atsUpdatePositionFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atsUpdatePositionFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
