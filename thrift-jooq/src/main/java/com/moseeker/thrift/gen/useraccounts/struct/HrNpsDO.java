/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-31")
public class HrNpsDO implements org.apache.thrift.TBase<HrNpsDO, HrNpsDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrNpsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrNpsDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HR_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_account_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INTENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("intention", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ACCEPT_CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("accept_contact", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrNpsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrNpsDOTupleSchemeFactory();

  public int id; // optional
  public int hr_account_id; // optional
  public byte intention; // optional
  public int accept_contact; // optional
  public String create_time; // optional
  public String update_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HR_ACCOUNT_ID((short)2, "hr_account_id"),
    INTENTION((short)3, "intention"),
    ACCEPT_CONTACT((short)4, "accept_contact"),
    CREATE_TIME((short)5, "create_time"),
    UPDATE_TIME((short)6, "update_time");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HR_ACCOUNT_ID
          return HR_ACCOUNT_ID;
        case 3: // INTENTION
          return INTENTION;
        case 4: // ACCEPT_CONTACT
          return ACCEPT_CONTACT;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HR_ACCOUNT_ID_ISSET_ID = 1;
  private static final int __INTENTION_ISSET_ID = 2;
  private static final int __ACCEPT_CONTACT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HR_ACCOUNT_ID,_Fields.INTENTION,_Fields.ACCEPT_CONTACT,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HR_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_account_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTENTION, new org.apache.thrift.meta_data.FieldMetaData("intention", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACCEPT_CONTACT, new org.apache.thrift.meta_data.FieldMetaData("accept_contact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrNpsDO.class, metaDataMap);
  }

  public HrNpsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrNpsDO(HrNpsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.hr_account_id = other.hr_account_id;
    this.intention = other.intention;
    this.accept_contact = other.accept_contact;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public HrNpsDO deepCopy() {
    return new HrNpsDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setHr_account_idIsSet(false);
    this.hr_account_id = 0;
    setIntentionIsSet(false);
    this.intention = 0;
    setAccept_contactIsSet(false);
    this.accept_contact = 0;
    this.create_time = null;
    this.update_time = null;
  }

  public int getId() {
    return this.id;
  }

  public HrNpsDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getHr_account_id() {
    return this.hr_account_id;
  }

  public HrNpsDO setHr_account_id(int hr_account_id) {
    this.hr_account_id = hr_account_id;
    setHr_account_idIsSet(true);
    return this;
  }

  public void unsetHr_account_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ACCOUNT_ID_ISSET_ID);
  }

  /** Returns true if field hr_account_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_account_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ACCOUNT_ID_ISSET_ID);
  }

  public void setHr_account_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ACCOUNT_ID_ISSET_ID, value);
  }

  public byte getIntention() {
    return this.intention;
  }

  public HrNpsDO setIntention(byte intention) {
    this.intention = intention;
    setIntentionIsSet(true);
    return this;
  }

  public void unsetIntention() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTENTION_ISSET_ID);
  }

  /** Returns true if field intention is set (has been assigned a value) and false otherwise */
  public boolean isSetIntention() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTENTION_ISSET_ID);
  }

  public void setIntentionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTENTION_ISSET_ID, value);
  }

  public int getAccept_contact() {
    return this.accept_contact;
  }

  public HrNpsDO setAccept_contact(int accept_contact) {
    this.accept_contact = accept_contact;
    setAccept_contactIsSet(true);
    return this;
  }

  public void unsetAccept_contact() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID);
  }

  /** Returns true if field accept_contact is set (has been assigned a value) and false otherwise */
  public boolean isSetAccept_contact() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID);
  }

  public void setAccept_contactIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCEPT_CONTACT_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public HrNpsDO setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public HrNpsDO setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HR_ACCOUNT_ID:
      if (value == null) {
        unsetHr_account_id();
      } else {
        setHr_account_id((Integer)value);
      }
      break;

    case INTENTION:
      if (value == null) {
        unsetIntention();
      } else {
        setIntention((Byte)value);
      }
      break;

    case ACCEPT_CONTACT:
      if (value == null) {
        unsetAccept_contact();
      } else {
        setAccept_contact((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HR_ACCOUNT_ID:
      return getHr_account_id();

    case INTENTION:
      return getIntention();

    case ACCEPT_CONTACT:
      return getAccept_contact();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HR_ACCOUNT_ID:
      return isSetHr_account_id();
    case INTENTION:
      return isSetIntention();
    case ACCEPT_CONTACT:
      return isSetAccept_contact();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrNpsDO)
      return this.equals((HrNpsDO)that);
    return false;
  }

  public boolean equals(HrNpsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hr_account_id = true && this.isSetHr_account_id();
    boolean that_present_hr_account_id = true && that.isSetHr_account_id();
    if (this_present_hr_account_id || that_present_hr_account_id) {
      if (!(this_present_hr_account_id && that_present_hr_account_id))
        return false;
      if (this.hr_account_id != that.hr_account_id)
        return false;
    }

    boolean this_present_intention = true && this.isSetIntention();
    boolean that_present_intention = true && that.isSetIntention();
    if (this_present_intention || that_present_intention) {
      if (!(this_present_intention && that_present_intention))
        return false;
      if (this.intention != that.intention)
        return false;
    }

    boolean this_present_accept_contact = true && this.isSetAccept_contact();
    boolean that_present_accept_contact = true && that.isSetAccept_contact();
    if (this_present_accept_contact || that_present_accept_contact) {
      if (!(this_present_accept_contact && that_present_accept_contact))
        return false;
      if (this.accept_contact != that.accept_contact)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetHr_account_id()) ? 131071 : 524287);
    if (isSetHr_account_id())
      hashCode = hashCode * 8191 + hr_account_id;

    hashCode = hashCode * 8191 + ((isSetIntention()) ? 131071 : 524287);
    if (isSetIntention())
      hashCode = hashCode * 8191 + (int) (intention);

    hashCode = hashCode * 8191 + ((isSetAccept_contact()) ? 131071 : 524287);
    if (isSetAccept_contact())
      hashCode = hashCode * 8191 + accept_contact;

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrNpsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHr_account_id()).compareTo(other.isSetHr_account_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_account_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_account_id, other.hr_account_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntention()).compareTo(other.isSetIntention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intention, other.intention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccept_contact()).compareTo(other.isSetAccept_contact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccept_contact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accept_contact, other.accept_contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrNpsDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHr_account_id()) {
      if (!first) sb.append(", ");
      sb.append("hr_account_id:");
      sb.append(this.hr_account_id);
      first = false;
    }
    if (isSetIntention()) {
      if (!first) sb.append(", ");
      sb.append("intention:");
      sb.append(this.intention);
      first = false;
    }
    if (isSetAccept_contact()) {
      if (!first) sb.append(", ");
      sb.append("accept_contact:");
      sb.append(this.accept_contact);
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrNpsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsDOStandardScheme getScheme() {
      return new HrNpsDOStandardScheme();
    }
  }

  private static class HrNpsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrNpsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrNpsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hr_account_id = iprot.readI32();
              struct.setHr_account_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.intention = iprot.readByte();
              struct.setIntentionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCEPT_CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accept_contact = iprot.readI32();
              struct.setAccept_contactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrNpsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHr_account_id()) {
        oprot.writeFieldBegin(HR_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_account_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIntention()) {
        oprot.writeFieldBegin(INTENTION_FIELD_DESC);
        oprot.writeByte(struct.intention);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccept_contact()) {
        oprot.writeFieldBegin(ACCEPT_CONTACT_FIELD_DESC);
        oprot.writeI32(struct.accept_contact);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrNpsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsDOTupleScheme getScheme() {
      return new HrNpsDOTupleScheme();
    }
  }

  private static class HrNpsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrNpsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrNpsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHr_account_id()) {
        optionals.set(1);
      }
      if (struct.isSetIntention()) {
        optionals.set(2);
      }
      if (struct.isSetAccept_contact()) {
        optionals.set(3);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(4);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHr_account_id()) {
        oprot.writeI32(struct.hr_account_id);
      }
      if (struct.isSetIntention()) {
        oprot.writeByte(struct.intention);
      }
      if (struct.isSetAccept_contact()) {
        oprot.writeI32(struct.accept_contact);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrNpsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hr_account_id = iprot.readI32();
        struct.setHr_account_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.intention = iprot.readByte();
        struct.setIntentionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accept_contact = iprot.readI32();
        struct.setAccept_contactIsSet(true);
      }
      if (incoming.get(4)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

