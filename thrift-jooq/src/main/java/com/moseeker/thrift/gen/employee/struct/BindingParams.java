/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.employee.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-06")
public class BindingParams implements org.apache.thrift.TBase<BindingParams, BindingParams._Fields>, java.io.Serializable, Cloneable, Comparable<BindingParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BindingParams");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("customField", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ANSWER1_FIELD_DESC = new org.apache.thrift.protocol.TField("answer1", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ANSWER2_FIELD_DESC = new org.apache.thrift.protocol.TField("answer2", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BindingParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BindingParamsTupleSchemeFactory();

  /**
   * 
   * @see BindType
   */
  public BindType type; // required
  public int userId; // required
  public int companyId; // required
  public java.lang.String email; // optional
  public java.lang.String mobile; // optional
  public java.lang.String customField; // optional
  public java.lang.String name; // optional
  public java.lang.String answer1; // optional
  public java.lang.String answer2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see BindType
     */
    TYPE((short)1, "type"),
    USER_ID((short)2, "userId"),
    COMPANY_ID((short)3, "companyId"),
    EMAIL((short)4, "email"),
    MOBILE((short)5, "mobile"),
    CUSTOM_FIELD((short)6, "customField"),
    NAME((short)7, "name"),
    ANSWER1((short)8, "answer1"),
    ANSWER2((short)9, "answer2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // USER_ID
          return USER_ID;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // EMAIL
          return EMAIL;
        case 5: // MOBILE
          return MOBILE;
        case 6: // CUSTOM_FIELD
          return CUSTOM_FIELD;
        case 7: // NAME
          return NAME;
        case 8: // ANSWER1
          return ANSWER1;
        case 9: // ANSWER2
          return ANSWER2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EMAIL,_Fields.MOBILE,_Fields.CUSTOM_FIELD,_Fields.NAME,_Fields.ANSWER1,_Fields.ANSWER2};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BindType.class)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_FIELD, new org.apache.thrift.meta_data.FieldMetaData("customField", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER1, new org.apache.thrift.meta_data.FieldMetaData("answer1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER2, new org.apache.thrift.meta_data.FieldMetaData("answer2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BindingParams.class, metaDataMap);
  }

  public BindingParams() {
  }

  public BindingParams(
    BindType type,
    int userId,
    int companyId)
  {
    this();
    this.type = type;
    this.userId = userId;
    setUserIdIsSet(true);
    this.companyId = companyId;
    setCompanyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BindingParams(BindingParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.userId = other.userId;
    this.companyId = other.companyId;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCustomField()) {
      this.customField = other.customField;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAnswer1()) {
      this.answer1 = other.answer1;
    }
    if (other.isSetAnswer2()) {
      this.answer2 = other.answer2;
    }
  }

  public BindingParams deepCopy() {
    return new BindingParams(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.email = null;
    this.mobile = null;
    this.customField = null;
    this.name = null;
    this.answer1 = null;
    this.answer2 = null;
  }

  /**
   * 
   * @see BindType
   */
  public BindType getType() {
    return this.type;
  }

  /**
   * 
   * @see BindType
   */
  public BindingParams setType(BindType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public BindingParams setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public BindingParams setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public BindingParams setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public java.lang.String getMobile() {
    return this.mobile;
  }

  public BindingParams setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public java.lang.String getCustomField() {
    return this.customField;
  }

  public BindingParams setCustomField(java.lang.String customField) {
    this.customField = customField;
    return this;
  }

  public void unsetCustomField() {
    this.customField = null;
  }

  /** Returns true if field customField is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomField() {
    return this.customField != null;
  }

  public void setCustomFieldIsSet(boolean value) {
    if (!value) {
      this.customField = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public BindingParams setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getAnswer1() {
    return this.answer1;
  }

  public BindingParams setAnswer1(java.lang.String answer1) {
    this.answer1 = answer1;
    return this;
  }

  public void unsetAnswer1() {
    this.answer1 = null;
  }

  /** Returns true if field answer1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer1() {
    return this.answer1 != null;
  }

  public void setAnswer1IsSet(boolean value) {
    if (!value) {
      this.answer1 = null;
    }
  }

  public java.lang.String getAnswer2() {
    return this.answer2;
  }

  public BindingParams setAnswer2(java.lang.String answer2) {
    this.answer2 = answer2;
    return this;
  }

  public void unsetAnswer2() {
    this.answer2 = null;
  }

  /** Returns true if field answer2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer2() {
    return this.answer2 != null;
  }

  public void setAnswer2IsSet(boolean value) {
    if (!value) {
      this.answer2 = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BindType)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.String)value);
      }
      break;

    case CUSTOM_FIELD:
      if (value == null) {
        unsetCustomField();
      } else {
        setCustomField((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ANSWER1:
      if (value == null) {
        unsetAnswer1();
      } else {
        setAnswer1((java.lang.String)value);
      }
      break;

    case ANSWER2:
      if (value == null) {
        unsetAnswer2();
      } else {
        setAnswer2((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case USER_ID:
      return getUserId();

    case COMPANY_ID:
      return getCompanyId();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case CUSTOM_FIELD:
      return getCustomField();

    case NAME:
      return getName();

    case ANSWER1:
      return getAnswer1();

    case ANSWER2:
      return getAnswer2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case USER_ID:
      return isSetUserId();
    case COMPANY_ID:
      return isSetCompanyId();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case CUSTOM_FIELD:
      return isSetCustomField();
    case NAME:
      return isSetName();
    case ANSWER1:
      return isSetAnswer1();
    case ANSWER2:
      return isSetAnswer2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BindingParams)
      return this.equals((BindingParams)that);
    return false;
  }

  public boolean equals(BindingParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_companyId = true;
    boolean that_present_companyId = true;
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_customField = true && this.isSetCustomField();
    boolean that_present_customField = true && that.isSetCustomField();
    if (this_present_customField || that_present_customField) {
      if (!(this_present_customField && that_present_customField))
        return false;
      if (!this.customField.equals(that.customField))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_answer1 = true && this.isSetAnswer1();
    boolean that_present_answer1 = true && that.isSetAnswer1();
    if (this_present_answer1 || that_present_answer1) {
      if (!(this_present_answer1 && that_present_answer1))
        return false;
      if (!this.answer1.equals(that.answer1))
        return false;
    }

    boolean this_present_answer2 = true && this.isSetAnswer2();
    boolean that_present_answer2 = true && that.isSetAnswer2();
    if (this_present_answer2 || that_present_answer2) {
      if (!(this_present_answer2 && that_present_answer2))
        return false;
      if (!this.answer2.equals(that.answer2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomField()) ? 131071 : 524287);
    if (isSetCustomField())
      hashCode = hashCode * 8191 + customField.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnswer1()) ? 131071 : 524287);
    if (isSetAnswer1())
      hashCode = hashCode * 8191 + answer1.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnswer2()) ? 131071 : 524287);
    if (isSetAnswer2())
      hashCode = hashCode * 8191 + answer2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BindingParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomField()).compareTo(other.isSetCustomField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customField, other.customField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnswer1()).compareTo(other.isSetAnswer1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer1, other.answer1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnswer2()).compareTo(other.isSetAnswer2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer2, other.answer2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BindingParams(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyId:");
    sb.append(this.companyId);
    first = false;
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetCustomField()) {
      if (!first) sb.append(", ");
      sb.append("customField:");
      if (this.customField == null) {
        sb.append("null");
      } else {
        sb.append(this.customField);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetAnswer1()) {
      if (!first) sb.append(", ");
      sb.append("answer1:");
      if (this.answer1 == null) {
        sb.append("null");
      } else {
        sb.append(this.answer1);
      }
      first = false;
    }
    if (isSetAnswer2()) {
      if (!first) sb.append(", ");
      sb.append("answer2:");
      if (this.answer2 == null) {
        sb.append("null");
      } else {
        sb.append(this.answer2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'companyId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BindingParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BindingParamsStandardScheme getScheme() {
      return new BindingParamsStandardScheme();
    }
  }

  private static class BindingParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<BindingParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BindingParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.moseeker.thrift.gen.employee.struct.BindType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CUSTOM_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customField = iprot.readString();
              struct.setCustomFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANSWER1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answer1 = iprot.readString();
              struct.setAnswer1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ANSWER2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answer2 = iprot.readString();
              struct.setAnswer2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompanyId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'companyId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BindingParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
      oprot.writeI32(struct.companyId);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customField != null) {
        if (struct.isSetCustomField()) {
          oprot.writeFieldBegin(CUSTOM_FIELD_FIELD_DESC);
          oprot.writeString(struct.customField);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.answer1 != null) {
        if (struct.isSetAnswer1()) {
          oprot.writeFieldBegin(ANSWER1_FIELD_DESC);
          oprot.writeString(struct.answer1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.answer2 != null) {
        if (struct.isSetAnswer2()) {
          oprot.writeFieldBegin(ANSWER2_FIELD_DESC);
          oprot.writeString(struct.answer2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BindingParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BindingParamsTupleScheme getScheme() {
      return new BindingParamsTupleScheme();
    }
  }

  private static class BindingParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<BindingParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BindingParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.userId);
      oprot.writeI32(struct.companyId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEmail()) {
        optionals.set(0);
      }
      if (struct.isSetMobile()) {
        optionals.set(1);
      }
      if (struct.isSetCustomField()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetAnswer1()) {
        optionals.set(4);
      }
      if (struct.isSetAnswer2()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCustomField()) {
        oprot.writeString(struct.customField);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAnswer1()) {
        oprot.writeString(struct.answer1);
      }
      if (struct.isSetAnswer2()) {
        oprot.writeString(struct.answer2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BindingParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = com.moseeker.thrift.gen.employee.struct.BindType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.companyId = iprot.readI32();
      struct.setCompanyIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.customField = iprot.readString();
        struct.setCustomFieldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.answer1 = iprot.readString();
        struct.setAnswer1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.answer2 = iprot.readString();
        struct.setAnswer2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

