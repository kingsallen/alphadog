/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ConfigSysTemplateMessageLibraryDO implements org.apache.thrift.TBase<ConfigSysTemplateMessageLibraryDO, ConfigSysTemplateMessageLibraryDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysTemplateMessageLibraryDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysTemplateMessageLibraryDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRIMARY_INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryIndustry", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TWO_INDUSTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("twoIndustry", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sample", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("templateIdShort", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SEND_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCondition", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendtime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SENDTO_FIELD_DESC = new org.apache.thrift.protocol.TField("sendto", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FROM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysTemplateMessageLibraryDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysTemplateMessageLibraryDOTupleSchemeFactory();

  public int id; // optional
  public String title; // optional
  public String primaryIndustry; // optional
  public String twoIndustry; // optional
  public String content; // optional
  public String sample; // optional
  public int display; // optional
  public int priority; // optional
  public int disable; // optional
  public double type; // optional
  public String templateIdShort; // optional
  public String sendCondition; // optional
  public String sendtime; // optional
  public String sendto; // optional
  public String first; // optional
  public String remark; // optional
  public String url; // optional
  public String fromName; // optional
  public String subject; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    PRIMARY_INDUSTRY((short)3, "primaryIndustry"),
    TWO_INDUSTRY((short)4, "twoIndustry"),
    CONTENT((short)5, "content"),
    SAMPLE((short)6, "sample"),
    DISPLAY((short)7, "display"),
    PRIORITY((short)8, "priority"),
    DISABLE((short)9, "disable"),
    TYPE((short)10, "type"),
    TEMPLATE_ID_SHORT((short)11, "templateIdShort"),
    SEND_CONDITION((short)12, "sendCondition"),
    SENDTIME((short)13, "sendtime"),
    SENDTO((short)14, "sendto"),
    FIRST((short)15, "first"),
    REMARK((short)16, "remark"),
    URL((short)17, "url"),
    FROM_NAME((short)18, "fromName"),
    SUBJECT((short)19, "subject");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // PRIMARY_INDUSTRY
          return PRIMARY_INDUSTRY;
        case 4: // TWO_INDUSTRY
          return TWO_INDUSTRY;
        case 5: // CONTENT
          return CONTENT;
        case 6: // SAMPLE
          return SAMPLE;
        case 7: // DISPLAY
          return DISPLAY;
        case 8: // PRIORITY
          return PRIORITY;
        case 9: // DISABLE
          return DISABLE;
        case 10: // TYPE
          return TYPE;
        case 11: // TEMPLATE_ID_SHORT
          return TEMPLATE_ID_SHORT;
        case 12: // SEND_CONDITION
          return SEND_CONDITION;
        case 13: // SENDTIME
          return SENDTIME;
        case 14: // SENDTO
          return SENDTO;
        case 15: // FIRST
          return FIRST;
        case 16: // REMARK
          return REMARK;
        case 17: // URL
          return URL;
        case 18: // FROM_NAME
          return FROM_NAME;
        case 19: // SUBJECT
          return SUBJECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DISPLAY_ISSET_ID = 1;
  private static final int __PRIORITY_ISSET_ID = 2;
  private static final int __DISABLE_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.PRIMARY_INDUSTRY,_Fields.TWO_INDUSTRY,_Fields.CONTENT,_Fields.SAMPLE,_Fields.DISPLAY,_Fields.PRIORITY,_Fields.DISABLE,_Fields.TYPE,_Fields.TEMPLATE_ID_SHORT,_Fields.SEND_CONDITION,_Fields.SENDTIME,_Fields.SENDTO,_Fields.FIRST,_Fields.REMARK,_Fields.URL,_Fields.FROM_NAME,_Fields.SUBJECT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIMARY_INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("primaryIndustry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TWO_INDUSTRY, new org.apache.thrift.meta_data.FieldMetaData("twoIndustry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLE, new org.apache.thrift.meta_data.FieldMetaData("sample", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TEMPLATE_ID_SHORT, new org.apache.thrift.meta_data.FieldMetaData("templateIdShort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("sendCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDTIME, new org.apache.thrift.meta_data.FieldMetaData("sendtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDTO, new org.apache.thrift.meta_data.FieldMetaData("sendto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysTemplateMessageLibraryDO.class, metaDataMap);
  }

  public ConfigSysTemplateMessageLibraryDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysTemplateMessageLibraryDO(ConfigSysTemplateMessageLibraryDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPrimaryIndustry()) {
      this.primaryIndustry = other.primaryIndustry;
    }
    if (other.isSetTwoIndustry()) {
      this.twoIndustry = other.twoIndustry;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSample()) {
      this.sample = other.sample;
    }
    this.display = other.display;
    this.priority = other.priority;
    this.disable = other.disable;
    this.type = other.type;
    if (other.isSetTemplateIdShort()) {
      this.templateIdShort = other.templateIdShort;
    }
    if (other.isSetSendCondition()) {
      this.sendCondition = other.sendCondition;
    }
    if (other.isSetSendtime()) {
      this.sendtime = other.sendtime;
    }
    if (other.isSetSendto()) {
      this.sendto = other.sendto;
    }
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetFromName()) {
      this.fromName = other.fromName;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
  }

  public ConfigSysTemplateMessageLibraryDO deepCopy() {
    return new ConfigSysTemplateMessageLibraryDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.primaryIndustry = null;
    this.twoIndustry = null;
    this.content = null;
    this.sample = null;
    setDisplayIsSet(false);
    this.display = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setDisableIsSet(false);
    this.disable = 0;
    setTypeIsSet(false);
    this.type = 0.0;
    this.templateIdShort = null;
    this.sendCondition = null;
    this.sendtime = null;
    this.sendto = null;
    this.first = null;
    this.remark = null;
    this.url = null;
    this.fromName = null;
    this.subject = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysTemplateMessageLibraryDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public ConfigSysTemplateMessageLibraryDO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getPrimaryIndustry() {
    return this.primaryIndustry;
  }

  public ConfigSysTemplateMessageLibraryDO setPrimaryIndustry(String primaryIndustry) {
    this.primaryIndustry = primaryIndustry;
    return this;
  }

  public void unsetPrimaryIndustry() {
    this.primaryIndustry = null;
  }

  /** Returns true if field primaryIndustry is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryIndustry() {
    return this.primaryIndustry != null;
  }

  public void setPrimaryIndustryIsSet(boolean value) {
    if (!value) {
      this.primaryIndustry = null;
    }
  }

  public String getTwoIndustry() {
    return this.twoIndustry;
  }

  public ConfigSysTemplateMessageLibraryDO setTwoIndustry(String twoIndustry) {
    this.twoIndustry = twoIndustry;
    return this;
  }

  public void unsetTwoIndustry() {
    this.twoIndustry = null;
  }

  /** Returns true if field twoIndustry is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoIndustry() {
    return this.twoIndustry != null;
  }

  public void setTwoIndustryIsSet(boolean value) {
    if (!value) {
      this.twoIndustry = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ConfigSysTemplateMessageLibraryDO setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getSample() {
    return this.sample;
  }

  public ConfigSysTemplateMessageLibraryDO setSample(String sample) {
    this.sample = sample;
    return this;
  }

  public void unsetSample() {
    this.sample = null;
  }

  /** Returns true if field sample is set (has been assigned a value) and false otherwise */
  public boolean isSetSample() {
    return this.sample != null;
  }

  public void setSampleIsSet(boolean value) {
    if (!value) {
      this.sample = null;
    }
  }

  public int getDisplay() {
    return this.display;
  }

  public ConfigSysTemplateMessageLibraryDO setDisplay(int display) {
    this.display = display;
    setDisplayIsSet(true);
    return this;
  }

  public void unsetDisplay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  public void setDisplayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISPLAY_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public ConfigSysTemplateMessageLibraryDO setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getDisable() {
    return this.disable;
  }

  public ConfigSysTemplateMessageLibraryDO setDisable(int disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public double getType() {
    return this.type;
  }

  public ConfigSysTemplateMessageLibraryDO setType(double type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getTemplateIdShort() {
    return this.templateIdShort;
  }

  public ConfigSysTemplateMessageLibraryDO setTemplateIdShort(String templateIdShort) {
    this.templateIdShort = templateIdShort;
    return this;
  }

  public void unsetTemplateIdShort() {
    this.templateIdShort = null;
  }

  /** Returns true if field templateIdShort is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateIdShort() {
    return this.templateIdShort != null;
  }

  public void setTemplateIdShortIsSet(boolean value) {
    if (!value) {
      this.templateIdShort = null;
    }
  }

  public String getSendCondition() {
    return this.sendCondition;
  }

  public ConfigSysTemplateMessageLibraryDO setSendCondition(String sendCondition) {
    this.sendCondition = sendCondition;
    return this;
  }

  public void unsetSendCondition() {
    this.sendCondition = null;
  }

  /** Returns true if field sendCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCondition() {
    return this.sendCondition != null;
  }

  public void setSendConditionIsSet(boolean value) {
    if (!value) {
      this.sendCondition = null;
    }
  }

  public String getSendtime() {
    return this.sendtime;
  }

  public ConfigSysTemplateMessageLibraryDO setSendtime(String sendtime) {
    this.sendtime = sendtime;
    return this;
  }

  public void unsetSendtime() {
    this.sendtime = null;
  }

  /** Returns true if field sendtime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendtime() {
    return this.sendtime != null;
  }

  public void setSendtimeIsSet(boolean value) {
    if (!value) {
      this.sendtime = null;
    }
  }

  public String getSendto() {
    return this.sendto;
  }

  public ConfigSysTemplateMessageLibraryDO setSendto(String sendto) {
    this.sendto = sendto;
    return this;
  }

  public void unsetSendto() {
    this.sendto = null;
  }

  /** Returns true if field sendto is set (has been assigned a value) and false otherwise */
  public boolean isSetSendto() {
    return this.sendto != null;
  }

  public void setSendtoIsSet(boolean value) {
    if (!value) {
      this.sendto = null;
    }
  }

  public String getFirst() {
    return this.first;
  }

  public ConfigSysTemplateMessageLibraryDO setFirst(String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ConfigSysTemplateMessageLibraryDO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public ConfigSysTemplateMessageLibraryDO setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getFromName() {
    return this.fromName;
  }

  public ConfigSysTemplateMessageLibraryDO setFromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  public void unsetFromName() {
    this.fromName = null;
  }

  /** Returns true if field fromName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromName() {
    return this.fromName != null;
  }

  public void setFromNameIsSet(boolean value) {
    if (!value) {
      this.fromName = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public ConfigSysTemplateMessageLibraryDO setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PRIMARY_INDUSTRY:
      if (value == null) {
        unsetPrimaryIndustry();
      } else {
        setPrimaryIndustry((String)value);
      }
      break;

    case TWO_INDUSTRY:
      if (value == null) {
        unsetTwoIndustry();
      } else {
        setTwoIndustry((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SAMPLE:
      if (value == null) {
        unsetSample();
      } else {
        setSample((String)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Double)value);
      }
      break;

    case TEMPLATE_ID_SHORT:
      if (value == null) {
        unsetTemplateIdShort();
      } else {
        setTemplateIdShort((String)value);
      }
      break;

    case SEND_CONDITION:
      if (value == null) {
        unsetSendCondition();
      } else {
        setSendCondition((String)value);
      }
      break;

    case SENDTIME:
      if (value == null) {
        unsetSendtime();
      } else {
        setSendtime((String)value);
      }
      break;

    case SENDTO:
      if (value == null) {
        unsetSendto();
      } else {
        setSendto((String)value);
      }
      break;

    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case FROM_NAME:
      if (value == null) {
        unsetFromName();
      } else {
        setFromName((String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case PRIMARY_INDUSTRY:
      return getPrimaryIndustry();

    case TWO_INDUSTRY:
      return getTwoIndustry();

    case CONTENT:
      return getContent();

    case SAMPLE:
      return getSample();

    case DISPLAY:
      return getDisplay();

    case PRIORITY:
      return getPriority();

    case DISABLE:
      return getDisable();

    case TYPE:
      return getType();

    case TEMPLATE_ID_SHORT:
      return getTemplateIdShort();

    case SEND_CONDITION:
      return getSendCondition();

    case SENDTIME:
      return getSendtime();

    case SENDTO:
      return getSendto();

    case FIRST:
      return getFirst();

    case REMARK:
      return getRemark();

    case URL:
      return getUrl();

    case FROM_NAME:
      return getFromName();

    case SUBJECT:
      return getSubject();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case PRIMARY_INDUSTRY:
      return isSetPrimaryIndustry();
    case TWO_INDUSTRY:
      return isSetTwoIndustry();
    case CONTENT:
      return isSetContent();
    case SAMPLE:
      return isSetSample();
    case DISPLAY:
      return isSetDisplay();
    case PRIORITY:
      return isSetPriority();
    case DISABLE:
      return isSetDisable();
    case TYPE:
      return isSetType();
    case TEMPLATE_ID_SHORT:
      return isSetTemplateIdShort();
    case SEND_CONDITION:
      return isSetSendCondition();
    case SENDTIME:
      return isSetSendtime();
    case SENDTO:
      return isSetSendto();
    case FIRST:
      return isSetFirst();
    case REMARK:
      return isSetRemark();
    case URL:
      return isSetUrl();
    case FROM_NAME:
      return isSetFromName();
    case SUBJECT:
      return isSetSubject();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysTemplateMessageLibraryDO)
      return this.equals((ConfigSysTemplateMessageLibraryDO)that);
    return false;
  }

  public boolean equals(ConfigSysTemplateMessageLibraryDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_primaryIndustry = true && this.isSetPrimaryIndustry();
    boolean that_present_primaryIndustry = true && that.isSetPrimaryIndustry();
    if (this_present_primaryIndustry || that_present_primaryIndustry) {
      if (!(this_present_primaryIndustry && that_present_primaryIndustry))
        return false;
      if (!this.primaryIndustry.equals(that.primaryIndustry))
        return false;
    }

    boolean this_present_twoIndustry = true && this.isSetTwoIndustry();
    boolean that_present_twoIndustry = true && that.isSetTwoIndustry();
    if (this_present_twoIndustry || that_present_twoIndustry) {
      if (!(this_present_twoIndustry && that_present_twoIndustry))
        return false;
      if (!this.twoIndustry.equals(that.twoIndustry))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_sample = true && this.isSetSample();
    boolean that_present_sample = true && that.isSetSample();
    if (this_present_sample || that_present_sample) {
      if (!(this_present_sample && that_present_sample))
        return false;
      if (!this.sample.equals(that.sample))
        return false;
    }

    boolean this_present_display = true && this.isSetDisplay();
    boolean that_present_display = true && that.isSetDisplay();
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (this.display != that.display)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_templateIdShort = true && this.isSetTemplateIdShort();
    boolean that_present_templateIdShort = true && that.isSetTemplateIdShort();
    if (this_present_templateIdShort || that_present_templateIdShort) {
      if (!(this_present_templateIdShort && that_present_templateIdShort))
        return false;
      if (!this.templateIdShort.equals(that.templateIdShort))
        return false;
    }

    boolean this_present_sendCondition = true && this.isSetSendCondition();
    boolean that_present_sendCondition = true && that.isSetSendCondition();
    if (this_present_sendCondition || that_present_sendCondition) {
      if (!(this_present_sendCondition && that_present_sendCondition))
        return false;
      if (!this.sendCondition.equals(that.sendCondition))
        return false;
    }

    boolean this_present_sendtime = true && this.isSetSendtime();
    boolean that_present_sendtime = true && that.isSetSendtime();
    if (this_present_sendtime || that_present_sendtime) {
      if (!(this_present_sendtime && that_present_sendtime))
        return false;
      if (!this.sendtime.equals(that.sendtime))
        return false;
    }

    boolean this_present_sendto = true && this.isSetSendto();
    boolean that_present_sendto = true && that.isSetSendto();
    if (this_present_sendto || that_present_sendto) {
      if (!(this_present_sendto && that_present_sendto))
        return false;
      if (!this.sendto.equals(that.sendto))
        return false;
    }

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_fromName = true && this.isSetFromName();
    boolean that_present_fromName = true && that.isSetFromName();
    if (this_present_fromName || that_present_fromName) {
      if (!(this_present_fromName && that_present_fromName))
        return false;
      if (!this.fromName.equals(that.fromName))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrimaryIndustry()) ? 131071 : 524287);
    if (isSetPrimaryIndustry())
      hashCode = hashCode * 8191 + primaryIndustry.hashCode();

    hashCode = hashCode * 8191 + ((isSetTwoIndustry()) ? 131071 : 524287);
    if (isSetTwoIndustry())
      hashCode = hashCode * 8191 + twoIndustry.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetSample()) ? 131071 : 524287);
    if (isSetSample())
      hashCode = hashCode * 8191 + sample.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplay()) ? 131071 : 524287);
    if (isSetDisplay())
      hashCode = hashCode * 8191 + display;

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + disable;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(type);

    hashCode = hashCode * 8191 + ((isSetTemplateIdShort()) ? 131071 : 524287);
    if (isSetTemplateIdShort())
      hashCode = hashCode * 8191 + templateIdShort.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendCondition()) ? 131071 : 524287);
    if (isSetSendCondition())
      hashCode = hashCode * 8191 + sendCondition.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendtime()) ? 131071 : 524287);
    if (isSetSendtime())
      hashCode = hashCode * 8191 + sendtime.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendto()) ? 131071 : 524287);
    if (isSetSendto())
      hashCode = hashCode * 8191 + sendto.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromName()) ? 131071 : 524287);
    if (isSetFromName())
      hashCode = hashCode * 8191 + fromName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubject()) ? 131071 : 524287);
    if (isSetSubject())
      hashCode = hashCode * 8191 + subject.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysTemplateMessageLibraryDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryIndustry()).compareTo(other.isSetPrimaryIndustry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryIndustry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryIndustry, other.primaryIndustry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoIndustry()).compareTo(other.isSetTwoIndustry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoIndustry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoIndustry, other.twoIndustry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSample()).compareTo(other.isSetSample());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSample()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample, other.sample);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateIdShort()).compareTo(other.isSetTemplateIdShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateIdShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateIdShort, other.templateIdShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCondition()).compareTo(other.isSetSendCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCondition, other.sendCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendtime()).compareTo(other.isSetSendtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendtime, other.sendtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendto()).compareTo(other.isSetSendto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendto, other.sendto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromName()).compareTo(other.isSetFromName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromName, other.fromName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysTemplateMessageLibraryDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPrimaryIndustry()) {
      if (!first) sb.append(", ");
      sb.append("primaryIndustry:");
      if (this.primaryIndustry == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryIndustry);
      }
      first = false;
    }
    if (isSetTwoIndustry()) {
      if (!first) sb.append(", ");
      sb.append("twoIndustry:");
      if (this.twoIndustry == null) {
        sb.append("null");
      } else {
        sb.append(this.twoIndustry);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetSample()) {
      if (!first) sb.append(", ");
      sb.append("sample:");
      if (this.sample == null) {
        sb.append("null");
      } else {
        sb.append(this.sample);
      }
      first = false;
    }
    if (isSetDisplay()) {
      if (!first) sb.append(", ");
      sb.append("display:");
      sb.append(this.display);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetTemplateIdShort()) {
      if (!first) sb.append(", ");
      sb.append("templateIdShort:");
      if (this.templateIdShort == null) {
        sb.append("null");
      } else {
        sb.append(this.templateIdShort);
      }
      first = false;
    }
    if (isSetSendCondition()) {
      if (!first) sb.append(", ");
      sb.append("sendCondition:");
      if (this.sendCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.sendCondition);
      }
      first = false;
    }
    if (isSetSendtime()) {
      if (!first) sb.append(", ");
      sb.append("sendtime:");
      if (this.sendtime == null) {
        sb.append("null");
      } else {
        sb.append(this.sendtime);
      }
      first = false;
    }
    if (isSetSendto()) {
      if (!first) sb.append(", ");
      sb.append("sendto:");
      if (this.sendto == null) {
        sb.append("null");
      } else {
        sb.append(this.sendto);
      }
      first = false;
    }
    if (isSetFirst()) {
      if (!first) sb.append(", ");
      sb.append("first:");
      if (this.first == null) {
        sb.append("null");
      } else {
        sb.append(this.first);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetFromName()) {
      if (!first) sb.append(", ");
      sb.append("fromName:");
      if (this.fromName == null) {
        sb.append("null");
      } else {
        sb.append(this.fromName);
      }
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysTemplateMessageLibraryDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysTemplateMessageLibraryDOStandardScheme getScheme() {
      return new ConfigSysTemplateMessageLibraryDOStandardScheme();
    }
  }

  private static class ConfigSysTemplateMessageLibraryDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysTemplateMessageLibraryDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysTemplateMessageLibraryDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIMARY_INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.primaryIndustry = iprot.readString();
              struct.setPrimaryIndustryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TWO_INDUSTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.twoIndustry = iprot.readString();
              struct.setTwoIndustryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAMPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sample = iprot.readString();
              struct.setSampleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.display = iprot.readI32();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disable = iprot.readI32();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.type = iprot.readDouble();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TEMPLATE_ID_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateIdShort = iprot.readString();
              struct.setTemplateIdShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SEND_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendCondition = iprot.readString();
              struct.setSendConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendtime = iprot.readString();
              struct.setSendtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SENDTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendto = iprot.readString();
              struct.setSendtoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FROM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromName = iprot.readString();
              struct.setFromNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysTemplateMessageLibraryDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.primaryIndustry != null) {
        if (struct.isSetPrimaryIndustry()) {
          oprot.writeFieldBegin(PRIMARY_INDUSTRY_FIELD_DESC);
          oprot.writeString(struct.primaryIndustry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.twoIndustry != null) {
        if (struct.isSetTwoIndustry()) {
          oprot.writeFieldBegin(TWO_INDUSTRY_FIELD_DESC);
          oprot.writeString(struct.twoIndustry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sample != null) {
        if (struct.isSetSample()) {
          oprot.writeFieldBegin(SAMPLE_FIELD_DESC);
          oprot.writeString(struct.sample);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisplay()) {
        oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
        oprot.writeI32(struct.display);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeI32(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeDouble(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.templateIdShort != null) {
        if (struct.isSetTemplateIdShort()) {
          oprot.writeFieldBegin(TEMPLATE_ID_SHORT_FIELD_DESC);
          oprot.writeString(struct.templateIdShort);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendCondition != null) {
        if (struct.isSetSendCondition()) {
          oprot.writeFieldBegin(SEND_CONDITION_FIELD_DESC);
          oprot.writeString(struct.sendCondition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendtime != null) {
        if (struct.isSetSendtime()) {
          oprot.writeFieldBegin(SENDTIME_FIELD_DESC);
          oprot.writeString(struct.sendtime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendto != null) {
        if (struct.isSetSendto()) {
          oprot.writeFieldBegin(SENDTO_FIELD_DESC);
          oprot.writeString(struct.sendto);
          oprot.writeFieldEnd();
        }
      }
      if (struct.first != null) {
        if (struct.isSetFirst()) {
          oprot.writeFieldBegin(FIRST_FIELD_DESC);
          oprot.writeString(struct.first);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromName != null) {
        if (struct.isSetFromName()) {
          oprot.writeFieldBegin(FROM_NAME_FIELD_DESC);
          oprot.writeString(struct.fromName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysTemplateMessageLibraryDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysTemplateMessageLibraryDOTupleScheme getScheme() {
      return new ConfigSysTemplateMessageLibraryDOTupleScheme();
    }
  }

  private static class ConfigSysTemplateMessageLibraryDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysTemplateMessageLibraryDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysTemplateMessageLibraryDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetPrimaryIndustry()) {
        optionals.set(2);
      }
      if (struct.isSetTwoIndustry()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetSample()) {
        optionals.set(5);
      }
      if (struct.isSetDisplay()) {
        optionals.set(6);
      }
      if (struct.isSetPriority()) {
        optionals.set(7);
      }
      if (struct.isSetDisable()) {
        optionals.set(8);
      }
      if (struct.isSetType()) {
        optionals.set(9);
      }
      if (struct.isSetTemplateIdShort()) {
        optionals.set(10);
      }
      if (struct.isSetSendCondition()) {
        optionals.set(11);
      }
      if (struct.isSetSendtime()) {
        optionals.set(12);
      }
      if (struct.isSetSendto()) {
        optionals.set(13);
      }
      if (struct.isSetFirst()) {
        optionals.set(14);
      }
      if (struct.isSetRemark()) {
        optionals.set(15);
      }
      if (struct.isSetUrl()) {
        optionals.set(16);
      }
      if (struct.isSetFromName()) {
        optionals.set(17);
      }
      if (struct.isSetSubject()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetPrimaryIndustry()) {
        oprot.writeString(struct.primaryIndustry);
      }
      if (struct.isSetTwoIndustry()) {
        oprot.writeString(struct.twoIndustry);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSample()) {
        oprot.writeString(struct.sample);
      }
      if (struct.isSetDisplay()) {
        oprot.writeI32(struct.display);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetDisable()) {
        oprot.writeI32(struct.disable);
      }
      if (struct.isSetType()) {
        oprot.writeDouble(struct.type);
      }
      if (struct.isSetTemplateIdShort()) {
        oprot.writeString(struct.templateIdShort);
      }
      if (struct.isSetSendCondition()) {
        oprot.writeString(struct.sendCondition);
      }
      if (struct.isSetSendtime()) {
        oprot.writeString(struct.sendtime);
      }
      if (struct.isSetSendto()) {
        oprot.writeString(struct.sendto);
      }
      if (struct.isSetFirst()) {
        oprot.writeString(struct.first);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetFromName()) {
        oprot.writeString(struct.fromName);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysTemplateMessageLibraryDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.primaryIndustry = iprot.readString();
        struct.setPrimaryIndustryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.twoIndustry = iprot.readString();
        struct.setTwoIndustryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sample = iprot.readString();
        struct.setSampleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.display = iprot.readI32();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.disable = iprot.readI32();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(9)) {
        struct.type = iprot.readDouble();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.templateIdShort = iprot.readString();
        struct.setTemplateIdShortIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sendCondition = iprot.readString();
        struct.setSendConditionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sendtime = iprot.readString();
        struct.setSendtimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sendto = iprot.readString();
        struct.setSendtoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.first = iprot.readString();
        struct.setFirstIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(16)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.fromName = iprot.readString();
        struct.setFromNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

