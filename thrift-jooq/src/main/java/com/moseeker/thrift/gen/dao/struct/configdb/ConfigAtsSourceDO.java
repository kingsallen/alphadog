/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ConfigAtsSourceDO implements org.apache.thrift.TBase<ConfigAtsSourceDO, ConfigAtsSourceDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigAtsSourceDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigAtsSourceDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FULLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullname", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FTP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ftpAddress", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField APIKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apikey", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField KENEXA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("kenexaId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField KENEXA_CRIDENTIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("kenexaCridential", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigAtsSourceDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigAtsSourceDOTupleSchemeFactory();

  public int id; // optional
  public String name; // optional
  public int type; // optional
  public String url; // optional
  public String fullname; // optional
  public String ftpAddress; // optional
  public String username; // optional
  public String password; // optional
  public String apikey; // optional
  public int companyId; // optional
  public String kenexaId; // optional
  public String kenexaCridential; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TYPE((short)3, "type"),
    URL((short)4, "url"),
    FULLNAME((short)5, "fullname"),
    FTP_ADDRESS((short)6, "ftpAddress"),
    USERNAME((short)7, "username"),
    PASSWORD((short)8, "password"),
    APIKEY((short)9, "apikey"),
    COMPANY_ID((short)10, "companyId"),
    KENEXA_ID((short)11, "kenexaId"),
    KENEXA_CRIDENTIAL((short)12, "kenexaCridential");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // URL
          return URL;
        case 5: // FULLNAME
          return FULLNAME;
        case 6: // FTP_ADDRESS
          return FTP_ADDRESS;
        case 7: // USERNAME
          return USERNAME;
        case 8: // PASSWORD
          return PASSWORD;
        case 9: // APIKEY
          return APIKEY;
        case 10: // COMPANY_ID
          return COMPANY_ID;
        case 11: // KENEXA_ID
          return KENEXA_ID;
        case 12: // KENEXA_CRIDENTIAL
          return KENEXA_CRIDENTIAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __COMPANYID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.TYPE,_Fields.URL,_Fields.FULLNAME,_Fields.FTP_ADDRESS,_Fields.USERNAME,_Fields.PASSWORD,_Fields.APIKEY,_Fields.COMPANY_ID,_Fields.KENEXA_ID,_Fields.KENEXA_CRIDENTIAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULLNAME, new org.apache.thrift.meta_data.FieldMetaData("fullname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FTP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ftpAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APIKEY, new org.apache.thrift.meta_data.FieldMetaData("apikey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KENEXA_ID, new org.apache.thrift.meta_data.FieldMetaData("kenexaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KENEXA_CRIDENTIAL, new org.apache.thrift.meta_data.FieldMetaData("kenexaCridential", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigAtsSourceDO.class, metaDataMap);
  }

  public ConfigAtsSourceDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigAtsSourceDO(ConfigAtsSourceDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.type = other.type;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetFullname()) {
      this.fullname = other.fullname;
    }
    if (other.isSetFtpAddress()) {
      this.ftpAddress = other.ftpAddress;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetApikey()) {
      this.apikey = other.apikey;
    }
    this.companyId = other.companyId;
    if (other.isSetKenexaId()) {
      this.kenexaId = other.kenexaId;
    }
    if (other.isSetKenexaCridential()) {
      this.kenexaCridential = other.kenexaCridential;
    }
  }

  public ConfigAtsSourceDO deepCopy() {
    return new ConfigAtsSourceDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setTypeIsSet(false);
    this.type = 0;
    this.url = null;
    this.fullname = null;
    this.ftpAddress = null;
    this.username = null;
    this.password = null;
    this.apikey = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.kenexaId = null;
    this.kenexaCridential = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigAtsSourceDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ConfigAtsSourceDO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public ConfigAtsSourceDO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public ConfigAtsSourceDO setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getFullname() {
    return this.fullname;
  }

  public ConfigAtsSourceDO setFullname(String fullname) {
    this.fullname = fullname;
    return this;
  }

  public void unsetFullname() {
    this.fullname = null;
  }

  /** Returns true if field fullname is set (has been assigned a value) and false otherwise */
  public boolean isSetFullname() {
    return this.fullname != null;
  }

  public void setFullnameIsSet(boolean value) {
    if (!value) {
      this.fullname = null;
    }
  }

  public String getFtpAddress() {
    return this.ftpAddress;
  }

  public ConfigAtsSourceDO setFtpAddress(String ftpAddress) {
    this.ftpAddress = ftpAddress;
    return this;
  }

  public void unsetFtpAddress() {
    this.ftpAddress = null;
  }

  /** Returns true if field ftpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetFtpAddress() {
    return this.ftpAddress != null;
  }

  public void setFtpAddressIsSet(boolean value) {
    if (!value) {
      this.ftpAddress = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public ConfigAtsSourceDO setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public ConfigAtsSourceDO setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getApikey() {
    return this.apikey;
  }

  public ConfigAtsSourceDO setApikey(String apikey) {
    this.apikey = apikey;
    return this;
  }

  public void unsetApikey() {
    this.apikey = null;
  }

  /** Returns true if field apikey is set (has been assigned a value) and false otherwise */
  public boolean isSetApikey() {
    return this.apikey != null;
  }

  public void setApikeyIsSet(boolean value) {
    if (!value) {
      this.apikey = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ConfigAtsSourceDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getKenexaId() {
    return this.kenexaId;
  }

  public ConfigAtsSourceDO setKenexaId(String kenexaId) {
    this.kenexaId = kenexaId;
    return this;
  }

  public void unsetKenexaId() {
    this.kenexaId = null;
  }

  /** Returns true if field kenexaId is set (has been assigned a value) and false otherwise */
  public boolean isSetKenexaId() {
    return this.kenexaId != null;
  }

  public void setKenexaIdIsSet(boolean value) {
    if (!value) {
      this.kenexaId = null;
    }
  }

  public String getKenexaCridential() {
    return this.kenexaCridential;
  }

  public ConfigAtsSourceDO setKenexaCridential(String kenexaCridential) {
    this.kenexaCridential = kenexaCridential;
    return this;
  }

  public void unsetKenexaCridential() {
    this.kenexaCridential = null;
  }

  /** Returns true if field kenexaCridential is set (has been assigned a value) and false otherwise */
  public boolean isSetKenexaCridential() {
    return this.kenexaCridential != null;
  }

  public void setKenexaCridentialIsSet(boolean value) {
    if (!value) {
      this.kenexaCridential = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case FULLNAME:
      if (value == null) {
        unsetFullname();
      } else {
        setFullname((String)value);
      }
      break;

    case FTP_ADDRESS:
      if (value == null) {
        unsetFtpAddress();
      } else {
        setFtpAddress((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case APIKEY:
      if (value == null) {
        unsetApikey();
      } else {
        setApikey((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case KENEXA_ID:
      if (value == null) {
        unsetKenexaId();
      } else {
        setKenexaId((String)value);
      }
      break;

    case KENEXA_CRIDENTIAL:
      if (value == null) {
        unsetKenexaCridential();
      } else {
        setKenexaCridential((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case URL:
      return getUrl();

    case FULLNAME:
      return getFullname();

    case FTP_ADDRESS:
      return getFtpAddress();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case APIKEY:
      return getApikey();

    case COMPANY_ID:
      return getCompanyId();

    case KENEXA_ID:
      return getKenexaId();

    case KENEXA_CRIDENTIAL:
      return getKenexaCridential();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case URL:
      return isSetUrl();
    case FULLNAME:
      return isSetFullname();
    case FTP_ADDRESS:
      return isSetFtpAddress();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case APIKEY:
      return isSetApikey();
    case COMPANY_ID:
      return isSetCompanyId();
    case KENEXA_ID:
      return isSetKenexaId();
    case KENEXA_CRIDENTIAL:
      return isSetKenexaCridential();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigAtsSourceDO)
      return this.equals((ConfigAtsSourceDO)that);
    return false;
  }

  public boolean equals(ConfigAtsSourceDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_fullname = true && this.isSetFullname();
    boolean that_present_fullname = true && that.isSetFullname();
    if (this_present_fullname || that_present_fullname) {
      if (!(this_present_fullname && that_present_fullname))
        return false;
      if (!this.fullname.equals(that.fullname))
        return false;
    }

    boolean this_present_ftpAddress = true && this.isSetFtpAddress();
    boolean that_present_ftpAddress = true && that.isSetFtpAddress();
    if (this_present_ftpAddress || that_present_ftpAddress) {
      if (!(this_present_ftpAddress && that_present_ftpAddress))
        return false;
      if (!this.ftpAddress.equals(that.ftpAddress))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_apikey = true && this.isSetApikey();
    boolean that_present_apikey = true && that.isSetApikey();
    if (this_present_apikey || that_present_apikey) {
      if (!(this_present_apikey && that_present_apikey))
        return false;
      if (!this.apikey.equals(that.apikey))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_kenexaId = true && this.isSetKenexaId();
    boolean that_present_kenexaId = true && that.isSetKenexaId();
    if (this_present_kenexaId || that_present_kenexaId) {
      if (!(this_present_kenexaId && that_present_kenexaId))
        return false;
      if (!this.kenexaId.equals(that.kenexaId))
        return false;
    }

    boolean this_present_kenexaCridential = true && this.isSetKenexaCridential();
    boolean that_present_kenexaCridential = true && that.isSetKenexaCridential();
    if (this_present_kenexaCridential || that_present_kenexaCridential) {
      if (!(this_present_kenexaCridential && that_present_kenexaCridential))
        return false;
      if (!this.kenexaCridential.equals(that.kenexaCridential))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetFullname()) ? 131071 : 524287);
    if (isSetFullname())
      hashCode = hashCode * 8191 + fullname.hashCode();

    hashCode = hashCode * 8191 + ((isSetFtpAddress()) ? 131071 : 524287);
    if (isSetFtpAddress())
      hashCode = hashCode * 8191 + ftpAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetApikey()) ? 131071 : 524287);
    if (isSetApikey())
      hashCode = hashCode * 8191 + apikey.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetKenexaId()) ? 131071 : 524287);
    if (isSetKenexaId())
      hashCode = hashCode * 8191 + kenexaId.hashCode();

    hashCode = hashCode * 8191 + ((isSetKenexaCridential()) ? 131071 : 524287);
    if (isSetKenexaCridential())
      hashCode = hashCode * 8191 + kenexaCridential.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigAtsSourceDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullname()).compareTo(other.isSetFullname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullname, other.fullname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtpAddress()).compareTo(other.isSetFtpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftpAddress, other.ftpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApikey()).compareTo(other.isSetApikey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApikey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apikey, other.apikey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKenexaId()).compareTo(other.isSetKenexaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKenexaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kenexaId, other.kenexaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKenexaCridential()).compareTo(other.isSetKenexaCridential());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKenexaCridential()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kenexaCridential, other.kenexaCridential);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigAtsSourceDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetFullname()) {
      if (!first) sb.append(", ");
      sb.append("fullname:");
      if (this.fullname == null) {
        sb.append("null");
      } else {
        sb.append(this.fullname);
      }
      first = false;
    }
    if (isSetFtpAddress()) {
      if (!first) sb.append(", ");
      sb.append("ftpAddress:");
      if (this.ftpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.ftpAddress);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetApikey()) {
      if (!first) sb.append(", ");
      sb.append("apikey:");
      if (this.apikey == null) {
        sb.append("null");
      } else {
        sb.append(this.apikey);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetKenexaId()) {
      if (!first) sb.append(", ");
      sb.append("kenexaId:");
      if (this.kenexaId == null) {
        sb.append("null");
      } else {
        sb.append(this.kenexaId);
      }
      first = false;
    }
    if (isSetKenexaCridential()) {
      if (!first) sb.append(", ");
      sb.append("kenexaCridential:");
      if (this.kenexaCridential == null) {
        sb.append("null");
      } else {
        sb.append(this.kenexaCridential);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigAtsSourceDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigAtsSourceDOStandardScheme getScheme() {
      return new ConfigAtsSourceDOStandardScheme();
    }
  }

  private static class ConfigAtsSourceDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigAtsSourceDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigAtsSourceDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FULLNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullname = iprot.readString();
              struct.setFullnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FTP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftpAddress = iprot.readString();
              struct.setFtpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APIKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apikey = iprot.readString();
              struct.setApikeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KENEXA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kenexaId = iprot.readString();
              struct.setKenexaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // KENEXA_CRIDENTIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kenexaCridential = iprot.readString();
              struct.setKenexaCridentialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigAtsSourceDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fullname != null) {
        if (struct.isSetFullname()) {
          oprot.writeFieldBegin(FULLNAME_FIELD_DESC);
          oprot.writeString(struct.fullname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ftpAddress != null) {
        if (struct.isSetFtpAddress()) {
          oprot.writeFieldBegin(FTP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.ftpAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apikey != null) {
        if (struct.isSetApikey()) {
          oprot.writeFieldBegin(APIKEY_FIELD_DESC);
          oprot.writeString(struct.apikey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.kenexaId != null) {
        if (struct.isSetKenexaId()) {
          oprot.writeFieldBegin(KENEXA_ID_FIELD_DESC);
          oprot.writeString(struct.kenexaId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kenexaCridential != null) {
        if (struct.isSetKenexaCridential()) {
          oprot.writeFieldBegin(KENEXA_CRIDENTIAL_FIELD_DESC);
          oprot.writeString(struct.kenexaCridential);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigAtsSourceDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigAtsSourceDOTupleScheme getScheme() {
      return new ConfigAtsSourceDOTupleScheme();
    }
  }

  private static class ConfigAtsSourceDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigAtsSourceDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigAtsSourceDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetFullname()) {
        optionals.set(4);
      }
      if (struct.isSetFtpAddress()) {
        optionals.set(5);
      }
      if (struct.isSetUsername()) {
        optionals.set(6);
      }
      if (struct.isSetPassword()) {
        optionals.set(7);
      }
      if (struct.isSetApikey()) {
        optionals.set(8);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(9);
      }
      if (struct.isSetKenexaId()) {
        optionals.set(10);
      }
      if (struct.isSetKenexaCridential()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetFullname()) {
        oprot.writeString(struct.fullname);
      }
      if (struct.isSetFtpAddress()) {
        oprot.writeString(struct.ftpAddress);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetApikey()) {
        oprot.writeString(struct.apikey);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetKenexaId()) {
        oprot.writeString(struct.kenexaId);
      }
      if (struct.isSetKenexaCridential()) {
        oprot.writeString(struct.kenexaCridential);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigAtsSourceDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fullname = iprot.readString();
        struct.setFullnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ftpAddress = iprot.readString();
        struct.setFtpAddressIsSet(true);
      }
      if (incoming.get(6)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(8)) {
        struct.apikey = iprot.readString();
        struct.setApikeyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.kenexaId = iprot.readString();
        struct.setKenexaIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.kenexaCridential = iprot.readString();
        struct.setKenexaCridentialIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

