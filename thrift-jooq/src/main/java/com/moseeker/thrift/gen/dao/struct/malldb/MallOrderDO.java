/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.malldb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-10-19")
public class MallOrderDO implements org.apache.thrift.TBase<MallOrderDO, MallOrderDO._Fields>, java.io.Serializable, Cloneable, Comparable<MallOrderDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallOrderDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("order_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employee_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goods_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pic_url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField ASSIGN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("assign_time", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MallOrderDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MallOrderDOTupleSchemeFactory();

  public int id; // optional
  public String order_id; // optional
  public int employee_id; // optional
  public int goods_id; // optional
  public int company_id; // optional
  public int credit; // optional
  public String title; // optional
  public String pic_url; // optional
  public int count; // optional
  public byte state; // optional
  public String assign_time; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ORDER_ID((short)2, "order_id"),
    EMPLOYEE_ID((short)3, "employee_id"),
    GOODS_ID((short)4, "goods_id"),
    COMPANY_ID((short)5, "company_id"),
    CREDIT((short)6, "credit"),
    TITLE((short)7, "title"),
    PIC_URL((short)8, "pic_url"),
    COUNT((short)9, "count"),
    STATE((short)10, "state"),
    ASSIGN_TIME((short)11, "assign_time"),
    CREATE_TIME((short)12, "createTime"),
    UPDATE_TIME((short)13, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 4: // GOODS_ID
          return GOODS_ID;
        case 5: // COMPANY_ID
          return COMPANY_ID;
        case 6: // CREDIT
          return CREDIT;
        case 7: // TITLE
          return TITLE;
        case 8: // PIC_URL
          return PIC_URL;
        case 9: // COUNT
          return COUNT;
        case 10: // STATE
          return STATE;
        case 11: // ASSIGN_TIME
          return ASSIGN_TIME;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __EMPLOYEE_ID_ISSET_ID = 1;
  private static final int __GOODS_ID_ISSET_ID = 2;
  private static final int __COMPANY_ID_ISSET_ID = 3;
  private static final int __CREDIT_ISSET_ID = 4;
  private static final int __COUNT_ISSET_ID = 5;
  private static final int __STATE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ORDER_ID,_Fields.EMPLOYEE_ID,_Fields.GOODS_ID,_Fields.COMPANY_ID,_Fields.CREDIT,_Fields.TITLE,_Fields.PIC_URL,_Fields.COUNT,_Fields.STATE,_Fields.ASSIGN_TIME,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("order_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employee_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goods_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("pic_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ASSIGN_TIME, new org.apache.thrift.meta_data.FieldMetaData("assign_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallOrderDO.class, metaDataMap);
  }

  public MallOrderDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallOrderDO(MallOrderDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetOrder_id()) {
      this.order_id = other.order_id;
    }
    this.employee_id = other.employee_id;
    this.goods_id = other.goods_id;
    this.company_id = other.company_id;
    this.credit = other.credit;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPic_url()) {
      this.pic_url = other.pic_url;
    }
    this.count = other.count;
    this.state = other.state;
    if (other.isSetAssign_time()) {
      this.assign_time = other.assign_time;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public MallOrderDO deepCopy() {
    return new MallOrderDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.order_id = null;
    setEmployee_idIsSet(false);
    this.employee_id = 0;
    setGoods_idIsSet(false);
    this.goods_id = 0;
    setCompany_idIsSet(false);
    this.company_id = 0;
    setCreditIsSet(false);
    this.credit = 0;
    this.title = null;
    this.pic_url = null;
    setCountIsSet(false);
    this.count = 0;
    setStateIsSet(false);
    this.state = 0;
    this.assign_time = null;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public MallOrderDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getOrder_id() {
    return this.order_id;
  }

  public MallOrderDO setOrder_id(String order_id) {
    this.order_id = order_id;
    return this;
  }

  public void unsetOrder_id() {
    this.order_id = null;
  }

  /** Returns true if field order_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_id() {
    return this.order_id != null;
  }

  public void setOrder_idIsSet(boolean value) {
    if (!value) {
      this.order_id = null;
    }
  }

  public int getEmployee_id() {
    return this.employee_id;
  }

  public MallOrderDO setEmployee_id(int employee_id) {
    this.employee_id = employee_id;
    setEmployee_idIsSet(true);
    return this;
  }

  public void unsetEmployee_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID);
  }

  /** Returns true if field employee_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployee_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID);
  }

  public void setEmployee_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID, value);
  }

  public int getGoods_id() {
    return this.goods_id;
  }

  public MallOrderDO setGoods_id(int goods_id) {
    this.goods_id = goods_id;
    setGoods_idIsSet(true);
    return this;
  }

  public void unsetGoods_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GOODS_ID_ISSET_ID);
  }

  /** Returns true if field goods_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GOODS_ID_ISSET_ID);
  }

  public void setGoods_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GOODS_ID_ISSET_ID, value);
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public MallOrderDO setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public int getCredit() {
    return this.credit;
  }

  public MallOrderDO setCredit(int credit) {
    this.credit = credit;
    setCreditIsSet(true);
    return this;
  }

  public void unsetCredit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  public void setCreditIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREDIT_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public MallOrderDO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getPic_url() {
    return this.pic_url;
  }

  public MallOrderDO setPic_url(String pic_url) {
    this.pic_url = pic_url;
    return this;
  }

  public void unsetPic_url() {
    this.pic_url = null;
  }

  /** Returns true if field pic_url is set (has been assigned a value) and false otherwise */
  public boolean isSetPic_url() {
    return this.pic_url != null;
  }

  public void setPic_urlIsSet(boolean value) {
    if (!value) {
      this.pic_url = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public MallOrderDO setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public byte getState() {
    return this.state;
  }

  public MallOrderDO setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getAssign_time() {
    return this.assign_time;
  }

  public MallOrderDO setAssign_time(String assign_time) {
    this.assign_time = assign_time;
    return this;
  }

  public void unsetAssign_time() {
    this.assign_time = null;
  }

  /** Returns true if field assign_time is set (has been assigned a value) and false otherwise */
  public boolean isSetAssign_time() {
    return this.assign_time != null;
  }

  public void setAssign_timeIsSet(boolean value) {
    if (!value) {
      this.assign_time = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MallOrderDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public MallOrderDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrder_id();
      } else {
        setOrder_id((String)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployee_id();
      } else {
        setEmployee_id((Integer)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoods_id();
      } else {
        setGoods_id((Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPic_url();
      } else {
        setPic_url((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Byte)value);
      }
      break;

    case ASSIGN_TIME:
      if (value == null) {
        unsetAssign_time();
      } else {
        setAssign_time((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ORDER_ID:
      return getOrder_id();

    case EMPLOYEE_ID:
      return getEmployee_id();

    case GOODS_ID:
      return getGoods_id();

    case COMPANY_ID:
      return getCompany_id();

    case CREDIT:
      return getCredit();

    case TITLE:
      return getTitle();

    case PIC_URL:
      return getPic_url();

    case COUNT:
      return getCount();

    case STATE:
      return getState();

    case ASSIGN_TIME:
      return getAssign_time();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORDER_ID:
      return isSetOrder_id();
    case EMPLOYEE_ID:
      return isSetEmployee_id();
    case GOODS_ID:
      return isSetGoods_id();
    case COMPANY_ID:
      return isSetCompany_id();
    case CREDIT:
      return isSetCredit();
    case TITLE:
      return isSetTitle();
    case PIC_URL:
      return isSetPic_url();
    case COUNT:
      return isSetCount();
    case STATE:
      return isSetState();
    case ASSIGN_TIME:
      return isSetAssign_time();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallOrderDO)
      return this.equals((MallOrderDO)that);
    return false;
  }

  public boolean equals(MallOrderDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_order_id = true && this.isSetOrder_id();
    boolean that_present_order_id = true && that.isSetOrder_id();
    if (this_present_order_id || that_present_order_id) {
      if (!(this_present_order_id && that_present_order_id))
        return false;
      if (!this.order_id.equals(that.order_id))
        return false;
    }

    boolean this_present_employee_id = true && this.isSetEmployee_id();
    boolean that_present_employee_id = true && that.isSetEmployee_id();
    if (this_present_employee_id || that_present_employee_id) {
      if (!(this_present_employee_id && that_present_employee_id))
        return false;
      if (this.employee_id != that.employee_id)
        return false;
    }

    boolean this_present_goods_id = true && this.isSetGoods_id();
    boolean that_present_goods_id = true && that.isSetGoods_id();
    if (this_present_goods_id || that_present_goods_id) {
      if (!(this_present_goods_id && that_present_goods_id))
        return false;
      if (this.goods_id != that.goods_id)
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_credit = true && this.isSetCredit();
    boolean that_present_credit = true && that.isSetCredit();
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (this.credit != that.credit)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_pic_url = true && this.isSetPic_url();
    boolean that_present_pic_url = true && that.isSetPic_url();
    if (this_present_pic_url || that_present_pic_url) {
      if (!(this_present_pic_url && that_present_pic_url))
        return false;
      if (!this.pic_url.equals(that.pic_url))
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_assign_time = true && this.isSetAssign_time();
    boolean that_present_assign_time = true && that.isSetAssign_time();
    if (this_present_assign_time || that_present_assign_time) {
      if (!(this_present_assign_time && that_present_assign_time))
        return false;
      if (!this.assign_time.equals(that.assign_time))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetOrder_id()) ? 131071 : 524287);
    if (isSetOrder_id())
      hashCode = hashCode * 8191 + order_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmployee_id()) ? 131071 : 524287);
    if (isSetEmployee_id())
      hashCode = hashCode * 8191 + employee_id;

    hashCode = hashCode * 8191 + ((isSetGoods_id()) ? 131071 : 524287);
    if (isSetGoods_id())
      hashCode = hashCode * 8191 + goods_id;

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetCredit()) ? 131071 : 524287);
    if (isSetCredit())
      hashCode = hashCode * 8191 + credit;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetPic_url()) ? 131071 : 524287);
    if (isSetPic_url())
      hashCode = hashCode * 8191 + pic_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + (int) (state);

    hashCode = hashCode * 8191 + ((isSetAssign_time()) ? 131071 : 524287);
    if (isSetAssign_time())
      hashCode = hashCode * 8191 + assign_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MallOrderDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployee_id()).compareTo(other.isSetEmployee_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployee_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employee_id, other.employee_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoods_id()).compareTo(other.isSetGoods_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods_id, other.goods_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(other.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, other.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPic_url()).compareTo(other.isSetPic_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPic_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic_url, other.pic_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssign_time()).compareTo(other.isSetAssign_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssign_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assign_time, other.assign_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallOrderDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetOrder_id()) {
      if (!first) sb.append(", ");
      sb.append("order_id:");
      if (this.order_id == null) {
        sb.append("null");
      } else {
        sb.append(this.order_id);
      }
      first = false;
    }
    if (isSetEmployee_id()) {
      if (!first) sb.append(", ");
      sb.append("employee_id:");
      sb.append(this.employee_id);
      first = false;
    }
    if (isSetGoods_id()) {
      if (!first) sb.append(", ");
      sb.append("goods_id:");
      sb.append(this.goods_id);
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetCredit()) {
      if (!first) sb.append(", ");
      sb.append("credit:");
      sb.append(this.credit);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPic_url()) {
      if (!first) sb.append(", ");
      sb.append("pic_url:");
      if (this.pic_url == null) {
        sb.append("null");
      } else {
        sb.append(this.pic_url);
      }
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
    }
    if (isSetAssign_time()) {
      if (!first) sb.append(", ");
      sb.append("assign_time:");
      if (this.assign_time == null) {
        sb.append("null");
      } else {
        sb.append(this.assign_time);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallOrderDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallOrderDOStandardScheme getScheme() {
      return new MallOrderDOStandardScheme();
    }
  }

  private static class MallOrderDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<MallOrderDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallOrderDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order_id = iprot.readString();
              struct.setOrder_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employee_id = iprot.readI32();
              struct.setEmployee_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goods_id = iprot.readI32();
              struct.setGoods_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.credit = iprot.readI32();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pic_url = iprot.readString();
              struct.setPic_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ASSIGN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assign_time = iprot.readString();
              struct.setAssign_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallOrderDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.order_id != null) {
        if (struct.isSetOrder_id()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.order_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmployee_id()) {
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employee_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoods_id()) {
        oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
        oprot.writeI32(struct.goods_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCredit()) {
        oprot.writeFieldBegin(CREDIT_FIELD_DESC);
        oprot.writeI32(struct.credit);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pic_url != null) {
        if (struct.isSetPic_url()) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.pic_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetState()) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeByte(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.assign_time != null) {
        if (struct.isSetAssign_time()) {
          oprot.writeFieldBegin(ASSIGN_TIME_FIELD_DESC);
          oprot.writeString(struct.assign_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallOrderDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallOrderDOTupleScheme getScheme() {
      return new MallOrderDOTupleScheme();
    }
  }

  private static class MallOrderDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<MallOrderDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallOrderDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOrder_id()) {
        optionals.set(1);
      }
      if (struct.isSetEmployee_id()) {
        optionals.set(2);
      }
      if (struct.isSetGoods_id()) {
        optionals.set(3);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(4);
      }
      if (struct.isSetCredit()) {
        optionals.set(5);
      }
      if (struct.isSetTitle()) {
        optionals.set(6);
      }
      if (struct.isSetPic_url()) {
        optionals.set(7);
      }
      if (struct.isSetCount()) {
        optionals.set(8);
      }
      if (struct.isSetState()) {
        optionals.set(9);
      }
      if (struct.isSetAssign_time()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetOrder_id()) {
        oprot.writeString(struct.order_id);
      }
      if (struct.isSetEmployee_id()) {
        oprot.writeI32(struct.employee_id);
      }
      if (struct.isSetGoods_id()) {
        oprot.writeI32(struct.goods_id);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetCredit()) {
        oprot.writeI32(struct.credit);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetPic_url()) {
        oprot.writeString(struct.pic_url);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetAssign_time()) {
        oprot.writeString(struct.assign_time);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallOrderDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.order_id = iprot.readString();
        struct.setOrder_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.employee_id = iprot.readI32();
        struct.setEmployee_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.goods_id = iprot.readI32();
        struct.setGoods_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.credit = iprot.readI32();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(6)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pic_url = iprot.readString();
        struct.setPic_urlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.assign_time = iprot.readString();
        struct.setAssign_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

