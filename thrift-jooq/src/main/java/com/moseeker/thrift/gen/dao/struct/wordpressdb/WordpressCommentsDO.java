/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.wordpressdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class WordpressCommentsDO implements org.apache.thrift.TBase<WordpressCommentsDO, WordpressCommentsDO._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressCommentsDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressCommentsDO");

  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMMENT_POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPostId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAuthor", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_AUTHOR_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAuthorEmail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENT_AUTHOR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAuthorUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMENT_AUTHOR_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAuthorIp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commentDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMMENT_DATE_GMT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentDateGmt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentContent", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMMENT_KARMA_FIELD_DESC = new org.apache.thrift.protocol.TField("commentKarma", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField COMMENT_APPROVED_FIELD_DESC = new org.apache.thrift.protocol.TField("commentApproved", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMMENT_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAgent", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COMMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commentType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COMMENT_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentParent", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WordpressCommentsDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WordpressCommentsDOTupleSchemeFactory();

  public long commentId; // optional
  public long commentPostId; // optional
  public String commentAuthor; // optional
  public String commentAuthorEmail; // optional
  public String commentAuthorUrl; // optional
  public String commentAuthorIp; // optional
  public String commentDate; // optional
  public String commentDateGmt; // optional
  public String commentContent; // optional
  public int commentKarma; // optional
  public String commentApproved; // optional
  public String commentAgent; // optional
  public String commentType; // optional
  public long commentParent; // optional
  public long userId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMENT_ID((short)1, "commentId"),
    COMMENT_POST_ID((short)2, "commentPostId"),
    COMMENT_AUTHOR((short)3, "commentAuthor"),
    COMMENT_AUTHOR_EMAIL((short)4, "commentAuthorEmail"),
    COMMENT_AUTHOR_URL((short)5, "commentAuthorUrl"),
    COMMENT_AUTHOR_IP((short)6, "commentAuthorIp"),
    COMMENT_DATE((short)7, "commentDate"),
    COMMENT_DATE_GMT((short)8, "commentDateGmt"),
    COMMENT_CONTENT((short)9, "commentContent"),
    COMMENT_KARMA((short)10, "commentKarma"),
    COMMENT_APPROVED((short)11, "commentApproved"),
    COMMENT_AGENT((short)12, "commentAgent"),
    COMMENT_TYPE((short)13, "commentType"),
    COMMENT_PARENT((short)14, "commentParent"),
    USER_ID((short)15, "userId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_ID
          return COMMENT_ID;
        case 2: // COMMENT_POST_ID
          return COMMENT_POST_ID;
        case 3: // COMMENT_AUTHOR
          return COMMENT_AUTHOR;
        case 4: // COMMENT_AUTHOR_EMAIL
          return COMMENT_AUTHOR_EMAIL;
        case 5: // COMMENT_AUTHOR_URL
          return COMMENT_AUTHOR_URL;
        case 6: // COMMENT_AUTHOR_IP
          return COMMENT_AUTHOR_IP;
        case 7: // COMMENT_DATE
          return COMMENT_DATE;
        case 8: // COMMENT_DATE_GMT
          return COMMENT_DATE_GMT;
        case 9: // COMMENT_CONTENT
          return COMMENT_CONTENT;
        case 10: // COMMENT_KARMA
          return COMMENT_KARMA;
        case 11: // COMMENT_APPROVED
          return COMMENT_APPROVED;
        case 12: // COMMENT_AGENT
          return COMMENT_AGENT;
        case 13: // COMMENT_TYPE
          return COMMENT_TYPE;
        case 14: // COMMENT_PARENT
          return COMMENT_PARENT;
        case 15: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTID_ISSET_ID = 0;
  private static final int __COMMENTPOSTID_ISSET_ID = 1;
  private static final int __COMMENTKARMA_ISSET_ID = 2;
  private static final int __COMMENTPARENT_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT_ID,_Fields.COMMENT_POST_ID,_Fields.COMMENT_AUTHOR,_Fields.COMMENT_AUTHOR_EMAIL,_Fields.COMMENT_AUTHOR_URL,_Fields.COMMENT_AUTHOR_IP,_Fields.COMMENT_DATE,_Fields.COMMENT_DATE_GMT,_Fields.COMMENT_CONTENT,_Fields.COMMENT_KARMA,_Fields.COMMENT_APPROVED,_Fields.COMMENT_AGENT,_Fields.COMMENT_TYPE,_Fields.COMMENT_PARENT,_Fields.USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT_POST_ID, new org.apache.thrift.meta_data.FieldMetaData("commentPostId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("commentAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_AUTHOR_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("commentAuthorEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_AUTHOR_URL, new org.apache.thrift.meta_data.FieldMetaData("commentAuthorUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_AUTHOR_IP, new org.apache.thrift.meta_data.FieldMetaData("commentAuthorIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("commentDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_DATE_GMT, new org.apache.thrift.meta_data.FieldMetaData("commentDateGmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("commentContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_KARMA, new org.apache.thrift.meta_data.FieldMetaData("commentKarma", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_APPROVED, new org.apache.thrift.meta_data.FieldMetaData("commentApproved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_AGENT, new org.apache.thrift.meta_data.FieldMetaData("commentAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_PARENT, new org.apache.thrift.meta_data.FieldMetaData("commentParent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressCommentsDO.class, metaDataMap);
  }

  public WordpressCommentsDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressCommentsDO(WordpressCommentsDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.commentId = other.commentId;
    this.commentPostId = other.commentPostId;
    if (other.isSetCommentAuthor()) {
      this.commentAuthor = other.commentAuthor;
    }
    if (other.isSetCommentAuthorEmail()) {
      this.commentAuthorEmail = other.commentAuthorEmail;
    }
    if (other.isSetCommentAuthorUrl()) {
      this.commentAuthorUrl = other.commentAuthorUrl;
    }
    if (other.isSetCommentAuthorIp()) {
      this.commentAuthorIp = other.commentAuthorIp;
    }
    if (other.isSetCommentDate()) {
      this.commentDate = other.commentDate;
    }
    if (other.isSetCommentDateGmt()) {
      this.commentDateGmt = other.commentDateGmt;
    }
    if (other.isSetCommentContent()) {
      this.commentContent = other.commentContent;
    }
    this.commentKarma = other.commentKarma;
    if (other.isSetCommentApproved()) {
      this.commentApproved = other.commentApproved;
    }
    if (other.isSetCommentAgent()) {
      this.commentAgent = other.commentAgent;
    }
    if (other.isSetCommentType()) {
      this.commentType = other.commentType;
    }
    this.commentParent = other.commentParent;
    this.userId = other.userId;
  }

  public WordpressCommentsDO deepCopy() {
    return new WordpressCommentsDO(this);
  }

  @Override
  public void clear() {
    setCommentIdIsSet(false);
    this.commentId = 0;
    setCommentPostIdIsSet(false);
    this.commentPostId = 0;
    this.commentAuthor = null;
    this.commentAuthorEmail = null;
    this.commentAuthorUrl = null;
    this.commentAuthorIp = null;
    this.commentDate = null;
    this.commentDateGmt = null;
    this.commentContent = null;
    setCommentKarmaIsSet(false);
    this.commentKarma = 0;
    this.commentApproved = null;
    this.commentAgent = null;
    this.commentType = null;
    setCommentParentIsSet(false);
    this.commentParent = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public long getCommentId() {
    return this.commentId;
  }

  public WordpressCommentsDO setCommentId(long commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTID_ISSET_ID, value);
  }

  public long getCommentPostId() {
    return this.commentPostId;
  }

  public WordpressCommentsDO setCommentPostId(long commentPostId) {
    this.commentPostId = commentPostId;
    setCommentPostIdIsSet(true);
    return this;
  }

  public void unsetCommentPostId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTPOSTID_ISSET_ID);
  }

  /** Returns true if field commentPostId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPostId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTPOSTID_ISSET_ID);
  }

  public void setCommentPostIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTPOSTID_ISSET_ID, value);
  }

  public String getCommentAuthor() {
    return this.commentAuthor;
  }

  public WordpressCommentsDO setCommentAuthor(String commentAuthor) {
    this.commentAuthor = commentAuthor;
    return this;
  }

  public void unsetCommentAuthor() {
    this.commentAuthor = null;
  }

  /** Returns true if field commentAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAuthor() {
    return this.commentAuthor != null;
  }

  public void setCommentAuthorIsSet(boolean value) {
    if (!value) {
      this.commentAuthor = null;
    }
  }

  public String getCommentAuthorEmail() {
    return this.commentAuthorEmail;
  }

  public WordpressCommentsDO setCommentAuthorEmail(String commentAuthorEmail) {
    this.commentAuthorEmail = commentAuthorEmail;
    return this;
  }

  public void unsetCommentAuthorEmail() {
    this.commentAuthorEmail = null;
  }

  /** Returns true if field commentAuthorEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAuthorEmail() {
    return this.commentAuthorEmail != null;
  }

  public void setCommentAuthorEmailIsSet(boolean value) {
    if (!value) {
      this.commentAuthorEmail = null;
    }
  }

  public String getCommentAuthorUrl() {
    return this.commentAuthorUrl;
  }

  public WordpressCommentsDO setCommentAuthorUrl(String commentAuthorUrl) {
    this.commentAuthorUrl = commentAuthorUrl;
    return this;
  }

  public void unsetCommentAuthorUrl() {
    this.commentAuthorUrl = null;
  }

  /** Returns true if field commentAuthorUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAuthorUrl() {
    return this.commentAuthorUrl != null;
  }

  public void setCommentAuthorUrlIsSet(boolean value) {
    if (!value) {
      this.commentAuthorUrl = null;
    }
  }

  public String getCommentAuthorIp() {
    return this.commentAuthorIp;
  }

  public WordpressCommentsDO setCommentAuthorIp(String commentAuthorIp) {
    this.commentAuthorIp = commentAuthorIp;
    return this;
  }

  public void unsetCommentAuthorIp() {
    this.commentAuthorIp = null;
  }

  /** Returns true if field commentAuthorIp is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAuthorIp() {
    return this.commentAuthorIp != null;
  }

  public void setCommentAuthorIpIsSet(boolean value) {
    if (!value) {
      this.commentAuthorIp = null;
    }
  }

  public String getCommentDate() {
    return this.commentDate;
  }

  public WordpressCommentsDO setCommentDate(String commentDate) {
    this.commentDate = commentDate;
    return this;
  }

  public void unsetCommentDate() {
    this.commentDate = null;
  }

  /** Returns true if field commentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentDate() {
    return this.commentDate != null;
  }

  public void setCommentDateIsSet(boolean value) {
    if (!value) {
      this.commentDate = null;
    }
  }

  public String getCommentDateGmt() {
    return this.commentDateGmt;
  }

  public WordpressCommentsDO setCommentDateGmt(String commentDateGmt) {
    this.commentDateGmt = commentDateGmt;
    return this;
  }

  public void unsetCommentDateGmt() {
    this.commentDateGmt = null;
  }

  /** Returns true if field commentDateGmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentDateGmt() {
    return this.commentDateGmt != null;
  }

  public void setCommentDateGmtIsSet(boolean value) {
    if (!value) {
      this.commentDateGmt = null;
    }
  }

  public String getCommentContent() {
    return this.commentContent;
  }

  public WordpressCommentsDO setCommentContent(String commentContent) {
    this.commentContent = commentContent;
    return this;
  }

  public void unsetCommentContent() {
    this.commentContent = null;
  }

  /** Returns true if field commentContent is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentContent() {
    return this.commentContent != null;
  }

  public void setCommentContentIsSet(boolean value) {
    if (!value) {
      this.commentContent = null;
    }
  }

  public int getCommentKarma() {
    return this.commentKarma;
  }

  public WordpressCommentsDO setCommentKarma(int commentKarma) {
    this.commentKarma = commentKarma;
    setCommentKarmaIsSet(true);
    return this;
  }

  public void unsetCommentKarma() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTKARMA_ISSET_ID);
  }

  /** Returns true if field commentKarma is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentKarma() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTKARMA_ISSET_ID);
  }

  public void setCommentKarmaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTKARMA_ISSET_ID, value);
  }

  public String getCommentApproved() {
    return this.commentApproved;
  }

  public WordpressCommentsDO setCommentApproved(String commentApproved) {
    this.commentApproved = commentApproved;
    return this;
  }

  public void unsetCommentApproved() {
    this.commentApproved = null;
  }

  /** Returns true if field commentApproved is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentApproved() {
    return this.commentApproved != null;
  }

  public void setCommentApprovedIsSet(boolean value) {
    if (!value) {
      this.commentApproved = null;
    }
  }

  public String getCommentAgent() {
    return this.commentAgent;
  }

  public WordpressCommentsDO setCommentAgent(String commentAgent) {
    this.commentAgent = commentAgent;
    return this;
  }

  public void unsetCommentAgent() {
    this.commentAgent = null;
  }

  /** Returns true if field commentAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAgent() {
    return this.commentAgent != null;
  }

  public void setCommentAgentIsSet(boolean value) {
    if (!value) {
      this.commentAgent = null;
    }
  }

  public String getCommentType() {
    return this.commentType;
  }

  public WordpressCommentsDO setCommentType(String commentType) {
    this.commentType = commentType;
    return this;
  }

  public void unsetCommentType() {
    this.commentType = null;
  }

  /** Returns true if field commentType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentType() {
    return this.commentType != null;
  }

  public void setCommentTypeIsSet(boolean value) {
    if (!value) {
      this.commentType = null;
    }
  }

  public long getCommentParent() {
    return this.commentParent;
  }

  public WordpressCommentsDO setCommentParent(long commentParent) {
    this.commentParent = commentParent;
    setCommentParentIsSet(true);
    return this;
  }

  public void unsetCommentParent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTPARENT_ISSET_ID);
  }

  /** Returns true if field commentParent is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentParent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTPARENT_ISSET_ID);
  }

  public void setCommentParentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTPARENT_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public WordpressCommentsDO setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Long)value);
      }
      break;

    case COMMENT_POST_ID:
      if (value == null) {
        unsetCommentPostId();
      } else {
        setCommentPostId((Long)value);
      }
      break;

    case COMMENT_AUTHOR:
      if (value == null) {
        unsetCommentAuthor();
      } else {
        setCommentAuthor((String)value);
      }
      break;

    case COMMENT_AUTHOR_EMAIL:
      if (value == null) {
        unsetCommentAuthorEmail();
      } else {
        setCommentAuthorEmail((String)value);
      }
      break;

    case COMMENT_AUTHOR_URL:
      if (value == null) {
        unsetCommentAuthorUrl();
      } else {
        setCommentAuthorUrl((String)value);
      }
      break;

    case COMMENT_AUTHOR_IP:
      if (value == null) {
        unsetCommentAuthorIp();
      } else {
        setCommentAuthorIp((String)value);
      }
      break;

    case COMMENT_DATE:
      if (value == null) {
        unsetCommentDate();
      } else {
        setCommentDate((String)value);
      }
      break;

    case COMMENT_DATE_GMT:
      if (value == null) {
        unsetCommentDateGmt();
      } else {
        setCommentDateGmt((String)value);
      }
      break;

    case COMMENT_CONTENT:
      if (value == null) {
        unsetCommentContent();
      } else {
        setCommentContent((String)value);
      }
      break;

    case COMMENT_KARMA:
      if (value == null) {
        unsetCommentKarma();
      } else {
        setCommentKarma((Integer)value);
      }
      break;

    case COMMENT_APPROVED:
      if (value == null) {
        unsetCommentApproved();
      } else {
        setCommentApproved((String)value);
      }
      break;

    case COMMENT_AGENT:
      if (value == null) {
        unsetCommentAgent();
      } else {
        setCommentAgent((String)value);
      }
      break;

    case COMMENT_TYPE:
      if (value == null) {
        unsetCommentType();
      } else {
        setCommentType((String)value);
      }
      break;

    case COMMENT_PARENT:
      if (value == null) {
        unsetCommentParent();
      } else {
        setCommentParent((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_ID:
      return getCommentId();

    case COMMENT_POST_ID:
      return getCommentPostId();

    case COMMENT_AUTHOR:
      return getCommentAuthor();

    case COMMENT_AUTHOR_EMAIL:
      return getCommentAuthorEmail();

    case COMMENT_AUTHOR_URL:
      return getCommentAuthorUrl();

    case COMMENT_AUTHOR_IP:
      return getCommentAuthorIp();

    case COMMENT_DATE:
      return getCommentDate();

    case COMMENT_DATE_GMT:
      return getCommentDateGmt();

    case COMMENT_CONTENT:
      return getCommentContent();

    case COMMENT_KARMA:
      return getCommentKarma();

    case COMMENT_APPROVED:
      return getCommentApproved();

    case COMMENT_AGENT:
      return getCommentAgent();

    case COMMENT_TYPE:
      return getCommentType();

    case COMMENT_PARENT:
      return getCommentParent();

    case USER_ID:
      return getUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_ID:
      return isSetCommentId();
    case COMMENT_POST_ID:
      return isSetCommentPostId();
    case COMMENT_AUTHOR:
      return isSetCommentAuthor();
    case COMMENT_AUTHOR_EMAIL:
      return isSetCommentAuthorEmail();
    case COMMENT_AUTHOR_URL:
      return isSetCommentAuthorUrl();
    case COMMENT_AUTHOR_IP:
      return isSetCommentAuthorIp();
    case COMMENT_DATE:
      return isSetCommentDate();
    case COMMENT_DATE_GMT:
      return isSetCommentDateGmt();
    case COMMENT_CONTENT:
      return isSetCommentContent();
    case COMMENT_KARMA:
      return isSetCommentKarma();
    case COMMENT_APPROVED:
      return isSetCommentApproved();
    case COMMENT_AGENT:
      return isSetCommentAgent();
    case COMMENT_TYPE:
      return isSetCommentType();
    case COMMENT_PARENT:
      return isSetCommentParent();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressCommentsDO)
      return this.equals((WordpressCommentsDO)that);
    return false;
  }

  public boolean equals(WordpressCommentsDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commentId = true && this.isSetCommentId();
    boolean that_present_commentId = true && that.isSetCommentId();
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    boolean this_present_commentPostId = true && this.isSetCommentPostId();
    boolean that_present_commentPostId = true && that.isSetCommentPostId();
    if (this_present_commentPostId || that_present_commentPostId) {
      if (!(this_present_commentPostId && that_present_commentPostId))
        return false;
      if (this.commentPostId != that.commentPostId)
        return false;
    }

    boolean this_present_commentAuthor = true && this.isSetCommentAuthor();
    boolean that_present_commentAuthor = true && that.isSetCommentAuthor();
    if (this_present_commentAuthor || that_present_commentAuthor) {
      if (!(this_present_commentAuthor && that_present_commentAuthor))
        return false;
      if (!this.commentAuthor.equals(that.commentAuthor))
        return false;
    }

    boolean this_present_commentAuthorEmail = true && this.isSetCommentAuthorEmail();
    boolean that_present_commentAuthorEmail = true && that.isSetCommentAuthorEmail();
    if (this_present_commentAuthorEmail || that_present_commentAuthorEmail) {
      if (!(this_present_commentAuthorEmail && that_present_commentAuthorEmail))
        return false;
      if (!this.commentAuthorEmail.equals(that.commentAuthorEmail))
        return false;
    }

    boolean this_present_commentAuthorUrl = true && this.isSetCommentAuthorUrl();
    boolean that_present_commentAuthorUrl = true && that.isSetCommentAuthorUrl();
    if (this_present_commentAuthorUrl || that_present_commentAuthorUrl) {
      if (!(this_present_commentAuthorUrl && that_present_commentAuthorUrl))
        return false;
      if (!this.commentAuthorUrl.equals(that.commentAuthorUrl))
        return false;
    }

    boolean this_present_commentAuthorIp = true && this.isSetCommentAuthorIp();
    boolean that_present_commentAuthorIp = true && that.isSetCommentAuthorIp();
    if (this_present_commentAuthorIp || that_present_commentAuthorIp) {
      if (!(this_present_commentAuthorIp && that_present_commentAuthorIp))
        return false;
      if (!this.commentAuthorIp.equals(that.commentAuthorIp))
        return false;
    }

    boolean this_present_commentDate = true && this.isSetCommentDate();
    boolean that_present_commentDate = true && that.isSetCommentDate();
    if (this_present_commentDate || that_present_commentDate) {
      if (!(this_present_commentDate && that_present_commentDate))
        return false;
      if (!this.commentDate.equals(that.commentDate))
        return false;
    }

    boolean this_present_commentDateGmt = true && this.isSetCommentDateGmt();
    boolean that_present_commentDateGmt = true && that.isSetCommentDateGmt();
    if (this_present_commentDateGmt || that_present_commentDateGmt) {
      if (!(this_present_commentDateGmt && that_present_commentDateGmt))
        return false;
      if (!this.commentDateGmt.equals(that.commentDateGmt))
        return false;
    }

    boolean this_present_commentContent = true && this.isSetCommentContent();
    boolean that_present_commentContent = true && that.isSetCommentContent();
    if (this_present_commentContent || that_present_commentContent) {
      if (!(this_present_commentContent && that_present_commentContent))
        return false;
      if (!this.commentContent.equals(that.commentContent))
        return false;
    }

    boolean this_present_commentKarma = true && this.isSetCommentKarma();
    boolean that_present_commentKarma = true && that.isSetCommentKarma();
    if (this_present_commentKarma || that_present_commentKarma) {
      if (!(this_present_commentKarma && that_present_commentKarma))
        return false;
      if (this.commentKarma != that.commentKarma)
        return false;
    }

    boolean this_present_commentApproved = true && this.isSetCommentApproved();
    boolean that_present_commentApproved = true && that.isSetCommentApproved();
    if (this_present_commentApproved || that_present_commentApproved) {
      if (!(this_present_commentApproved && that_present_commentApproved))
        return false;
      if (!this.commentApproved.equals(that.commentApproved))
        return false;
    }

    boolean this_present_commentAgent = true && this.isSetCommentAgent();
    boolean that_present_commentAgent = true && that.isSetCommentAgent();
    if (this_present_commentAgent || that_present_commentAgent) {
      if (!(this_present_commentAgent && that_present_commentAgent))
        return false;
      if (!this.commentAgent.equals(that.commentAgent))
        return false;
    }

    boolean this_present_commentType = true && this.isSetCommentType();
    boolean that_present_commentType = true && that.isSetCommentType();
    if (this_present_commentType || that_present_commentType) {
      if (!(this_present_commentType && that_present_commentType))
        return false;
      if (!this.commentType.equals(that.commentType))
        return false;
    }

    boolean this_present_commentParent = true && this.isSetCommentParent();
    boolean that_present_commentParent = true && that.isSetCommentParent();
    if (this_present_commentParent || that_present_commentParent) {
      if (!(this_present_commentParent && that_present_commentParent))
        return false;
      if (this.commentParent != that.commentParent)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommentId()) ? 131071 : 524287);
    if (isSetCommentId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commentId);

    hashCode = hashCode * 8191 + ((isSetCommentPostId()) ? 131071 : 524287);
    if (isSetCommentPostId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commentPostId);

    hashCode = hashCode * 8191 + ((isSetCommentAuthor()) ? 131071 : 524287);
    if (isSetCommentAuthor())
      hashCode = hashCode * 8191 + commentAuthor.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentAuthorEmail()) ? 131071 : 524287);
    if (isSetCommentAuthorEmail())
      hashCode = hashCode * 8191 + commentAuthorEmail.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentAuthorUrl()) ? 131071 : 524287);
    if (isSetCommentAuthorUrl())
      hashCode = hashCode * 8191 + commentAuthorUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentAuthorIp()) ? 131071 : 524287);
    if (isSetCommentAuthorIp())
      hashCode = hashCode * 8191 + commentAuthorIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentDate()) ? 131071 : 524287);
    if (isSetCommentDate())
      hashCode = hashCode * 8191 + commentDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentDateGmt()) ? 131071 : 524287);
    if (isSetCommentDateGmt())
      hashCode = hashCode * 8191 + commentDateGmt.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentContent()) ? 131071 : 524287);
    if (isSetCommentContent())
      hashCode = hashCode * 8191 + commentContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentKarma()) ? 131071 : 524287);
    if (isSetCommentKarma())
      hashCode = hashCode * 8191 + commentKarma;

    hashCode = hashCode * 8191 + ((isSetCommentApproved()) ? 131071 : 524287);
    if (isSetCommentApproved())
      hashCode = hashCode * 8191 + commentApproved.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentAgent()) ? 131071 : 524287);
    if (isSetCommentAgent())
      hashCode = hashCode * 8191 + commentAgent.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentType()) ? 131071 : 524287);
    if (isSetCommentType())
      hashCode = hashCode * 8191 + commentType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommentParent()) ? 131071 : 524287);
    if (isSetCommentParent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commentParent);

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userId);

    return hashCode;
  }

  @Override
  public int compareTo(WordpressCommentsDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentPostId()).compareTo(other.isSetCommentPostId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPostId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPostId, other.commentPostId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAuthor()).compareTo(other.isSetCommentAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAuthor, other.commentAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAuthorEmail()).compareTo(other.isSetCommentAuthorEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAuthorEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAuthorEmail, other.commentAuthorEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAuthorUrl()).compareTo(other.isSetCommentAuthorUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAuthorUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAuthorUrl, other.commentAuthorUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAuthorIp()).compareTo(other.isSetCommentAuthorIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAuthorIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAuthorIp, other.commentAuthorIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentDate()).compareTo(other.isSetCommentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentDate, other.commentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentDateGmt()).compareTo(other.isSetCommentDateGmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentDateGmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentDateGmt, other.commentDateGmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentContent()).compareTo(other.isSetCommentContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentContent, other.commentContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentKarma()).compareTo(other.isSetCommentKarma());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentKarma()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentKarma, other.commentKarma);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentApproved()).compareTo(other.isSetCommentApproved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentApproved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentApproved, other.commentApproved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAgent()).compareTo(other.isSetCommentAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAgent, other.commentAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentType()).compareTo(other.isSetCommentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentType, other.commentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentParent()).compareTo(other.isSetCommentParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentParent, other.commentParent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WordpressCommentsDO(");
    boolean first = true;

    if (isSetCommentId()) {
      sb.append("commentId:");
      sb.append(this.commentId);
      first = false;
    }
    if (isSetCommentPostId()) {
      if (!first) sb.append(", ");
      sb.append("commentPostId:");
      sb.append(this.commentPostId);
      first = false;
    }
    if (isSetCommentAuthor()) {
      if (!first) sb.append(", ");
      sb.append("commentAuthor:");
      if (this.commentAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.commentAuthor);
      }
      first = false;
    }
    if (isSetCommentAuthorEmail()) {
      if (!first) sb.append(", ");
      sb.append("commentAuthorEmail:");
      if (this.commentAuthorEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.commentAuthorEmail);
      }
      first = false;
    }
    if (isSetCommentAuthorUrl()) {
      if (!first) sb.append(", ");
      sb.append("commentAuthorUrl:");
      if (this.commentAuthorUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.commentAuthorUrl);
      }
      first = false;
    }
    if (isSetCommentAuthorIp()) {
      if (!first) sb.append(", ");
      sb.append("commentAuthorIp:");
      if (this.commentAuthorIp == null) {
        sb.append("null");
      } else {
        sb.append(this.commentAuthorIp);
      }
      first = false;
    }
    if (isSetCommentDate()) {
      if (!first) sb.append(", ");
      sb.append("commentDate:");
      if (this.commentDate == null) {
        sb.append("null");
      } else {
        sb.append(this.commentDate);
      }
      first = false;
    }
    if (isSetCommentDateGmt()) {
      if (!first) sb.append(", ");
      sb.append("commentDateGmt:");
      if (this.commentDateGmt == null) {
        sb.append("null");
      } else {
        sb.append(this.commentDateGmt);
      }
      first = false;
    }
    if (isSetCommentContent()) {
      if (!first) sb.append(", ");
      sb.append("commentContent:");
      if (this.commentContent == null) {
        sb.append("null");
      } else {
        sb.append(this.commentContent);
      }
      first = false;
    }
    if (isSetCommentKarma()) {
      if (!first) sb.append(", ");
      sb.append("commentKarma:");
      sb.append(this.commentKarma);
      first = false;
    }
    if (isSetCommentApproved()) {
      if (!first) sb.append(", ");
      sb.append("commentApproved:");
      if (this.commentApproved == null) {
        sb.append("null");
      } else {
        sb.append(this.commentApproved);
      }
      first = false;
    }
    if (isSetCommentAgent()) {
      if (!first) sb.append(", ");
      sb.append("commentAgent:");
      if (this.commentAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.commentAgent);
      }
      first = false;
    }
    if (isSetCommentType()) {
      if (!first) sb.append(", ");
      sb.append("commentType:");
      if (this.commentType == null) {
        sb.append("null");
      } else {
        sb.append(this.commentType);
      }
      first = false;
    }
    if (isSetCommentParent()) {
      if (!first) sb.append(", ");
      sb.append("commentParent:");
      sb.append(this.commentParent);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressCommentsDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressCommentsDOStandardScheme getScheme() {
      return new WordpressCommentsDOStandardScheme();
    }
  }

  private static class WordpressCommentsDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WordpressCommentsDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressCommentsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentId = iprot.readI64();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMENT_POST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentPostId = iprot.readI64();
              struct.setCommentPostIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentAuthor = iprot.readString();
              struct.setCommentAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT_AUTHOR_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentAuthorEmail = iprot.readString();
              struct.setCommentAuthorEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENT_AUTHOR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentAuthorUrl = iprot.readString();
              struct.setCommentAuthorUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMENT_AUTHOR_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentAuthorIp = iprot.readString();
              struct.setCommentAuthorIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentDate = iprot.readString();
              struct.setCommentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMENT_DATE_GMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentDateGmt = iprot.readString();
              struct.setCommentDateGmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentContent = iprot.readString();
              struct.setCommentContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMMENT_KARMA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentKarma = iprot.readI32();
              struct.setCommentKarmaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMENT_APPROVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentApproved = iprot.readString();
              struct.setCommentApprovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMENT_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentAgent = iprot.readString();
              struct.setCommentAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentType = iprot.readString();
              struct.setCommentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMENT_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentParent = iprot.readI64();
              struct.setCommentParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressCommentsDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCommentId()) {
        oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.commentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommentPostId()) {
        oprot.writeFieldBegin(COMMENT_POST_ID_FIELD_DESC);
        oprot.writeI64(struct.commentPostId);
        oprot.writeFieldEnd();
      }
      if (struct.commentAuthor != null) {
        if (struct.isSetCommentAuthor()) {
          oprot.writeFieldBegin(COMMENT_AUTHOR_FIELD_DESC);
          oprot.writeString(struct.commentAuthor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentAuthorEmail != null) {
        if (struct.isSetCommentAuthorEmail()) {
          oprot.writeFieldBegin(COMMENT_AUTHOR_EMAIL_FIELD_DESC);
          oprot.writeString(struct.commentAuthorEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentAuthorUrl != null) {
        if (struct.isSetCommentAuthorUrl()) {
          oprot.writeFieldBegin(COMMENT_AUTHOR_URL_FIELD_DESC);
          oprot.writeString(struct.commentAuthorUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentAuthorIp != null) {
        if (struct.isSetCommentAuthorIp()) {
          oprot.writeFieldBegin(COMMENT_AUTHOR_IP_FIELD_DESC);
          oprot.writeString(struct.commentAuthorIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentDate != null) {
        if (struct.isSetCommentDate()) {
          oprot.writeFieldBegin(COMMENT_DATE_FIELD_DESC);
          oprot.writeString(struct.commentDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentDateGmt != null) {
        if (struct.isSetCommentDateGmt()) {
          oprot.writeFieldBegin(COMMENT_DATE_GMT_FIELD_DESC);
          oprot.writeString(struct.commentDateGmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentContent != null) {
        if (struct.isSetCommentContent()) {
          oprot.writeFieldBegin(COMMENT_CONTENT_FIELD_DESC);
          oprot.writeString(struct.commentContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentKarma()) {
        oprot.writeFieldBegin(COMMENT_KARMA_FIELD_DESC);
        oprot.writeI32(struct.commentKarma);
        oprot.writeFieldEnd();
      }
      if (struct.commentApproved != null) {
        if (struct.isSetCommentApproved()) {
          oprot.writeFieldBegin(COMMENT_APPROVED_FIELD_DESC);
          oprot.writeString(struct.commentApproved);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentAgent != null) {
        if (struct.isSetCommentAgent()) {
          oprot.writeFieldBegin(COMMENT_AGENT_FIELD_DESC);
          oprot.writeString(struct.commentAgent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentType != null) {
        if (struct.isSetCommentType()) {
          oprot.writeFieldBegin(COMMENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.commentType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentParent()) {
        oprot.writeFieldBegin(COMMENT_PARENT_FIELD_DESC);
        oprot.writeI64(struct.commentParent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressCommentsDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressCommentsDOTupleScheme getScheme() {
      return new WordpressCommentsDOTupleScheme();
    }
  }

  private static class WordpressCommentsDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WordpressCommentsDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressCommentsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommentId()) {
        optionals.set(0);
      }
      if (struct.isSetCommentPostId()) {
        optionals.set(1);
      }
      if (struct.isSetCommentAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetCommentAuthorEmail()) {
        optionals.set(3);
      }
      if (struct.isSetCommentAuthorUrl()) {
        optionals.set(4);
      }
      if (struct.isSetCommentAuthorIp()) {
        optionals.set(5);
      }
      if (struct.isSetCommentDate()) {
        optionals.set(6);
      }
      if (struct.isSetCommentDateGmt()) {
        optionals.set(7);
      }
      if (struct.isSetCommentContent()) {
        optionals.set(8);
      }
      if (struct.isSetCommentKarma()) {
        optionals.set(9);
      }
      if (struct.isSetCommentApproved()) {
        optionals.set(10);
      }
      if (struct.isSetCommentAgent()) {
        optionals.set(11);
      }
      if (struct.isSetCommentType()) {
        optionals.set(12);
      }
      if (struct.isSetCommentParent()) {
        optionals.set(13);
      }
      if (struct.isSetUserId()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetCommentId()) {
        oprot.writeI64(struct.commentId);
      }
      if (struct.isSetCommentPostId()) {
        oprot.writeI64(struct.commentPostId);
      }
      if (struct.isSetCommentAuthor()) {
        oprot.writeString(struct.commentAuthor);
      }
      if (struct.isSetCommentAuthorEmail()) {
        oprot.writeString(struct.commentAuthorEmail);
      }
      if (struct.isSetCommentAuthorUrl()) {
        oprot.writeString(struct.commentAuthorUrl);
      }
      if (struct.isSetCommentAuthorIp()) {
        oprot.writeString(struct.commentAuthorIp);
      }
      if (struct.isSetCommentDate()) {
        oprot.writeString(struct.commentDate);
      }
      if (struct.isSetCommentDateGmt()) {
        oprot.writeString(struct.commentDateGmt);
      }
      if (struct.isSetCommentContent()) {
        oprot.writeString(struct.commentContent);
      }
      if (struct.isSetCommentKarma()) {
        oprot.writeI32(struct.commentKarma);
      }
      if (struct.isSetCommentApproved()) {
        oprot.writeString(struct.commentApproved);
      }
      if (struct.isSetCommentAgent()) {
        oprot.writeString(struct.commentAgent);
      }
      if (struct.isSetCommentType()) {
        oprot.writeString(struct.commentType);
      }
      if (struct.isSetCommentParent()) {
        oprot.writeI64(struct.commentParent);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressCommentsDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.commentId = iprot.readI64();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commentPostId = iprot.readI64();
        struct.setCommentPostIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commentAuthor = iprot.readString();
        struct.setCommentAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commentAuthorEmail = iprot.readString();
        struct.setCommentAuthorEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commentAuthorUrl = iprot.readString();
        struct.setCommentAuthorUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commentAuthorIp = iprot.readString();
        struct.setCommentAuthorIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.commentDate = iprot.readString();
        struct.setCommentDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.commentDateGmt = iprot.readString();
        struct.setCommentDateGmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.commentContent = iprot.readString();
        struct.setCommentContentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.commentKarma = iprot.readI32();
        struct.setCommentKarmaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.commentApproved = iprot.readString();
        struct.setCommentApprovedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commentAgent = iprot.readString();
        struct.setCommentAgentIsSet(true);
      }
      if (incoming.get(12)) {
        struct.commentType = iprot.readString();
        struct.setCommentTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.commentParent = iprot.readI64();
        struct.setCommentParentIsSet(true);
      }
      if (incoming.get(14)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

