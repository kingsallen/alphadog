/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-09")
public class HrOperationRecordDO implements org.apache.thrift.TBase<HrOperationRecordDO, HrOperationRecordDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrOperationRecordDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrOperationRecordDO");

  private static final org.apache.thrift.protocol.TField ADMIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminId", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statusId", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATE_TPL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTplId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OPT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("optTime", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrOperationRecordDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrOperationRecordDOTupleSchemeFactory();

  public double adminId; // optional
  public double companyId; // optional
  public double appId; // optional
  public double statusId; // optional
  public int operateTplId; // optional
  public java.lang.String optTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADMIN_ID((short)1, "adminId"),
    COMPANY_ID((short)2, "companyId"),
    APP_ID((short)3, "appId"),
    STATUS_ID((short)4, "statusId"),
    OPERATE_TPL_ID((short)5, "operateTplId"),
    OPT_TIME((short)6, "optTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADMIN_ID
          return ADMIN_ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // APP_ID
          return APP_ID;
        case 4: // STATUS_ID
          return STATUS_ID;
        case 5: // OPERATE_TPL_ID
          return OPERATE_TPL_ID;
        case 6: // OPT_TIME
          return OPT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADMINID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __APPID_ISSET_ID = 2;
  private static final int __STATUSID_ISSET_ID = 3;
  private static final int __OPERATETPLID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ADMIN_ID,_Fields.COMPANY_ID,_Fields.APP_ID,_Fields.STATUS_ID,_Fields.OPERATE_TPL_ID,_Fields.OPT_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADMIN_ID, new org.apache.thrift.meta_data.FieldMetaData("adminId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("statusId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATE_TPL_ID, new org.apache.thrift.meta_data.FieldMetaData("operateTplId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPT_TIME, new org.apache.thrift.meta_data.FieldMetaData("optTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrOperationRecordDO.class, metaDataMap);
  }

  public HrOperationRecordDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrOperationRecordDO(HrOperationRecordDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adminId = other.adminId;
    this.companyId = other.companyId;
    this.appId = other.appId;
    this.statusId = other.statusId;
    this.operateTplId = other.operateTplId;
    if (other.isSetOptTime()) {
      this.optTime = other.optTime;
    }
  }

  public HrOperationRecordDO deepCopy() {
    return new HrOperationRecordDO(this);
  }

  @Override
  public void clear() {
    setAdminIdIsSet(false);
    this.adminId = 0.0;
    setCompanyIdIsSet(false);
    this.companyId = 0.0;
    setAppIdIsSet(false);
    this.appId = 0.0;
    setStatusIdIsSet(false);
    this.statusId = 0.0;
    setOperateTplIdIsSet(false);
    this.operateTplId = 0;
    this.optTime = null;
  }

  public double getAdminId() {
    return this.adminId;
  }

  public HrOperationRecordDO setAdminId(double adminId) {
    this.adminId = adminId;
    setAdminIdIsSet(true);
    return this;
  }

  public void unsetAdminId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADMINID_ISSET_ID);
  }

  /** Returns true if field adminId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADMINID_ISSET_ID);
  }

  public void setAdminIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADMINID_ISSET_ID, value);
  }

  public double getCompanyId() {
    return this.companyId;
  }

  public HrOperationRecordDO setCompanyId(double companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public double getAppId() {
    return this.appId;
  }

  public HrOperationRecordDO setAppId(double appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public double getStatusId() {
    return this.statusId;
  }

  public HrOperationRecordDO setStatusId(double statusId) {
    this.statusId = statusId;
    setStatusIdIsSet(true);
    return this;
  }

  public void unsetStatusId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSID_ISSET_ID);
  }

  /** Returns true if field statusId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSID_ISSET_ID);
  }

  public void setStatusIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSID_ISSET_ID, value);
  }

  public int getOperateTplId() {
    return this.operateTplId;
  }

  public HrOperationRecordDO setOperateTplId(int operateTplId) {
    this.operateTplId = operateTplId;
    setOperateTplIdIsSet(true);
    return this;
  }

  public void unsetOperateTplId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATETPLID_ISSET_ID);
  }

  /** Returns true if field operateTplId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateTplId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATETPLID_ISSET_ID);
  }

  public void setOperateTplIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATETPLID_ISSET_ID, value);
  }

  public java.lang.String getOptTime() {
    return this.optTime;
  }

  public HrOperationRecordDO setOptTime(java.lang.String optTime) {
    this.optTime = optTime;
    return this;
  }

  public void unsetOptTime() {
    this.optTime = null;
  }

  /** Returns true if field optTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOptTime() {
    return this.optTime != null;
  }

  public void setOptTimeIsSet(boolean value) {
    if (!value) {
      this.optTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ADMIN_ID:
      if (value == null) {
        unsetAdminId();
      } else {
        setAdminId((java.lang.Double)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Double)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.Double)value);
      }
      break;

    case STATUS_ID:
      if (value == null) {
        unsetStatusId();
      } else {
        setStatusId((java.lang.Double)value);
      }
      break;

    case OPERATE_TPL_ID:
      if (value == null) {
        unsetOperateTplId();
      } else {
        setOperateTplId((java.lang.Integer)value);
      }
      break;

    case OPT_TIME:
      if (value == null) {
        unsetOptTime();
      } else {
        setOptTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ADMIN_ID:
      return getAdminId();

    case COMPANY_ID:
      return getCompanyId();

    case APP_ID:
      return getAppId();

    case STATUS_ID:
      return getStatusId();

    case OPERATE_TPL_ID:
      return getOperateTplId();

    case OPT_TIME:
      return getOptTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ADMIN_ID:
      return isSetAdminId();
    case COMPANY_ID:
      return isSetCompanyId();
    case APP_ID:
      return isSetAppId();
    case STATUS_ID:
      return isSetStatusId();
    case OPERATE_TPL_ID:
      return isSetOperateTplId();
    case OPT_TIME:
      return isSetOptTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrOperationRecordDO)
      return this.equals((HrOperationRecordDO)that);
    return false;
  }

  public boolean equals(HrOperationRecordDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_adminId = true && this.isSetAdminId();
    boolean that_present_adminId = true && that.isSetAdminId();
    if (this_present_adminId || that_present_adminId) {
      if (!(this_present_adminId && that_present_adminId))
        return false;
      if (this.adminId != that.adminId)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_statusId = true && this.isSetStatusId();
    boolean that_present_statusId = true && that.isSetStatusId();
    if (this_present_statusId || that_present_statusId) {
      if (!(this_present_statusId && that_present_statusId))
        return false;
      if (this.statusId != that.statusId)
        return false;
    }

    boolean this_present_operateTplId = true && this.isSetOperateTplId();
    boolean that_present_operateTplId = true && that.isSetOperateTplId();
    if (this_present_operateTplId || that_present_operateTplId) {
      if (!(this_present_operateTplId && that_present_operateTplId))
        return false;
      if (this.operateTplId != that.operateTplId)
        return false;
    }

    boolean this_present_optTime = true && this.isSetOptTime();
    boolean that_present_optTime = true && that.isSetOptTime();
    if (this_present_optTime || that_present_optTime) {
      if (!(this_present_optTime && that_present_optTime))
        return false;
      if (!this.optTime.equals(that.optTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAdminId()) ? 131071 : 524287);
    if (isSetAdminId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(adminId);

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(companyId);

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(appId);

    hashCode = hashCode * 8191 + ((isSetStatusId()) ? 131071 : 524287);
    if (isSetStatusId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(statusId);

    hashCode = hashCode * 8191 + ((isSetOperateTplId()) ? 131071 : 524287);
    if (isSetOperateTplId())
      hashCode = hashCode * 8191 + operateTplId;

    hashCode = hashCode * 8191 + ((isSetOptTime()) ? 131071 : 524287);
    if (isSetOptTime())
      hashCode = hashCode * 8191 + optTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrOperationRecordDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAdminId()).compareTo(other.isSetAdminId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminId, other.adminId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatusId()).compareTo(other.isSetStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusId, other.statusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperateTplId()).compareTo(other.isSetOperateTplId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateTplId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTplId, other.operateTplId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptTime()).compareTo(other.isSetOptTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optTime, other.optTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrOperationRecordDO(");
    boolean first = true;

    if (isSetAdminId()) {
      sb.append("adminId:");
      sb.append(this.adminId);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetStatusId()) {
      if (!first) sb.append(", ");
      sb.append("statusId:");
      sb.append(this.statusId);
      first = false;
    }
    if (isSetOperateTplId()) {
      if (!first) sb.append(", ");
      sb.append("operateTplId:");
      sb.append(this.operateTplId);
      first = false;
    }
    if (isSetOptTime()) {
      if (!first) sb.append(", ");
      sb.append("optTime:");
      if (this.optTime == null) {
        sb.append("null");
      } else {
        sb.append(this.optTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrOperationRecordDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrOperationRecordDOStandardScheme getScheme() {
      return new HrOperationRecordDOStandardScheme();
    }
  }

  private static class HrOperationRecordDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrOperationRecordDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrOperationRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADMIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.adminId = iprot.readDouble();
              struct.setAdminIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.companyId = iprot.readDouble();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.appId = iprot.readDouble();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.statusId = iprot.readDouble();
              struct.setStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATE_TPL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operateTplId = iprot.readI32();
              struct.setOperateTplIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.optTime = iprot.readString();
              struct.setOptTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrOperationRecordDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAdminId()) {
        oprot.writeFieldBegin(ADMIN_ID_FIELD_DESC);
        oprot.writeDouble(struct.adminId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeDouble(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeDouble(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusId()) {
        oprot.writeFieldBegin(STATUS_ID_FIELD_DESC);
        oprot.writeDouble(struct.statusId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperateTplId()) {
        oprot.writeFieldBegin(OPERATE_TPL_ID_FIELD_DESC);
        oprot.writeI32(struct.operateTplId);
        oprot.writeFieldEnd();
      }
      if (struct.optTime != null) {
        if (struct.isSetOptTime()) {
          oprot.writeFieldBegin(OPT_TIME_FIELD_DESC);
          oprot.writeString(struct.optTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrOperationRecordDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrOperationRecordDOTupleScheme getScheme() {
      return new HrOperationRecordDOTupleScheme();
    }
  }

  private static class HrOperationRecordDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrOperationRecordDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrOperationRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAdminId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetAppId()) {
        optionals.set(2);
      }
      if (struct.isSetStatusId()) {
        optionals.set(3);
      }
      if (struct.isSetOperateTplId()) {
        optionals.set(4);
      }
      if (struct.isSetOptTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAdminId()) {
        oprot.writeDouble(struct.adminId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeDouble(struct.companyId);
      }
      if (struct.isSetAppId()) {
        oprot.writeDouble(struct.appId);
      }
      if (struct.isSetStatusId()) {
        oprot.writeDouble(struct.statusId);
      }
      if (struct.isSetOperateTplId()) {
        oprot.writeI32(struct.operateTplId);
      }
      if (struct.isSetOptTime()) {
        oprot.writeString(struct.optTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrOperationRecordDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.adminId = iprot.readDouble();
        struct.setAdminIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readDouble();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appId = iprot.readDouble();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.statusId = iprot.readDouble();
        struct.setStatusIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operateTplId = iprot.readI32();
        struct.setOperateTplIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.optTime = iprot.readString();
        struct.setOptTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

